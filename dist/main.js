/*! For license information please see main.js.LICENSE.txt */
!function(){var t={6126:function(t){function e(){var t=[].slice.call(arguments);function e(e,n){Object.keys(n).forEach((function(l){~t.indexOf(l)||(e[l]=n[l])}))}return function(){for(var t=[].slice.call(arguments),n=0,l={};n<t.length;n++)e(l,t[n]);return l}}function n(t,l,r){var i=e("name","message","stack","constructor","toJSON")(l||{});for(var o in this.message=t||"Unspecified AssertionError",this.showDiff=!1,i)this[o]=i[o];if(r=r||n,Error.captureStackTrace)Error.captureStackTrace(this,r);else try{throw new Error}catch(t){this.stack=t.stack}}t.exports=n,n.prototype=Object.create(Error.prototype),n.prototype.name="AssertionError",n.prototype.constructor=n,n.prototype.toJSON=function(t){var n=e("constructor","toJSON","stack")({name:this.name},this);return!1!==t&&this.stack&&(n.stack=this.stack),n}},4960:function(t,e,n){t.exports=n(1928)},1928:function(t,e,n){var l=[];e.version="4.3.3",e.AssertionError=n(6126);var r=n(4920);e.use=function(t){return~l.indexOf(t)||(t(e,r),l.push(t)),e},e.util=r;var i=n(4448);e.config=i;var o=n(9507);e.use(o);var u=n(7536);e.use(u);var s=n(8007);e.use(s);var a=n(3292);e.use(a);var c=n(2155);e.use(c)},9507:function(t,e,n){var l=n(4448);t.exports=function(t,e){var n=t.AssertionError,r=e.flag;function i(t,n,l,o){return r(this,"ssfi",l||i),r(this,"lockSsfi",o),r(this,"object",t),r(this,"message",n),e.proxify(this)}t.Assertion=i,Object.defineProperty(i,"includeStack",{get:function(){return console.warn("Assertion.includeStack is deprecated, use chai.config.includeStack instead."),l.includeStack},set:function(t){console.warn("Assertion.includeStack is deprecated, use chai.config.includeStack instead."),l.includeStack=t}}),Object.defineProperty(i,"showDiff",{get:function(){return console.warn("Assertion.showDiff is deprecated, use chai.config.showDiff instead."),l.showDiff},set:function(t){console.warn("Assertion.showDiff is deprecated, use chai.config.showDiff instead."),l.showDiff=t}}),i.addProperty=function(t,n){e.addProperty(this.prototype,t,n)},i.addMethod=function(t,n){e.addMethod(this.prototype,t,n)},i.addChainableMethod=function(t,n,l){e.addChainableMethod(this.prototype,t,n,l)},i.overwriteProperty=function(t,n){e.overwriteProperty(this.prototype,t,n)},i.overwriteMethod=function(t,n){e.overwriteMethod(this.prototype,t,n)},i.overwriteChainableMethod=function(t,n,l){e.overwriteChainableMethod(this.prototype,t,n,l)},i.prototype.assert=function(t,i,o,u,s,a){var c=e.test(this,arguments);if(!1!==a&&(a=!0),void 0===u&&void 0===s&&(a=!1),!0!==l.showDiff&&(a=!1),!c){i=e.getMessage(this,arguments);var h=e.getActual(this,arguments),d={actual:h,expected:u,showDiff:a},p=e.getOperator(this,arguments);throw p&&(d.operator=p),new n(i,d,l.includeStack?this.assert:r(this,"ssfi"))}},Object.defineProperty(i.prototype,"_obj",{get:function(){return r(this,"object")},set:function(t){r(this,"object",t)}})}},4448:function(t){t.exports={includeStack:!1,showDiff:!0,truncateThreshold:40,useProxy:!0,proxyExcludedKeys:["then","catch","inspect","toJSON"]}},7536:function(t){t.exports=function(t,e){var n=t.Assertion,l=t.AssertionError,r=e.flag;function i(t,n){n&&r(this,"message",n),t=t.toLowerCase();var l=r(this,"object"),i=~["a","e","i","o","u"].indexOf(t.charAt(0))?"an ":"a ";this.assert(t===e.type(l).toLowerCase(),"expected #{this} to be "+i+t,"expected #{this} not to be "+i+t)}function o(t,n){return e.isNaN(t)&&e.isNaN(n)||t===n}function u(){r(this,"contains",!0)}function s(t,i){i&&r(this,"message",i);var u=r(this,"object"),s=e.type(u).toLowerCase(),a=r(this,"message"),c=r(this,"negate"),h=r(this,"ssfi"),d=r(this,"deep"),p=d?"deep ":"";a=a?a+": ":"";var f=!1;switch(s){case"string":f=-1!==u.indexOf(t);break;case"weakset":if(d)throw new l(a+"unable to use .deep.include with WeakSet",void 0,h);f=u.has(t);break;case"map":var m=d?e.eql:o;u.forEach((function(e){f=f||m(e,t)}));break;case"set":d?u.forEach((function(n){f=f||e.eql(n,t)})):f=u.has(t);break;case"array":f=d?u.some((function(n){return e.eql(n,t)})):-1!==u.indexOf(t);break;default:if(t!==Object(t))throw new l(a+"the given combination of arguments ("+s+" and "+e.type(t).toLowerCase()+") is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a "+e.type(t).toLowerCase(),void 0,h);var g=Object.keys(t),v=null,y=0;if(g.forEach((function(i){var o=new n(u);if(e.transferFlags(this,o,!0),r(o,"lockSsfi",!0),c&&1!==g.length)try{o.property(i,t[i])}catch(t){if(!e.checkError.compatibleConstructor(t,l))throw t;null===v&&(v=t),y++}else o.property(i,t[i])}),this),c&&g.length>1&&y===g.length)throw v;return}this.assert(f,"expected #{this} to "+p+"include "+e.inspect(t),"expected #{this} to not "+p+"include "+e.inspect(t))}function a(){var t=r(this,"object");this.assert(null!=t,"expected #{this} to exist","expected #{this} to not exist")}function c(){var t=r(this,"object"),n=e.type(t);this.assert("Arguments"===n,"expected #{this} to be arguments but got "+n,"expected #{this} to not be arguments")}function h(t,e){e&&r(this,"message",e);var n=r(this,"object");if(r(this,"deep")){var l=r(this,"lockSsfi");r(this,"lockSsfi",!0),this.eql(t),r(this,"lockSsfi",l)}else this.assert(t===n,"expected #{this} to equal #{exp}","expected #{this} to not equal #{exp}",t,this._obj,!0)}function d(t,n){n&&r(this,"message",n),this.assert(e.eql(t,r(this,"object")),"expected #{this} to deeply equal #{exp}","expected #{this} to not deeply equal #{exp}",t,this._obj,!0)}function p(t,i){i&&r(this,"message",i);var o,u=r(this,"object"),s=r(this,"doLength"),a=r(this,"message"),c=a?a+": ":"",h=r(this,"ssfi"),d=e.type(u).toLowerCase(),p=e.type(t).toLowerCase(),f=!0;if(s&&"map"!==d&&"set"!==d&&new n(u,a,h,!0).to.have.property("length"),s||"date"!==d||"date"===p?"number"===p||!s&&"number"!==d?s||"date"===d||"number"===d?f=!1:o=c+"expected "+("string"===d?"'"+u+"'":u)+" to be a number or a date":o=c+"the argument to above must be a number":o=c+"the argument to above must be a date",f)throw new l(o,void 0,h);if(s){var m,g="length";"map"===d||"set"===d?(g="size",m=u.size):m=u.length,this.assert(m>t,"expected #{this} to have a "+g+" above #{exp} but got #{act}","expected #{this} to not have a "+g+" above #{exp}",t,m)}else this.assert(u>t,"expected #{this} to be above #{exp}","expected #{this} to be at most #{exp}",t)}function f(t,i){i&&r(this,"message",i);var o,u=r(this,"object"),s=r(this,"doLength"),a=r(this,"message"),c=a?a+": ":"",h=r(this,"ssfi"),d=e.type(u).toLowerCase(),p=e.type(t).toLowerCase(),f=!0;if(s&&"map"!==d&&"set"!==d&&new n(u,a,h,!0).to.have.property("length"),s||"date"!==d||"date"===p?"number"===p||!s&&"number"!==d?s||"date"===d||"number"===d?f=!1:o=c+"expected "+("string"===d?"'"+u+"'":u)+" to be a number or a date":o=c+"the argument to least must be a number":o=c+"the argument to least must be a date",f)throw new l(o,void 0,h);if(s){var m,g="length";"map"===d||"set"===d?(g="size",m=u.size):m=u.length,this.assert(m>=t,"expected #{this} to have a "+g+" at least #{exp} but got #{act}","expected #{this} to have a "+g+" below #{exp}",t,m)}else this.assert(u>=t,"expected #{this} to be at least #{exp}","expected #{this} to be below #{exp}",t)}function m(t,i){i&&r(this,"message",i);var o,u=r(this,"object"),s=r(this,"doLength"),a=r(this,"message"),c=a?a+": ":"",h=r(this,"ssfi"),d=e.type(u).toLowerCase(),p=e.type(t).toLowerCase(),f=!0;if(s&&"map"!==d&&"set"!==d&&new n(u,a,h,!0).to.have.property("length"),s||"date"!==d||"date"===p?"number"===p||!s&&"number"!==d?s||"date"===d||"number"===d?f=!1:o=c+"expected "+("string"===d?"'"+u+"'":u)+" to be a number or a date":o=c+"the argument to below must be a number":o=c+"the argument to below must be a date",f)throw new l(o,void 0,h);if(s){var m,g="length";"map"===d||"set"===d?(g="size",m=u.size):m=u.length,this.assert(m<t,"expected #{this} to have a "+g+" below #{exp} but got #{act}","expected #{this} to not have a "+g+" below #{exp}",t,m)}else this.assert(u<t,"expected #{this} to be below #{exp}","expected #{this} to be at least #{exp}",t)}function g(t,i){i&&r(this,"message",i);var o,u=r(this,"object"),s=r(this,"doLength"),a=r(this,"message"),c=a?a+": ":"",h=r(this,"ssfi"),d=e.type(u).toLowerCase(),p=e.type(t).toLowerCase(),f=!0;if(s&&"map"!==d&&"set"!==d&&new n(u,a,h,!0).to.have.property("length"),s||"date"!==d||"date"===p?"number"===p||!s&&"number"!==d?s||"date"===d||"number"===d?f=!1:o=c+"expected "+("string"===d?"'"+u+"'":u)+" to be a number or a date":o=c+"the argument to most must be a number":o=c+"the argument to most must be a date",f)throw new l(o,void 0,h);if(s){var m,g="length";"map"===d||"set"===d?(g="size",m=u.size):m=u.length,this.assert(m<=t,"expected #{this} to have a "+g+" at most #{exp} but got #{act}","expected #{this} to have a "+g+" above #{exp}",t,m)}else this.assert(u<=t,"expected #{this} to be at most #{exp}","expected #{this} to be above #{exp}",t)}function v(t,n){n&&r(this,"message",n);var i=r(this,"object"),o=r(this,"ssfi"),u=r(this,"message");try{var s=i instanceof t}catch(n){if(n instanceof TypeError)throw new l((u=u?u+": ":"")+"The instanceof assertion needs a constructor but "+e.type(t)+" was given.",void 0,o);throw n}var a=e.getName(t);null===a&&(a="an unnamed constructor"),this.assert(s,"expected #{this} to be an instance of "+a,"expected #{this} to not be an instance of "+a)}function y(t,n,i){i&&r(this,"message",i);var o=r(this,"nested"),u=r(this,"own"),s=r(this,"message"),a=r(this,"object"),c=r(this,"ssfi"),h=typeof t;if(s=s?s+": ":"",o){if("string"!==h)throw new l(s+"the argument to property must be a string when using nested syntax",void 0,c)}else if("string"!==h&&"number"!==h&&"symbol"!==h)throw new l(s+"the argument to property must be a string, number, or symbol",void 0,c);if(o&&u)throw new l(s+'The "nested" and "own" flags cannot be combined.',void 0,c);if(null==a)throw new l(s+"Target cannot be null or undefined.",void 0,c);var d,p=r(this,"deep"),f=r(this,"negate"),m=o?e.getPathInfo(a,t):null,g=o?m.value:a[t],v="";p&&(v+="deep "),u&&(v+="own "),o&&(v+="nested "),v+="property ",d=u?Object.prototype.hasOwnProperty.call(a,t):o?m.exists:e.hasProperty(a,t),f&&1!==arguments.length||this.assert(d,"expected #{this} to have "+v+e.inspect(t),"expected #{this} to not have "+v+e.inspect(t)),arguments.length>1&&this.assert(d&&(p?e.eql(n,g):n===g),"expected #{this} to have "+v+e.inspect(t)+" of #{exp}, but got #{act}","expected #{this} to not have "+v+e.inspect(t)+" of #{act}",n,g),r(this,"object",g)}function x(t,e,n){r(this,"own",!0),y.apply(this,arguments)}function b(t,n,l){"string"==typeof n&&(l=n,n=null),l&&r(this,"message",l);var i=r(this,"object"),o=Object.getOwnPropertyDescriptor(Object(i),t);o&&n?this.assert(e.eql(n,o),"expected the own property descriptor for "+e.inspect(t)+" on #{this} to match "+e.inspect(n)+", got "+e.inspect(o),"expected the own property descriptor for "+e.inspect(t)+" on #{this} to not match "+e.inspect(n),n,o,!0):this.assert(o,"expected #{this} to have an own property descriptor for "+e.inspect(t),"expected #{this} to not have an own property descriptor for "+e.inspect(t)),r(this,"object",o)}function w(){r(this,"doLength",!0)}function _(t,l){l&&r(this,"message",l);var i,o=r(this,"object"),u=e.type(o).toLowerCase(),s=r(this,"message"),a=r(this,"ssfi"),c="length";switch(u){case"map":case"set":c="size",i=o.size;break;default:new n(o,s,a,!0).to.have.property("length"),i=o.length}this.assert(i==t,"expected #{this} to have a "+c+" of #{exp} but got #{act}","expected #{this} to not have a "+c+" of #{act}",t,i)}function M(t,e){e&&r(this,"message",e);var n=r(this,"object");this.assert(t.exec(n),"expected #{this} to match "+t,"expected #{this} not to match "+t)}function S(t){var n,i,o=r(this,"object"),u=e.type(o),s=e.type(t),a=r(this,"ssfi"),c=r(this,"deep"),h="",d=!0,p=r(this,"message"),f=(p=p?p+": ":"")+"when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments";if("Map"===u||"Set"===u)h=c?"deeply ":"",i=[],o.forEach((function(t,e){i.push(e)})),"Array"!==s&&(t=Array.prototype.slice.call(arguments));else{switch(i=e.getOwnEnumerableProperties(o),s){case"Array":if(arguments.length>1)throw new l(f,void 0,a);break;case"Object":if(arguments.length>1)throw new l(f,void 0,a);t=Object.keys(t);break;default:t=Array.prototype.slice.call(arguments)}t=t.map((function(t){return"symbol"==typeof t?t:String(t)}))}if(!t.length)throw new l(p+"keys required",void 0,a);var m=t.length,g=r(this,"any"),v=r(this,"all"),y=t;if(g||v||(v=!0),g&&(d=y.some((function(t){return i.some((function(n){return c?e.eql(t,n):t===n}))}))),v&&(d=y.every((function(t){return i.some((function(n){return c?e.eql(t,n):t===n}))})),r(this,"contains")||(d=d&&t.length==i.length)),m>1){var x=(t=t.map((function(t){return e.inspect(t)}))).pop();v&&(n=t.join(", ")+", and "+x),g&&(n=t.join(", ")+", or "+x)}else n=e.inspect(t[0]);n=(m>1?"keys ":"key ")+n,n=(r(this,"contains")?"contain ":"have ")+n,this.assert(d,"expected #{this} to "+h+n,"expected #{this} to not "+h+n,y.slice(0).sort(e.compareByInspect),i.sort(e.compareByInspect),!0)}function E(t,l,i){i&&r(this,"message",i);var o,u=r(this,"object"),s=r(this,"ssfi"),a=r(this,"message"),c=r(this,"negate")||!1;new n(u,a,s,!0).is.a("function"),(t instanceof RegExp||"string"==typeof t)&&(l=t,t=null);try{u()}catch(t){o=t}var h=void 0===t&&void 0===l,d=Boolean(t&&l),p=!1,f=!1;if(h||!h&&!c){var m="an error";t instanceof Error?m="#{exp}":t&&(m=e.checkError.getConstructorName(t)),this.assert(o,"expected #{this} to throw "+m,"expected #{this} to not throw an error but #{act} was thrown",t&&t.toString(),o instanceof Error?o.toString():"string"==typeof o?o:o&&e.checkError.getConstructorName(o))}if(t&&o&&(t instanceof Error&&e.checkError.compatibleInstance(o,t)===c&&(d&&c?p=!0:this.assert(c,"expected #{this} to throw #{exp} but #{act} was thrown","expected #{this} to not throw #{exp}"+(o&&!c?" but #{act} was thrown":""),t.toString(),o.toString())),e.checkError.compatibleConstructor(o,t)===c&&(d&&c?p=!0:this.assert(c,"expected #{this} to throw #{exp} but #{act} was thrown","expected #{this} to not throw #{exp}"+(o?" but #{act} was thrown":""),t instanceof Error?t.toString():t&&e.checkError.getConstructorName(t),o instanceof Error?o.toString():o&&e.checkError.getConstructorName(o)))),o&&null!=l){var g="including";l instanceof RegExp&&(g="matching"),e.checkError.compatibleMessage(o,l)===c&&(d&&c?f=!0:this.assert(c,"expected #{this} to throw error "+g+" #{exp} but got #{act}","expected #{this} to throw error not "+g+" #{exp}",l,e.checkError.getMessage(o)))}p&&f&&this.assert(c,"expected #{this} to throw #{exp} but #{act} was thrown","expected #{this} to not throw #{exp}"+(o?" but #{act} was thrown":""),t instanceof Error?t.toString():t&&e.checkError.getConstructorName(t),o instanceof Error?o.toString():o&&e.checkError.getConstructorName(o)),r(this,"object",o)}function T(t,n){n&&r(this,"message",n);var l=r(this,"object"),i=r(this,"itself"),o="function"!=typeof l||i?l[t]:l.prototype[t];this.assert("function"==typeof o,"expected #{this} to respond to "+e.inspect(t),"expected #{this} to not respond to "+e.inspect(t))}function A(t,n){n&&r(this,"message",n);var l=t(r(this,"object"));this.assert(l,"expected #{this} to satisfy "+e.objDisplay(t),"expected #{this} to not satisfy"+e.objDisplay(t),!r(this,"negate"),l)}function L(t,e,i){i&&r(this,"message",i);var o=r(this,"object"),u=r(this,"message"),s=r(this,"ssfi");if(new n(o,u,s,!0).is.a("number"),"number"!=typeof t||"number"!=typeof e)throw new l((u=u?u+": ":"")+"the arguments to closeTo or approximately must be numbers"+(void 0===e?", and a delta is required":""),void 0,s);this.assert(Math.abs(o-t)<=e,"expected #{this} to be close to "+t+" +/- "+e,"expected #{this} not to be close to "+t+" +/- "+e)}function C(t,e,l){l&&r(this,"message",l);var i,o=r(this,"object"),u=r(this,"message"),s=r(this,"ssfi");new n(o,u,s,!0).is.a("function"),e?(new n(t,u,s,!0).to.have.property(e),i=t[e]):(new n(t,u,s,!0).is.a("function"),i=t()),o();var a=null==e?t():t[e],c=null==e?i:"."+e;r(this,"deltaMsgObj",c),r(this,"initialDeltaValue",i),r(this,"finalDeltaValue",a),r(this,"deltaBehavior","change"),r(this,"realDelta",a!==i),this.assert(i!==a,"expected "+c+" to change","expected "+c+" to not change")}function P(t,e,l){l&&r(this,"message",l);var i,o=r(this,"object"),u=r(this,"message"),s=r(this,"ssfi");new n(o,u,s,!0).is.a("function"),e?(new n(t,u,s,!0).to.have.property(e),i=t[e]):(new n(t,u,s,!0).is.a("function"),i=t()),new n(i,u,s,!0).is.a("number"),o();var a=null==e?t():t[e],c=null==e?i:"."+e;r(this,"deltaMsgObj",c),r(this,"initialDeltaValue",i),r(this,"finalDeltaValue",a),r(this,"deltaBehavior","increase"),r(this,"realDelta",a-i),this.assert(a-i>0,"expected "+c+" to increase","expected "+c+" to not increase")}function R(t,e,l){l&&r(this,"message",l);var i,o=r(this,"object"),u=r(this,"message"),s=r(this,"ssfi");new n(o,u,s,!0).is.a("function"),e?(new n(t,u,s,!0).to.have.property(e),i=t[e]):(new n(t,u,s,!0).is.a("function"),i=t()),new n(i,u,s,!0).is.a("number"),o();var a=null==e?t():t[e],c=null==e?i:"."+e;r(this,"deltaMsgObj",c),r(this,"initialDeltaValue",i),r(this,"finalDeltaValue",a),r(this,"deltaBehavior","decrease"),r(this,"realDelta",i-a),this.assert(a-i<0,"expected "+c+" to decrease","expected "+c+" to not decrease")}["to","be","been","is","and","has","have","with","that","which","at","of","same","but","does","still","also"].forEach((function(t){n.addProperty(t)})),n.addProperty("not",(function(){r(this,"negate",!0)})),n.addProperty("deep",(function(){r(this,"deep",!0)})),n.addProperty("nested",(function(){r(this,"nested",!0)})),n.addProperty("own",(function(){r(this,"own",!0)})),n.addProperty("ordered",(function(){r(this,"ordered",!0)})),n.addProperty("any",(function(){r(this,"any",!0),r(this,"all",!1)})),n.addProperty("all",(function(){r(this,"all",!0),r(this,"any",!1)})),n.addChainableMethod("an",i),n.addChainableMethod("a",i),n.addChainableMethod("include",s,u),n.addChainableMethod("contain",s,u),n.addChainableMethod("contains",s,u),n.addChainableMethod("includes",s,u),n.addProperty("ok",(function(){this.assert(r(this,"object"),"expected #{this} to be truthy","expected #{this} to be falsy")})),n.addProperty("true",(function(){this.assert(!0===r(this,"object"),"expected #{this} to be true","expected #{this} to be false",!r(this,"negate"))})),n.addProperty("false",(function(){this.assert(!1===r(this,"object"),"expected #{this} to be false","expected #{this} to be true",!!r(this,"negate"))})),n.addProperty("null",(function(){this.assert(null===r(this,"object"),"expected #{this} to be null","expected #{this} not to be null")})),n.addProperty("undefined",(function(){this.assert(void 0===r(this,"object"),"expected #{this} to be undefined","expected #{this} not to be undefined")})),n.addProperty("NaN",(function(){this.assert(e.isNaN(r(this,"object")),"expected #{this} to be NaN","expected #{this} not to be NaN")})),n.addProperty("exist",a),n.addProperty("exists",a),n.addProperty("empty",(function(){var t,n=r(this,"object"),i=r(this,"ssfi"),o=r(this,"message");switch(o=o?o+": ":"",e.type(n).toLowerCase()){case"array":case"string":t=n.length;break;case"map":case"set":t=n.size;break;case"weakmap":case"weakset":throw new l(o+".empty was passed a weak collection",void 0,i);case"function":var u=o+".empty was passed a function "+e.getName(n);throw new l(u.trim(),void 0,i);default:if(n!==Object(n))throw new l(o+".empty was passed non-string primitive "+e.inspect(n),void 0,i);t=Object.keys(n).length}this.assert(0===t,"expected #{this} to be empty","expected #{this} not to be empty")})),n.addProperty("arguments",c),n.addProperty("Arguments",c),n.addMethod("equal",h),n.addMethod("equals",h),n.addMethod("eq",h),n.addMethod("eql",d),n.addMethod("eqls",d),n.addMethod("above",p),n.addMethod("gt",p),n.addMethod("greaterThan",p),n.addMethod("least",f),n.addMethod("gte",f),n.addMethod("greaterThanOrEqual",f),n.addMethod("below",m),n.addMethod("lt",m),n.addMethod("lessThan",m),n.addMethod("most",g),n.addMethod("lte",g),n.addMethod("lessThanOrEqual",g),n.addMethod("within",(function(t,i,o){o&&r(this,"message",o);var u,s=r(this,"object"),a=r(this,"doLength"),c=r(this,"message"),h=c?c+": ":"",d=r(this,"ssfi"),p=e.type(s).toLowerCase(),f=e.type(t).toLowerCase(),m=e.type(i).toLowerCase(),g=!0,v="date"===f&&"date"===m?t.toUTCString()+".."+i.toUTCString():t+".."+i;if(a&&"map"!==p&&"set"!==p&&new n(s,c,d,!0).to.have.property("length"),a||"date"!==p||"date"===f&&"date"===m?"number"===f&&"number"===m||!a&&"number"!==p?a||"date"===p||"number"===p?g=!1:u=h+"expected "+("string"===p?"'"+s+"'":s)+" to be a number or a date":u=h+"the arguments to within must be numbers":u=h+"the arguments to within must be dates",g)throw new l(u,void 0,d);if(a){var y,x="length";"map"===p||"set"===p?(x="size",y=s.size):y=s.length,this.assert(y>=t&&y<=i,"expected #{this} to have a "+x+" within "+v,"expected #{this} to not have a "+x+" within "+v)}else this.assert(s>=t&&s<=i,"expected #{this} to be within "+v,"expected #{this} to not be within "+v)})),n.addMethod("instanceof",v),n.addMethod("instanceOf",v),n.addMethod("property",y),n.addMethod("ownProperty",x),n.addMethod("haveOwnProperty",x),n.addMethod("ownPropertyDescriptor",b),n.addMethod("haveOwnPropertyDescriptor",b),n.addChainableMethod("length",_,w),n.addChainableMethod("lengthOf",_,w),n.addMethod("match",M),n.addMethod("matches",M),n.addMethod("string",(function(t,l){l&&r(this,"message",l);var i=r(this,"object"),o=r(this,"message"),u=r(this,"ssfi");new n(i,o,u,!0).is.a("string"),this.assert(~i.indexOf(t),"expected #{this} to contain "+e.inspect(t),"expected #{this} to not contain "+e.inspect(t))})),n.addMethod("keys",S),n.addMethod("key",S),n.addMethod("throw",E),n.addMethod("throws",E),n.addMethod("Throw",E),n.addMethod("respondTo",T),n.addMethod("respondsTo",T),n.addProperty("itself",(function(){r(this,"itself",!0)})),n.addMethod("satisfy",A),n.addMethod("satisfies",A),n.addMethod("closeTo",L),n.addMethod("approximately",L),n.addMethod("members",(function(t,l){l&&r(this,"message",l);var i=r(this,"object"),o=r(this,"message"),u=r(this,"ssfi");new n(i,o,u,!0).to.be.an("array"),new n(t,o,u,!0).to.be.an("array");var s,a,c,h=r(this,"contains"),d=r(this,"ordered");h?(a="expected #{this} to be "+(s=d?"an ordered superset":"a superset")+" of #{exp}",c="expected #{this} to not be "+s+" of #{exp}"):(a="expected #{this} to have the same "+(s=d?"ordered members":"members")+" as #{exp}",c="expected #{this} to not have the same "+s+" as #{exp}");var p=r(this,"deep")?e.eql:void 0;this.assert(function(t,e,n,l,r){if(!l){if(t.length!==e.length)return!1;e=e.slice()}return t.every((function(t,i){if(r)return n?n(t,e[i]):t===e[i];if(!n){var o=e.indexOf(t);return-1!==o&&(l||e.splice(o,1),!0)}return e.some((function(r,i){return!!n(t,r)&&(l||e.splice(i,1),!0)}))}))}(t,i,p,h,d),a,c,t,i,!0)})),n.addMethod("oneOf",(function(t,l){l&&r(this,"message",l);var i=r(this,"object"),o=r(this,"message"),u=r(this,"ssfi"),s=r(this,"contains"),a=r(this,"deep");new n(t,o,u,!0).to.be.an("array"),s?this.assert(t.some((function(t){return i.indexOf(t)>-1})),"expected #{this} to contain one of #{exp}","expected #{this} to not contain one of #{exp}",t,i):a?this.assert(t.some((function(t){return e.eql(i,t)})),"expected #{this} to deeply equal one of #{exp}","expected #{this} to deeply equal one of #{exp}",t,i):this.assert(t.indexOf(i)>-1,"expected #{this} to be one of #{exp}","expected #{this} to not be one of #{exp}",t,i)})),n.addMethod("change",C),n.addMethod("changes",C),n.addMethod("increase",P),n.addMethod("increases",P),n.addMethod("decrease",R),n.addMethod("decreases",R),n.addMethod("by",(function(t,e){e&&r(this,"message",e);var n,l=r(this,"deltaMsgObj"),i=r(this,"initialDeltaValue"),o=r(this,"finalDeltaValue"),u=r(this,"deltaBehavior"),s=r(this,"realDelta");n="change"===u?Math.abs(o-i)===Math.abs(t):s===Math.abs(t),this.assert(n,"expected "+l+" to "+u+" by "+t,"expected "+l+" to not "+u+" by "+t)})),n.addProperty("extensible",(function(){var t=r(this,"object"),e=t===Object(t)&&Object.isExtensible(t);this.assert(e,"expected #{this} to be extensible","expected #{this} to not be extensible")})),n.addProperty("sealed",(function(){var t=r(this,"object"),e=t!==Object(t)||Object.isSealed(t);this.assert(e,"expected #{this} to be sealed","expected #{this} to not be sealed")})),n.addProperty("frozen",(function(){var t=r(this,"object"),e=t!==Object(t)||Object.isFrozen(t);this.assert(e,"expected #{this} to be frozen","expected #{this} to not be frozen")})),n.addProperty("finite",(function(t){var e=r(this,"object");this.assert("number"==typeof e&&isFinite(e),"expected #{this} to be a finite number","expected #{this} to not be a finite number")}))}},2155:function(t){t.exports=function(t,e){var n=t.Assertion,l=e.flag,r=t.assert=function(e,l){new n(null,null,t.assert,!0).assert(e,l,"[ negation message unavailable ]")};r.fail=function(e,n,l,i){throw arguments.length<2&&(l=e,e=void 0),l=l||"assert.fail()",new t.AssertionError(l,{actual:e,expected:n,operator:i},r.fail)},r.isOk=function(t,e){new n(t,e,r.isOk,!0).is.ok},r.isNotOk=function(t,e){new n(t,e,r.isNotOk,!0).is.not.ok},r.equal=function(t,e,i){var o=new n(t,i,r.equal,!0);o.assert(e==l(o,"object"),"expected #{this} to equal #{exp}","expected #{this} to not equal #{act}",e,t,!0)},r.notEqual=function(t,e,i){var o=new n(t,i,r.notEqual,!0);o.assert(e!=l(o,"object"),"expected #{this} to not equal #{exp}","expected #{this} to equal #{act}",e,t,!0)},r.strictEqual=function(t,e,l){new n(t,l,r.strictEqual,!0).to.equal(e)},r.notStrictEqual=function(t,e,l){new n(t,l,r.notStrictEqual,!0).to.not.equal(e)},r.deepEqual=r.deepStrictEqual=function(t,e,l){new n(t,l,r.deepEqual,!0).to.eql(e)},r.notDeepEqual=function(t,e,l){new n(t,l,r.notDeepEqual,!0).to.not.eql(e)},r.isAbove=function(t,e,l){new n(t,l,r.isAbove,!0).to.be.above(e)},r.isAtLeast=function(t,e,l){new n(t,l,r.isAtLeast,!0).to.be.least(e)},r.isBelow=function(t,e,l){new n(t,l,r.isBelow,!0).to.be.below(e)},r.isAtMost=function(t,e,l){new n(t,l,r.isAtMost,!0).to.be.most(e)},r.isTrue=function(t,e){new n(t,e,r.isTrue,!0).is.true},r.isNotTrue=function(t,e){new n(t,e,r.isNotTrue,!0).to.not.equal(!0)},r.isFalse=function(t,e){new n(t,e,r.isFalse,!0).is.false},r.isNotFalse=function(t,e){new n(t,e,r.isNotFalse,!0).to.not.equal(!1)},r.isNull=function(t,e){new n(t,e,r.isNull,!0).to.equal(null)},r.isNotNull=function(t,e){new n(t,e,r.isNotNull,!0).to.not.equal(null)},r.isNaN=function(t,e){new n(t,e,r.isNaN,!0).to.be.NaN},r.isNotNaN=function(t,e){new n(t,e,r.isNotNaN,!0).not.to.be.NaN},r.exists=function(t,e){new n(t,e,r.exists,!0).to.exist},r.notExists=function(t,e){new n(t,e,r.notExists,!0).to.not.exist},r.isUndefined=function(t,e){new n(t,e,r.isUndefined,!0).to.equal(void 0)},r.isDefined=function(t,e){new n(t,e,r.isDefined,!0).to.not.equal(void 0)},r.isFunction=function(t,e){new n(t,e,r.isFunction,!0).to.be.a("function")},r.isNotFunction=function(t,e){new n(t,e,r.isNotFunction,!0).to.not.be.a("function")},r.isObject=function(t,e){new n(t,e,r.isObject,!0).to.be.a("object")},r.isNotObject=function(t,e){new n(t,e,r.isNotObject,!0).to.not.be.a("object")},r.isArray=function(t,e){new n(t,e,r.isArray,!0).to.be.an("array")},r.isNotArray=function(t,e){new n(t,e,r.isNotArray,!0).to.not.be.an("array")},r.isString=function(t,e){new n(t,e,r.isString,!0).to.be.a("string")},r.isNotString=function(t,e){new n(t,e,r.isNotString,!0).to.not.be.a("string")},r.isNumber=function(t,e){new n(t,e,r.isNumber,!0).to.be.a("number")},r.isNotNumber=function(t,e){new n(t,e,r.isNotNumber,!0).to.not.be.a("number")},r.isFinite=function(t,e){new n(t,e,r.isFinite,!0).to.be.finite},r.isBoolean=function(t,e){new n(t,e,r.isBoolean,!0).to.be.a("boolean")},r.isNotBoolean=function(t,e){new n(t,e,r.isNotBoolean,!0).to.not.be.a("boolean")},r.typeOf=function(t,e,l){new n(t,l,r.typeOf,!0).to.be.a(e)},r.notTypeOf=function(t,e,l){new n(t,l,r.notTypeOf,!0).to.not.be.a(e)},r.instanceOf=function(t,e,l){new n(t,l,r.instanceOf,!0).to.be.instanceOf(e)},r.notInstanceOf=function(t,e,l){new n(t,l,r.notInstanceOf,!0).to.not.be.instanceOf(e)},r.include=function(t,e,l){new n(t,l,r.include,!0).include(e)},r.notInclude=function(t,e,l){new n(t,l,r.notInclude,!0).not.include(e)},r.deepInclude=function(t,e,l){new n(t,l,r.deepInclude,!0).deep.include(e)},r.notDeepInclude=function(t,e,l){new n(t,l,r.notDeepInclude,!0).not.deep.include(e)},r.nestedInclude=function(t,e,l){new n(t,l,r.nestedInclude,!0).nested.include(e)},r.notNestedInclude=function(t,e,l){new n(t,l,r.notNestedInclude,!0).not.nested.include(e)},r.deepNestedInclude=function(t,e,l){new n(t,l,r.deepNestedInclude,!0).deep.nested.include(e)},r.notDeepNestedInclude=function(t,e,l){new n(t,l,r.notDeepNestedInclude,!0).not.deep.nested.include(e)},r.ownInclude=function(t,e,l){new n(t,l,r.ownInclude,!0).own.include(e)},r.notOwnInclude=function(t,e,l){new n(t,l,r.notOwnInclude,!0).not.own.include(e)},r.deepOwnInclude=function(t,e,l){new n(t,l,r.deepOwnInclude,!0).deep.own.include(e)},r.notDeepOwnInclude=function(t,e,l){new n(t,l,r.notDeepOwnInclude,!0).not.deep.own.include(e)},r.match=function(t,e,l){new n(t,l,r.match,!0).to.match(e)},r.notMatch=function(t,e,l){new n(t,l,r.notMatch,!0).to.not.match(e)},r.property=function(t,e,l){new n(t,l,r.property,!0).to.have.property(e)},r.notProperty=function(t,e,l){new n(t,l,r.notProperty,!0).to.not.have.property(e)},r.propertyVal=function(t,e,l,i){new n(t,i,r.propertyVal,!0).to.have.property(e,l)},r.notPropertyVal=function(t,e,l,i){new n(t,i,r.notPropertyVal,!0).to.not.have.property(e,l)},r.deepPropertyVal=function(t,e,l,i){new n(t,i,r.deepPropertyVal,!0).to.have.deep.property(e,l)},r.notDeepPropertyVal=function(t,e,l,i){new n(t,i,r.notDeepPropertyVal,!0).to.not.have.deep.property(e,l)},r.ownProperty=function(t,e,l){new n(t,l,r.ownProperty,!0).to.have.own.property(e)},r.notOwnProperty=function(t,e,l){new n(t,l,r.notOwnProperty,!0).to.not.have.own.property(e)},r.ownPropertyVal=function(t,e,l,i){new n(t,i,r.ownPropertyVal,!0).to.have.own.property(e,l)},r.notOwnPropertyVal=function(t,e,l,i){new n(t,i,r.notOwnPropertyVal,!0).to.not.have.own.property(e,l)},r.deepOwnPropertyVal=function(t,e,l,i){new n(t,i,r.deepOwnPropertyVal,!0).to.have.deep.own.property(e,l)},r.notDeepOwnPropertyVal=function(t,e,l,i){new n(t,i,r.notDeepOwnPropertyVal,!0).to.not.have.deep.own.property(e,l)},r.nestedProperty=function(t,e,l){new n(t,l,r.nestedProperty,!0).to.have.nested.property(e)},r.notNestedProperty=function(t,e,l){new n(t,l,r.notNestedProperty,!0).to.not.have.nested.property(e)},r.nestedPropertyVal=function(t,e,l,i){new n(t,i,r.nestedPropertyVal,!0).to.have.nested.property(e,l)},r.notNestedPropertyVal=function(t,e,l,i){new n(t,i,r.notNestedPropertyVal,!0).to.not.have.nested.property(e,l)},r.deepNestedPropertyVal=function(t,e,l,i){new n(t,i,r.deepNestedPropertyVal,!0).to.have.deep.nested.property(e,l)},r.notDeepNestedPropertyVal=function(t,e,l,i){new n(t,i,r.notDeepNestedPropertyVal,!0).to.not.have.deep.nested.property(e,l)},r.lengthOf=function(t,e,l){new n(t,l,r.lengthOf,!0).to.have.lengthOf(e)},r.hasAnyKeys=function(t,e,l){new n(t,l,r.hasAnyKeys,!0).to.have.any.keys(e)},r.hasAllKeys=function(t,e,l){new n(t,l,r.hasAllKeys,!0).to.have.all.keys(e)},r.containsAllKeys=function(t,e,l){new n(t,l,r.containsAllKeys,!0).to.contain.all.keys(e)},r.doesNotHaveAnyKeys=function(t,e,l){new n(t,l,r.doesNotHaveAnyKeys,!0).to.not.have.any.keys(e)},r.doesNotHaveAllKeys=function(t,e,l){new n(t,l,r.doesNotHaveAllKeys,!0).to.not.have.all.keys(e)},r.hasAnyDeepKeys=function(t,e,l){new n(t,l,r.hasAnyDeepKeys,!0).to.have.any.deep.keys(e)},r.hasAllDeepKeys=function(t,e,l){new n(t,l,r.hasAllDeepKeys,!0).to.have.all.deep.keys(e)},r.containsAllDeepKeys=function(t,e,l){new n(t,l,r.containsAllDeepKeys,!0).to.contain.all.deep.keys(e)},r.doesNotHaveAnyDeepKeys=function(t,e,l){new n(t,l,r.doesNotHaveAnyDeepKeys,!0).to.not.have.any.deep.keys(e)},r.doesNotHaveAllDeepKeys=function(t,e,l){new n(t,l,r.doesNotHaveAllDeepKeys,!0).to.not.have.all.deep.keys(e)},r.throws=function(t,e,i,o){("string"==typeof e||e instanceof RegExp)&&(i=e,e=null);var u=new n(t,o,r.throws,!0).to.throw(e,i);return l(u,"object")},r.doesNotThrow=function(t,e,l,i){("string"==typeof e||e instanceof RegExp)&&(l=e,e=null),new n(t,i,r.doesNotThrow,!0).to.not.throw(e,l)},r.operator=function(i,o,u,s){var a;switch(o){case"==":a=i==u;break;case"===":a=i===u;break;case">":a=i>u;break;case">=":a=i>=u;break;case"<":a=i<u;break;case"<=":a=i<=u;break;case"!=":a=i!=u;break;case"!==":a=i!==u;break;default:throw s=s?s+": ":s,new t.AssertionError(s+'Invalid operator "'+o+'"',void 0,r.operator)}var c=new n(a,s,r.operator,!0);c.assert(!0===l(c,"object"),"expected "+e.inspect(i)+" to be "+o+" "+e.inspect(u),"expected "+e.inspect(i)+" to not be "+o+" "+e.inspect(u))},r.closeTo=function(t,e,l,i){new n(t,i,r.closeTo,!0).to.be.closeTo(e,l)},r.approximately=function(t,e,l,i){new n(t,i,r.approximately,!0).to.be.approximately(e,l)},r.sameMembers=function(t,e,l){new n(t,l,r.sameMembers,!0).to.have.same.members(e)},r.notSameMembers=function(t,e,l){new n(t,l,r.notSameMembers,!0).to.not.have.same.members(e)},r.sameDeepMembers=function(t,e,l){new n(t,l,r.sameDeepMembers,!0).to.have.same.deep.members(e)},r.notSameDeepMembers=function(t,e,l){new n(t,l,r.notSameDeepMembers,!0).to.not.have.same.deep.members(e)},r.sameOrderedMembers=function(t,e,l){new n(t,l,r.sameOrderedMembers,!0).to.have.same.ordered.members(e)},r.notSameOrderedMembers=function(t,e,l){new n(t,l,r.notSameOrderedMembers,!0).to.not.have.same.ordered.members(e)},r.sameDeepOrderedMembers=function(t,e,l){new n(t,l,r.sameDeepOrderedMembers,!0).to.have.same.deep.ordered.members(e)},r.notSameDeepOrderedMembers=function(t,e,l){new n(t,l,r.notSameDeepOrderedMembers,!0).to.not.have.same.deep.ordered.members(e)},r.includeMembers=function(t,e,l){new n(t,l,r.includeMembers,!0).to.include.members(e)},r.notIncludeMembers=function(t,e,l){new n(t,l,r.notIncludeMembers,!0).to.not.include.members(e)},r.includeDeepMembers=function(t,e,l){new n(t,l,r.includeDeepMembers,!0).to.include.deep.members(e)},r.notIncludeDeepMembers=function(t,e,l){new n(t,l,r.notIncludeDeepMembers,!0).to.not.include.deep.members(e)},r.includeOrderedMembers=function(t,e,l){new n(t,l,r.includeOrderedMembers,!0).to.include.ordered.members(e)},r.notIncludeOrderedMembers=function(t,e,l){new n(t,l,r.notIncludeOrderedMembers,!0).to.not.include.ordered.members(e)},r.includeDeepOrderedMembers=function(t,e,l){new n(t,l,r.includeDeepOrderedMembers,!0).to.include.deep.ordered.members(e)},r.notIncludeDeepOrderedMembers=function(t,e,l){new n(t,l,r.notIncludeDeepOrderedMembers,!0).to.not.include.deep.ordered.members(e)},r.oneOf=function(t,e,l){new n(t,l,r.oneOf,!0).to.be.oneOf(e)},r.changes=function(t,e,l,i){3===arguments.length&&"function"==typeof e&&(i=l,l=null),new n(t,i,r.changes,!0).to.change(e,l)},r.changesBy=function(t,e,l,i,o){if(4===arguments.length&&"function"==typeof e){var u=i;i=l,o=u}else 3===arguments.length&&(i=l,l=null);new n(t,o,r.changesBy,!0).to.change(e,l).by(i)},r.doesNotChange=function(t,e,l,i){return 3===arguments.length&&"function"==typeof e&&(i=l,l=null),new n(t,i,r.doesNotChange,!0).to.not.change(e,l)},r.changesButNotBy=function(t,e,l,i,o){if(4===arguments.length&&"function"==typeof e){var u=i;i=l,o=u}else 3===arguments.length&&(i=l,l=null);new n(t,o,r.changesButNotBy,!0).to.change(e,l).but.not.by(i)},r.increases=function(t,e,l,i){return 3===arguments.length&&"function"==typeof e&&(i=l,l=null),new n(t,i,r.increases,!0).to.increase(e,l)},r.increasesBy=function(t,e,l,i,o){if(4===arguments.length&&"function"==typeof e){var u=i;i=l,o=u}else 3===arguments.length&&(i=l,l=null);new n(t,o,r.increasesBy,!0).to.increase(e,l).by(i)},r.doesNotIncrease=function(t,e,l,i){return 3===arguments.length&&"function"==typeof e&&(i=l,l=null),new n(t,i,r.doesNotIncrease,!0).to.not.increase(e,l)},r.increasesButNotBy=function(t,e,l,i,o){if(4===arguments.length&&"function"==typeof e){var u=i;i=l,o=u}else 3===arguments.length&&(i=l,l=null);new n(t,o,r.increasesButNotBy,!0).to.increase(e,l).but.not.by(i)},r.decreases=function(t,e,l,i){return 3===arguments.length&&"function"==typeof e&&(i=l,l=null),new n(t,i,r.decreases,!0).to.decrease(e,l)},r.decreasesBy=function(t,e,l,i,o){if(4===arguments.length&&"function"==typeof e){var u=i;i=l,o=u}else 3===arguments.length&&(i=l,l=null);new n(t,o,r.decreasesBy,!0).to.decrease(e,l).by(i)},r.doesNotDecrease=function(t,e,l,i){return 3===arguments.length&&"function"==typeof e&&(i=l,l=null),new n(t,i,r.doesNotDecrease,!0).to.not.decrease(e,l)},r.doesNotDecreaseBy=function(t,e,l,i,o){if(4===arguments.length&&"function"==typeof e){var u=i;i=l,o=u}else 3===arguments.length&&(i=l,l=null);return new n(t,o,r.doesNotDecreaseBy,!0).to.not.decrease(e,l).by(i)},r.decreasesButNotBy=function(t,e,l,i,o){if(4===arguments.length&&"function"==typeof e){var u=i;i=l,o=u}else 3===arguments.length&&(i=l,l=null);new n(t,o,r.decreasesButNotBy,!0).to.decrease(e,l).but.not.by(i)},r.ifError=function(t){if(t)throw t},r.isExtensible=function(t,e){new n(t,e,r.isExtensible,!0).to.be.extensible},r.isNotExtensible=function(t,e){new n(t,e,r.isNotExtensible,!0).to.not.be.extensible},r.isSealed=function(t,e){new n(t,e,r.isSealed,!0).to.be.sealed},r.isNotSealed=function(t,e){new n(t,e,r.isNotSealed,!0).to.not.be.sealed},r.isFrozen=function(t,e){new n(t,e,r.isFrozen,!0).to.be.frozen},r.isNotFrozen=function(t,e){new n(t,e,r.isNotFrozen,!0).to.not.be.frozen},r.isEmpty=function(t,e){new n(t,e,r.isEmpty,!0).to.be.empty},r.isNotEmpty=function(t,e){new n(t,e,r.isNotEmpty,!0).to.not.be.empty},function t(e,n){return r[n]=r[e],t}("isOk","ok")("isNotOk","notOk")("throws","throw")("throws","Throw")("isExtensible","extensible")("isNotExtensible","notExtensible")("isSealed","sealed")("isNotSealed","notSealed")("isFrozen","frozen")("isNotFrozen","notFrozen")("isEmpty","empty")("isNotEmpty","notEmpty")}},8007:function(t){t.exports=function(t,e){t.expect=function(e,n){return new t.Assertion(e,n)},t.expect.fail=function(e,n,l,r){throw arguments.length<2&&(l=e,e=void 0),l=l||"expect.fail()",new t.AssertionError(l,{actual:e,expected:n,operator:r},t.expect.fail)}}},3292:function(t){t.exports=function(t,e){var n=t.Assertion;function l(){Object.defineProperty(Object.prototype,"should",{set:function(t){Object.defineProperty(this,"should",{value:t,enumerable:!0,configurable:!0,writable:!0})},get:function t(){return this instanceof String||this instanceof Number||this instanceof Boolean||"function"==typeof Symbol&&this instanceof Symbol||"function"==typeof BigInt&&this instanceof BigInt?new n(this.valueOf(),null,t):new n(this,null,t)},configurable:!0});var e={fail:function(n,l,r,i){throw arguments.length<2&&(r=n,n=void 0),r=r||"should.fail()",new t.AssertionError(r,{actual:n,expected:l,operator:i},e.fail)},equal:function(t,e,l){new n(t,l).to.equal(e)},Throw:function(t,e,l,r){new n(t,r).to.Throw(e,l)},exist:function(t,e){new n(t,e).to.exist},not:{}};return e.not.equal=function(t,e,l){new n(t,l).to.not.equal(e)},e.not.Throw=function(t,e,l,r){new n(t,r).to.not.Throw(e,l)},e.not.exist=function(t,e){new n(t,e).to.not.exist},e.throw=e.Throw,e.not.throw=e.not.Throw,e}t.should=l,t.Should=l}},3707:function(t,e,n){var l=n(7758),r=n(1928),i=n(3183),o=n(925),u=n(3897),s="function"==typeof Object.setPrototypeOf,a=function(){},c=Object.getOwnPropertyNames(a).filter((function(t){var e=Object.getOwnPropertyDescriptor(a,t);return"object"!=typeof e||!e.configurable})),h=Function.prototype.call,d=Function.prototype.apply;t.exports=function(t,e,n,a){"function"!=typeof a&&(a=function(){});var p={method:n,chainingBehavior:a};t.__methods||(t.__methods={}),t.__methods[e]=p,Object.defineProperty(t,e,{get:function(){p.chainingBehavior.call(this);var n=function(){i(this,"lockSsfi")||i(this,"ssfi",n);var t=p.method.apply(this,arguments);if(void 0!==t)return t;var e=new r.Assertion;return u(this,e),e};if(l(n,e,!0),s){var a=Object.create(this);a.call=h,a.apply=d,Object.setPrototypeOf(n,a)}else Object.getOwnPropertyNames(t).forEach((function(e){if(-1===c.indexOf(e)){var l=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(n,e,l)}}));return u(this,n),o(n)},configurable:!0})}},7758:function(t){var e=Object.getOwnPropertyDescriptor((function(){}),"length");t.exports=function(t,n,l){return e.configurable?(Object.defineProperty(t,"length",{get:function(){if(l)throw Error("Invalid Chai property: "+n+'.length. Due to a compatibility issue, "length" cannot directly follow "'+n+'". Use "'+n+'.lengthOf" instead.');throw Error("Invalid Chai property: "+n+'.length. See docs for proper usage of "'+n+'".')}}),t):t}},3775:function(t,e,n){var l=n(7758),r=n(1928),i=n(3183),o=n(925),u=n(3897);t.exports=function(t,e,n){var s=function(){i(this,"lockSsfi")||i(this,"ssfi",s);var t=n.apply(this,arguments);if(void 0!==t)return t;var e=new r.Assertion;return u(this,e),e};l(s,e,!1),t[e]=o(s,e)}},7152:function(t,e,n){var l=n(1928),r=n(3183),i=n(3035),o=n(3897);t.exports=function(t,e,n){n=void 0===n?function(){}:n,Object.defineProperty(t,e,{get:function t(){i()||r(this,"lockSsfi")||r(this,"ssfi",t);var e=n.call(this);if(void 0!==e)return e;var u=new l.Assertion;return o(this,u),u},configurable:!0})}},391:function(t,e,n){var l=n(2563);t.exports=function(t,e){return l(t)<l(e)?-1:1}},3265:function(t,e,n){var l=n(6126),r=n(3183),i=n(7013);t.exports=function(t,e){var n=r(t,"message"),o=r(t,"ssfi");n=n?n+": ":"",t=r(t,"object"),(e=e.map((function(t){return t.toLowerCase()}))).sort();var u=e.map((function(t,n){var l=~["a","e","i","o","u"].indexOf(t.charAt(0))?"an":"a";return(e.length>1&&n===e.length-1?"or ":"")+l+" "+t})).join(", "),s=i(t).toLowerCase();if(!e.some((function(t){return s===t})))throw new l(n+"object tested must be "+u+", but "+s+" given",void 0,o)}},3183:function(t){t.exports=function(t,e,n){var l=t.__flags||(t.__flags=Object.create(null));if(3!==arguments.length)return l[e];l[e]=n}},3428:function(t){t.exports=function(t,e){return e.length>4?e[4]:t._obj}},4575:function(t){t.exports=function(t){var e=[];for(var n in t)e.push(n);return e}},5540:function(t,e,n){var l=n(3183),r=n(3428),i=n(6020);t.exports=function(t,e){var n=l(t,"negate"),o=l(t,"object"),u=e[3],s=r(t,e),a=n?e[2]:e[1],c=l(t,"message");return"function"==typeof a&&(a=a()),a=(a=a||"").replace(/#\{this\}/g,(function(){return i(o)})).replace(/#\{act\}/g,(function(){return i(s)})).replace(/#\{exp\}/g,(function(){return i(u)})),c?c+": "+a:a}},6775:function(t,e,n){var l=n(7013),r=n(3183);t.exports=function(t,e){var n=r(t,"operator"),i=r(t,"negate"),o=e[3],u=i?e[2]:e[1];if(n)return n;if("function"==typeof u&&(u=u()),(u=u||"")&&!/\shave\s/.test(u)){var s=function(t){var e=l(t);return-1!==["Array","Object","function"].indexOf(e)}(o);return/\snot\s/.test(u)?s?"notDeepStrictEqual":"notStrictEqual":s?"deepStrictEqual":"strictEqual"}}},1711:function(t,e,n){var l=n(9663);t.exports=function(t){return Object.keys(t).concat(l(t))}},9663:function(t){t.exports=function(t){return"function"!=typeof Object.getOwnPropertySymbols?[]:Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))}},9475:function(t){t.exports=function(t){var e=Object.getOwnPropertyNames(t);function n(t){-1===e.indexOf(t)&&e.push(t)}for(var l=Object.getPrototypeOf(t);null!==l;)Object.getOwnPropertyNames(l).forEach(n),l=Object.getPrototypeOf(l);return e}},4920:function(t,e,n){var l=n(5539);e.test=n(6765),e.type=n(7013),e.expectTypes=n(3265),e.getMessage=n(5540),e.getActual=n(3428),e.inspect=n(2563),e.objDisplay=n(6020),e.flag=n(3183),e.transferFlags=n(3897),e.eql=n(8310),e.getPathInfo=l.getPathInfo,e.hasProperty=l.hasProperty,e.getName=n(7643),e.addProperty=n(7152),e.addMethod=n(3775),e.overwriteProperty=n(3599),e.overwriteMethod=n(8632),e.addChainableMethod=n(3707),e.overwriteChainableMethod=n(3796),e.compareByInspect=n(391),e.getOwnEnumerablePropertySymbols=n(9663),e.getOwnEnumerableProperties=n(1711),e.checkError=n(2182),e.proxify=n(925),e.addLengthGuard=n(7758),e.isProxyEnabled=n(3035),e.isNaN=n(9046),e.getOperator=n(6775)},2563:function(t,e,n){var l=n(7643),r=n(9475),i=n(4575),o=n(4448);function u(t,n,f){if(n&&"function"==typeof n.inspect&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var m=n.inspect(f,t);return"string"!=typeof m&&(m=u(t,m,f)),m}var g,v=function(t,e){switch(typeof e){case"undefined":return t.stylize("undefined","undefined");case"string":var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string");case"number":return 0===e&&1/e==-1/0?t.stylize("-0","number"):t.stylize(""+e,"number");case"boolean":return t.stylize(""+e,"boolean");case"symbol":return t.stylize(e.toString(),"symbol");case"bigint":return t.stylize(e.toString()+"n","bigint")}if(null===e)return t.stylize("null","null")}(t,n);if(v)return v;if(g=n,"object"==typeof HTMLElement?g instanceof HTMLElement:g&&"object"==typeof g&&"nodeType"in g&&1===g.nodeType&&"string"==typeof g.nodeName){if("outerHTML"in n)return n.outerHTML;try{if(document.xmlVersion)return(new XMLSerializer).serializeToString(n);var y=document.createElementNS("http://www.w3.org/1999/xhtml","_");y.appendChild(n.cloneNode(!1));var x=y.innerHTML.replace("><",">"+n.innerHTML+"<");return y.innerHTML="",x}catch(t){}}var b,w,_=i(n),M=t.showHidden?r(n):_;if(0===M.length||d(n)&&(1===M.length&&"stack"===M[0]||2===M.length&&"description"===M[0]&&"stack"===M[1])){if("function"==typeof n)return w=(b=l(n))?": "+b:"",t.stylize("[Function"+w+"]","special");if(c(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(h(n))return t.stylize(Date.prototype.toUTCString.call(n),"date");if(d(n))return s(n)}var S,E,T="",A=!1,L=!1,C=["{","}"];if("object"==typeof(S=n)&&/\w+Array]$/.test(p(S))&&(L=!0,C=["[","]"]),function(t){return Array.isArray(t)||"object"==typeof t&&"[object Array]"===p(t)}(n)&&(A=!0,C=["[","]"]),"function"==typeof n&&(T=" [Function"+(w=(b=l(n))?": "+b:"")+"]"),c(n)&&(T=" "+RegExp.prototype.toString.call(n)),h(n)&&(T=" "+Date.prototype.toUTCString.call(n)),d(n))return s(n);if(0===M.length&&(!A||0==n.length))return C[0]+T+C[1];if(f<0)return c(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special");if(t.seen.push(n),A)E=function(t,e,n,l,r){for(var i=[],o=0,u=e.length;o<u;++o)Object.prototype.hasOwnProperty.call(e,String(o))?i.push(a(t,e,n,l,String(o),!0)):i.push("");return r.forEach((function(r){r.match(/^\d+$/)||i.push(a(t,e,n,l,r,!0))})),i}(t,n,f,_,M);else{if(L)return function(t){for(var e="[ ",n=0;n<t.length;++n){if(e.length>=o.truncateThreshold-7){e+="...";break}e+=t[n]+", "}return-1!==(e+=" ]").indexOf(",  ]")&&(e=e.replace(",  ]"," ]")),e}(n);E=M.map((function(e){return a(t,n,f,_,e,A)}))}return t.seen.pop(),function(t,e,n){return t.reduce((function(t,e){return t+e.length+1}),0)>60?n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1]:n[0]+e+" "+t.join(", ")+" "+n[1]}(E,T,C)}function s(t){return"["+Error.prototype.toString.call(t)+"]"}function a(t,e,n,l,r,i){var o,s,a=Object.getOwnPropertyDescriptor(e,r);if(a&&(a.get?s=a.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):a.set&&(s=t.stylize("[Setter]","special"))),l.indexOf(r)<0&&(o="["+r+"]"),s||(t.seen.indexOf(e[r])<0?(s=u(t,e[r],null===n?null:n-1)).indexOf("\n")>-1&&(s=i?s.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+s.split("\n").map((function(t){return"   "+t})).join("\n")):s=t.stylize("[Circular]","special")),void 0===o){if(i&&r.match(/^\d+$/))return s;(o=JSON.stringify(""+r)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.substr(1,o.length-2),o=t.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=t.stylize(o,"string"))}return o+": "+s}function c(t){return"object"==typeof t&&"[object RegExp]"===p(t)}function h(t){return"object"==typeof t&&"[object Date]"===p(t)}function d(t){return"object"==typeof t&&"[object Error]"===p(t)}function p(t){return Object.prototype.toString.call(t)}t.exports=function(t,e,n,l){return u({showHidden:e,seen:[],stylize:function(t){return t}},t,void 0===n?2:n)}},9046:function(t){t.exports=Number.isNaN||function(t){return t!=t}},3035:function(t,e,n){var l=n(4448);t.exports=function(){return l.useProxy&&"undefined"!=typeof Proxy&&"undefined"!=typeof Reflect}},6020:function(t,e,n){var l=n(2563),r=n(4448);t.exports=function(t){var e=l(t),n=Object.prototype.toString.call(t);if(r.truncateThreshold&&e.length>=r.truncateThreshold){if("[object Function]"===n)return t.name&&""!==t.name?"[Function: "+t.name+"]":"[Function]";if("[object Array]"===n)return"[ Array("+t.length+") ]";if("[object Object]"===n){var i=Object.keys(t);return"{ Object ("+(i.length>2?i.splice(0,2).join(", ")+", ...":i.join(", "))+") }"}return e}return e}},3796:function(t,e,n){var l=n(1928),r=n(3897);t.exports=function(t,e,n,i){var o=t.__methods[e],u=o.chainingBehavior;o.chainingBehavior=function(){var t=i(u).call(this);if(void 0!==t)return t;var e=new l.Assertion;return r(this,e),e};var s=o.method;o.method=function(){var t=n(s).apply(this,arguments);if(void 0!==t)return t;var e=new l.Assertion;return r(this,e),e}}},8632:function(t,e,n){var l=n(7758),r=n(1928),i=n(3183),o=n(925),u=n(3897);t.exports=function(t,e,n){var s=t[e],a=function(){throw new Error(e+" is not a function")};s&&"function"==typeof s&&(a=s);var c=function(){i(this,"lockSsfi")||i(this,"ssfi",c);var t=i(this,"lockSsfi");i(this,"lockSsfi",!0);var e=n(a).apply(this,arguments);if(i(this,"lockSsfi",t),void 0!==e)return e;var l=new r.Assertion;return u(this,l),l};l(c,e,!1),t[e]=o(c,e)}},3599:function(t,e,n){var l=n(1928),r=n(3183),i=n(3035),o=n(3897);t.exports=function(t,e,n){var u=Object.getOwnPropertyDescriptor(t,e),s=function(){};u&&"function"==typeof u.get&&(s=u.get),Object.defineProperty(t,e,{get:function t(){i()||r(this,"lockSsfi")||r(this,"ssfi",t);var e=r(this,"lockSsfi");r(this,"lockSsfi",!0);var u=n(s).call(this);if(r(this,"lockSsfi",e),void 0!==u)return u;var a=new l.Assertion;return o(this,a),a},configurable:!0})}},925:function(t,e,n){var l=n(4448),r=n(3183),i=n(9475),o=n(3035),u=["__flags","__methods","_obj","assert"];t.exports=function(t,e){return o()?new Proxy(t,{get:function t(n,o){if("string"==typeof o&&-1===l.proxyExcludedKeys.indexOf(o)&&!Reflect.has(n,o)){if(e)throw Error("Invalid Chai property: "+e+"."+o+'. See docs for proper usage of "'+e+'".');var s=null,a=4;throw i(n).forEach((function(t){if(!Object.prototype.hasOwnProperty(t)&&-1===u.indexOf(t)){var e=function(t,e,n){if(Math.abs(t.length-e.length)>=n)return n;for(var l=[],r=0;r<=t.length;r++)l[r]=Array(e.length+1).fill(0),l[r][0]=r;for(var i=0;i<e.length;i++)l[0][i]=i;for(r=1;r<=t.length;r++){var o=t.charCodeAt(r-1);for(i=1;i<=e.length;i++)Math.abs(r-i)>=n?l[r][i]=n:l[r][i]=Math.min(l[r-1][i]+1,l[r][i-1]+1,l[r-1][i-1]+(o===e.charCodeAt(i-1)?0:1))}return l[t.length][e.length]}(o,t,a);e<a&&(s=t,a=e)}})),null!==s?Error("Invalid Chai property: "+o+'. Did you mean "'+s+'"?'):Error("Invalid Chai property: "+o)}return-1!==u.indexOf(o)||r(n,"lockSsfi")||r(n,"ssfi",t),Reflect.get(n,o)}}):t}},6765:function(t,e,n){var l=n(3183);t.exports=function(t,e){var n=l(t,"negate"),r=e[0];return n?!r:r}},3897:function(t){t.exports=function(t,e,n){var l=t.__flags||(t.__flags=Object.create(null));for(var r in e.__flags||(e.__flags=Object.create(null)),n=3!==arguments.length||n,l)(n||"object"!==r&&"ssfi"!==r&&"lockSsfi"!==r&&"message"!=r)&&(e.__flags[r]=l[r])}},2182:function(t){"use strict";var e=/\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\(\/]+)/;function n(t){var n="";if(void 0===t.name){var l=String(t).match(e);l&&(n=l[1])}else n=t.name;return n}t.exports={compatibleInstance:function(t,e){return e instanceof Error&&t===e},compatibleConstructor:function(t,e){return e instanceof Error?t.constructor===e.constructor||t instanceof e.constructor:(e.prototype instanceof Error||e===Error)&&(t.constructor===e||t instanceof e)},compatibleMessage:function(t,e){var n="string"==typeof t?t:t.message;return e instanceof RegExp?e.test(n):"string"==typeof e&&-1!==n.indexOf(e)},getMessage:function(t){var e="";return t&&t.message?e=t.message:"string"==typeof t&&(e=t),e},getConstructorName:function(t){var e=t;return t instanceof Error?e=n(t.constructor):"function"==typeof t&&(e=n(t).trim()||n(new t)),e}}},3099:function(t){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},6077:function(t,e,n){var l=n(111);t.exports=function(t){if(!l(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},1223:function(t,e,n){var l=n(5112),r=n(30),i=n(3070),o=l("unscopables"),u=Array.prototype;null==u[o]&&i.f(u,o,{configurable:!0,value:r(null)}),t.exports=function(t){u[o][t]=!0}},1530:function(t,e,n){"use strict";var l=n(8710).charAt;t.exports=function(t,e,n){return e+(n?l(t,e).length:1)}},9670:function(t,e,n){var l=n(111);t.exports=function(t){if(!l(t))throw TypeError(String(t)+" is not an object");return t}},8533:function(t,e,n){"use strict";var l=n(2092).forEach,r=n(9341)("forEach");t.exports=r?[].forEach:function(t){return l(this,t,arguments.length>1?arguments[1]:void 0)}},8457:function(t,e,n){"use strict";var l=n(9974),r=n(7908),i=n(3411),o=n(7659),u=n(7466),s=n(6135),a=n(1246);t.exports=function(t){var e,n,c,h,d,p,f=r(t),m="function"==typeof this?this:Array,g=arguments.length,v=g>1?arguments[1]:void 0,y=void 0!==v,x=a(f),b=0;if(y&&(v=l(v,g>2?arguments[2]:void 0,2)),null==x||m==Array&&o(x))for(n=new m(e=u(f.length));e>b;b++)p=y?v(f[b],b):f[b],s(n,b,p);else for(d=(h=x.call(f)).next,n=new m;!(c=d.call(h)).done;b++)p=y?i(h,v,[c.value,b],!0):c.value,s(n,b,p);return n.length=b,n}},1318:function(t,e,n){var l=n(5656),r=n(7466),i=n(1400),o=function(t){return function(e,n,o){var u,s=l(e),a=r(s.length),c=i(o,a);if(t&&n!=n){for(;a>c;)if((u=s[c++])!=u)return!0}else for(;a>c;c++)if((t||c in s)&&s[c]===n)return t||c||0;return!t&&-1}};t.exports={includes:o(!0),indexOf:o(!1)}},2092:function(t,e,n){var l=n(9974),r=n(8361),i=n(7908),o=n(7466),u=n(5417),s=[].push,a=function(t){var e=1==t,n=2==t,a=3==t,c=4==t,h=6==t,d=7==t,p=5==t||h;return function(f,m,g,v){for(var y,x,b=i(f),w=r(b),_=l(m,g,3),M=o(w.length),S=0,E=v||u,T=e?E(f,M):n||d?E(f,0):void 0;M>S;S++)if((p||S in w)&&(x=_(y=w[S],S,b),t))if(e)T[S]=x;else if(x)switch(t){case 3:return!0;case 5:return y;case 6:return S;case 2:s.call(T,y)}else switch(t){case 4:return!1;case 7:s.call(T,y)}return h?-1:a||c?c:T}};t.exports={forEach:a(0),map:a(1),filter:a(2),some:a(3),every:a(4),find:a(5),findIndex:a(6),filterOut:a(7)}},1194:function(t,e,n){var l=n(7293),r=n(5112),i=n(7392),o=r("species");t.exports=function(t){return i>=51||!l((function(){var e=[];return(e.constructor={})[o]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},9341:function(t,e,n){"use strict";var l=n(7293);t.exports=function(t,e){var n=[][t];return!!n&&l((function(){n.call(null,e||function(){throw 1},1)}))}},5417:function(t,e,n){var l=n(111),r=n(3157),i=n(5112)("species");t.exports=function(t,e){var n;return r(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!r(n.prototype)?l(n)&&null===(n=n[i])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},3411:function(t,e,n){var l=n(9670),r=n(9212);t.exports=function(t,e,n,i){try{return i?e(l(n)[0],n[1]):e(n)}catch(e){throw r(t),e}}},7072:function(t,e,n){var l=n(5112)("iterator"),r=!1;try{var i=0,o={next:function(){return{done:!!i++}},return:function(){r=!0}};o[l]=function(){return this},Array.from(o,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!r)return!1;var n=!1;try{var i={};i[l]=function(){return{next:function(){return{done:n=!0}}}},t(i)}catch(t){}return n}},4326:function(t){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},648:function(t,e,n){var l=n(1694),r=n(4326),i=n(5112)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=l?r:function(t){var e,n,l;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:o?r(e):"Object"==(l=r(e))&&"function"==typeof e.callee?"Arguments":l}},9920:function(t,e,n){var l=n(6656),r=n(3887),i=n(1236),o=n(3070);t.exports=function(t,e){for(var n=r(e),u=o.f,s=i.f,a=0;a<n.length;a++){var c=n[a];l(t,c)||u(t,c,s(e,c))}}},8544:function(t,e,n){var l=n(7293);t.exports=!l((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},4994:function(t,e,n){"use strict";var l=n(3383).IteratorPrototype,r=n(30),i=n(9114),o=n(8003),u=n(7497),s=function(){return this};t.exports=function(t,e,n){var a=e+" Iterator";return t.prototype=r(l,{next:i(1,n)}),o(t,a,!1,!0),u[a]=s,t}},8880:function(t,e,n){var l=n(9781),r=n(3070),i=n(9114);t.exports=l?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},9114:function(t){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},6135:function(t,e,n){"use strict";var l=n(7593),r=n(3070),i=n(9114);t.exports=function(t,e,n){var o=l(e);o in t?r.f(t,o,i(0,n)):t[o]=n}},654:function(t,e,n){"use strict";var l=n(2109),r=n(4994),i=n(9518),o=n(7674),u=n(8003),s=n(8880),a=n(1320),c=n(5112),h=n(1913),d=n(7497),p=n(3383),f=p.IteratorPrototype,m=p.BUGGY_SAFARI_ITERATORS,g=c("iterator"),v="keys",y="values",x="entries",b=function(){return this};t.exports=function(t,e,n,c,p,w,_){r(n,e,c);var M,S,E,T=function(t){if(t===p&&R)return R;if(!m&&t in C)return C[t];switch(t){case v:case y:case x:return function(){return new n(this,t)}}return function(){return new n(this)}},A=e+" Iterator",L=!1,C=t.prototype,P=C[g]||C["@@iterator"]||p&&C[p],R=!m&&P||T(p),O="Array"==e&&C.entries||P;if(O&&(M=i(O.call(new t)),f!==Object.prototype&&M.next&&(h||i(M)===f||(o?o(M,f):"function"!=typeof M[g]&&s(M,g,b)),u(M,A,!0,!0),h&&(d[A]=b))),p==y&&P&&P.name!==y&&(L=!0,R=function(){return P.call(this)}),h&&!_||C[g]===R||s(C,g,R),d[e]=R,p)if(S={values:T(y),keys:w?R:T(v),entries:T(x)},_)for(E in S)(m||L||!(E in C))&&a(C,E,S[E]);else l({target:e,proto:!0,forced:m||L},S);return S}},7235:function(t,e,n){var l=n(857),r=n(6656),i=n(6061),o=n(3070).f;t.exports=function(t){var e=l.Symbol||(l.Symbol={});r(e,t)||o(e,t,{value:i.f(t)})}},9781:function(t,e,n){var l=n(7293);t.exports=!l((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:function(t,e,n){var l=n(7854),r=n(111),i=l.document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},8324:function(t){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8113:function(t,e,n){var l=n(5005);t.exports=l("navigator","userAgent")||""},7392:function(t,e,n){var l,r,i=n(7854),o=n(8113),u=i.process,s=u&&u.versions,a=s&&s.v8;a?r=(l=a.split("."))[0]<4?1:l[0]+l[1]:o&&(!(l=o.match(/Edge\/(\d+)/))||l[1]>=74)&&(l=o.match(/Chrome\/(\d+)/))&&(r=l[1]),t.exports=r&&+r},748:function(t){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:function(t,e,n){var l=n(7854),r=n(1236).f,i=n(8880),o=n(1320),u=n(3505),s=n(9920),a=n(4705);t.exports=function(t,e){var n,c,h,d,p,f=t.target,m=t.global,g=t.stat;if(n=m?l:g?l[f]||u(f,{}):(l[f]||{}).prototype)for(c in e){if(d=e[c],h=t.noTargetGet?(p=r(n,c))&&p.value:n[c],!a(m?c:f+(g?".":"#")+c,t.forced)&&void 0!==h){if(typeof d==typeof h)continue;s(d,h)}(t.sham||h&&h.sham)&&i(d,"sham",!0),o(n,c,d,t)}}},7293:function(t){t.exports=function(t){try{return!!t()}catch(t){return!0}}},7007:function(t,e,n){"use strict";n(4916);var l=n(1320),r=n(2261),i=n(7293),o=n(5112),u=n(8880),s=o("species"),a=RegExp.prototype;t.exports=function(t,e,n,c){var h=o(t),d=!i((function(){var e={};return e[h]=function(){return 7},7!=""[t](e)})),p=d&&!i((function(){var e=!1,n=/a/;return"split"===t&&((n={}).constructor={},n.constructor[s]=function(){return n},n.flags="",n[h]=/./[h]),n.exec=function(){return e=!0,null},n[h](""),!e}));if(!d||!p||n){var f=/./[h],m=e(h,""[t],(function(t,e,n,l,i){var o=e.exec;return o===r||o===a.exec?d&&!i?{done:!0,value:f.call(e,n,l)}:{done:!0,value:t.call(n,e,l)}:{done:!1}}));l(String.prototype,t,m[0]),l(a,h,m[1])}c&&u(a[h],"sham",!0)}},9974:function(t,e,n){var l=n(3099);t.exports=function(t,e,n){if(l(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,l){return t.call(e,n,l)};case 3:return function(n,l,r){return t.call(e,n,l,r)}}return function(){return t.apply(e,arguments)}}},7065:function(t,e,n){"use strict";var l=n(3099),r=n(111),i=[].slice,o={},u=function(t,e,n){if(!(e in o)){for(var l=[],r=0;r<e;r++)l[r]="a["+r+"]";o[e]=Function("C,a","return new C("+l.join(",")+")")}return o[e](t,n)};t.exports=Function.bind||function(t){var e=l(this),n=i.call(arguments,1),o=function(){var l=n.concat(i.call(arguments));return this instanceof o?u(e,l.length,l):e.apply(t,l)};return r(e.prototype)&&(o.prototype=e.prototype),o}},5005:function(t,e,n){var l=n(857),r=n(7854),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?i(l[t])||i(r[t]):l[t]&&l[t][e]||r[t]&&r[t][e]}},1246:function(t,e,n){var l=n(648),r=n(7497),i=n(5112)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||r[l(t)]}},7854:function(t,e,n){var l=function(t){return t&&t.Math==Math&&t};t.exports=l("object"==typeof globalThis&&globalThis)||l("object"==typeof window&&window)||l("object"==typeof self&&self)||l("object"==typeof n.g&&n.g)||function(){return this}()||Function("return this")()},6656:function(t,e,n){var l=n(7908),r={}.hasOwnProperty;t.exports=Object.hasOwn||function(t,e){return r.call(l(t),e)}},3501:function(t){t.exports={}},490:function(t,e,n){var l=n(5005);t.exports=l("document","documentElement")},4664:function(t,e,n){var l=n(9781),r=n(7293),i=n(317);t.exports=!l&&!r((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},8361:function(t,e,n){var l=n(7293),r=n(4326),i="".split;t.exports=l((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==r(t)?i.call(t,""):Object(t)}:Object},2788:function(t,e,n){var l=n(5465),r=Function.toString;"function"!=typeof l.inspectSource&&(l.inspectSource=function(t){return r.call(t)}),t.exports=l.inspectSource},9909:function(t,e,n){var l,r,i,o=n(8536),u=n(7854),s=n(111),a=n(8880),c=n(6656),h=n(5465),d=n(6200),p=n(3501),f="Object already initialized",m=u.WeakMap;if(o||h.state){var g=h.state||(h.state=new m),v=g.get,y=g.has,x=g.set;l=function(t,e){if(y.call(g,t))throw new TypeError(f);return e.facade=t,x.call(g,t,e),e},r=function(t){return v.call(g,t)||{}},i=function(t){return y.call(g,t)}}else{var b=d("state");p[b]=!0,l=function(t,e){if(c(t,b))throw new TypeError(f);return e.facade=t,a(t,b,e),e},r=function(t){return c(t,b)?t[b]:{}},i=function(t){return c(t,b)}}t.exports={set:l,get:r,has:i,enforce:function(t){return i(t)?r(t):l(t,{})},getterFor:function(t){return function(e){var n;if(!s(e)||(n=r(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},7659:function(t,e,n){var l=n(5112),r=n(7497),i=l("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},3157:function(t,e,n){var l=n(4326);t.exports=Array.isArray||function(t){return"Array"==l(t)}},4705:function(t,e,n){var l=n(7293),r=/#|\.prototype\./,i=function(t,e){var n=u[o(t)];return n==a||n!=s&&("function"==typeof e?l(e):!!e)},o=i.normalize=function(t){return String(t).replace(r,".").toLowerCase()},u=i.data={},s=i.NATIVE="N",a=i.POLYFILL="P";t.exports=i},111:function(t){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},1913:function(t){t.exports=!1},7850:function(t,e,n){var l=n(111),r=n(4326),i=n(5112)("match");t.exports=function(t){var e;return l(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==r(t))}},9212:function(t,e,n){var l=n(9670);t.exports=function(t){var e=t.return;if(void 0!==e)return l(e.call(t)).value}},3383:function(t,e,n){"use strict";var l,r,i,o=n(7293),u=n(9518),s=n(8880),a=n(6656),c=n(5112),h=n(1913),d=c("iterator"),p=!1;[].keys&&("next"in(i=[].keys())?(r=u(u(i)))!==Object.prototype&&(l=r):p=!0);var f=null==l||o((function(){var t={};return l[d].call(t)!==t}));f&&(l={}),h&&!f||a(l,d)||s(l,d,(function(){return this})),t.exports={IteratorPrototype:l,BUGGY_SAFARI_ITERATORS:p}},7497:function(t){t.exports={}},133:function(t,e,n){var l=n(7392),r=n(7293);t.exports=!!Object.getOwnPropertySymbols&&!r((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&l&&l<41}))},8536:function(t,e,n){var l=n(7854),r=n(2788),i=l.WeakMap;t.exports="function"==typeof i&&/native code/.test(r(i))},30:function(t,e,n){var l,r=n(9670),i=n(6048),o=n(748),u=n(3501),s=n(490),a=n(317),c=n(6200)("IE_PROTO"),h=function(){},d=function(t){return"<script>"+t+"<\/script>"},p=function(){try{l=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;p=l?function(t){t.write(d("")),t.close();var e=t.parentWindow.Object;return t=null,e}(l):((e=a("iframe")).style.display="none",s.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(d("document.F=Object")),t.close(),t.F);for(var n=o.length;n--;)delete p.prototype[o[n]];return p()};u[c]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(h.prototype=r(t),n=new h,h.prototype=null,n[c]=t):n=p(),void 0===e?n:i(n,e)}},6048:function(t,e,n){var l=n(9781),r=n(3070),i=n(9670),o=n(1956);t.exports=l?Object.defineProperties:function(t,e){i(t);for(var n,l=o(e),u=l.length,s=0;u>s;)r.f(t,n=l[s++],e[n]);return t}},3070:function(t,e,n){var l=n(9781),r=n(4664),i=n(9670),o=n(7593),u=Object.defineProperty;e.f=l?u:function(t,e,n){if(i(t),e=o(e,!0),i(n),r)try{return u(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},1236:function(t,e,n){var l=n(9781),r=n(5296),i=n(9114),o=n(5656),u=n(7593),s=n(6656),a=n(4664),c=Object.getOwnPropertyDescriptor;e.f=l?c:function(t,e){if(t=o(t),e=u(e,!0),a)try{return c(t,e)}catch(t){}if(s(t,e))return i(!r.f.call(t,e),t[e])}},1156:function(t,e,n){var l=n(5656),r=n(8006).f,i={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return o&&"[object Window]"==i.call(t)?function(t){try{return r(t)}catch(t){return o.slice()}}(t):r(l(t))}},8006:function(t,e,n){var l=n(6324),r=n(748).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return l(t,r)}},5181:function(t,e){e.f=Object.getOwnPropertySymbols},9518:function(t,e,n){var l=n(6656),r=n(7908),i=n(6200),o=n(8544),u=i("IE_PROTO"),s=Object.prototype;t.exports=o?Object.getPrototypeOf:function(t){return t=r(t),l(t,u)?t[u]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},6324:function(t,e,n){var l=n(6656),r=n(5656),i=n(1318).indexOf,o=n(3501);t.exports=function(t,e){var n,u=r(t),s=0,a=[];for(n in u)!l(o,n)&&l(u,n)&&a.push(n);for(;e.length>s;)l(u,n=e[s++])&&(~i(a,n)||a.push(n));return a}},1956:function(t,e,n){var l=n(6324),r=n(748);t.exports=Object.keys||function(t){return l(t,r)}},5296:function(t,e){"use strict";var n={}.propertyIsEnumerable,l=Object.getOwnPropertyDescriptor,r=l&&!n.call({1:2},1);e.f=r?function(t){var e=l(this,t);return!!e&&e.enumerable}:n},7674:function(t,e,n){var l=n(9670),r=n(6077);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,i){return l(n),r(i),e?t.call(n,i):n.__proto__=i,n}}():void 0)},288:function(t,e,n){"use strict";var l=n(1694),r=n(648);t.exports=l?{}.toString:function(){return"[object "+r(this)+"]"}},3887:function(t,e,n){var l=n(5005),r=n(8006),i=n(5181),o=n(9670);t.exports=l("Reflect","ownKeys")||function(t){var e=r.f(o(t)),n=i.f;return n?e.concat(n(t)):e}},857:function(t,e,n){var l=n(7854);t.exports=l},1320:function(t,e,n){var l=n(7854),r=n(8880),i=n(6656),o=n(3505),u=n(2788),s=n(9909),a=s.get,c=s.enforce,h=String(String).split("String");(t.exports=function(t,e,n,u){var s,a=!!u&&!!u.unsafe,d=!!u&&!!u.enumerable,p=!!u&&!!u.noTargetGet;"function"==typeof n&&("string"!=typeof e||i(n,"name")||r(n,"name",e),(s=c(n)).source||(s.source=h.join("string"==typeof e?e:""))),t!==l?(a?!p&&t[e]&&(d=!0):delete t[e],d?t[e]=n:r(t,e,n)):d?t[e]=n:o(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&a(this).source||u(this)}))},7651:function(t,e,n){var l=n(4326),r=n(2261);t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var i=n.call(t,e);if("object"!=typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==l(t))throw TypeError("RegExp#exec called on incompatible receiver");return r.call(t,e)}},2261:function(t,e,n){"use strict";var l,r,i=n(7066),o=n(2999),u=n(2309),s=n(30),a=n(9909).get,c=n(9441),h=n(8173),d=RegExp.prototype.exec,p=u("native-string-replace",String.prototype.replace),f=d,m=(l=/a/,r=/b*/g,d.call(l,"a"),d.call(r,"a"),0!==l.lastIndex||0!==r.lastIndex),g=o.UNSUPPORTED_Y||o.BROKEN_CARET,v=void 0!==/()??/.exec("")[1];(m||v||g||c||h)&&(f=function(t){var e,n,l,r,o,u,c,h=this,y=a(h),x=y.raw;if(x)return x.lastIndex=h.lastIndex,e=f.call(x,t),h.lastIndex=x.lastIndex,e;var b=y.groups,w=g&&h.sticky,_=i.call(h),M=h.source,S=0,E=t;if(w&&(-1===(_=_.replace("y","")).indexOf("g")&&(_+="g"),E=String(t).slice(h.lastIndex),h.lastIndex>0&&(!h.multiline||h.multiline&&"\n"!==t[h.lastIndex-1])&&(M="(?: "+M+")",E=" "+E,S++),n=new RegExp("^(?:"+M+")",_)),v&&(n=new RegExp("^"+M+"$(?!\\s)",_)),m&&(l=h.lastIndex),r=d.call(w?n:h,E),w?r?(r.input=r.input.slice(S),r[0]=r[0].slice(S),r.index=h.lastIndex,h.lastIndex+=r[0].length):h.lastIndex=0:m&&r&&(h.lastIndex=h.global?r.index+r[0].length:l),v&&r&&r.length>1&&p.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r&&b)for(r.groups=u=s(null),o=0;o<b.length;o++)u[(c=b[o])[0]]=r[c[1]];return r}),t.exports=f},7066:function(t,e,n){"use strict";var l=n(9670);t.exports=function(){var t=l(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},2999:function(t,e,n){var l=n(7293),r=function(t,e){return RegExp(t,e)};e.UNSUPPORTED_Y=l((function(){var t=r("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=l((function(){var t=r("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},9441:function(t,e,n){var l=n(7293);t.exports=l((function(){var t=RegExp(".","string".charAt(0));return!(t.dotAll&&t.exec("\n")&&"s"===t.flags)}))},8173:function(t,e,n){var l=n(7293);t.exports=l((function(){var t=RegExp("(?<a>b)","string".charAt(5));return"b"!==t.exec("b").groups.a||"bc"!=="b".replace(t,"$<a>c")}))},4488:function(t){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},3505:function(t,e,n){var l=n(7854),r=n(8880);t.exports=function(t,e){try{r(l,t,e)}catch(n){l[t]=e}return e}},8003:function(t,e,n){var l=n(3070).f,r=n(6656),i=n(5112)("toStringTag");t.exports=function(t,e,n){t&&!r(t=n?t:t.prototype,i)&&l(t,i,{configurable:!0,value:e})}},6200:function(t,e,n){var l=n(2309),r=n(9711),i=l("keys");t.exports=function(t){return i[t]||(i[t]=r(t))}},5465:function(t,e,n){var l=n(7854),r=n(3505),i="__core-js_shared__",o=l[i]||r(i,{});t.exports=o},2309:function(t,e,n){var l=n(1913),r=n(5465);(t.exports=function(t,e){return r[t]||(r[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.15.2",mode:l?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},6707:function(t,e,n){var l=n(9670),r=n(3099),i=n(5112)("species");t.exports=function(t,e){var n,o=l(t).constructor;return void 0===o||null==(n=l(o)[i])?e:r(n)}},8710:function(t,e,n){var l=n(9958),r=n(4488),i=function(t){return function(e,n){var i,o,u=String(r(e)),s=l(n),a=u.length;return s<0||s>=a?t?"":void 0:(i=u.charCodeAt(s))<55296||i>56319||s+1===a||(o=u.charCodeAt(s+1))<56320||o>57343?t?u.charAt(s):i:t?u.slice(s,s+2):o-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},8415:function(t,e,n){"use strict";var l=n(9958),r=n(4488);t.exports=function(t){var e=String(r(this)),n="",i=l(t);if(i<0||i==1/0)throw RangeError("Wrong number of repetitions");for(;i>0;(i>>>=1)&&(e+=e))1&i&&(n+=e);return n}},6091:function(t,e,n){var l=n(7293),r=n(1361);t.exports=function(t){return l((function(){return!!r[t]()||"​᠎"!="​᠎"[t]()||r[t].name!==t}))}},3111:function(t,e,n){var l=n(4488),r="["+n(1361)+"]",i=RegExp("^"+r+r+"*"),o=RegExp(r+r+"*$"),u=function(t){return function(e){var n=String(l(e));return 1&t&&(n=n.replace(i,"")),2&t&&(n=n.replace(o,"")),n}};t.exports={start:u(1),end:u(2),trim:u(3)}},1400:function(t,e,n){var l=n(9958),r=Math.max,i=Math.min;t.exports=function(t,e){var n=l(t);return n<0?r(n+e,0):i(n,e)}},5656:function(t,e,n){var l=n(8361),r=n(4488);t.exports=function(t){return l(r(t))}},9958:function(t){var e=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:e)(t)}},7466:function(t,e,n){var l=n(9958),r=Math.min;t.exports=function(t){return t>0?r(l(t),9007199254740991):0}},7908:function(t,e,n){var l=n(4488);t.exports=function(t){return Object(l(t))}},7593:function(t,e,n){var l=n(111);t.exports=function(t,e){if(!l(t))return t;var n,r;if(e&&"function"==typeof(n=t.toString)&&!l(r=n.call(t)))return r;if("function"==typeof(n=t.valueOf)&&!l(r=n.call(t)))return r;if(!e&&"function"==typeof(n=t.toString)&&!l(r=n.call(t)))return r;throw TypeError("Can't convert object to primitive value")}},1694:function(t,e,n){var l={};l[n(5112)("toStringTag")]="z",t.exports="[object z]"===String(l)},9711:function(t){var e=0,n=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++e+n).toString(36)}},3307:function(t,e,n){var l=n(133);t.exports=l&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},6061:function(t,e,n){var l=n(5112);e.f=l},5112:function(t,e,n){var l=n(7854),r=n(2309),i=n(6656),o=n(9711),u=n(133),s=n(3307),a=r("wks"),c=l.Symbol,h=s?c:c&&c.withoutSetter||o;t.exports=function(t){return i(a,t)&&(u||"string"==typeof a[t])||(u&&i(c,t)?a[t]=c[t]:a[t]=h("Symbol."+t)),a[t]}},1361:function(t){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},2222:function(t,e,n){"use strict";var l=n(2109),r=n(7293),i=n(3157),o=n(111),u=n(7908),s=n(7466),a=n(6135),c=n(5417),h=n(1194),d=n(5112),p=n(7392),f=d("isConcatSpreadable"),m=9007199254740991,g="Maximum allowed index exceeded",v=p>=51||!r((function(){var t=[];return t[f]=!1,t.concat()[0]!==t})),y=h("concat"),x=function(t){if(!o(t))return!1;var e=t[f];return void 0!==e?!!e:i(t)};l({target:"Array",proto:!0,forced:!v||!y},{concat:function(t){var e,n,l,r,i,o=u(this),h=c(o,0),d=0;for(e=-1,l=arguments.length;e<l;e++)if(x(i=-1===e?o:arguments[e])){if(d+(r=s(i.length))>m)throw TypeError(g);for(n=0;n<r;n++,d++)n in i&&a(h,d,i[n])}else{if(d>=m)throw TypeError(g);a(h,d++,i)}return h.length=d,h}})},9826:function(t,e,n){"use strict";var l=n(2109),r=n(2092).find,i=n(1223),o="find",u=!0;o in[]&&Array(1).find((function(){u=!1})),l({target:"Array",proto:!0,forced:u},{find:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}}),i(o)},1038:function(t,e,n){var l=n(2109),r=n(8457);l({target:"Array",stat:!0,forced:!n(7072)((function(t){Array.from(t)}))},{from:r})},6992:function(t,e,n){"use strict";var l=n(5656),r=n(1223),i=n(7497),o=n(9909),u=n(654),s="Array Iterator",a=o.set,c=o.getterFor(s);t.exports=u(Array,"Array",(function(t,e){a(this,{type:s,target:l(t),index:0,kind:e})}),(function(){var t=c(this),e=t.target,n=t.kind,l=t.index++;return!e||l>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:l,done:!1}:"values"==n?{value:e[l],done:!1}:{value:[l,e[l]],done:!1}}),"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},7042:function(t,e,n){"use strict";var l=n(2109),r=n(111),i=n(3157),o=n(1400),u=n(7466),s=n(5656),a=n(6135),c=n(5112),h=n(1194)("slice"),d=c("species"),p=[].slice,f=Math.max;l({target:"Array",proto:!0,forced:!h},{slice:function(t,e){var n,l,c,h=s(this),m=u(h.length),g=o(t,m),v=o(void 0===e?m:e,m);if(i(h)&&("function"!=typeof(n=h.constructor)||n!==Array&&!i(n.prototype)?r(n)&&null===(n=n[d])&&(n=void 0):n=void 0,n===Array||void 0===n))return p.call(h,g,v);for(l=new(void 0===n?Array:n)(f(v-g,0)),c=0;g<v;g++,c++)g in h&&a(l,c,h[g]);return l.length=c,l}})},8309:function(t,e,n){var l=n(9781),r=n(3070).f,i=Function.prototype,o=i.toString,u=/^\s*function ([^ (]*)/,s="name";l&&!(s in i)&&r(i,s,{configurable:!0,get:function(){try{return o.call(this).match(u)[1]}catch(t){return""}}})},489:function(t,e,n){var l=n(2109),r=n(7293),i=n(7908),o=n(9518),u=n(8544);l({target:"Object",stat:!0,forced:r((function(){o(1)})),sham:!u},{getPrototypeOf:function(t){return o(i(t))}})},1539:function(t,e,n){var l=n(1694),r=n(1320),i=n(288);l||r(Object.prototype,"toString",i,{unsafe:!0})},2419:function(t,e,n){var l=n(2109),r=n(5005),i=n(3099),o=n(9670),u=n(111),s=n(30),a=n(7065),c=n(7293),h=r("Reflect","construct"),d=c((function(){function t(){}return!(h((function(){}),[],t)instanceof t)})),p=!c((function(){h((function(){}))})),f=d||p;l({target:"Reflect",stat:!0,forced:f,sham:f},{construct:function(t,e){i(t),o(e);var n=arguments.length<3?t:i(arguments[2]);if(p&&!d)return h(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var l=[null];return l.push.apply(l,e),new(a.apply(t,l))}var r=n.prototype,c=s(u(r)?r:Object.prototype),f=Function.apply.call(t,c,e);return u(f)?f:c}})},4916:function(t,e,n){"use strict";var l=n(2109),r=n(2261);l({target:"RegExp",proto:!0,forced:/./.exec!==r},{exec:r})},8783:function(t,e,n){"use strict";var l=n(8710).charAt,r=n(9909),i=n(654),o="String Iterator",u=r.set,s=r.getterFor(o);i(String,"String",(function(t){u(this,{type:o,string:String(t),index:0})}),(function(){var t,e=s(this),n=e.string,r=e.index;return r>=n.length?{value:void 0,done:!0}:(t=l(n,r),e.index+=t.length,{value:t,done:!1})}))},2481:function(t,e,n){n(2109)({target:"String",proto:!0},{repeat:n(8415)})},3123:function(t,e,n){"use strict";var l=n(7007),r=n(7850),i=n(9670),o=n(4488),u=n(6707),s=n(1530),a=n(7466),c=n(7651),h=n(2261),d=n(2999),p=n(7293),f=d.UNSUPPORTED_Y,m=[].push,g=Math.min,v=4294967295;l("split",(function(t,e,n){var l;return l="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,n){var l=String(o(this)),i=void 0===n?v:n>>>0;if(0===i)return[];if(void 0===t)return[l];if(!r(t))return e.call(l,t,i);for(var u,s,a,c=[],d=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),p=0,f=new RegExp(t.source,d+"g");(u=h.call(f,l))&&!((s=f.lastIndex)>p&&(c.push(l.slice(p,u.index)),u.length>1&&u.index<l.length&&m.apply(c,u.slice(1)),a=u[0].length,p=s,c.length>=i));)f.lastIndex===u.index&&f.lastIndex++;return p===l.length?!a&&f.test("")||c.push(""):c.push(l.slice(p)),c.length>i?c.slice(0,i):c}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,n){var r=o(this),i=null==e?void 0:e[t];return void 0!==i?i.call(e,r,n):l.call(String(r),e,n)},function(t,r){var o=n(l,this,t,r,l!==e);if(o.done)return o.value;var h=i(this),d=String(t),p=u(h,RegExp),m=h.unicode,y=(h.ignoreCase?"i":"")+(h.multiline?"m":"")+(h.unicode?"u":"")+(f?"g":"y"),x=new p(f?"^(?:"+h.source+")":h,y),b=void 0===r?v:r>>>0;if(0===b)return[];if(0===d.length)return null===c(x,d)?[d]:[];for(var w=0,_=0,M=[];_<d.length;){x.lastIndex=f?0:_;var S,E=c(x,f?d.slice(_):d);if(null===E||(S=g(a(x.lastIndex+(f?_:0)),d.length))===w)_=s(d,_,m);else{if(M.push(d.slice(w,_)),M.length===b)return M;for(var T=1;T<=E.length-1;T++)if(M.push(E[T]),M.length===b)return M;_=w=S}}return M.push(d.slice(w)),M}]}),!!p((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2!==n.length||"a"!==n[0]||"b"!==n[1]})),f)},3210:function(t,e,n){"use strict";var l=n(2109),r=n(3111).trim;l({target:"String",proto:!0,forced:n(6091)("trim")},{trim:function(){return r(this)}})},1817:function(t,e,n){"use strict";var l=n(2109),r=n(9781),i=n(7854),o=n(6656),u=n(111),s=n(3070).f,a=n(9920),c=i.Symbol;if(r&&"function"==typeof c&&(!("description"in c.prototype)||void 0!==c().description)){var h={},d=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof d?new c(t):void 0===t?c():c(t);return""===t&&(h[e]=!0),e};a(d,c);var p=d.prototype=c.prototype;p.constructor=d;var f=p.toString,m="Symbol(test)"==String(c("test")),g=/^Symbol\((.*)\)[^)]+$/;s(p,"description",{configurable:!0,get:function(){var t=u(this)?this.valueOf():this,e=f.call(t);if(o(h,t))return"";var n=m?e.slice(7,-1):e.replace(g,"$1");return""===n?void 0:n}}),l({global:!0,forced:!0},{Symbol:d})}},2165:function(t,e,n){n(7235)("iterator")},2526:function(t,e,n){"use strict";var l=n(2109),r=n(7854),i=n(5005),o=n(1913),u=n(9781),s=n(133),a=n(3307),c=n(7293),h=n(6656),d=n(3157),p=n(111),f=n(9670),m=n(7908),g=n(5656),v=n(7593),y=n(9114),x=n(30),b=n(1956),w=n(8006),_=n(1156),M=n(5181),S=n(1236),E=n(3070),T=n(5296),A=n(8880),L=n(1320),C=n(2309),P=n(6200),R=n(3501),O=n(9711),I=n(5112),D=n(6061),k=n(7235),N=n(8003),B=n(9909),F=n(2092).forEach,z=P("hidden"),H="Symbol",j=I("toPrimitive"),U=B.set,G=B.getterFor(H),V=Object.prototype,W=r.Symbol,q=i("JSON","stringify"),X=S.f,Y=E.f,$=_.f,J=T.f,Z=C("symbols"),K=C("op-symbols"),Q=C("string-to-symbol-registry"),tt=C("symbol-to-string-registry"),et=C("wks"),nt=r.QObject,lt=!nt||!nt.prototype||!nt.prototype.findChild,rt=u&&c((function(){return 7!=x(Y({},"a",{get:function(){return Y(this,"a",{value:7}).a}})).a}))?function(t,e,n){var l=X(V,e);l&&delete V[e],Y(t,e,n),l&&t!==V&&Y(V,e,l)}:Y,it=function(t,e){var n=Z[t]=x(W.prototype);return U(n,{type:H,tag:t,description:e}),u||(n.description=e),n},ot=a?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof W},ut=function(t,e,n){t===V&&ut(K,e,n),f(t);var l=v(e,!0);return f(n),h(Z,l)?(n.enumerable?(h(t,z)&&t[z][l]&&(t[z][l]=!1),n=x(n,{enumerable:y(0,!1)})):(h(t,z)||Y(t,z,y(1,{})),t[z][l]=!0),rt(t,l,n)):Y(t,l,n)},st=function(t,e){f(t);var n=g(e),l=b(n).concat(dt(n));return F(l,(function(e){u&&!at.call(n,e)||ut(t,e,n[e])})),t},at=function(t){var e=v(t,!0),n=J.call(this,e);return!(this===V&&h(Z,e)&&!h(K,e))&&(!(n||!h(this,e)||!h(Z,e)||h(this,z)&&this[z][e])||n)},ct=function(t,e){var n=g(t),l=v(e,!0);if(n!==V||!h(Z,l)||h(K,l)){var r=X(n,l);return!r||!h(Z,l)||h(n,z)&&n[z][l]||(r.enumerable=!0),r}},ht=function(t){var e=$(g(t)),n=[];return F(e,(function(t){h(Z,t)||h(R,t)||n.push(t)})),n},dt=function(t){var e=t===V,n=$(e?K:g(t)),l=[];return F(n,(function(t){!h(Z,t)||e&&!h(V,t)||l.push(Z[t])})),l};s||(L((W=function(){if(this instanceof W)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=O(t),n=function(t){this===V&&n.call(K,t),h(this,z)&&h(this[z],e)&&(this[z][e]=!1),rt(this,e,y(1,t))};return u&&lt&&rt(V,e,{configurable:!0,set:n}),it(e,t)}).prototype,"toString",(function(){return G(this).tag})),L(W,"withoutSetter",(function(t){return it(O(t),t)})),T.f=at,E.f=ut,S.f=ct,w.f=_.f=ht,M.f=dt,D.f=function(t){return it(I(t),t)},u&&(Y(W.prototype,"description",{configurable:!0,get:function(){return G(this).description}}),o||L(V,"propertyIsEnumerable",at,{unsafe:!0}))),l({global:!0,wrap:!0,forced:!s,sham:!s},{Symbol:W}),F(b(et),(function(t){k(t)})),l({target:H,stat:!0,forced:!s},{for:function(t){var e=String(t);if(h(Q,e))return Q[e];var n=W(e);return Q[e]=n,tt[n]=e,n},keyFor:function(t){if(!ot(t))throw TypeError(t+" is not a symbol");if(h(tt,t))return tt[t]},useSetter:function(){lt=!0},useSimple:function(){lt=!1}}),l({target:"Object",stat:!0,forced:!s,sham:!u},{create:function(t,e){return void 0===e?x(t):st(x(t),e)},defineProperty:ut,defineProperties:st,getOwnPropertyDescriptor:ct}),l({target:"Object",stat:!0,forced:!s},{getOwnPropertyNames:ht,getOwnPropertySymbols:dt}),l({target:"Object",stat:!0,forced:c((function(){M.f(1)}))},{getOwnPropertySymbols:function(t){return M.f(m(t))}}),q&&l({target:"JSON",stat:!0,forced:!s||c((function(){var t=W();return"[null]"!=q([t])||"{}"!=q({a:t})||"{}"!=q(Object(t))}))},{stringify:function(t,e,n){for(var l,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(l=e,(p(e)||void 0!==t)&&!ot(t))return d(e)||(e=function(t,e){if("function"==typeof l&&(e=l.call(this,t,e)),!ot(e))return e}),r[1]=e,q.apply(null,r)}}),W.prototype[j]||A(W.prototype,j,W.prototype.valueOf),N(W,H),R[z]=!0},4747:function(t,e,n){var l=n(7854),r=n(8324),i=n(8533),o=n(8880);for(var u in r){var s=l[u],a=s&&s.prototype;if(a&&a.forEach!==i)try{o(a,"forEach",i)}catch(t){a.forEach=i}}},3948:function(t,e,n){var l=n(7854),r=n(8324),i=n(6992),o=n(8880),u=n(5112),s=u("iterator"),a=u("toStringTag"),c=i.values;for(var h in r){var d=l[h],p=d&&d.prototype;if(p){if(p[s]!==c)try{o(p,s,c)}catch(t){p[s]=c}if(p[a]||o(p,a,h),r[h])for(var f in i)if(p[f]!==i[f])try{o(p,f,i[f])}catch(t){p[f]=i[f]}}}},8310:function(t,e,n){"use strict";var l=n(7013);function r(){this._key="chai/deep-eql__"+Math.random()+Date.now()}r.prototype={get:function(t){return t[this._key]},set:function(t,e){Object.isExtensible(t)&&Object.defineProperty(t,this._key,{value:e,configurable:!0})}};var i="function"==typeof WeakMap?WeakMap:r;function o(t,e,n){if(!n||m(t)||m(e))return null;var l=n.get(t);if(l){var r=l.get(e);if("boolean"==typeof r)return r}return null}function u(t,e,n,l){if(n&&!m(t)&&!m(e)){var r=n.get(t);r?r.set(e,l):((r=new i).set(e,l),n.set(t,r))}}function s(t,e,n){if(n&&n.comparator)return c(t,e,n);var l=a(t,e);return null!==l?l:c(t,e,n)}function a(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e||!m(t)&&!m(e)&&null}function c(t,e,n){(n=n||{}).memoize=!1!==n.memoize&&(n.memoize||new i);var r=n&&n.comparator,c=o(t,e,n.memoize);if(null!==c)return c;var m=o(e,t,n.memoize);if(null!==m)return m;if(r){var g=r(t,e);if(!1===g||!0===g)return u(t,e,n.memoize,g),g;var v=a(t,e);if(null!==v)return v}var y=l(t);if(y!==l(e))return u(t,e,n.memoize,!1),!1;u(t,e,n.memoize,!0);var x=function(t,e,n,l){switch(n){case"String":case"Number":case"Boolean":case"Date":return s(t.valueOf(),e.valueOf());case"Promise":case"Symbol":case"function":case"WeakMap":case"WeakSet":case"Error":return t===e;case"Arguments":case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":case"Array":return h(t,e,l);case"RegExp":return function(t,e){return t.toString()===e.toString()}(t,e);case"Generator":return function(t,e,n){return h(p(t),p(e),n)}(t,e,l);case"DataView":return h(new Uint8Array(t.buffer),new Uint8Array(e.buffer),l);case"ArrayBuffer":return h(new Uint8Array(t),new Uint8Array(e),l);case"Set":case"Map":return function(t,e,n){if(t.size!==e.size)return!1;if(0===t.size)return!0;var l=[],r=[];return t.forEach((function(t,e){l.push([t,e])})),e.forEach((function(t,e){r.push([t,e])})),h(l.sort(),r.sort(),n)}(t,e,l);default:return function(t,e,n){var l=f(t),r=f(e);if(l.length&&l.length===r.length)return l.sort(),r.sort(),!1!==h(l,r)&&function(t,e,n,l){var r=n.length;if(0===r)return!0;for(var i=0;i<r;i+=1)if(!1===s(t[n[i]],e[n[i]],l))return!1;return!0}(t,e,l,n);var i=d(t),o=d(e);return i.length&&i.length===o.length?(i.sort(),o.sort(),h(i,o,n)):0===l.length&&0===i.length&&0===r.length&&0===o.length}(t,e,l)}}(t,e,y,n);return u(t,e,n.memoize,x),x}function h(t,e,n){var l=t.length;if(l!==e.length)return!1;if(0===l)return!0;for(var r=-1;++r<l;)if(!1===s(t[r],e[r],n))return!1;return!0}function d(t){if(function(t){return"undefined"!=typeof Symbol&&"object"==typeof t&&void 0!==Symbol.iterator&&"function"==typeof t[Symbol.iterator]}(t))try{return p(t[Symbol.iterator]())}catch(t){return[]}return[]}function p(t){for(var e=t.next(),n=[e.value];!1===e.done;)e=t.next(),n.push(e.value);return n}function f(t){var e=[];for(var n in t)e.push(n);return e}function m(t){return null===t||"object"!=typeof t}t.exports=s,t.exports.MemoizeMap=i},7643:function(t){"use strict";var e=Function.prototype.toString,n=/\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/;t.exports=function(t){if("function"!=typeof t)return null;var l="";if(void 0===Function.prototype.name&&void 0===t.name){var r=e.call(t).match(n);r&&(l=r[1])}else l=t.name;return l}},5539:function(t){"use strict";function e(t,e){return null!=t&&e in Object(t)}function n(t){return t.replace(/([^\\])\[/g,"$1.[").match(/(\\\.|[^.]+?)+/g).map((function(t){if("constructor"===t||"__proto__"===t||"prototype"===t)return{};var e=/^\[(\d+)\]$/.exec(t);return e?{i:parseFloat(e[1])}:{p:t.replace(/\\([.[\]])/g,"$1")}}))}function l(t,e,n){var l=t,r=null;n=void 0===n?e.length:n;for(var i=0;i<n;i++){var o=e[i];l&&(l=void 0===o.p?l[o.i]:l[o.p],i===n-1&&(r=l))}return r}function r(t,r){var i=n(r),o=i[i.length-1],u={parent:i.length>1?l(t,i,i.length-1):t,name:o.p||o.i,value:l(t,i)};return u.exists=e(u.parent,u.name),u}t.exports={hasProperty:e,getPathInfo:r,getPathValue:function(t,e){return r(t,e).value},setPathValue:function(t,e,l){return function(t,e,n){for(var l=t,r=n.length,i=null,o=0;o<r;o++){var u=null,s=null;if(i=n[o],o===r-1)l[u=void 0===i.p?i.i:i.p]=e;else if(void 0!==i.p&&l[i.p])l=l[i.p];else if(void 0!==i.i&&l[i.i])l=l[i.i];else{var a=n[o+1];u=void 0===i.p?i.i:i.p,s=void 0===a.p?[]:{},l[u]=s,l=l[u]}}}(t,l,n(e)),t}}},2212:function(t,e,n){"use strict";n.r(e),n.d(e,{ACESFilmicToneMapping:function(){return nt},AddEquation:function(){return E},AddOperation:function(){return Z},AdditiveAnimationBlendMode:function(){return qe},AdditiveBlending:function(){return w},AlphaFormat:function(){return Nt},AlwaysDepth:function(){return U},AlwaysStencilFunc:function(){return Sn},AmbientLight:function(){return Oh},AmbientLightProbe:function(){return td},AnimationClip:function(){return Qc},AnimationLoader:function(){return uh},AnimationMixer:function(){return Rd},AnimationObjectGroup:function(){return Cd},AnimationUtils:function(){return Hc},ArcCurve:function(){return _a},ArrayCamera:function(){return Xu},ArrowHelper:function(){return wp},Audio:function(){return hd},AudioAnalyser:function(){return vd},AudioContext:function(){return Zh},AudioListener:function(){return cd},AudioLoader:function(){return Kh},AxesHelper:function(){return _p},AxisHelper:function(){return bf},BackSide:function(){return m},BasicDepthPacking:function(){return rn},BasicShadowMap:function(){return c},BinaryTextureLoader:function(){return Ef},Bone:function(){return Os},BooleanKeyframeTrack:function(){return qc},BoundingBoxHelper:function(){return wf},Box2:function(){return jd},Box3:function(){return cl},Box3Helper:function(){return gp},BoxBufferGeometry:function(){return bi},BoxGeometry:function(){return bi},BoxHelper:function(){return mp},BufferAttribute:function(){return Ir},BufferGeometry:function(){return ti},BufferGeometryLoader:function(){return Hh},ByteType:function(){return Et},Cache:function(){return eh},Camera:function(){return Ei},CameraHelper:function(){return dp},CanvasRenderer:function(){return Af},CanvasTexture:function(){return sa},CatmullRomCurve3:function(){return La},CineonToneMapping:function(){return et},CircleBufferGeometry:function(){return ca},CircleGeometry:function(){return ca},ClampToEdgeWrapping:function(){return dt},Clock:function(){return rd},Color:function(){return Cr},ColorKeyframeTrack:function(){return Xc},CompressedTexture:function(){return ua},CompressedTextureLoader:function(){return sh},ConeBufferGeometry:function(){return da},ConeGeometry:function(){return da},CubeCamera:function(){return Li},CubeReflectionMapping:function(){return it},CubeRefractionMapping:function(){return ot},CubeTexture:function(){return Ci},CubeTextureLoader:function(){return ch},CubeUVReflectionMapping:function(){return at},CubeUVRefractionMapping:function(){return ct},CubicBezierCurve:function(){return Oa},CubicBezierCurve3:function(){return Ia},CubicInterpolant:function(){return Uc},CullFaceBack:function(){return u},CullFaceFront:function(){return s},CullFaceFrontBack:function(){return a},CullFaceNone:function(){return o},Curve:function(){return ba},CurvePath:function(){return ph},CustomBlending:function(){return S},CustomToneMapping:function(){return lt},CylinderBufferGeometry:function(){return ha},CylinderGeometry:function(){return ha},Cylindrical:function(){return zd},DataTexture:function(){return Is},DataTexture2DArray:function(){return ro},DataTexture3D:function(){return io},DataTextureLoader:function(){return hh},DataUtils:function(){return Ep},DecrementStencilOp:function(){return pn},DecrementWrapStencilOp:function(){return mn},DefaultLoadingManager:function(){return lh},DepthFormat:function(){return Ut},DepthStencilFormat:function(){return Gt},DepthTexture:function(){return aa},DirectionalLight:function(){return Rh},DirectionalLightHelper:function(){return ap},DiscreteInterpolant:function(){return Vc},DodecahedronBufferGeometry:function(){return fa},DodecahedronGeometry:function(){return fa},DoubleSide:function(){return g},DstAlphaFactor:function(){return N},DstColorFactor:function(){return F},DynamicBufferAttribute:function(){return cf},DynamicCopyUsage:function(){return On},DynamicDrawUsage:function(){return Tn},DynamicReadUsage:function(){return Cn},EdgesGeometry:function(){return xa},EdgesHelper:function(){return _f},EllipseCurve:function(){return wa},EqualDepth:function(){return W},EqualStencilFunc:function(){return xn},EquirectangularReflectionMapping:function(){return ut},EquirectangularRefractionMapping:function(){return st},Euler:function(){return Yl},EventDispatcher:function(){return Nn},ExtrudeBufferGeometry:function(){return pc},ExtrudeGeometry:function(){return pc},FaceColors:function(){return Kp},FileLoader:function(){return oh},FlatShading:function(){return v},Float16BufferAttribute:function(){return jr},Float32Attribute:function(){return yf},Float32BufferAttribute:function(){return Ur},Float64Attribute:function(){return xf},Float64BufferAttribute:function(){return Gr},FloatType:function(){return Pt},Fog:function(){return ns},FogExp2:function(){return es},Font:function(){return Xh},FontLoader:function(){return $h},FrontSide:function(){return f},Frustum:function(){return Bi},GLBufferAttribute:function(){return Dd},GLSL1:function(){return Dn},GLSL3:function(){return kn},GammaEncoding:function(){return Ke},GreaterDepth:function(){return X},GreaterEqualDepth:function(){return q},GreaterEqualStencilFunc:function(){return Mn},GreaterStencilFunc:function(){return wn},GridHelper:function(){return rp},Group:function(){return Yu},HalfFloatType:function(){return Rt},HemisphereLight:function(){return vh},HemisphereLightHelper:function(){return lp},HemisphereLightProbe:function(){return Qh},IcosahedronBufferGeometry:function(){return mc},IcosahedronGeometry:function(){return mc},ImageBitmapLoader:function(){return Wh},ImageLoader:function(){return ah},ImageUtils:function(){return Kn},ImmediateRenderObject:function(){return Wd},IncrementStencilOp:function(){return dn},IncrementWrapStencilOp:function(){return fn},InstancedBufferAttribute:function(){return zh},InstancedBufferGeometry:function(){return Fh},InstancedInterleavedBuffer:function(){return Id},InstancedMesh:function(){return js},Int16Attribute:function(){return ff},Int16BufferAttribute:function(){return Br},Int32Attribute:function(){return gf},Int32BufferAttribute:function(){return zr},Int8Attribute:function(){return hf},Int8BufferAttribute:function(){return Dr},IntType:function(){return Lt},InterleavedBuffer:function(){return rs},InterleavedBufferAttribute:function(){return os},Interpolant:function(){return jc},InterpolateDiscrete:function(){return ze},InterpolateLinear:function(){return He},InterpolateSmooth:function(){return je},InvertStencilOp:function(){return gn},JSONLoader:function(){return Lf},KeepStencilOp:function(){return cn},KeyframeTrack:function(){return Wc},LOD:function(){return Es},LatheBufferGeometry:function(){return gc},LatheGeometry:function(){return gc},Layers:function(){return $l},LensFlare:function(){return Pf},LessDepth:function(){return G},LessEqualDepth:function(){return V},LessEqualStencilFunc:function(){return bn},LessStencilFunc:function(){return yn},Light:function(){return gh},LightProbe:function(){return kh},Line:function(){return Ys},Line3:function(){return Vd},LineBasicMaterial:function(){return Us},LineCurve:function(){return Da},LineCurve3:function(){return ka},LineDashedMaterial:function(){return Fc},LineLoop:function(){return Ks},LinePieces:function(){return Jp},LineSegments:function(){return Zs},LineStrip:function(){return $p},LinearEncoding:function(){return Je},LinearFilter:function(){return xt},LinearInterpolant:function(){return Gc},LinearMipMapLinearFilter:function(){return Mt},LinearMipMapNearestFilter:function(){return wt},LinearMipmapLinearFilter:function(){return _t},LinearMipmapNearestFilter:function(){return bt},LinearToneMapping:function(){return Q},Loader:function(){return rh},LoaderUtils:function(){return Bh},LoadingManager:function(){return nh},LogLuvEncoding:function(){return tn},LoopOnce:function(){return Ne},LoopPingPong:function(){return Fe},LoopRepeat:function(){return Be},LuminanceAlphaFormat:function(){return Ht},LuminanceFormat:function(){return zt},MOUSE:function(){return r},Material:function(){return _r},MaterialLoader:function(){return Nh},Math:function(){return Yn},MathUtils:function(){return Yn},Matrix3:function(){return Jn},Matrix4:function(){return Fl},MaxEquation:function(){return C},Mesh:function(){return yi},MeshBasicMaterial:function(){return Pr},MeshDepthMaterial:function(){return ju},MeshDistanceMaterial:function(){return Uu},MeshFaceMaterial:function(){return tf},MeshLambertMaterial:function(){return Nc},MeshMatcapMaterial:function(){return Bc},MeshNormalMaterial:function(){return kc},MeshPhongMaterial:function(){return Ic},MeshPhysicalMaterial:function(){return Oc},MeshStandardMaterial:function(){return Rc},MeshToonMaterial:function(){return Dc},MinEquation:function(){return L},MirroredRepeatWrapping:function(){return pt},MixOperation:function(){return J},MultiMaterial:function(){return ef},MultiplyBlending:function(){return M},MultiplyOperation:function(){return $},NearestFilter:function(){return ft},NearestMipMapLinearFilter:function(){return yt},NearestMipMapNearestFilter:function(){return gt},NearestMipmapLinearFilter:function(){return vt},NearestMipmapNearestFilter:function(){return mt},NeverDepth:function(){return j},NeverStencilFunc:function(){return vn},NoBlending:function(){return x},NoColors:function(){return Zp},NoToneMapping:function(){return K},NormalAnimationBlendMode:function(){return We},NormalBlending:function(){return b},NotEqualDepth:function(){return Y},NotEqualStencilFunc:function(){return _n},NumberKeyframeTrack:function(){return Yc},Object3D:function(){return ar},ObjectLoader:function(){return jh},ObjectSpaceNormalMap:function(){return sn},OctahedronBufferGeometry:function(){return vc},OctahedronGeometry:function(){return vc},OneFactor:function(){return R},OneMinusDstAlphaFactor:function(){return B},OneMinusDstColorFactor:function(){return z},OneMinusSrcAlphaFactor:function(){return k},OneMinusSrcColorFactor:function(){return I},OrthographicCamera:function(){return Ch},PCFShadowMap:function(){return h},PCFSoftShadowMap:function(){return d},PMREMGenerator:function(){return Up},ParametricBufferGeometry:function(){return yc},ParametricGeometry:function(){return yc},Particle:function(){return lf},ParticleBasicMaterial:function(){return uf},ParticleSystem:function(){return rf},ParticleSystemMaterial:function(){return sf},Path:function(){return fh},PerspectiveCamera:function(){return Ti},Plane:function(){return Di},PlaneBufferGeometry:function(){return Hi},PlaneGeometry:function(){return Hi},PlaneHelper:function(){return vp},PointCloud:function(){return nf},PointCloudMaterial:function(){return of},PointLight:function(){return Lh},PointLightHelper:function(){return Qd},Points:function(){return ra},PointsMaterial:function(){return Qs},PolarGridHelper:function(){return ip},PolyhedronBufferGeometry:function(){return pa},PolyhedronGeometry:function(){return pa},PositionalAudio:function(){return gd},PropertyBinding:function(){return Ld},PropertyMixer:function(){return yd},QuadraticBezierCurve:function(){return Na},QuadraticBezierCurve3:function(){return Ba},Quaternion:function(){return ol},QuaternionKeyframeTrack:function(){return Jc},QuaternionLinearInterpolant:function(){return $c},REVISION:function(){return l},RGBADepthPacking:function(){return on},RGBAFormat:function(){return Ft},RGBAIntegerFormat:function(){return $t},RGBA_ASTC_10x10_Format:function(){return ye},RGBA_ASTC_10x5_Format:function(){return me},RGBA_ASTC_10x6_Format:function(){return ge},RGBA_ASTC_10x8_Format:function(){return ve},RGBA_ASTC_12x10_Format:function(){return xe},RGBA_ASTC_12x12_Format:function(){return be},RGBA_ASTC_4x4_Format:function(){return ue},RGBA_ASTC_5x4_Format:function(){return se},RGBA_ASTC_5x5_Format:function(){return ae},RGBA_ASTC_6x5_Format:function(){return ce},RGBA_ASTC_6x6_Format:function(){return he},RGBA_ASTC_8x5_Format:function(){return de},RGBA_ASTC_8x6_Format:function(){return pe},RGBA_ASTC_8x8_Format:function(){return fe},RGBA_BPTC_Format:function(){return we},RGBA_ETC2_EAC_Format:function(){return oe},RGBA_PVRTC_2BPPV1_Format:function(){return le},RGBA_PVRTC_4BPPV1_Format:function(){return ne},RGBA_S3TC_DXT1_Format:function(){return Zt},RGBA_S3TC_DXT3_Format:function(){return Kt},RGBA_S3TC_DXT5_Format:function(){return Qt},RGBDEncoding:function(){return ln},RGBEEncoding:function(){return Qe},RGBEFormat:function(){return jt},RGBFormat:function(){return Bt},RGBIntegerFormat:function(){return Yt},RGBM16Encoding:function(){return nn},RGBM7Encoding:function(){return en},RGB_ETC1_Format:function(){return re},RGB_ETC2_Format:function(){return ie},RGB_PVRTC_2BPPV1_Format:function(){return ee},RGB_PVRTC_4BPPV1_Format:function(){return te},RGB_S3TC_DXT1_Format:function(){return Jt},RGFormat:function(){return qt},RGIntegerFormat:function(){return Xt},RawShaderMaterial:function(){return Pc},Ray:function(){return Bl},Raycaster:function(){return kd},RectAreaLight:function(){return Ih},RedFormat:function(){return Vt},RedIntegerFormat:function(){return Wt},ReinhardToneMapping:function(){return tt},RepeatWrapping:function(){return ht},ReplaceStencilOp:function(){return hn},ReverseSubtractEquation:function(){return A},RingBufferGeometry:function(){return xc},RingGeometry:function(){return xc},SRGB8_ALPHA8_ASTC_10x10_Format:function(){return Ie},SRGB8_ALPHA8_ASTC_10x5_Format:function(){return Pe},SRGB8_ALPHA8_ASTC_10x6_Format:function(){return Re},SRGB8_ALPHA8_ASTC_10x8_Format:function(){return Oe},SRGB8_ALPHA8_ASTC_12x10_Format:function(){return De},SRGB8_ALPHA8_ASTC_12x12_Format:function(){return ke},SRGB8_ALPHA8_ASTC_4x4_Format:function(){return _e},SRGB8_ALPHA8_ASTC_5x4_Format:function(){return Me},SRGB8_ALPHA8_ASTC_5x5_Format:function(){return Se},SRGB8_ALPHA8_ASTC_6x5_Format:function(){return Ee},SRGB8_ALPHA8_ASTC_6x6_Format:function(){return Te},SRGB8_ALPHA8_ASTC_8x5_Format:function(){return Ae},SRGB8_ALPHA8_ASTC_8x6_Format:function(){return Le},SRGB8_ALPHA8_ASTC_8x8_Format:function(){return Ce},Scene:function(){return ls},SceneUtils:function(){return Cf},ShaderChunk:function(){return ji},ShaderLib:function(){return Gi},ShaderMaterial:function(){return Si},ShadowMaterial:function(){return Cc},Shape:function(){return mh},ShapeBufferGeometry:function(){return bc},ShapeGeometry:function(){return bc},ShapePath:function(){return qh},ShapeUtils:function(){return cc},ShortType:function(){return Tt},Skeleton:function(){return Ns},SkeletonHelper:function(){return Zd},SkinnedMesh:function(){return Rs},SmoothShading:function(){return y},Sphere:function(){return Cl},SphereBufferGeometry:function(){return wc},SphereGeometry:function(){return wc},Spherical:function(){return Fd},SphericalHarmonics3:function(){return Dh},SplineCurve:function(){return Fa},SpotLight:function(){return Mh},SpotLightHelper:function(){return Xd},Sprite:function(){return ws},SpriteMaterial:function(){return us},SrcAlphaFactor:function(){return D},SrcAlphaSaturateFactor:function(){return H},SrcColorFactor:function(){return O},StaticCopyUsage:function(){return Rn},StaticDrawUsage:function(){return En},StaticReadUsage:function(){return Ln},StereoCamera:function(){return ld},StreamCopyUsage:function(){return In},StreamDrawUsage:function(){return An},StreamReadUsage:function(){return Pn},StringKeyframeTrack:function(){return Zc},SubtractEquation:function(){return T},SubtractiveBlending:function(){return _},TOUCH:function(){return i},TangentSpaceNormalMap:function(){return un},TetrahedronBufferGeometry:function(){return _c},TetrahedronGeometry:function(){return _c},TextBufferGeometry:function(){return Mc},TextGeometry:function(){return Mc},Texture:function(){return tl},TextureLoader:function(){return dh},TorusBufferGeometry:function(){return Sc},TorusGeometry:function(){return Sc},TorusKnotBufferGeometry:function(){return Ec},TorusKnotGeometry:function(){return Ec},Triangle:function(){return br},TriangleFanDrawMode:function(){return $e},TriangleStripDrawMode:function(){return Ye},TrianglesDrawMode:function(){return Xe},TubeBufferGeometry:function(){return Tc},TubeGeometry:function(){return Tc},UVMapping:function(){return rt},Uint16Attribute:function(){return mf},Uint16BufferAttribute:function(){return Fr},Uint32Attribute:function(){return vf},Uint32BufferAttribute:function(){return Hr},Uint8Attribute:function(){return df},Uint8BufferAttribute:function(){return kr},Uint8ClampedAttribute:function(){return pf},Uint8ClampedBufferAttribute:function(){return Nr},Uniform:function(){return Od},UniformsLib:function(){return Ui},UniformsUtils:function(){return Mi},UnsignedByteType:function(){return St},UnsignedInt248Type:function(){return kt},UnsignedIntType:function(){return Ct},UnsignedShort4444Type:function(){return Ot},UnsignedShort5551Type:function(){return It},UnsignedShort565Type:function(){return Dt},UnsignedShortType:function(){return At},VSMShadowMap:function(){return p},Vector2:function(){return $n},Vector3:function(){return ul},Vector4:function(){return nl},VectorKeyframeTrack:function(){return Kc},Vertex:function(){return af},VertexColors:function(){return Qp},VideoTexture:function(){return oa},WebGL1Renderer:function(){return ts},WebGLCubeRenderTarget:function(){return Pi},WebGLMultipleRenderTargets:function(){return rl},WebGLMultisampleRenderTarget:function(){return il},WebGLRenderTarget:function(){return ll},WebGLRenderTargetCube:function(){return Tf},WebGLRenderer:function(){return Qu},WebGLUtils:function(){return qu},WireframeGeometry:function(){return Ac},WireframeHelper:function(){return Mf},WrapAroundEnding:function(){return Ve},XHRLoader:function(){return Sf},ZeroCurvatureEnding:function(){return Ue},ZeroFactor:function(){return P},ZeroSlopeEnding:function(){return Ge},ZeroStencilOp:function(){return an},sRGBEncoding:function(){return Ze}});const l="130",r={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},i={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},o=0,u=1,s=2,a=3,c=0,h=1,d=2,p=3,f=0,m=1,g=2,v=1,y=2,x=0,b=1,w=2,_=3,M=4,S=5,E=100,T=101,A=102,L=103,C=104,P=200,R=201,O=202,I=203,D=204,k=205,N=206,B=207,F=208,z=209,H=210,j=0,U=1,G=2,V=3,W=4,q=5,X=6,Y=7,$=0,J=1,Z=2,K=0,Q=1,tt=2,et=3,nt=4,lt=5,rt=300,it=301,ot=302,ut=303,st=304,at=306,ct=307,ht=1e3,dt=1001,pt=1002,ft=1003,mt=1004,gt=1004,vt=1005,yt=1005,xt=1006,bt=1007,wt=1007,_t=1008,Mt=1008,St=1009,Et=1010,Tt=1011,At=1012,Lt=1013,Ct=1014,Pt=1015,Rt=1016,Ot=1017,It=1018,Dt=1019,kt=1020,Nt=1021,Bt=1022,Ft=1023,zt=1024,Ht=1025,jt=Ft,Ut=1026,Gt=1027,Vt=1028,Wt=1029,qt=1030,Xt=1031,Yt=1032,$t=1033,Jt=33776,Zt=33777,Kt=33778,Qt=33779,te=35840,ee=35841,ne=35842,le=35843,re=36196,ie=37492,oe=37496,ue=37808,se=37809,ae=37810,ce=37811,he=37812,de=37813,pe=37814,fe=37815,me=37816,ge=37817,ve=37818,ye=37819,xe=37820,be=37821,we=36492,_e=37840,Me=37841,Se=37842,Ee=37843,Te=37844,Ae=37845,Le=37846,Ce=37847,Pe=37848,Re=37849,Oe=37850,Ie=37851,De=37852,ke=37853,Ne=2200,Be=2201,Fe=2202,ze=2300,He=2301,je=2302,Ue=2400,Ge=2401,Ve=2402,We=2500,qe=2501,Xe=0,Ye=1,$e=2,Je=3e3,Ze=3001,Ke=3007,Qe=3002,tn=3003,en=3004,nn=3005,ln=3006,rn=3200,on=3201,un=0,sn=1,an=0,cn=7680,hn=7681,dn=7682,pn=7683,fn=34055,mn=34056,gn=5386,vn=512,yn=513,xn=514,bn=515,wn=516,_n=517,Mn=518,Sn=519,En=35044,Tn=35048,An=35040,Ln=35045,Cn=35049,Pn=35041,Rn=35046,On=35050,In=35042,Dn="100",kn="300 es";class Nn{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)}hasEventListener(t,e){if(void 0===this._listeners)return!1;const n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)}removeEventListener(t,e){if(void 0===this._listeners)return;const n=this._listeners[t];if(void 0!==n){const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}dispatchEvent(t){if(void 0===this._listeners)return;const e=this._listeners[t.type];if(void 0!==e){t.target=this;const n=e.slice(0);for(let e=0,l=n.length;e<l;e++)n[e].call(this,t);t.target=null}}}const Bn=[];for(let t=0;t<256;t++)Bn[t]=(t<16?"0":"")+t.toString(16);let Fn=1234567;const zn=Math.PI/180,Hn=180/Math.PI;function jn(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,l=4294967295*Math.random()|0;return(Bn[255&t]+Bn[t>>8&255]+Bn[t>>16&255]+Bn[t>>24&255]+"-"+Bn[255&e]+Bn[e>>8&255]+"-"+Bn[e>>16&15|64]+Bn[e>>24&255]+"-"+Bn[63&n|128]+Bn[n>>8&255]+"-"+Bn[n>>16&255]+Bn[n>>24&255]+Bn[255&l]+Bn[l>>8&255]+Bn[l>>16&255]+Bn[l>>24&255]).toUpperCase()}function Un(t,e,n){return Math.max(e,Math.min(n,t))}function Gn(t,e){return(t%e+e)%e}function Vn(t,e,n){return(1-n)*t+n*e}function Wn(t){return 0==(t&t-1)&&0!==t}function qn(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))}function Xn(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}var Yn=Object.freeze({__proto__:null,DEG2RAD:zn,RAD2DEG:Hn,generateUUID:jn,clamp:Un,euclideanModulo:Gn,mapLinear:function(t,e,n,l,r){return l+(t-e)*(r-l)/(n-e)},inverseLerp:function(t,e,n){return t!==e?(n-t)/(e-t):0},lerp:Vn,damp:function(t,e,n,l){return Vn(t,e,1-Math.exp(-n*l))},pingpong:function(t,e=1){return e-Math.abs(Gn(t,2*e)-e)},smoothstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*(3-2*t)},smootherstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},seededRandom:function(t){return void 0!==t&&(Fn=t%2147483647),Fn=16807*Fn%2147483647,(Fn-1)/2147483646},degToRad:function(t){return t*zn},radToDeg:function(t){return t*Hn},isPowerOfTwo:Wn,ceilPowerOfTwo:qn,floorPowerOfTwo:Xn,setQuaternionFromProperEuler:function(t,e,n,l,r){const i=Math.cos,o=Math.sin,u=i(n/2),s=o(n/2),a=i((e+l)/2),c=o((e+l)/2),h=i((e-l)/2),d=o((e-l)/2),p=i((l-e)/2),f=o((l-e)/2);switch(r){case"XYX":t.set(u*c,s*h,s*d,u*a);break;case"YZY":t.set(s*d,u*c,s*h,u*a);break;case"ZXZ":t.set(s*h,s*d,u*c,u*a);break;case"XZX":t.set(u*c,s*f,s*p,u*a);break;case"YXY":t.set(s*p,u*c,s*f,u*a);break;case"ZYZ":t.set(s*f,s*p,u*c,u*a);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+r)}}});class $n{constructor(t=0,e=0){this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,l=t.elements;return this.x=l[0]*e+l[3]*n+l[6],this.y=l[1]*e+l[4]*n+l[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),l=Math.sin(e),r=this.x-t.x,i=this.y-t.y;return this.x=r*n-i*l+t.x,this.y=r*l+i*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}}$n.prototype.isVector2=!0;class Jn{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(t,e,n,l,r,i,o,u,s){const a=this.elements;return a[0]=t,a[1]=l,a[2]=o,a[3]=e,a[4]=r,a[5]=u,a[6]=n,a[7]=i,a[8]=s,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,l=e.elements,r=this.elements,i=n[0],o=n[3],u=n[6],s=n[1],a=n[4],c=n[7],h=n[2],d=n[5],p=n[8],f=l[0],m=l[3],g=l[6],v=l[1],y=l[4],x=l[7],b=l[2],w=l[5],_=l[8];return r[0]=i*f+o*v+u*b,r[3]=i*m+o*y+u*w,r[6]=i*g+o*x+u*_,r[1]=s*f+a*v+c*b,r[4]=s*m+a*y+c*w,r[7]=s*g+a*x+c*_,r[2]=h*f+d*v+p*b,r[5]=h*m+d*y+p*w,r[8]=h*g+d*x+p*_,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],l=t[2],r=t[3],i=t[4],o=t[5],u=t[6],s=t[7],a=t[8];return e*i*a-e*o*s-n*r*a+n*o*u+l*r*s-l*i*u}invert(){const t=this.elements,e=t[0],n=t[1],l=t[2],r=t[3],i=t[4],o=t[5],u=t[6],s=t[7],a=t[8],c=a*i-o*s,h=o*u-a*r,d=s*r-i*u,p=e*c+n*h+l*d;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);const f=1/p;return t[0]=c*f,t[1]=(l*s-a*n)*f,t[2]=(o*n-l*i)*f,t[3]=h*f,t[4]=(a*e-l*u)*f,t[5]=(l*r-o*e)*f,t[6]=d*f,t[7]=(n*u-s*e)*f,t[8]=(i*e-n*r)*f,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,l,r,i,o){const u=Math.cos(r),s=Math.sin(r);return this.set(n*u,n*s,-n*(u*i+s*o)+i+t,-l*s,l*u,-l*(-s*i+u*o)+o+e,0,0,1),this}scale(t,e){const n=this.elements;return n[0]*=t,n[3]*=t,n[6]*=t,n[1]*=e,n[4]*=e,n[7]*=e,this}rotate(t){const e=Math.cos(t),n=Math.sin(t),l=this.elements,r=l[0],i=l[3],o=l[6],u=l[1],s=l[4],a=l[7];return l[0]=e*r+n*u,l[3]=e*i+n*s,l[6]=e*o+n*a,l[1]=-n*r+e*u,l[4]=-n*i+e*s,l[7]=-n*o+e*a,this}translate(t,e){const n=this.elements;return n[0]+=t*n[2],n[3]+=t*n[5],n[6]+=t*n[8],n[1]+=e*n[2],n[4]+=e*n[5],n[7]+=e*n[8],this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<9;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return(new this.constructor).fromArray(this.elements)}}let Zn;Jn.prototype.isMatrix3=!0;class Kn{static getDataURL(t){if(/^data:/i.test(t.src))return t.src;if("undefined"==typeof HTMLCanvasElement)return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{void 0===Zn&&(Zn=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),Zn.width=t.width,Zn.height=t.height;const n=Zn.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=Zn}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}}let Qn=0;class tl extends Nn{constructor(t=tl.DEFAULT_IMAGE,e=tl.DEFAULT_MAPPING,n=dt,l=dt,r=xt,i=_t,o=Ft,u=St,s=1,a=Je){super(),Object.defineProperty(this,"id",{value:Qn++}),this.uuid=jn(),this.name="",this.image=t,this.mipmaps=[],this.mapping=e,this.wrapS=n,this.wrapT=l,this.magFilter=r,this.minFilter=i,this.anisotropy=s,this.format=o,this.internalFormat=null,this.type=u,this.offset=new $n(0,0),this.repeat=new $n(1,1),this.center=new $n(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Jn,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=a,this.version=0,this.onUpdate=null}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){return this.name=t.name,this.image=t.image,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){const l=this.image;if(void 0===l.uuid&&(l.uuid=jn()),!e&&void 0===t.images[l.uuid]){let e;if(Array.isArray(l)){e=[];for(let t=0,n=l.length;t<n;t++)l[t].isDataTexture?e.push(el(l[t].image)):e.push(el(l[t]))}else e=el(l);t.images[l.uuid]={uuid:l.uuid,url:e}}n.image=l.uuid}return e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==rt)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case ht:t.x=t.x-Math.floor(t.x);break;case dt:t.x=t.x<0?0:1;break;case pt:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case ht:t.y=t.y-Math.floor(t.y);break;case dt:t.y=t.y<0?0:1;break;case pt:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&this.version++}}function el(t){return"undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap?Kn.getDataURL(t):t.data?{data:Array.prototype.slice.call(t.data),width:t.width,height:t.height,type:t.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}tl.DEFAULT_IMAGE=void 0,tl.DEFAULT_MAPPING=rt,tl.prototype.isTexture=!0;class nl{constructor(t=0,e=0,n=0,l=1){this.x=t,this.y=e,this.z=n,this.w=l}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,l){return this.x=t,this.y=e,this.z=n,this.w=l,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,l=this.z,r=this.w,i=t.elements;return this.x=i[0]*e+i[4]*n+i[8]*l+i[12]*r,this.y=i[1]*e+i[5]*n+i[9]*l+i[13]*r,this.z=i[2]*e+i[6]*n+i[10]*l+i[14]*r,this.w=i[3]*e+i[7]*n+i[11]*l+i[15]*r,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,l,r;const i=.01,o=.1,u=t.elements,s=u[0],a=u[4],c=u[8],h=u[1],d=u[5],p=u[9],f=u[2],m=u[6],g=u[10];if(Math.abs(a-h)<i&&Math.abs(c-f)<i&&Math.abs(p-m)<i){if(Math.abs(a+h)<o&&Math.abs(c+f)<o&&Math.abs(p+m)<o&&Math.abs(s+d+g-3)<o)return this.set(1,0,0,0),this;e=Math.PI;const t=(s+1)/2,u=(d+1)/2,v=(g+1)/2,y=(a+h)/4,x=(c+f)/4,b=(p+m)/4;return t>u&&t>v?t<i?(n=0,l=.707106781,r=.707106781):(n=Math.sqrt(t),l=y/n,r=x/n):u>v?u<i?(n=.707106781,l=0,r=.707106781):(l=Math.sqrt(u),n=y/l,r=b/l):v<i?(n=.707106781,l=.707106781,r=0):(r=Math.sqrt(v),n=x/r,l=b/r),this.set(n,l,r,e),this}let v=Math.sqrt((m-p)*(m-p)+(c-f)*(c-f)+(h-a)*(h-a));return Math.abs(v)<.001&&(v=1),this.x=(m-p)/v,this.y=(c-f)/v,this.z=(h-a)/v,this.w=Math.acos((s+d+g-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}}nl.prototype.isVector4=!0;class ll extends Nn{constructor(t,e,n={}){super(),this.width=t,this.height=e,this.depth=1,this.scissor=new nl(0,0,t,e),this.scissorTest=!1,this.viewport=new nl(0,0,t,e),this.texture=new tl(void 0,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.image={width:t,height:e,depth:1},this.texture.generateMipmaps=void 0!==n.generateMipmaps&&n.generateMipmaps,this.texture.minFilter=void 0!==n.minFilter?n.minFilter:xt,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0!==n.stencilBuffer&&n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null}setTexture(t){t.image={width:this.width,height:this.height,depth:this.depth},this.texture=t}setSize(t,e,n=1){this.width===t&&this.height===e&&this.depth===n||(this.width=t,this.height=e,this.depth=n,this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.texture.image={...this.texture.image},this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this}dispose(){this.dispatchEvent({type:"dispose"})}}ll.prototype.isWebGLRenderTarget=!0;class rl extends ll{constructor(t,e,n){super(t,e);const l=this.texture;this.texture=[];for(let t=0;t<n;t++)this.texture[t]=l.clone()}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let l=0,r=this.texture.length;l<r;l++)this.texture[l].image.width=t,this.texture[l].image.height=e,this.texture[l].image.depth=n;this.dispose()}return this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e),this}copy(t){this.dispose(),this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this.texture.length=0;for(let e=0,n=t.texture.length;e<n;e++)this.texture[e]=t.texture[e].clone();return this}}rl.prototype.isWebGLMultipleRenderTargets=!0;class il extends ll{constructor(t,e,n){super(t,e,n),this.samples=4}copy(t){return super.copy.call(this,t),this.samples=t.samples,this}}il.prototype.isWebGLMultisampleRenderTarget=!0;class ol{constructor(t=0,e=0,n=0,l=1){this._x=t,this._y=e,this._z=n,this._w=l}static slerp(t,e,n,l){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),n.slerpQuaternions(t,e,l)}static slerpFlat(t,e,n,l,r,i,o){let u=n[l+0],s=n[l+1],a=n[l+2],c=n[l+3];const h=r[i+0],d=r[i+1],p=r[i+2],f=r[i+3];if(0===o)return t[e+0]=u,t[e+1]=s,t[e+2]=a,void(t[e+3]=c);if(1===o)return t[e+0]=h,t[e+1]=d,t[e+2]=p,void(t[e+3]=f);if(c!==f||u!==h||s!==d||a!==p){let t=1-o;const e=u*h+s*d+a*p+c*f,n=e>=0?1:-1,l=1-e*e;if(l>Number.EPSILON){const r=Math.sqrt(l),i=Math.atan2(r,e*n);t=Math.sin(t*i)/r,o=Math.sin(o*i)/r}const r=o*n;if(u=u*t+h*r,s=s*t+d*r,a=a*t+p*r,c=c*t+f*r,t===1-o){const t=1/Math.sqrt(u*u+s*s+a*a+c*c);u*=t,s*=t,a*=t,c*=t}}t[e]=u,t[e+1]=s,t[e+2]=a,t[e+3]=c}static multiplyQuaternionsFlat(t,e,n,l,r,i){const o=n[l],u=n[l+1],s=n[l+2],a=n[l+3],c=r[i],h=r[i+1],d=r[i+2],p=r[i+3];return t[e]=o*p+a*c+u*d-s*h,t[e+1]=u*p+a*h+s*c-o*d,t[e+2]=s*p+a*d+o*h-u*c,t[e+3]=a*p-o*c-u*h-s*d,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,l){return this._x=t,this._y=e,this._z=n,this._w=l,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e){if(!t||!t.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const n=t._x,l=t._y,r=t._z,i=t._order,o=Math.cos,u=Math.sin,s=o(n/2),a=o(l/2),c=o(r/2),h=u(n/2),d=u(l/2),p=u(r/2);switch(i){case"XYZ":this._x=h*a*c+s*d*p,this._y=s*d*c-h*a*p,this._z=s*a*p+h*d*c,this._w=s*a*c-h*d*p;break;case"YXZ":this._x=h*a*c+s*d*p,this._y=s*d*c-h*a*p,this._z=s*a*p-h*d*c,this._w=s*a*c+h*d*p;break;case"ZXY":this._x=h*a*c-s*d*p,this._y=s*d*c+h*a*p,this._z=s*a*p+h*d*c,this._w=s*a*c-h*d*p;break;case"ZYX":this._x=h*a*c-s*d*p,this._y=s*d*c+h*a*p,this._z=s*a*p-h*d*c,this._w=s*a*c+h*d*p;break;case"YZX":this._x=h*a*c+s*d*p,this._y=s*d*c+h*a*p,this._z=s*a*p-h*d*c,this._w=s*a*c-h*d*p;break;case"XZY":this._x=h*a*c-s*d*p,this._y=s*d*c-h*a*p,this._z=s*a*p+h*d*c,this._w=s*a*c+h*d*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+i)}return!1!==e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,l=Math.sin(n);return this._x=t.x*l,this._y=t.y*l,this._z=t.z*l,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],l=e[4],r=e[8],i=e[1],o=e[5],u=e[9],s=e[2],a=e[6],c=e[10],h=n+o+c;if(h>0){const t=.5/Math.sqrt(h+1);this._w=.25/t,this._x=(a-u)*t,this._y=(r-s)*t,this._z=(i-l)*t}else if(n>o&&n>c){const t=2*Math.sqrt(1+n-o-c);this._w=(a-u)/t,this._x=.25*t,this._y=(l+i)/t,this._z=(r+s)/t}else if(o>c){const t=2*Math.sqrt(1+o-n-c);this._w=(r-s)/t,this._x=(l+i)/t,this._y=.25*t,this._z=(u+a)/t}else{const t=2*Math.sqrt(1+c-n-o);this._w=(i-l)/t,this._x=(r+s)/t,this._y=(u+a)/t,this._z=.25*t}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(Un(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(0===n)return this;const l=Math.min(1,e/n);return this.slerp(t,l),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t,e){return void 0!==e?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,l=t._y,r=t._z,i=t._w,o=e._x,u=e._y,s=e._z,a=e._w;return this._x=n*a+i*o+l*s-r*u,this._y=l*a+i*u+r*o-n*s,this._z=r*a+i*s+n*u-l*o,this._w=i*a-n*o-l*u-r*s,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const n=this._x,l=this._y,r=this._z,i=this._w;let o=i*t._w+n*t._x+l*t._y+r*t._z;if(o<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,o=-o):this.copy(t),o>=1)return this._w=i,this._x=n,this._y=l,this._z=r,this;const u=1-o*o;if(u<=Number.EPSILON){const t=1-e;return this._w=t*i+e*this._w,this._x=t*n+e*this._x,this._y=t*l+e*this._y,this._z=t*r+e*this._z,this.normalize(),this._onChangeCallback(),this}const s=Math.sqrt(u),a=Math.atan2(s,o),c=Math.sin((1-e)*a)/s,h=Math.sin(e*a)/s;return this._w=i*c+this._w*h,this._x=n*c+this._x*h,this._y=l*c+this._y*h,this._z=r*c+this._z*h,this._onChangeCallback(),this}slerpQuaternions(t,e,n){this.copy(t).slerp(e,n)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}ol.prototype.isQuaternion=!0;class ul{constructor(t=0,e=0,n=0){this.x=t,this.y=e,this.z=n}set(t,e,n){return void 0===n&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t,e){return void 0!==e?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return t&&t.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(al.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(al.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,l=this.z,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6]*l,this.y=r[1]*e+r[4]*n+r[7]*l,this.z=r[2]*e+r[5]*n+r[8]*l,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,l=this.z,r=t.elements,i=1/(r[3]*e+r[7]*n+r[11]*l+r[15]);return this.x=(r[0]*e+r[4]*n+r[8]*l+r[12])*i,this.y=(r[1]*e+r[5]*n+r[9]*l+r[13])*i,this.z=(r[2]*e+r[6]*n+r[10]*l+r[14])*i,this}applyQuaternion(t){const e=this.x,n=this.y,l=this.z,r=t.x,i=t.y,o=t.z,u=t.w,s=u*e+i*l-o*n,a=u*n+o*e-r*l,c=u*l+r*n-i*e,h=-r*e-i*n-o*l;return this.x=s*u+h*-r+a*-o-c*-i,this.y=a*u+h*-i+c*-r-s*-o,this.z=c*u+h*-o+s*-i-a*-r,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,l=this.z,r=t.elements;return this.x=r[0]*e+r[4]*n+r[8]*l,this.y=r[1]*e+r[5]*n+r[9]*l,this.z=r[2]*e+r[6]*n+r[10]*l,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t,e){return void 0!==e?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e)):this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,l=t.y,r=t.z,i=e.x,o=e.y,u=e.z;return this.x=l*u-r*o,this.y=r*i-n*u,this.z=n*o-l*i,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return sl.copy(this).projectOnVector(t),this.sub(sl)}reflect(t){return this.sub(sl.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(Un(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,l=this.z-t.z;return e*e+n*n+l*l}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const l=Math.sin(e)*t;return this.x=l*Math.sin(n),this.y=Math.cos(e)*t,this.z=l*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),l=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=l,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}}ul.prototype.isVector3=!0;const sl=new ul,al=new ol;class cl{constructor(t=new ul(1/0,1/0,1/0),e=new ul(-1/0,-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){let e=1/0,n=1/0,l=1/0,r=-1/0,i=-1/0,o=-1/0;for(let u=0,s=t.length;u<s;u+=3){const s=t[u],a=t[u+1],c=t[u+2];s<e&&(e=s),a<n&&(n=a),c<l&&(l=c),s>r&&(r=s),a>i&&(i=a),c>o&&(o=c)}return this.min.set(e,n,l),this.max.set(r,i,o),this}setFromBufferAttribute(t){let e=1/0,n=1/0,l=1/0,r=-1/0,i=-1/0,o=-1/0;for(let u=0,s=t.count;u<s;u++){const s=t.getX(u),a=t.getY(u),c=t.getZ(u);s<e&&(e=s),a<n&&(n=a),c<l&&(l=c),s>r&&(r=s),a>i&&(i=a),c>o&&(o=c)}return this.min.set(e,n,l),this.max.set(r,i,o),this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=dl.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t){return this.makeEmpty(),this.expandByObject(t)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t){t.updateWorldMatrix(!1,!1);const e=t.geometry;void 0!==e&&(null===e.boundingBox&&e.computeBoundingBox(),pl.copy(e.boundingBox),pl.applyMatrix4(t.matrixWorld),this.union(pl));const n=t.children;for(let t=0,e=n.length;t<e;t++)this.expandByObject(n[t]);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,dl),dl.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(bl),wl.subVectors(this.max,bl),fl.subVectors(t.a,bl),ml.subVectors(t.b,bl),gl.subVectors(t.c,bl),vl.subVectors(ml,fl),yl.subVectors(gl,ml),xl.subVectors(fl,gl);let e=[0,-vl.z,vl.y,0,-yl.z,yl.y,0,-xl.z,xl.y,vl.z,0,-vl.x,yl.z,0,-yl.x,xl.z,0,-xl.x,-vl.y,vl.x,0,-yl.y,yl.x,0,-xl.y,xl.x,0];return!!Sl(e,fl,ml,gl,wl)&&(e=[1,0,0,0,1,0,0,0,1],!!Sl(e,fl,ml,gl,wl)&&(_l.crossVectors(vl,yl),e=[_l.x,_l.y,_l.z],Sl(e,fl,ml,gl,wl)))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return dl.copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(t){return this.getCenter(t.center),t.radius=.5*this.getSize(dl).length(),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||(hl[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),hl[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),hl[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),hl[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),hl[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),hl[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),hl[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),hl[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(hl)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}cl.prototype.isBox3=!0;const hl=[new ul,new ul,new ul,new ul,new ul,new ul,new ul,new ul],dl=new ul,pl=new cl,fl=new ul,ml=new ul,gl=new ul,vl=new ul,yl=new ul,xl=new ul,bl=new ul,wl=new ul,_l=new ul,Ml=new ul;function Sl(t,e,n,l,r){for(let i=0,o=t.length-3;i<=o;i+=3){Ml.fromArray(t,i);const o=r.x*Math.abs(Ml.x)+r.y*Math.abs(Ml.y)+r.z*Math.abs(Ml.z),u=e.dot(Ml),s=n.dot(Ml),a=l.dot(Ml);if(Math.max(-Math.max(u,s,a),Math.min(u,s,a))>o)return!1}return!0}const El=new cl,Tl=new ul,Al=new ul,Ll=new ul;class Cl{constructor(t=new ul,e=-1){this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;void 0!==e?n.copy(e):El.setFromPoints(t).getCenter(n);let l=0;for(let e=0,r=t.length;e<r;e++)l=Math.max(l,n.distanceToSquared(t[e]));return this.radius=Math.sqrt(l),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){Ll.subVectors(t,this.center);const e=Ll.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e),n=.5*(t-this.radius);this.center.add(Ll.multiplyScalar(n/t)),this.radius+=n}return this}union(t){return Al.subVectors(t.center,this.center).normalize().multiplyScalar(t.radius),this.expandByPoint(Tl.copy(t.center).add(Al)),this.expandByPoint(Tl.copy(t.center).sub(Al)),this}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const Pl=new ul,Rl=new ul,Ol=new ul,Il=new ul,Dl=new ul,kl=new ul,Nl=new ul;class Bl{constructor(t=new ul,e=new ul(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,Pl)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=Pl.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(Pl.copy(this.direction).multiplyScalar(e).add(this.origin),Pl.distanceToSquared(t))}distanceSqToSegment(t,e,n,l){Rl.copy(t).add(e).multiplyScalar(.5),Ol.copy(e).sub(t).normalize(),Il.copy(this.origin).sub(Rl);const r=.5*t.distanceTo(e),i=-this.direction.dot(Ol),o=Il.dot(this.direction),u=-Il.dot(Ol),s=Il.lengthSq(),a=Math.abs(1-i*i);let c,h,d,p;if(a>0)if(c=i*u-o,h=i*o-u,p=r*a,c>=0)if(h>=-p)if(h<=p){const t=1/a;c*=t,h*=t,d=c*(c+i*h+2*o)+h*(i*c+h+2*u)+s}else h=r,c=Math.max(0,-(i*h+o)),d=-c*c+h*(h+2*u)+s;else h=-r,c=Math.max(0,-(i*h+o)),d=-c*c+h*(h+2*u)+s;else h<=-p?(c=Math.max(0,-(-i*r+o)),h=c>0?-r:Math.min(Math.max(-r,-u),r),d=-c*c+h*(h+2*u)+s):h<=p?(c=0,h=Math.min(Math.max(-r,-u),r),d=h*(h+2*u)+s):(c=Math.max(0,-(i*r+o)),h=c>0?r:Math.min(Math.max(-r,-u),r),d=-c*c+h*(h+2*u)+s);else h=i>0?-r:r,c=Math.max(0,-(i*h+o)),d=-c*c+h*(h+2*u)+s;return n&&n.copy(this.direction).multiplyScalar(c).add(this.origin),l&&l.copy(Ol).multiplyScalar(h).add(Rl),d}intersectSphere(t,e){Pl.subVectors(t.center,this.origin);const n=Pl.dot(this.direction),l=Pl.dot(Pl)-n*n,r=t.radius*t.radius;if(l>r)return null;const i=Math.sqrt(r-l),o=n-i,u=n+i;return o<0&&u<0?null:o<0?this.at(u,e):this.at(o,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return null===n?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,l,r,i,o,u;const s=1/this.direction.x,a=1/this.direction.y,c=1/this.direction.z,h=this.origin;return s>=0?(n=(t.min.x-h.x)*s,l=(t.max.x-h.x)*s):(n=(t.max.x-h.x)*s,l=(t.min.x-h.x)*s),a>=0?(r=(t.min.y-h.y)*a,i=(t.max.y-h.y)*a):(r=(t.max.y-h.y)*a,i=(t.min.y-h.y)*a),n>i||r>l?null:((r>n||n!=n)&&(n=r),(i<l||l!=l)&&(l=i),c>=0?(o=(t.min.z-h.z)*c,u=(t.max.z-h.z)*c):(o=(t.max.z-h.z)*c,u=(t.min.z-h.z)*c),n>u||o>l?null:((o>n||n!=n)&&(n=o),(u<l||l!=l)&&(l=u),l<0?null:this.at(n>=0?n:l,e)))}intersectsBox(t){return null!==this.intersectBox(t,Pl)}intersectTriangle(t,e,n,l,r){Dl.subVectors(e,t),kl.subVectors(n,t),Nl.crossVectors(Dl,kl);let i,o=this.direction.dot(Nl);if(o>0){if(l)return null;i=1}else{if(!(o<0))return null;i=-1,o=-o}Il.subVectors(this.origin,t);const u=i*this.direction.dot(kl.crossVectors(Il,kl));if(u<0)return null;const s=i*this.direction.dot(Dl.cross(Il));if(s<0)return null;if(u+s>o)return null;const a=-i*Il.dot(Nl);return a<0?null:this.at(a/o,r)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Fl{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(t,e,n,l,r,i,o,u,s,a,c,h,d,p,f,m){const g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=l,g[1]=r,g[5]=i,g[9]=o,g[13]=u,g[2]=s,g[6]=a,g[10]=c,g[14]=h,g[3]=d,g[7]=p,g[11]=f,g[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new Fl).fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,l=1/zl.setFromMatrixColumn(t,0).length(),r=1/zl.setFromMatrixColumn(t,1).length(),i=1/zl.setFromMatrixColumn(t,2).length();return e[0]=n[0]*l,e[1]=n[1]*l,e[2]=n[2]*l,e[3]=0,e[4]=n[4]*r,e[5]=n[5]*r,e[6]=n[6]*r,e[7]=0,e[8]=n[8]*i,e[9]=n[9]*i,e[10]=n[10]*i,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){t&&t.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const e=this.elements,n=t.x,l=t.y,r=t.z,i=Math.cos(n),o=Math.sin(n),u=Math.cos(l),s=Math.sin(l),a=Math.cos(r),c=Math.sin(r);if("XYZ"===t.order){const t=i*a,n=i*c,l=o*a,r=o*c;e[0]=u*a,e[4]=-u*c,e[8]=s,e[1]=n+l*s,e[5]=t-r*s,e[9]=-o*u,e[2]=r-t*s,e[6]=l+n*s,e[10]=i*u}else if("YXZ"===t.order){const t=u*a,n=u*c,l=s*a,r=s*c;e[0]=t+r*o,e[4]=l*o-n,e[8]=i*s,e[1]=i*c,e[5]=i*a,e[9]=-o,e[2]=n*o-l,e[6]=r+t*o,e[10]=i*u}else if("ZXY"===t.order){const t=u*a,n=u*c,l=s*a,r=s*c;e[0]=t-r*o,e[4]=-i*c,e[8]=l+n*o,e[1]=n+l*o,e[5]=i*a,e[9]=r-t*o,e[2]=-i*s,e[6]=o,e[10]=i*u}else if("ZYX"===t.order){const t=i*a,n=i*c,l=o*a,r=o*c;e[0]=u*a,e[4]=l*s-n,e[8]=t*s+r,e[1]=u*c,e[5]=r*s+t,e[9]=n*s-l,e[2]=-s,e[6]=o*u,e[10]=i*u}else if("YZX"===t.order){const t=i*u,n=i*s,l=o*u,r=o*s;e[0]=u*a,e[4]=r-t*c,e[8]=l*c+n,e[1]=c,e[5]=i*a,e[9]=-o*a,e[2]=-s*a,e[6]=n*c+l,e[10]=t-r*c}else if("XZY"===t.order){const t=i*u,n=i*s,l=o*u,r=o*s;e[0]=u*a,e[4]=-c,e[8]=s*a,e[1]=t*c+r,e[5]=i*a,e[9]=n*c-l,e[2]=l*c-n,e[6]=o*a,e[10]=r*c+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(jl,t,Ul)}lookAt(t,e,n){const l=this.elements;return Wl.subVectors(t,e),0===Wl.lengthSq()&&(Wl.z=1),Wl.normalize(),Gl.crossVectors(n,Wl),0===Gl.lengthSq()&&(1===Math.abs(n.z)?Wl.x+=1e-4:Wl.z+=1e-4,Wl.normalize(),Gl.crossVectors(n,Wl)),Gl.normalize(),Vl.crossVectors(Wl,Gl),l[0]=Gl.x,l[4]=Vl.x,l[8]=Wl.x,l[1]=Gl.y,l[5]=Vl.y,l[9]=Wl.y,l[2]=Gl.z,l[6]=Vl.z,l[10]=Wl.z,this}multiply(t,e){return void 0!==e?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,l=e.elements,r=this.elements,i=n[0],o=n[4],u=n[8],s=n[12],a=n[1],c=n[5],h=n[9],d=n[13],p=n[2],f=n[6],m=n[10],g=n[14],v=n[3],y=n[7],x=n[11],b=n[15],w=l[0],_=l[4],M=l[8],S=l[12],E=l[1],T=l[5],A=l[9],L=l[13],C=l[2],P=l[6],R=l[10],O=l[14],I=l[3],D=l[7],k=l[11],N=l[15];return r[0]=i*w+o*E+u*C+s*I,r[4]=i*_+o*T+u*P+s*D,r[8]=i*M+o*A+u*R+s*k,r[12]=i*S+o*L+u*O+s*N,r[1]=a*w+c*E+h*C+d*I,r[5]=a*_+c*T+h*P+d*D,r[9]=a*M+c*A+h*R+d*k,r[13]=a*S+c*L+h*O+d*N,r[2]=p*w+f*E+m*C+g*I,r[6]=p*_+f*T+m*P+g*D,r[10]=p*M+f*A+m*R+g*k,r[14]=p*S+f*L+m*O+g*N,r[3]=v*w+y*E+x*C+b*I,r[7]=v*_+y*T+x*P+b*D,r[11]=v*M+y*A+x*R+b*k,r[15]=v*S+y*L+x*O+b*N,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],l=t[8],r=t[12],i=t[1],o=t[5],u=t[9],s=t[13],a=t[2],c=t[6],h=t[10],d=t[14];return t[3]*(+r*u*c-l*s*c-r*o*h+n*s*h+l*o*d-n*u*d)+t[7]*(+e*u*d-e*s*h+r*i*h-l*i*d+l*s*a-r*u*a)+t[11]*(+e*s*c-e*o*d-r*i*c+n*i*d+r*o*a-n*s*a)+t[15]*(-l*o*a-e*u*c+e*o*h+l*i*c-n*i*h+n*u*a)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const l=this.elements;return t.isVector3?(l[12]=t.x,l[13]=t.y,l[14]=t.z):(l[12]=t,l[13]=e,l[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],l=t[2],r=t[3],i=t[4],o=t[5],u=t[6],s=t[7],a=t[8],c=t[9],h=t[10],d=t[11],p=t[12],f=t[13],m=t[14],g=t[15],v=c*m*s-f*h*s+f*u*d-o*m*d-c*u*g+o*h*g,y=p*h*s-a*m*s-p*u*d+i*m*d+a*u*g-i*h*g,x=a*f*s-p*c*s+p*o*d-i*f*d-a*o*g+i*c*g,b=p*c*u-a*f*u-p*o*h+i*f*h+a*o*m-i*c*m,w=e*v+n*y+l*x+r*b;if(0===w)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const _=1/w;return t[0]=v*_,t[1]=(f*h*r-c*m*r-f*l*d+n*m*d+c*l*g-n*h*g)*_,t[2]=(o*m*r-f*u*r+f*l*s-n*m*s-o*l*g+n*u*g)*_,t[3]=(c*u*r-o*h*r-c*l*s+n*h*s+o*l*d-n*u*d)*_,t[4]=y*_,t[5]=(a*m*r-p*h*r+p*l*d-e*m*d-a*l*g+e*h*g)*_,t[6]=(p*u*r-i*m*r-p*l*s+e*m*s+i*l*g-e*u*g)*_,t[7]=(i*h*r-a*u*r+a*l*s-e*h*s-i*l*d+e*u*d)*_,t[8]=x*_,t[9]=(p*c*r-a*f*r-p*n*d+e*f*d+a*n*g-e*c*g)*_,t[10]=(i*f*r-p*o*r+p*n*s-e*f*s-i*n*g+e*o*g)*_,t[11]=(a*o*r-i*c*r-a*n*s+e*c*s+i*n*d-e*o*d)*_,t[12]=b*_,t[13]=(a*f*l-p*c*l+p*n*h-e*f*h-a*n*m+e*c*m)*_,t[14]=(p*o*l-i*f*l-p*n*u+e*f*u+i*n*m-e*o*m)*_,t[15]=(i*c*l-a*o*l+a*n*u-e*c*u-i*n*h+e*o*h)*_,this}scale(t){const e=this.elements,n=t.x,l=t.y,r=t.z;return e[0]*=n,e[4]*=l,e[8]*=r,e[1]*=n,e[5]*=l,e[9]*=r,e[2]*=n,e[6]*=l,e[10]*=r,e[3]*=n,e[7]*=l,e[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],l=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,l))}makeTranslation(t,e,n){return this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),l=Math.sin(e),r=1-n,i=t.x,o=t.y,u=t.z,s=r*i,a=r*o;return this.set(s*i+n,s*o-l*u,s*u+l*o,0,s*o+l*u,a*o+n,a*u-l*i,0,s*u-l*o,a*u+l*i,r*u*u+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,l,r,i){return this.set(1,n,r,0,t,1,i,0,e,l,1,0,0,0,0,1),this}compose(t,e,n){const l=this.elements,r=e._x,i=e._y,o=e._z,u=e._w,s=r+r,a=i+i,c=o+o,h=r*s,d=r*a,p=r*c,f=i*a,m=i*c,g=o*c,v=u*s,y=u*a,x=u*c,b=n.x,w=n.y,_=n.z;return l[0]=(1-(f+g))*b,l[1]=(d+x)*b,l[2]=(p-y)*b,l[3]=0,l[4]=(d-x)*w,l[5]=(1-(h+g))*w,l[6]=(m+v)*w,l[7]=0,l[8]=(p+y)*_,l[9]=(m-v)*_,l[10]=(1-(h+f))*_,l[11]=0,l[12]=t.x,l[13]=t.y,l[14]=t.z,l[15]=1,this}decompose(t,e,n){const l=this.elements;let r=zl.set(l[0],l[1],l[2]).length();const i=zl.set(l[4],l[5],l[6]).length(),o=zl.set(l[8],l[9],l[10]).length();this.determinant()<0&&(r=-r),t.x=l[12],t.y=l[13],t.z=l[14],Hl.copy(this);const u=1/r,s=1/i,a=1/o;return Hl.elements[0]*=u,Hl.elements[1]*=u,Hl.elements[2]*=u,Hl.elements[4]*=s,Hl.elements[5]*=s,Hl.elements[6]*=s,Hl.elements[8]*=a,Hl.elements[9]*=a,Hl.elements[10]*=a,e.setFromRotationMatrix(Hl),n.x=r,n.y=i,n.z=o,this}makePerspective(t,e,n,l,r,i){void 0===i&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const o=this.elements,u=2*r/(e-t),s=2*r/(n-l),a=(e+t)/(e-t),c=(n+l)/(n-l),h=-(i+r)/(i-r),d=-2*i*r/(i-r);return o[0]=u,o[4]=0,o[8]=a,o[12]=0,o[1]=0,o[5]=s,o[9]=c,o[13]=0,o[2]=0,o[6]=0,o[10]=h,o[14]=d,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this}makeOrthographic(t,e,n,l,r,i){const o=this.elements,u=1/(e-t),s=1/(n-l),a=1/(i-r),c=(e+t)*u,h=(n+l)*s,d=(i+r)*a;return o[0]=2*u,o[4]=0,o[8]=0,o[12]=-c,o[1]=0,o[5]=2*s,o[9]=0,o[13]=-h,o[2]=0,o[6]=0,o[10]=-2*a,o[14]=-d,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<16;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}Fl.prototype.isMatrix4=!0;const zl=new ul,Hl=new Fl,jl=new ul(0,0,0),Ul=new ul(1,1,1),Gl=new ul,Vl=new ul,Wl=new ul,ql=new Fl,Xl=new ol;class Yl{constructor(t=0,e=0,n=0,l=Yl.DefaultOrder){this._x=t,this._y=e,this._z=n,this._order=l}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,l=this._order){return this._x=t,this._y=e,this._z=n,this._order=l,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const l=t.elements,r=l[0],i=l[4],o=l[8],u=l[1],s=l[5],a=l[9],c=l[2],h=l[6],d=l[10];switch(e){case"XYZ":this._y=Math.asin(Un(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-a,d),this._z=Math.atan2(-i,r)):(this._x=Math.atan2(h,s),this._z=0);break;case"YXZ":this._x=Math.asin(-Un(a,-1,1)),Math.abs(a)<.9999999?(this._y=Math.atan2(o,d),this._z=Math.atan2(u,s)):(this._y=Math.atan2(-c,r),this._z=0);break;case"ZXY":this._x=Math.asin(Un(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(-c,d),this._z=Math.atan2(-i,s)):(this._y=0,this._z=Math.atan2(u,r));break;case"ZYX":this._y=Math.asin(-Un(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(h,d),this._z=Math.atan2(u,r)):(this._x=0,this._z=Math.atan2(-i,s));break;case"YZX":this._z=Math.asin(Un(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(-a,s),this._y=Math.atan2(-c,r)):(this._x=0,this._y=Math.atan2(o,d));break;case"XZY":this._z=Math.asin(-Un(i,-1,1)),Math.abs(i)<.9999999?(this._x=Math.atan2(h,s),this._y=Math.atan2(o,r)):(this._x=Math.atan2(-a,d),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,!0===n&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return ql.makeRotationFromQuaternion(t),this.setFromRotationMatrix(ql,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return Xl.setFromEuler(this),this.setFromQuaternion(Xl,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}toVector3(t){return t?t.set(this._x,this._y,this._z):new ul(this._x,this._y,this._z)}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}Yl.prototype.isEuler=!0,Yl.DefaultOrder="XYZ",Yl.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class $l{constructor(){this.mask=1}set(t){this.mask=1<<t|0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return 0!=(this.mask&t.mask)}}let Jl=0;const Zl=new ul,Kl=new ol,Ql=new Fl,tr=new ul,er=new ul,nr=new ul,lr=new ol,rr=new ul(1,0,0),ir=new ul(0,1,0),or=new ul(0,0,1),ur={type:"added"},sr={type:"removed"};class ar extends Nn{constructor(){super(),Object.defineProperty(this,"id",{value:Jl++}),this.uuid=jn(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=ar.DefaultUp.clone();const t=new ul,e=new Yl,n=new ol,l=new ul(1,1,1);e._onChange((function(){n.setFromEuler(e,!1)})),n._onChange((function(){e.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:l},modelViewMatrix:{value:new Fl},normalMatrix:{value:new Jn}}),this.matrix=new Fl,this.matrixWorld=new Fl,this.matrixAutoUpdate=ar.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new $l,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return Kl.setFromAxisAngle(t,e),this.quaternion.multiply(Kl),this}rotateOnWorldAxis(t,e){return Kl.setFromAxisAngle(t,e),this.quaternion.premultiply(Kl),this}rotateX(t){return this.rotateOnAxis(rr,t)}rotateY(t){return this.rotateOnAxis(ir,t)}rotateZ(t){return this.rotateOnAxis(or,t)}translateOnAxis(t,e){return Zl.copy(t).applyQuaternion(this.quaternion),this.position.add(Zl.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(rr,t)}translateY(t){return this.translateOnAxis(ir,t)}translateZ(t){return this.translateOnAxis(or,t)}localToWorld(t){return t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return t.applyMatrix4(Ql.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?tr.copy(t):tr.set(t,e,n);const l=this.parent;this.updateWorldMatrix(!0,!1),er.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Ql.lookAt(er,tr,this.up):Ql.lookAt(tr,er,this.up),this.quaternion.setFromRotationMatrix(Ql),l&&(Ql.extractRotation(l.matrixWorld),Kl.setFromRotationMatrix(Ql),this.quaternion.premultiply(Kl.invert()))}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(ur)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}const e=this.children.indexOf(t);return-1!==e&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(sr)),this}removeFromParent(){const t=this.parent;return null!==t&&t.remove(this),this}clear(){for(let t=0;t<this.children.length;t++){const e=this.children[t];e.parent=null,e.dispatchEvent(sr)}return this.children.length=0,this}attach(t){return this.updateWorldMatrix(!0,!1),Ql.copy(this.matrixWorld).invert(),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),Ql.multiply(t.parent.matrixWorld)),t.applyMatrix4(Ql),this.add(t),t.updateWorldMatrix(!1,!0),this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,l=this.children.length;n<l;n++){const l=this.children[n].getObjectByProperty(t,e);if(void 0!==l)return l}}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(er,t,nr),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(er,lr,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,l=e.length;n<l;n++)e[n].traverse(t)}traverseVisible(t){if(!1===this.visible)return;t(this);const e=this.children;for(let n=0,l=e.length;n<l;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,l=e.length;n<l;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(!0===t&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e){const t=this.children;for(let e=0,n=t.length;e<n;e++)t[e].updateWorldMatrix(!1,!0)}}toJSON(t){const e=void 0===t||"string"==typeof t,n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const l={};function r(e,n){return void 0===e[n.uuid]&&(e[n.uuid]=n.toJSON(t)),n.uuid}if(l.uuid=this.uuid,l.type=this.type,""!==this.name&&(l.name=this.name),!0===this.castShadow&&(l.castShadow=!0),!0===this.receiveShadow&&(l.receiveShadow=!0),!1===this.visible&&(l.visible=!1),!1===this.frustumCulled&&(l.frustumCulled=!1),0!==this.renderOrder&&(l.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(l.userData=this.userData),l.layers=this.layers.mask,l.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(l.matrixAutoUpdate=!1),this.isInstancedMesh&&(l.type="InstancedMesh",l.count=this.count,l.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(l.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?l.background=this.background.toJSON():this.background.isTexture&&(l.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&(l.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){l.geometry=r(t.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const n=e.shapes;if(Array.isArray(n))for(let e=0,l=n.length;e<l;e++){const l=n[e];r(t.shapes,l)}else r(t.shapes,n)}}if(this.isSkinnedMesh&&(l.bindMode=this.bindMode,l.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(t.skeletons,this.skeleton),l.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let n=0,l=this.material.length;n<l;n++)e.push(r(t.materials,this.material[n]));l.material=e}else l.material=r(t.materials,this.material);if(this.children.length>0){l.children=[];for(let e=0;e<this.children.length;e++)l.children.push(this.children[e].toJSON(t).object)}if(this.animations.length>0){l.animations=[];for(let e=0;e<this.animations.length;e++){const n=this.animations[e];l.animations.push(r(t.animations,n))}}if(e){const e=i(t.geometries),l=i(t.materials),r=i(t.textures),o=i(t.images),u=i(t.shapes),s=i(t.skeletons),a=i(t.animations);e.length>0&&(n.geometries=e),l.length>0&&(n.materials=l),r.length>0&&(n.textures=r),o.length>0&&(n.images=o),u.length>0&&(n.shapes=u),s.length>0&&(n.skeletons=s),a.length>0&&(n.animations=a)}return n.object=l,n;function i(t){const e=[];for(const n in t){const l=t[n];delete l.metadata,e.push(l)}return e}}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++){const n=t.children[e];this.add(n.clone())}return this}}ar.DefaultUp=new ul(0,1,0),ar.DefaultMatrixAutoUpdate=!0,ar.prototype.isObject3D=!0;const cr=new ul,hr=new ul,dr=new ul,pr=new ul,fr=new ul,mr=new ul,gr=new ul,vr=new ul,yr=new ul,xr=new ul;class br{constructor(t=new ul,e=new ul,n=new ul){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,l){l.subVectors(n,e),cr.subVectors(t,e),l.cross(cr);const r=l.lengthSq();return r>0?l.multiplyScalar(1/Math.sqrt(r)):l.set(0,0,0)}static getBarycoord(t,e,n,l,r){cr.subVectors(l,e),hr.subVectors(n,e),dr.subVectors(t,e);const i=cr.dot(cr),o=cr.dot(hr),u=cr.dot(dr),s=hr.dot(hr),a=hr.dot(dr),c=i*s-o*o;if(0===c)return r.set(-2,-1,-1);const h=1/c,d=(s*u-o*a)*h,p=(i*a-o*u)*h;return r.set(1-d-p,p,d)}static containsPoint(t,e,n,l){return this.getBarycoord(t,e,n,l,pr),pr.x>=0&&pr.y>=0&&pr.x+pr.y<=1}static getUV(t,e,n,l,r,i,o,u){return this.getBarycoord(t,e,n,l,pr),u.set(0,0),u.addScaledVector(r,pr.x),u.addScaledVector(i,pr.y),u.addScaledVector(o,pr.z),u}static isFrontFacing(t,e,n,l){return cr.subVectors(n,e),hr.subVectors(t,e),cr.cross(hr).dot(l)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,l){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[l]),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return cr.subVectors(this.c,this.b),hr.subVectors(this.a,this.b),.5*cr.cross(hr).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return br.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return br.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,n,l,r){return br.getUV(t,this.a,this.b,this.c,e,n,l,r)}containsPoint(t){return br.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return br.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,l=this.b,r=this.c;let i,o;fr.subVectors(l,n),mr.subVectors(r,n),vr.subVectors(t,n);const u=fr.dot(vr),s=mr.dot(vr);if(u<=0&&s<=0)return e.copy(n);yr.subVectors(t,l);const a=fr.dot(yr),c=mr.dot(yr);if(a>=0&&c<=a)return e.copy(l);const h=u*c-a*s;if(h<=0&&u>=0&&a<=0)return i=u/(u-a),e.copy(n).addScaledVector(fr,i);xr.subVectors(t,r);const d=fr.dot(xr),p=mr.dot(xr);if(p>=0&&d<=p)return e.copy(r);const f=d*s-u*p;if(f<=0&&s>=0&&p<=0)return o=s/(s-p),e.copy(n).addScaledVector(mr,o);const m=a*p-d*c;if(m<=0&&c-a>=0&&d-p>=0)return gr.subVectors(r,l),o=(c-a)/(c-a+(d-p)),e.copy(l).addScaledVector(gr,o);const g=1/(m+f+h);return i=f*g,o=h*g,e.copy(n).addScaledVector(fr,i).addScaledVector(mr,o)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}let wr=0;class _r extends Nn{constructor(){super(),Object.defineProperty(this,"id",{value:wr++}),this.uuid=jn(),this.name="",this.type="Material",this.fog=!0,this.blending=b,this.side=f,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=D,this.blendDst=k,this.blendEquation=E,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=V,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=Sn,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=cn,this.stencilZFail=cn,this.stencilZPass=cn,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0}onBuild(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==t)for(const e in t){const n=t[e];if(void 0===n){console.warn("THREE.Material: '"+e+"' parameter is undefined.");continue}if("shading"===e){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=n===v;continue}const l=this[e];void 0!==l?l&&l.isColor?l.set(n):l&&l.isVector3&&n&&n.isVector3?l.copy(n):this[e]=n:console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.")}}toJSON(t){const e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});const n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function l(t){const e=[];for(const n in t){const l=t[n];delete l.metadata,e.push(l)}return e}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),this.sheen&&this.sheen.isColor&&(n.sheen=this.sheen.getHex()),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,void 0!==this.combine&&(n.combine=this.combine)),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(n.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.transmission&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),void 0!==this.thickness&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),void 0!==this.attenuationDistance&&(n.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(n.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(n.size=this.size),null!==this.shadowSide&&(n.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==b&&(n.blending=this.blending),this.side!==f&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.colorWrite=this.colorWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(n.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(n.morphTargets=!0),!0===this.morphNormals&&(n.morphNormals=!0),!0===this.flatShading&&(n.flatShading=this.flatShading),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),e){const e=l(t.textures),r=l(t.images);e.length>0&&(n.textures=e),r.length>0&&(n.images=r)}return n}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name,this.fog=t.fog,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(null!==e){const t=e.length;n=new Array(t);for(let l=0;l!==t;++l)n[l]=e[l].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){!0===t&&this.version++}}_r.prototype.isMaterial=!0;const Mr={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Sr={h:0,s:0,l:0},Er={h:0,s:0,l:0};function Tr(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+6*(e-t)*(2/3-n):t}function Ar(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function Lr(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}class Cr{constructor(t,e,n){return void 0===e&&void 0===n?this.set(t):this.setRGB(t,e,n)}set(t){return t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this}setRGB(t,e,n){return this.r=t,this.g=e,this.b=n,this}setHSL(t,e,n){if(t=Gn(t,1),e=Un(e,0,1),n=Un(n,0,1),0===e)this.r=this.g=this.b=n;else{const l=n<=.5?n*(1+e):n+e-n*e,r=2*n-l;this.r=Tr(r,l,t+1/3),this.g=Tr(r,l,t),this.b=Tr(r,l,t-1/3)}return this}setStyle(t){function e(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let n;if(n=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)){let t;const l=n[1],r=n[2];switch(l){case"rgb":case"rgba":if(t=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r))return this.r=Math.min(255,parseInt(t[1],10))/255,this.g=Math.min(255,parseInt(t[2],10))/255,this.b=Math.min(255,parseInt(t[3],10))/255,e(t[4]),this;if(t=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r))return this.r=Math.min(100,parseInt(t[1],10))/100,this.g=Math.min(100,parseInt(t[2],10))/100,this.b=Math.min(100,parseInt(t[3],10))/100,e(t[4]),this;break;case"hsl":case"hsla":if(t=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r)){const n=parseFloat(t[1])/360,l=parseInt(t[2],10)/100,r=parseInt(t[3],10)/100;return e(t[4]),this.setHSL(n,l,r)}}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(t)){const t=n[1],e=t.length;if(3===e)return this.r=parseInt(t.charAt(0)+t.charAt(0),16)/255,this.g=parseInt(t.charAt(1)+t.charAt(1),16)/255,this.b=parseInt(t.charAt(2)+t.charAt(2),16)/255,this;if(6===e)return this.r=parseInt(t.charAt(0)+t.charAt(1),16)/255,this.g=parseInt(t.charAt(2)+t.charAt(3),16)/255,this.b=parseInt(t.charAt(4)+t.charAt(5),16)/255,this}return t&&t.length>0?this.setColorName(t):this}setColorName(t){const e=Mr[t.toLowerCase()];return void 0!==e?this.setHex(e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copyGammaToLinear(t,e=2){return this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this}copyLinearToGamma(t,e=2){const n=e>0?1/e:1;return this.r=Math.pow(t.r,n),this.g=Math.pow(t.g,n),this.b=Math.pow(t.b,n),this}convertGammaToLinear(t){return this.copyGammaToLinear(this,t),this}convertLinearToGamma(t){return this.copyLinearToGamma(this,t),this}copySRGBToLinear(t){return this.r=Ar(t.r),this.g=Ar(t.g),this.b=Ar(t.b),this}copyLinearToSRGB(t){return this.r=Lr(t.r),this.g=Lr(t.g),this.b=Lr(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(t){const e=this.r,n=this.g,l=this.b,r=Math.max(e,n,l),i=Math.min(e,n,l);let o,u;const s=(i+r)/2;if(i===r)o=0,u=0;else{const t=r-i;switch(u=s<=.5?t/(r+i):t/(2-r-i),r){case e:o=(n-l)/t+(n<l?6:0);break;case n:o=(l-e)/t+2;break;case l:o=(e-n)/t+4}o/=6}return t.h=o,t.s=u,t.l=s,t}getStyle(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"}offsetHSL(t,e,n){return this.getHSL(Sr),Sr.h+=t,Sr.s+=e,Sr.l+=n,this.setHSL(Sr.h,Sr.s,Sr.l),this}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(Sr),t.getHSL(Er);const n=Vn(Sr.h,Er.h,e),l=Vn(Sr.s,Er.s,e),r=Vn(Sr.l,Er.l,e);return this.setHSL(n,l,r),this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),!0===t.normalized&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}Cr.NAMES=Mr,Cr.prototype.isColor=!0,Cr.prototype.r=1,Cr.prototype.g=1,Cr.prototype.b=1;class Pr extends _r{constructor(t){super(),this.type="MeshBasicMaterial",this.color=new Cr(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=$,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.morphTargets=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.morphTargets=t.morphTargets,this}}Pr.prototype.isMeshBasicMaterial=!0;const Rr=new ul,Or=new $n;class Ir{constructor(t,e,n){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===n,this.usage=En,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let l=0,r=this.itemSize;l<r;l++)this.array[t+l]=e.array[n+l];return this}copyArray(t){return this.array.set(t),this}copyColorsArray(t){const e=this.array;let n=0;for(let l=0,r=t.length;l<r;l++){let r=t[l];void 0===r&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",l),r=new Cr),e[n++]=r.r,e[n++]=r.g,e[n++]=r.b}return this}copyVector2sArray(t){const e=this.array;let n=0;for(let l=0,r=t.length;l<r;l++){let r=t[l];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",l),r=new $n),e[n++]=r.x,e[n++]=r.y}return this}copyVector3sArray(t){const e=this.array;let n=0;for(let l=0,r=t.length;l<r;l++){let r=t[l];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",l),r=new ul),e[n++]=r.x,e[n++]=r.y,e[n++]=r.z}return this}copyVector4sArray(t){const e=this.array;let n=0;for(let l=0,r=t.length;l<r;l++){let r=t[l];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",l),r=new nl),e[n++]=r.x,e[n++]=r.y,e[n++]=r.z,e[n++]=r.w}return this}applyMatrix3(t){if(2===this.itemSize)for(let e=0,n=this.count;e<n;e++)Or.fromBufferAttribute(this,e),Or.applyMatrix3(t),this.setXY(e,Or.x,Or.y);else if(3===this.itemSize)for(let e=0,n=this.count;e<n;e++)Rr.fromBufferAttribute(this,e),Rr.applyMatrix3(t),this.setXYZ(e,Rr.x,Rr.y,Rr.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)Rr.x=this.getX(e),Rr.y=this.getY(e),Rr.z=this.getZ(e),Rr.applyMatrix4(t),this.setXYZ(e,Rr.x,Rr.y,Rr.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)Rr.x=this.getX(e),Rr.y=this.getY(e),Rr.z=this.getZ(e),Rr.applyNormalMatrix(t),this.setXYZ(e,Rr.x,Rr.y,Rr.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)Rr.x=this.getX(e),Rr.y=this.getY(e),Rr.z=this.getZ(e),Rr.transformDirection(t),this.setXYZ(e,Rr.x,Rr.y,Rr.z);return this}set(t,e=0){return this.array.set(t,e),this}getX(t){return this.array[t*this.itemSize]}setX(t,e){return this.array[t*this.itemSize]=e,this}getY(t){return this.array[t*this.itemSize+1]}setY(t,e){return this.array[t*this.itemSize+1]=e,this}getZ(t){return this.array[t*this.itemSize+2]}setZ(t,e){return this.array[t*this.itemSize+2]=e,this}getW(t){return this.array[t*this.itemSize+3]}setW(t,e){return this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,l){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=l,this}setXYZW(t,e,n,l,r){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=l,this.array[t+3]=r,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return""!==this.name&&(t.name=this.name),this.usage!==En&&(t.usage=this.usage),0===this.updateRange.offset&&-1===this.updateRange.count||(t.updateRange=this.updateRange),t}}Ir.prototype.isBufferAttribute=!0;class Dr extends Ir{constructor(t,e,n){super(new Int8Array(t),e,n)}}class kr extends Ir{constructor(t,e,n){super(new Uint8Array(t),e,n)}}class Nr extends Ir{constructor(t,e,n){super(new Uint8ClampedArray(t),e,n)}}class Br extends Ir{constructor(t,e,n){super(new Int16Array(t),e,n)}}class Fr extends Ir{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class zr extends Ir{constructor(t,e,n){super(new Int32Array(t),e,n)}}class Hr extends Ir{constructor(t,e,n){super(new Uint32Array(t),e,n)}}class jr extends Ir{constructor(t,e,n){super(new Uint16Array(t),e,n)}}jr.prototype.isFloat16BufferAttribute=!0;class Ur extends Ir{constructor(t,e,n){super(new Float32Array(t),e,n)}}class Gr extends Ir{constructor(t,e,n){super(new Float64Array(t),e,n)}}function Vr(t){if(0===t.length)return-1/0;let e=t[0];for(let n=1,l=t.length;n<l;++n)t[n]>e&&(e=t[n]);return e}const Wr={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function qr(t,e){return new Wr[t](e)}let Xr=0;const Yr=new Fl,$r=new ar,Jr=new ul,Zr=new cl,Kr=new cl,Qr=new ul;class ti extends Nn{constructor(){super(),Object.defineProperty(this,"id",{value:Xr++}),this.uuid=jn(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(Vr(t)>65535?Hr:Fr)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return void 0!==this.attributes[t]}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(void 0!==n){const e=(new Jn).getNormalMatrix(t);n.applyNormalMatrix(e),n.needsUpdate=!0}const l=this.attributes.tangent;return void 0!==l&&(l.transformDirection(t),l.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(t){return Yr.makeRotationFromQuaternion(t),this.applyMatrix4(Yr),this}rotateX(t){return Yr.makeRotationX(t),this.applyMatrix4(Yr),this}rotateY(t){return Yr.makeRotationY(t),this.applyMatrix4(Yr),this}rotateZ(t){return Yr.makeRotationZ(t),this.applyMatrix4(Yr),this}translate(t,e,n){return Yr.makeTranslation(t,e,n),this.applyMatrix4(Yr),this}scale(t,e,n){return Yr.makeScale(t,e,n),this.applyMatrix4(Yr),this}lookAt(t){return $r.lookAt(t),$r.updateMatrix(),this.applyMatrix4($r.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Jr).negate(),this.translate(Jr.x,Jr.y,Jr.z),this}setFromPoints(t){const e=[];for(let n=0,l=t.length;n<l;n++){const l=t[n];e.push(l.x,l.y,l.z||0)}return this.setAttribute("position",new Ur(e,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new cl);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingBox.set(new ul(-1/0,-1/0,-1/0),new ul(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){const n=e[t];Zr.setFromBufferAttribute(n),this.morphTargetsRelative?(Qr.addVectors(this.boundingBox.min,Zr.min),this.boundingBox.expandByPoint(Qr),Qr.addVectors(this.boundingBox.max,Zr.max),this.boundingBox.expandByPoint(Qr)):(this.boundingBox.expandByPoint(Zr.min),this.boundingBox.expandByPoint(Zr.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Cl);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingSphere.set(new ul,1/0);if(t){const n=this.boundingSphere.center;if(Zr.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){const n=e[t];Kr.setFromBufferAttribute(n),this.morphTargetsRelative?(Qr.addVectors(Zr.min,Kr.min),Zr.expandByPoint(Qr),Qr.addVectors(Zr.max,Kr.max),Zr.expandByPoint(Qr)):(Zr.expandByPoint(Kr.min),Zr.expandByPoint(Kr.max))}Zr.getCenter(n);let l=0;for(let e=0,r=t.count;e<r;e++)Qr.fromBufferAttribute(t,e),l=Math.max(l,n.distanceToSquared(Qr));if(e)for(let r=0,i=e.length;r<i;r++){const i=e[r],o=this.morphTargetsRelative;for(let e=0,r=i.count;e<r;e++)Qr.fromBufferAttribute(i,e),o&&(Jr.fromBufferAttribute(t,e),Qr.add(Jr)),l=Math.max(l,n.distanceToSquared(Qr))}this.boundingSphere.radius=Math.sqrt(l),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeFaceNormals(){}computeTangents(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const n=t.array,l=e.position.array,r=e.normal.array,i=e.uv.array,o=l.length/3;void 0===e.tangent&&this.setAttribute("tangent",new Ir(new Float32Array(4*o),4));const u=e.tangent.array,s=[],a=[];for(let t=0;t<o;t++)s[t]=new ul,a[t]=new ul;const c=new ul,h=new ul,d=new ul,p=new $n,f=new $n,m=new $n,g=new ul,v=new ul;function y(t,e,n){c.fromArray(l,3*t),h.fromArray(l,3*e),d.fromArray(l,3*n),p.fromArray(i,2*t),f.fromArray(i,2*e),m.fromArray(i,2*n),h.sub(c),d.sub(c),f.sub(p),m.sub(p);const r=1/(f.x*m.y-m.x*f.y);isFinite(r)&&(g.copy(h).multiplyScalar(m.y).addScaledVector(d,-f.y).multiplyScalar(r),v.copy(d).multiplyScalar(f.x).addScaledVector(h,-m.x).multiplyScalar(r),s[t].add(g),s[e].add(g),s[n].add(g),a[t].add(v),a[e].add(v),a[n].add(v))}let x=this.groups;0===x.length&&(x=[{start:0,count:n.length}]);for(let t=0,e=x.length;t<e;++t){const e=x[t],l=e.start;for(let t=l,r=l+e.count;t<r;t+=3)y(n[t+0],n[t+1],n[t+2])}const b=new ul,w=new ul,_=new ul,M=new ul;function S(t){_.fromArray(r,3*t),M.copy(_);const e=s[t];b.copy(e),b.sub(_.multiplyScalar(_.dot(e))).normalize(),w.crossVectors(M,e);const n=w.dot(a[t])<0?-1:1;u[4*t]=b.x,u[4*t+1]=b.y,u[4*t+2]=b.z,u[4*t+3]=n}for(let t=0,e=x.length;t<e;++t){const e=x[t],l=e.start;for(let t=l,r=l+e.count;t<r;t+=3)S(n[t+0]),S(n[t+1]),S(n[t+2])}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(void 0!==e){let n=this.getAttribute("normal");if(void 0===n)n=new Ir(new Float32Array(3*e.count),3),this.setAttribute("normal",n);else for(let t=0,e=n.count;t<e;t++)n.setXYZ(t,0,0,0);const l=new ul,r=new ul,i=new ul,o=new ul,u=new ul,s=new ul,a=new ul,c=new ul;if(t)for(let h=0,d=t.count;h<d;h+=3){const d=t.getX(h+0),p=t.getX(h+1),f=t.getX(h+2);l.fromBufferAttribute(e,d),r.fromBufferAttribute(e,p),i.fromBufferAttribute(e,f),a.subVectors(i,r),c.subVectors(l,r),a.cross(c),o.fromBufferAttribute(n,d),u.fromBufferAttribute(n,p),s.fromBufferAttribute(n,f),o.add(a),u.add(a),s.add(a),n.setXYZ(d,o.x,o.y,o.z),n.setXYZ(p,u.x,u.y,u.z),n.setXYZ(f,s.x,s.y,s.z)}else for(let t=0,o=e.count;t<o;t+=3)l.fromBufferAttribute(e,t+0),r.fromBufferAttribute(e,t+1),i.fromBufferAttribute(e,t+2),a.subVectors(i,r),c.subVectors(l,r),a.cross(c),n.setXYZ(t+0,a.x,a.y,a.z),n.setXYZ(t+1,a.x,a.y,a.z),n.setXYZ(t+2,a.x,a.y,a.z);this.normalizeNormals(),n.needsUpdate=!0}}merge(t,e){if(!t||!t.isBufferGeometry)return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t);void 0===e&&(e=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const n=this.attributes;for(const l in n){if(void 0===t.attributes[l])continue;const r=n[l].array,i=t.attributes[l],o=i.array,u=i.itemSize*e,s=Math.min(o.length,r.length-u);for(let t=0,e=u;t<s;t++,e++)r[e]=o[t]}return this}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)Qr.fromBufferAttribute(t,e),Qr.normalize(),t.setXYZ(e,Qr.x,Qr.y,Qr.z)}toNonIndexed(){function t(t,e){const n=t.array,l=t.itemSize,r=t.normalized,i=new n.constructor(e.length*l);let o=0,u=0;for(let r=0,s=e.length;r<s;r++){o=t.isInterleavedBufferAttribute?e[r]*t.data.stride+t.offset:e[r]*l;for(let t=0;t<l;t++)i[u++]=n[o++]}return new Ir(i,l,r)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new ti,n=this.index.array,l=this.attributes;for(const r in l){const i=t(l[r],n);e.setAttribute(r,i)}const r=this.morphAttributes;for(const l in r){const i=[],o=r[l];for(let e=0,l=o.length;e<l;e++){const l=t(o[e],n);i.push(l)}e.morphAttributes[l]=i}e.morphTargetsRelative=this.morphTargetsRelative;const i=this.groups;for(let t=0,n=i.length;t<n;t++){const n=i[t];e.addGroup(n.start,n.count,n.materialIndex)}return e}toJSON(){const t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const n in e)void 0!==e[n]&&(t[n]=e[n]);return t}t.data={attributes:{}};const e=this.index;null!==e&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const e in n){const l=n[e];t.data.attributes[e]=l.toJSON(t.data)}const l={};let r=!1;for(const e in this.morphAttributes){const n=this.morphAttributes[e],i=[];for(let e=0,l=n.length;e<l;e++){const l=n[e];i.push(l.toJSON(t.data))}i.length>0&&(l[e]=i,r=!0)}r&&(t.data.morphAttributes=l,t.data.morphTargetsRelative=this.morphTargetsRelative);const i=this.groups;i.length>0&&(t.data.groups=JSON.parse(JSON.stringify(i)));const o=this.boundingSphere;return null!==o&&(t.data.boundingSphere={center:o.center.toArray(),radius:o.radius}),t}clone(){return(new ti).copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;null!==n&&this.setIndex(n.clone(e));const l=t.attributes;for(const t in l){const n=l[t];this.setAttribute(t,n.clone(e))}const r=t.morphAttributes;for(const t in r){const n=[],l=r[t];for(let t=0,r=l.length;t<r;t++)n.push(l[t].clone(e));this.morphAttributes[t]=n}this.morphTargetsRelative=t.morphTargetsRelative;const i=t.groups;for(let t=0,e=i.length;t<e;t++){const e=i[t];this.addGroup(e.start,e.count,e.materialIndex)}const o=t.boundingBox;null!==o&&(this.boundingBox=o.clone());const u=t.boundingSphere;return null!==u&&(this.boundingSphere=u.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}ti.prototype.isBufferGeometry=!0;const ei=new Fl,ni=new Bl,li=new Cl,ri=new ul,ii=new ul,oi=new ul,ui=new ul,si=new ul,ai=new ul,ci=new ul,hi=new ul,di=new ul,pi=new $n,fi=new $n,mi=new $n,gi=new ul,vi=new ul;class yi extends ar{constructor(t=new ti,e=new Pr){super(),this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(t,e){const n=this.geometry,l=this.material,r=this.matrixWorld;if(void 0===l)return;if(null===n.boundingSphere&&n.computeBoundingSphere(),li.copy(n.boundingSphere),li.applyMatrix4(r),!1===t.ray.intersectsSphere(li))return;if(ei.copy(r).invert(),ni.copy(t.ray).applyMatrix4(ei),null!==n.boundingBox&&!1===ni.intersectsBox(n.boundingBox))return;let i;if(n.isBufferGeometry){const r=n.index,o=n.attributes.position,u=n.morphAttributes.position,s=n.morphTargetsRelative,a=n.attributes.uv,c=n.attributes.uv2,h=n.groups,d=n.drawRange;if(null!==r)if(Array.isArray(l))for(let n=0,p=h.length;n<p;n++){const p=h[n],f=l[p.materialIndex];for(let n=Math.max(p.start,d.start),l=Math.min(p.start+p.count,d.start+d.count);n<l;n+=3){const l=r.getX(n),h=r.getX(n+1),d=r.getX(n+2);i=xi(this,f,t,ni,o,u,s,a,c,l,h,d),i&&(i.faceIndex=Math.floor(n/3),i.face.materialIndex=p.materialIndex,e.push(i))}}else for(let n=Math.max(0,d.start),h=Math.min(r.count,d.start+d.count);n<h;n+=3){const h=r.getX(n),d=r.getX(n+1),p=r.getX(n+2);i=xi(this,l,t,ni,o,u,s,a,c,h,d,p),i&&(i.faceIndex=Math.floor(n/3),e.push(i))}else if(void 0!==o)if(Array.isArray(l))for(let n=0,r=h.length;n<r;n++){const r=h[n],p=l[r.materialIndex];for(let n=Math.max(r.start,d.start),l=Math.min(r.start+r.count,d.start+d.count);n<l;n+=3)i=xi(this,p,t,ni,o,u,s,a,c,n,n+1,n+2),i&&(i.faceIndex=Math.floor(n/3),i.face.materialIndex=r.materialIndex,e.push(i))}else for(let n=Math.max(0,d.start),r=Math.min(o.count,d.start+d.count);n<r;n+=3)i=xi(this,l,t,ni,o,u,s,a,c,n,n+1,n+2),i&&(i.faceIndex=Math.floor(n/3),e.push(i))}else n.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}function xi(t,e,n,l,r,i,o,u,s,a,c,h){ri.fromBufferAttribute(r,a),ii.fromBufferAttribute(r,c),oi.fromBufferAttribute(r,h);const d=t.morphTargetInfluences;if(e.morphTargets&&i&&d){ci.set(0,0,0),hi.set(0,0,0),di.set(0,0,0);for(let t=0,e=i.length;t<e;t++){const e=d[t],n=i[t];0!==e&&(ui.fromBufferAttribute(n,a),si.fromBufferAttribute(n,c),ai.fromBufferAttribute(n,h),o?(ci.addScaledVector(ui,e),hi.addScaledVector(si,e),di.addScaledVector(ai,e)):(ci.addScaledVector(ui.sub(ri),e),hi.addScaledVector(si.sub(ii),e),di.addScaledVector(ai.sub(oi),e)))}ri.add(ci),ii.add(hi),oi.add(di)}t.isSkinnedMesh&&(t.boneTransform(a,ri),t.boneTransform(c,ii),t.boneTransform(h,oi));const p=function(t,e,n,l,r,i,o,u){let s;if(s=e.side===m?l.intersectTriangle(o,i,r,!0,u):l.intersectTriangle(r,i,o,e.side!==g,u),null===s)return null;vi.copy(u),vi.applyMatrix4(t.matrixWorld);const a=n.ray.origin.distanceTo(vi);return a<n.near||a>n.far?null:{distance:a,point:vi.clone(),object:t}}(t,e,n,l,ri,ii,oi,gi);if(p){u&&(pi.fromBufferAttribute(u,a),fi.fromBufferAttribute(u,c),mi.fromBufferAttribute(u,h),p.uv=br.getUV(gi,ri,ii,oi,pi,fi,mi,new $n)),s&&(pi.fromBufferAttribute(s,a),fi.fromBufferAttribute(s,c),mi.fromBufferAttribute(s,h),p.uv2=br.getUV(gi,ri,ii,oi,pi,fi,mi,new $n));const t={a:a,b:c,c:h,normal:new ul,materialIndex:0};br.getNormal(ri,ii,oi,t.normal),p.face=t}return p}yi.prototype.isMesh=!0;class bi extends ti{constructor(t=1,e=1,n=1,l=1,r=1,i=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:l,heightSegments:r,depthSegments:i};const o=this;l=Math.floor(l),r=Math.floor(r),i=Math.floor(i);const u=[],s=[],a=[],c=[];let h=0,d=0;function p(t,e,n,l,r,i,p,f,m,g,v){const y=i/m,x=p/g,b=i/2,w=p/2,_=f/2,M=m+1,S=g+1;let E=0,T=0;const A=new ul;for(let i=0;i<S;i++){const o=i*x-w;for(let u=0;u<M;u++){const h=u*y-b;A[t]=h*l,A[e]=o*r,A[n]=_,s.push(A.x,A.y,A.z),A[t]=0,A[e]=0,A[n]=f>0?1:-1,a.push(A.x,A.y,A.z),c.push(u/m),c.push(1-i/g),E+=1}}for(let t=0;t<g;t++)for(let e=0;e<m;e++){const n=h+e+M*t,l=h+e+M*(t+1),r=h+(e+1)+M*(t+1),i=h+(e+1)+M*t;u.push(n,l,i),u.push(l,r,i),T+=6}o.addGroup(d,T,v),d+=T,h+=E}p("z","y","x",-1,-1,n,e,t,i,r,0),p("z","y","x",1,-1,n,e,-t,i,r,1),p("x","z","y",1,1,t,n,e,l,i,2),p("x","z","y",1,-1,t,n,-e,l,i,3),p("x","y","z",1,-1,t,e,n,l,r,4),p("x","y","z",-1,-1,t,e,-n,l,r,5),this.setIndex(u),this.setAttribute("position",new Ur(s,3)),this.setAttribute("normal",new Ur(a,3)),this.setAttribute("uv",new Ur(c,2))}static fromJSON(t){return new bi(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function wi(t){const e={};for(const n in t){e[n]={};for(const l in t[n]){const r=t[n][l];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?e[n][l]=r.clone():Array.isArray(r)?e[n][l]=r.slice():e[n][l]=r}}return e}function _i(t){const e={};for(let n=0;n<t.length;n++){const l=wi(t[n]);for(const t in l)e[t]=l[t]}return e}const Mi={clone:wi,merge:_i};class Si extends _r{constructor(t){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&(void 0!==t.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(t))}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=wi(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const n in this.uniforms){const l=this.uniforms[n].value;l&&l.isTexture?e.uniforms[n]={type:"t",value:l.toJSON(t).uuid}:l&&l.isColor?e.uniforms[n]={type:"c",value:l.getHex()}:l&&l.isVector2?e.uniforms[n]={type:"v2",value:l.toArray()}:l&&l.isVector3?e.uniforms[n]={type:"v3",value:l.toArray()}:l&&l.isVector4?e.uniforms[n]={type:"v4",value:l.toArray()}:l&&l.isMatrix3?e.uniforms[n]={type:"m3",value:l.toArray()}:l&&l.isMatrix4?e.uniforms[n]={type:"m4",value:l.toArray()}:e.uniforms[n]={value:l}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;const n={};for(const t in this.extensions)!0===this.extensions[t]&&(n[t]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}}Si.prototype.isShaderMaterial=!0;class Ei extends ar{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new Fl,this.projectionMatrix=new Fl,this.projectionMatrixInverse=new Fl}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}Ei.prototype.isCamera=!0;class Ti extends Ei{constructor(t=50,e=1,n=.1,l=2e3){super(),this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=n,this.far=l,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*Hn*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*zn*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*Hn*Math.atan(Math.tan(.5*zn*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,n,l,r,i){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=l,this.view.width=r,this.view.height=i,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*zn*this.fov)/this.zoom,n=2*e,l=this.aspect*n,r=-.5*l;const i=this.view;if(null!==this.view&&this.view.enabled){const t=i.fullWidth,o=i.fullHeight;r+=i.offsetX*l/t,e-=i.offsetY*n/o,l*=i.width/t,n*=i.height/o}const o=this.filmOffset;0!==o&&(r+=t*o/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+l,e,e-n,t,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}Ti.prototype.isPerspectiveCamera=!0;const Ai=90;class Li extends ar{constructor(t,e,n){if(super(),this.type="CubeCamera",!0!==n.isWebGLCubeRenderTarget)return void console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");this.renderTarget=n;const l=new Ti(Ai,1,t,e);l.layers=this.layers,l.up.set(0,-1,0),l.lookAt(new ul(1,0,0)),this.add(l);const r=new Ti(Ai,1,t,e);r.layers=this.layers,r.up.set(0,-1,0),r.lookAt(new ul(-1,0,0)),this.add(r);const i=new Ti(Ai,1,t,e);i.layers=this.layers,i.up.set(0,0,1),i.lookAt(new ul(0,1,0)),this.add(i);const o=new Ti(Ai,1,t,e);o.layers=this.layers,o.up.set(0,0,-1),o.lookAt(new ul(0,-1,0)),this.add(o);const u=new Ti(Ai,1,t,e);u.layers=this.layers,u.up.set(0,-1,0),u.lookAt(new ul(0,0,1)),this.add(u);const s=new Ti(Ai,1,t,e);s.layers=this.layers,s.up.set(0,-1,0),s.lookAt(new ul(0,0,-1)),this.add(s)}update(t,e){null===this.parent&&this.updateMatrixWorld();const n=this.renderTarget,[l,r,i,o,u,s]=this.children,a=t.xr.enabled,c=t.getRenderTarget();t.xr.enabled=!1;const h=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0),t.render(e,l),t.setRenderTarget(n,1),t.render(e,r),t.setRenderTarget(n,2),t.render(e,i),t.setRenderTarget(n,3),t.render(e,o),t.setRenderTarget(n,4),t.render(e,u),n.texture.generateMipmaps=h,t.setRenderTarget(n,5),t.render(e,s),t.setRenderTarget(c),t.xr.enabled=a}}class Ci extends tl{constructor(t,e,n,l,r,i,o,u,s,a){super(t=void 0!==t?t:[],e=void 0!==e?e:it,n,l,r,i,o=void 0!==o?o:Bt,u,s,a),this._needsFlipEnvMap=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}Ci.prototype.isCubeTexture=!0;class Pi extends ll{constructor(t,e,n){Number.isInteger(e)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),e=n),super(t,t,e),e=e||{},this.texture=new Ci(void 0,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:xt,this.texture._needsFlipEnvMap=!1}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.format=Ft,this.texture.encoding=e.encoding,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={tEquirect:{value:null}},l="\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",r="\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t",i=new bi(5,5,5),o=new Si({name:"CubemapFromEquirect",uniforms:wi(n),vertexShader:l,fragmentShader:r,side:m,blending:x});o.uniforms.tEquirect.value=e;const u=new yi(i,o),s=e.minFilter;return e.minFilter===_t&&(e.minFilter=xt),new Li(1,10,this).update(t,u),e.minFilter=s,u.geometry.dispose(),u.material.dispose(),this}clear(t,e,n,l){const r=t.getRenderTarget();for(let r=0;r<6;r++)t.setRenderTarget(this,r),t.clear(e,n,l);t.setRenderTarget(r)}}Pi.prototype.isWebGLCubeRenderTarget=!0;const Ri=new ul,Oi=new ul,Ii=new Jn;class Di{constructor(t=new ul(1,0,0),e=0){this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,l){return this.normal.set(t,e,n),this.constant=l,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const l=Ri.subVectors(n,e).cross(Oi.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(l,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,e){const n=t.delta(Ri),l=this.normal.dot(n);if(0===l)return 0===this.distanceToPoint(t.start)?e.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/l;return r<0||r>1?null:e.copy(n).multiplyScalar(r).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||Ii.getNormalMatrix(t),l=this.coplanarPoint(Ri).applyMatrix4(t),r=this.normal.applyMatrix3(n).normalize();return this.constant=-l.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}Di.prototype.isPlane=!0;const ki=new Cl,Ni=new ul;class Bi{constructor(t=new Di,e=new Di,n=new Di,l=new Di,r=new Di,i=new Di){this.planes=[t,e,n,l,r,i]}set(t,e,n,l,r,i){const o=this.planes;return o[0].copy(t),o[1].copy(e),o[2].copy(n),o[3].copy(l),o[4].copy(r),o[5].copy(i),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t){const e=this.planes,n=t.elements,l=n[0],r=n[1],i=n[2],o=n[3],u=n[4],s=n[5],a=n[6],c=n[7],h=n[8],d=n[9],p=n[10],f=n[11],m=n[12],g=n[13],v=n[14],y=n[15];return e[0].setComponents(o-l,c-u,f-h,y-m).normalize(),e[1].setComponents(o+l,c+u,f+h,y+m).normalize(),e[2].setComponents(o+r,c+s,f+d,y+g).normalize(),e[3].setComponents(o-r,c-s,f-d,y-g).normalize(),e[4].setComponents(o-i,c-a,f-p,y-v).normalize(),e[5].setComponents(o+i,c+a,f+p,y+v).normalize(),this}intersectsObject(t){const e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),ki.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(ki)}intersectsSprite(t){return ki.center.set(0,0,0),ki.radius=.7071067811865476,ki.applyMatrix4(t.matrixWorld),this.intersectsSphere(ki)}intersectsSphere(t){const e=this.planes,n=t.center,l=-t.radius;for(let t=0;t<6;t++)if(e[t].distanceToPoint(n)<l)return!1;return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const l=e[n];if(Ni.x=l.normal.x>0?t.max.x:t.min.x,Ni.y=l.normal.y>0?t.max.y:t.min.y,Ni.z=l.normal.z>0?t.max.z:t.min.z,l.distanceToPoint(Ni)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function Fi(){let t=null,e=!1,n=null,l=null;function r(e,i){n(e,i),l=t.requestAnimationFrame(r)}return{start:function(){!0!==e&&null!==n&&(l=t.requestAnimationFrame(r),e=!0)},stop:function(){t.cancelAnimationFrame(l),e=!1},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function zi(t,e){const n=e.isWebGL2,l=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),l.get(t)},remove:function(e){e.isInterleavedBufferAttribute&&(e=e.data);const n=l.get(e);n&&(t.deleteBuffer(n.buffer),l.delete(e))},update:function(e,r){if(e.isGLBufferAttribute){const t=l.get(e);return void((!t||t.version<e.version)&&l.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version}))}e.isInterleavedBufferAttribute&&(e=e.data);const i=l.get(e);void 0===i?l.set(e,function(e,l){const r=e.array,i=e.usage,o=t.createBuffer();t.bindBuffer(l,o),t.bufferData(l,r,i),e.onUploadCallback();let u=5126;return r instanceof Float32Array?u=5126:r instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):r instanceof Uint16Array?e.isFloat16BufferAttribute?n?u=5131:console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."):u=5123:r instanceof Int16Array?u=5122:r instanceof Uint32Array?u=5125:r instanceof Int32Array?u=5124:r instanceof Int8Array?u=5120:(r instanceof Uint8Array||r instanceof Uint8ClampedArray)&&(u=5121),{buffer:o,type:u,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version}}(e,r)):i.version<e.version&&(function(e,l,r){const i=l.array,o=l.updateRange;t.bindBuffer(r,e),-1===o.count?t.bufferSubData(r,0,i):(n?t.bufferSubData(r,o.offset*i.BYTES_PER_ELEMENT,i,o.offset,o.count):t.bufferSubData(r,o.offset*i.BYTES_PER_ELEMENT,i.subarray(o.offset,o.offset+o.count)),o.count=-1)}(i.buffer,e,r),i.version=e.version)}}}class Hi extends ti{constructor(t=1,e=1,n=1,l=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:l};const r=t/2,i=e/2,o=Math.floor(n),u=Math.floor(l),s=o+1,a=u+1,c=t/o,h=e/u,d=[],p=[],f=[],m=[];for(let t=0;t<a;t++){const e=t*h-i;for(let n=0;n<s;n++){const l=n*c-r;p.push(l,-e,0),f.push(0,0,1),m.push(n/o),m.push(1-t/u)}}for(let t=0;t<u;t++)for(let e=0;e<o;e++){const n=e+s*t,l=e+s*(t+1),r=e+1+s*(t+1),i=e+1+s*t;d.push(n,l,i),d.push(l,r,i)}this.setIndex(d),this.setAttribute("position",new Ur(p,3)),this.setAttribute("normal",new Ur(f,3)),this.setAttribute("uv",new Ur(m,2))}static fromJSON(t){return new Hi(t.width,t.height,t.widthSegments,t.heightSegments)}}const ji={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotVH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\t\tvec2 f = fract( uv );\n\t\tuv += 0.5 - f;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x += texelSize;\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.y += texelSize;\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x -= texelSize;\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tvec3 tm = mix( tl, tr, f.x );\n\t\tvec3 bm = mix( bl, br, f.x );\n\t\treturn mix( tm, bm, f.y );\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tfogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat specularRoughness;\n\tvec3 specularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\t\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\t\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSNMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition.xyz / vWorldPosition.w;\n\tvec3 v = normalize( cameraPosition - pos );\n\tfloat ior = ( 1.0 + 0.4 * reflectivity ) / ( 1.0 - 0.4 * reflectivity );\n\tvec3 transmission = transmissionFactor * getIBLVolumeRefraction(\n\t\tnormal, v, roughnessFactor, material.diffuseColor, totalSpecular,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission, transmissionFactor );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec4 vWorldPosition;\n\tvec3 getVolumeTransmissionRay(vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix) {\n\t\tvec3 refractionVector = refract(-v, normalize(n), 1.0 / ior);\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length(vec3(modelMatrix[0].xyz));\n\t\tmodelScale.y = length(vec3(modelMatrix[1].xyz));\n\t\tmodelScale.z = length(vec3(modelMatrix[2].xyz));\n\t\treturn normalize(refractionVector) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness(float roughness, float ior) {\n\t\treturn roughness * clamp(ior * 2.0 - 2.0, 0.0, 1.0);\n\t}\n\tvec3 getTransmissionSample(vec2 fragCoord, float roughness, float ior) {\n\t\tfloat framebufferLod = log2(transmissionSamplerSize.x) * applyIorToRoughness(roughness, ior);\n\t\treturn texture2DLodEXT(transmissionSamplerMap, fragCoord.xy, framebufferLod).rgb;\n\t}\n\tvec3 applyVolumeAttenuation(vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance) {\n\t\tif (attenuationDistance == 0.0) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log(attenuationColor) / attenuationDistance;\n\t\t\tvec3 transmittance = exp(-attenuationCoefficient * transmissionDistance);\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec3 getIBLVolumeRefraction(vec3 n, vec3 v, float perceptualRoughness, vec3 baseColor, vec3 specularColor,\n\t\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\n\t\tvec3 attenuationColor, float attenuationDistance) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay(n, v, thickness, ior, modelMatrix);\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4(refractedRayExit, 1.0);\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec3 transmittedLight = getTransmissionSample(refractionCoords, perceptualRoughness, ior);\n\t\tvec3 attenuatedColor = applyVolumeAttenuation(transmittedLight, length(transmissionRay), attenuationColor, attenuationDistance);\n\t\treturn (1.0 - specularColor) * attenuatedColor * baseColor;\n\t}\n#endif",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform vec3 attenuationColor;\n\tuniform float attenuationDistance;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <transmission_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#ifdef USE_TRANSMISSION\n\tvarying vec4 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition;\n#endif\n}",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"},Ui={common:{diffuse:{value:new Cr(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new Jn},uv2Transform:{value:new Jn},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new $n(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Cr(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Cr(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Jn}},sprite:{diffuse:{value:new Cr(16777215)},opacity:{value:1},center:{value:new $n(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Jn}}},Gi={basic:{uniforms:_i([Ui.common,Ui.specularmap,Ui.envmap,Ui.aomap,Ui.lightmap,Ui.fog]),vertexShader:ji.meshbasic_vert,fragmentShader:ji.meshbasic_frag},lambert:{uniforms:_i([Ui.common,Ui.specularmap,Ui.envmap,Ui.aomap,Ui.lightmap,Ui.emissivemap,Ui.fog,Ui.lights,{emissive:{value:new Cr(0)}}]),vertexShader:ji.meshlambert_vert,fragmentShader:ji.meshlambert_frag},phong:{uniforms:_i([Ui.common,Ui.specularmap,Ui.envmap,Ui.aomap,Ui.lightmap,Ui.emissivemap,Ui.bumpmap,Ui.normalmap,Ui.displacementmap,Ui.fog,Ui.lights,{emissive:{value:new Cr(0)},specular:{value:new Cr(1118481)},shininess:{value:30}}]),vertexShader:ji.meshphong_vert,fragmentShader:ji.meshphong_frag},standard:{uniforms:_i([Ui.common,Ui.envmap,Ui.aomap,Ui.lightmap,Ui.emissivemap,Ui.bumpmap,Ui.normalmap,Ui.displacementmap,Ui.roughnessmap,Ui.metalnessmap,Ui.fog,Ui.lights,{emissive:{value:new Cr(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:ji.meshphysical_vert,fragmentShader:ji.meshphysical_frag},toon:{uniforms:_i([Ui.common,Ui.aomap,Ui.lightmap,Ui.emissivemap,Ui.bumpmap,Ui.normalmap,Ui.displacementmap,Ui.gradientmap,Ui.fog,Ui.lights,{emissive:{value:new Cr(0)}}]),vertexShader:ji.meshtoon_vert,fragmentShader:ji.meshtoon_frag},matcap:{uniforms:_i([Ui.common,Ui.bumpmap,Ui.normalmap,Ui.displacementmap,Ui.fog,{matcap:{value:null}}]),vertexShader:ji.meshmatcap_vert,fragmentShader:ji.meshmatcap_frag},points:{uniforms:_i([Ui.points,Ui.fog]),vertexShader:ji.points_vert,fragmentShader:ji.points_frag},dashed:{uniforms:_i([Ui.common,Ui.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ji.linedashed_vert,fragmentShader:ji.linedashed_frag},depth:{uniforms:_i([Ui.common,Ui.displacementmap]),vertexShader:ji.depth_vert,fragmentShader:ji.depth_frag},normal:{uniforms:_i([Ui.common,Ui.bumpmap,Ui.normalmap,Ui.displacementmap,{opacity:{value:1}}]),vertexShader:ji.normal_vert,fragmentShader:ji.normal_frag},sprite:{uniforms:_i([Ui.sprite,Ui.fog]),vertexShader:ji.sprite_vert,fragmentShader:ji.sprite_frag},background:{uniforms:{uvTransform:{value:new Jn},t2D:{value:null}},vertexShader:ji.background_vert,fragmentShader:ji.background_frag},cube:{uniforms:_i([Ui.envmap,{opacity:{value:1}}]),vertexShader:ji.cube_vert,fragmentShader:ji.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ji.equirect_vert,fragmentShader:ji.equirect_frag},distanceRGBA:{uniforms:_i([Ui.common,Ui.displacementmap,{referencePosition:{value:new ul},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:ji.distanceRGBA_vert,fragmentShader:ji.distanceRGBA_frag},shadow:{uniforms:_i([Ui.lights,Ui.fog,{color:{value:new Cr(0)},opacity:{value:1}}]),vertexShader:ji.shadow_vert,fragmentShader:ji.shadow_frag}};function Vi(t,e,n,l,r){const i=new Cr(0);let o,u,s=0,a=null,c=0,h=null;function d(t,e){n.buffers.color.setClear(t.r,t.g,t.b,e,r)}return{getClearColor:function(){return i},setClearColor:function(t,e=1){i.set(t),s=e,d(i,s)},getClearAlpha:function(){return s},setClearAlpha:function(t){s=t,d(i,s)},render:function(n,r){let p=!1,g=!0===r.isScene?r.background:null;g&&g.isTexture&&(g=e.get(g));const v=t.xr,y=v.getSession&&v.getSession();y&&"additive"===y.environmentBlendMode&&(g=null),null===g?d(i,s):g&&g.isColor&&(d(g,1),p=!0),(t.autoClear||p)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),g&&(g.isCubeTexture||g.mapping===at)?(void 0===u&&(u=new yi(new bi(1,1,1),new Si({name:"BackgroundCubeMaterial",uniforms:wi(Gi.cube.uniforms),vertexShader:Gi.cube.vertexShader,fragmentShader:Gi.cube.fragmentShader,side:m,depthTest:!1,depthWrite:!1,fog:!1})),u.geometry.deleteAttribute("normal"),u.geometry.deleteAttribute("uv"),u.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(u.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),l.update(u)),u.material.uniforms.envMap.value=g,u.material.uniforms.flipEnvMap.value=g.isCubeTexture&&g._needsFlipEnvMap?-1:1,a===g&&c===g.version&&h===t.toneMapping||(u.material.needsUpdate=!0,a=g,c=g.version,h=t.toneMapping),n.unshift(u,u.geometry,u.material,0,0,null)):g&&g.isTexture&&(void 0===o&&(o=new yi(new Hi(2,2),new Si({name:"BackgroundMaterial",uniforms:wi(Gi.background.uniforms),vertexShader:Gi.background.vertexShader,fragmentShader:Gi.background.fragmentShader,side:f,depthTest:!1,depthWrite:!1,fog:!1})),o.geometry.deleteAttribute("normal"),Object.defineProperty(o.material,"map",{get:function(){return this.uniforms.t2D.value}}),l.update(o)),o.material.uniforms.t2D.value=g,!0===g.matrixAutoUpdate&&g.updateMatrix(),o.material.uniforms.uvTransform.value.copy(g.matrix),a===g&&c===g.version&&h===t.toneMapping||(o.material.needsUpdate=!0,a=g,c=g.version,h=t.toneMapping),n.unshift(o,o.geometry,o.material,0,0,null))}}}function Wi(t,e,n,l){const r=t.getParameter(34921),i=l.isWebGL2?null:e.get("OES_vertex_array_object"),o=l.isWebGL2||null!==i,u={},s=d(null);let a=s;function c(e){return l.isWebGL2?t.bindVertexArray(e):i.bindVertexArrayOES(e)}function h(e){return l.isWebGL2?t.deleteVertexArray(e):i.deleteVertexArrayOES(e)}function d(t){const e=[],n=[],l=[];for(let t=0;t<r;t++)e[t]=0,n[t]=0,l[t]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:e,enabledAttributes:n,attributeDivisors:l,object:t,attributes:{},index:null}}function p(){const t=a.newAttributes;for(let e=0,n=t.length;e<n;e++)t[e]=0}function f(t){m(t,0)}function m(n,r){const i=a.newAttributes,o=a.enabledAttributes,u=a.attributeDivisors;i[n]=1,0===o[n]&&(t.enableVertexAttribArray(n),o[n]=1),u[n]!==r&&((l.isWebGL2?t:e.get("ANGLE_instanced_arrays"))[l.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,r),u[n]=r)}function g(){const e=a.newAttributes,n=a.enabledAttributes;for(let l=0,r=n.length;l<r;l++)n[l]!==e[l]&&(t.disableVertexAttribArray(l),n[l]=0)}function v(e,n,r,i,o,u){!0!==l.isWebGL2||5124!==r&&5125!==r?t.vertexAttribPointer(e,n,r,i,o,u):t.vertexAttribIPointer(e,n,r,o,u)}function y(){x(),a!==s&&(a=s,c(a.object))}function x(){s.geometry=null,s.program=null,s.wireframe=!1}return{setup:function(r,s,h,y,x){let b=!1;if(o){const e=function(e,n,r){const o=!0===r.wireframe;let s=u[e.id];void 0===s&&(s={},u[e.id]=s);let a=s[n.id];void 0===a&&(a={},s[n.id]=a);let c=a[o];return void 0===c&&(c=d(l.isWebGL2?t.createVertexArray():i.createVertexArrayOES()),a[o]=c),c}(y,h,s);a!==e&&(a=e,c(a.object)),b=function(t,e){const n=a.attributes,l=t.attributes;let r=0;for(const t in l){const e=n[t],i=l[t];if(void 0===e)return!0;if(e.attribute!==i)return!0;if(e.data!==i.data)return!0;r++}return a.attributesNum!==r||a.index!==e}(y,x),b&&function(t,e){const n={},l=t.attributes;let r=0;for(const t in l){const e=l[t],i={};i.attribute=e,e.data&&(i.data=e.data),n[t]=i,r++}a.attributes=n,a.attributesNum=r,a.index=e}(y,x)}else{const t=!0===s.wireframe;a.geometry===y.id&&a.program===h.id&&a.wireframe===t||(a.geometry=y.id,a.program=h.id,a.wireframe=t,b=!0)}!0===r.isInstancedMesh&&(b=!0),null!==x&&n.update(x,34963),b&&(function(r,i,o,u){if(!1===l.isWebGL2&&(r.isInstancedMesh||u.isInstancedBufferGeometry)&&null===e.get("ANGLE_instanced_arrays"))return;p();const s=u.attributes,a=o.getAttributes(),c=i.defaultAttributeValues;for(const e in a){const l=a[e];if(l>=0){const i=s[e];if(void 0!==i){const e=i.normalized,r=i.itemSize,o=n.get(i);if(void 0===o)continue;const s=o.buffer,a=o.type,c=o.bytesPerElement;if(i.isInterleavedBufferAttribute){const n=i.data,o=n.stride,h=i.offset;n&&n.isInstancedInterleavedBuffer?(m(l,n.meshPerAttribute),void 0===u._maxInstanceCount&&(u._maxInstanceCount=n.meshPerAttribute*n.count)):f(l),t.bindBuffer(34962,s),v(l,r,a,e,o*c,h*c)}else i.isInstancedBufferAttribute?(m(l,i.meshPerAttribute),void 0===u._maxInstanceCount&&(u._maxInstanceCount=i.meshPerAttribute*i.count)):f(l),t.bindBuffer(34962,s),v(l,r,a,e,0,0)}else if("instanceMatrix"===e){const e=n.get(r.instanceMatrix);if(void 0===e)continue;const i=e.buffer,o=e.type;m(l+0,1),m(l+1,1),m(l+2,1),m(l+3,1),t.bindBuffer(34962,i),t.vertexAttribPointer(l+0,4,o,!1,64,0),t.vertexAttribPointer(l+1,4,o,!1,64,16),t.vertexAttribPointer(l+2,4,o,!1,64,32),t.vertexAttribPointer(l+3,4,o,!1,64,48)}else if("instanceColor"===e){const e=n.get(r.instanceColor);if(void 0===e)continue;const i=e.buffer,o=e.type;m(l,1),t.bindBuffer(34962,i),t.vertexAttribPointer(l,3,o,!1,12,0)}else if(void 0!==c){const n=c[e];if(void 0!==n)switch(n.length){case 2:t.vertexAttrib2fv(l,n);break;case 3:t.vertexAttrib3fv(l,n);break;case 4:t.vertexAttrib4fv(l,n);break;default:t.vertexAttrib1fv(l,n)}}}}g()}(r,s,h,y),null!==x&&t.bindBuffer(34963,n.get(x).buffer))},reset:y,resetDefaultState:x,dispose:function(){y();for(const t in u){const e=u[t];for(const t in e){const n=e[t];for(const t in n)h(n[t].object),delete n[t];delete e[t]}delete u[t]}},releaseStatesOfGeometry:function(t){if(void 0===u[t.id])return;const e=u[t.id];for(const t in e){const n=e[t];for(const t in n)h(n[t].object),delete n[t];delete e[t]}delete u[t.id]},releaseStatesOfProgram:function(t){for(const e in u){const n=u[e];if(void 0===n[t.id])continue;const l=n[t.id];for(const t in l)h(l[t].object),delete l[t];delete n[t.id]}},initAttributes:p,enableAttribute:f,disableUnusedAttributes:g}}function qi(t,e,n,l){const r=l.isWebGL2;let i;this.setMode=function(t){i=t},this.render=function(e,l){t.drawArrays(i,e,l),n.update(l,i,1)},this.renderInstances=function(l,o,u){if(0===u)return;let s,a;if(r)s=t,a="drawArraysInstanced";else if(s=e.get("ANGLE_instanced_arrays"),a="drawArraysInstancedANGLE",null===s)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");s[a](i,l,o,u),n.update(o,i,u)}}function Xi(t,e,n){let l;function r(e){if("highp"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const i="undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&t instanceof WebGL2ComputeRenderingContext;let o=void 0!==n.precision?n.precision:"highp";const u=r(o);u!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",u,"instead."),o=u);const s=i||e.has("WEBGL_draw_buffers"),a=!0===n.logarithmicDepthBuffer,c=t.getParameter(34930),h=t.getParameter(35660),d=t.getParameter(3379),p=t.getParameter(34076),f=t.getParameter(34921),m=t.getParameter(36347),g=t.getParameter(36348),v=t.getParameter(36349),y=h>0,x=i||e.has("OES_texture_float");return{isWebGL2:i,drawBuffers:s,getMaxAnisotropy:function(){if(void 0!==l)return l;if(!0===e.has("EXT_texture_filter_anisotropic")){const n=e.get("EXT_texture_filter_anisotropic");l=t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else l=0;return l},getMaxPrecision:r,precision:o,logarithmicDepthBuffer:a,maxTextures:c,maxVertexTextures:h,maxTextureSize:d,maxCubemapSize:p,maxAttributes:f,maxVertexUniforms:m,maxVaryings:g,maxFragmentUniforms:v,vertexTextures:y,floatFragmentTextures:x,floatVertexTextures:y&&x,maxSamples:i?t.getParameter(36183):0}}function Yi(t){const e=this;let n=null,l=0,r=!1,i=!1;const o=new Di,u=new Jn,s={value:null,needsUpdate:!1};function a(){s.value!==n&&(s.value=n,s.needsUpdate=l>0),e.numPlanes=l,e.numIntersection=0}function c(t,n,l,r){const i=null!==t?t.length:0;let a=null;if(0!==i){if(a=s.value,!0!==r||null===a){const e=l+4*i,r=n.matrixWorldInverse;u.getNormalMatrix(r),(null===a||a.length<e)&&(a=new Float32Array(e));for(let e=0,n=l;e!==i;++e,n+=4)o.copy(t[e]).applyMatrix4(r,u),o.normal.toArray(a,n),a[n+3]=o.constant}s.value=a,s.needsUpdate=!0}return e.numPlanes=i,e.numIntersection=0,a}this.uniform=s,this.numPlanes=0,this.numIntersection=0,this.init=function(t,e,i){const o=0!==t.length||e||0!==l||r;return r=e,n=c(t,i,0),l=t.length,o},this.beginShadows=function(){i=!0,c(null)},this.endShadows=function(){i=!1,a()},this.setState=function(e,o,u){const h=e.clippingPlanes,d=e.clipIntersection,p=e.clipShadows,f=t.get(e);if(!r||null===h||0===h.length||i&&!p)i?c(null):a();else{const t=i?0:l,e=4*t;let r=f.clippingState||null;s.value=r,r=c(h,o,e,u);for(let t=0;t!==e;++t)r[t]=n[t];f.clippingState=r,this.numIntersection=d?this.numPlanes:0,this.numPlanes+=t}}}function $i(t){let e=new WeakMap;function n(t,e){return e===ut?t.mapping=it:e===st&&(t.mapping=ot),t}function l(t){const n=t.target;n.removeEventListener("dispose",l);const r=e.get(n);void 0!==r&&(e.delete(n),r.dispose())}return{get:function(r){if(r&&r.isTexture){const i=r.mapping;if(i===ut||i===st){if(e.has(r))return n(e.get(r).texture,r.mapping);{const i=r.image;if(i&&i.height>0){const o=t.getRenderTarget(),u=new Pi(i.height/2);return u.fromEquirectangularTexture(t,r),e.set(r,u),t.setRenderTarget(o),r.addEventListener("dispose",l),n(u.texture,r.mapping)}return null}}}return r},dispose:function(){e=new WeakMap}}}function Ji(t){const e={};function n(n){if(void 0!==e[n])return e[n];let l;switch(n){case"WEBGL_depth_texture":l=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":l=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":l=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":l=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:l=t.getExtension(n)}return e[n]=l,l}return{has:function(t){return null!==n(t)},init:function(t){t.isWebGL2?n("EXT_color_buffer_float"):(n("WEBGL_depth_texture"),n("OES_texture_float"),n("OES_texture_half_float"),n("OES_texture_half_float_linear"),n("OES_standard_derivatives"),n("OES_element_index_uint"),n("OES_vertex_array_object"),n("ANGLE_instanced_arrays")),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float")},get:function(t){const e=n(t);return null===e&&console.warn("THREE.WebGLRenderer: "+t+" extension not supported."),e}}}function Zi(t,e,n,l){const r={},i=new WeakMap;function o(t){const u=t.target;null!==u.index&&e.remove(u.index);for(const t in u.attributes)e.remove(u.attributes[t]);u.removeEventListener("dispose",o),delete r[u.id];const s=i.get(u);s&&(e.remove(s),i.delete(u)),l.releaseStatesOfGeometry(u),!0===u.isInstancedBufferGeometry&&delete u._maxInstanceCount,n.memory.geometries--}function u(t){const n=[],l=t.index,r=t.attributes.position;let o=0;if(null!==l){const t=l.array;o=l.version;for(let e=0,l=t.length;e<l;e+=3){const l=t[e+0],r=t[e+1],i=t[e+2];n.push(l,r,r,i,i,l)}}else{const t=r.array;o=r.version;for(let e=0,l=t.length/3-1;e<l;e+=3){const t=e+0,l=e+1,r=e+2;n.push(t,l,l,r,r,t)}}const u=new(Vr(n)>65535?Hr:Fr)(n,1);u.version=o;const s=i.get(t);s&&e.remove(s),i.set(t,u)}return{get:function(t,e){return!0===r[e.id]||(e.addEventListener("dispose",o),r[e.id]=!0,n.memory.geometries++),e},update:function(t){const n=t.attributes;for(const t in n)e.update(n[t],34962);const l=t.morphAttributes;for(const t in l){const n=l[t];for(let t=0,l=n.length;t<l;t++)e.update(n[t],34962)}},getWireframeAttribute:function(t){const e=i.get(t);if(e){const n=t.index;null!==n&&e.version<n.version&&u(t)}else u(t);return i.get(t)}}}function Ki(t,e,n,l){const r=l.isWebGL2;let i,o,u;this.setMode=function(t){i=t},this.setIndex=function(t){o=t.type,u=t.bytesPerElement},this.render=function(e,l){t.drawElements(i,l,o,e*u),n.update(l,i,1)},this.renderInstances=function(l,s,a){if(0===a)return;let c,h;if(r)c=t,h="drawElementsInstanced";else if(c=e.get("ANGLE_instanced_arrays"),h="drawElementsInstancedANGLE",null===c)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");c[h](i,s,o,l*u,a),n.update(s,i,a)}}function Qi(t){const e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(t,n,l){switch(e.calls++,n){case 4:e.triangles+=l*(t/3);break;case 1:e.lines+=l*(t/2);break;case 3:e.lines+=l*(t-1);break;case 2:e.lines+=l*t;break;case 0:e.points+=l*t;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",n)}}}}function to(t,e){return t[0]-e[0]}function eo(t,e){return Math.abs(e[1])-Math.abs(t[1])}function no(t){const e={},n=new Float32Array(8),l=[];for(let t=0;t<8;t++)l[t]=[t,0];return{update:function(r,i,o,u){const s=r.morphTargetInfluences,a=void 0===s?0:s.length;let c=e[i.id];if(void 0===c||c.length!==a){c=[];for(let t=0;t<a;t++)c[t]=[t,0];e[i.id]=c}for(let t=0;t<a;t++){const e=c[t];e[0]=t,e[1]=s[t]}c.sort(eo);for(let t=0;t<8;t++)t<a&&c[t][1]?(l[t][0]=c[t][0],l[t][1]=c[t][1]):(l[t][0]=Number.MAX_SAFE_INTEGER,l[t][1]=0);l.sort(to);const h=o.morphTargets&&i.morphAttributes.position,d=o.morphNormals&&i.morphAttributes.normal;let p=0;for(let t=0;t<8;t++){const e=l[t],r=e[0],o=e[1];r!==Number.MAX_SAFE_INTEGER&&o?(h&&i.getAttribute("morphTarget"+t)!==h[r]&&i.setAttribute("morphTarget"+t,h[r]),d&&i.getAttribute("morphNormal"+t)!==d[r]&&i.setAttribute("morphNormal"+t,d[r]),n[t]=o,p+=o):(h&&!0===i.hasAttribute("morphTarget"+t)&&i.deleteAttribute("morphTarget"+t),d&&!0===i.hasAttribute("morphNormal"+t)&&i.deleteAttribute("morphNormal"+t),n[t]=0)}const f=i.morphTargetsRelative?1:1-p;u.getUniforms().setValue(t,"morphTargetBaseInfluence",f),u.getUniforms().setValue(t,"morphTargetInfluences",n)}}}function lo(t,e,n,l){let r=new WeakMap;function i(t){const e=t.target;e.removeEventListener("dispose",i),n.remove(e.instanceMatrix),null!==e.instanceColor&&n.remove(e.instanceColor)}return{update:function(t){const o=l.render.frame,u=t.geometry,s=e.get(t,u);return r.get(s)!==o&&(e.update(s),r.set(s,o)),t.isInstancedMesh&&(!1===t.hasEventListener("dispose",i)&&t.addEventListener("dispose",i),n.update(t.instanceMatrix,34962),null!==t.instanceColor&&n.update(t.instanceColor,34962)),s},dispose:function(){r=new WeakMap}}}Gi.physical={uniforms:_i([Gi.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new $n(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new Cr(0)},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new $n},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new Cr(0)}}]),vertexShader:ji.meshphysical_vert,fragmentShader:ji.meshphysical_frag};class ro extends tl{constructor(t=null,e=1,n=1,l=1){super(null),this.image={data:t,width:e,height:n,depth:l},this.magFilter=ft,this.minFilter=ft,this.wrapR=dt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}ro.prototype.isDataTexture2DArray=!0;class io extends tl{constructor(t=null,e=1,n=1,l=1){super(null),this.image={data:t,width:e,height:n,depth:l},this.magFilter=ft,this.minFilter=ft,this.wrapR=dt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}io.prototype.isDataTexture3D=!0;const oo=new tl,uo=new ro,so=new io,ao=new Ci,co=[],ho=[],po=new Float32Array(16),fo=new Float32Array(9),mo=new Float32Array(4);function go(t,e,n){const l=t[0];if(l<=0||l>0)return t;const r=e*n;let i=co[r];if(void 0===i&&(i=new Float32Array(r),co[r]=i),0!==e){l.toArray(i,0);for(let l=1,r=0;l!==e;++l)r+=n,t[l].toArray(i,r)}return i}function vo(t,e){if(t.length!==e.length)return!1;for(let n=0,l=t.length;n<l;n++)if(t[n]!==e[n])return!1;return!0}function yo(t,e){for(let n=0,l=e.length;n<l;n++)t[n]=e[n]}function xo(t,e){let n=ho[e];void 0===n&&(n=new Int32Array(e),ho[e]=n);for(let l=0;l!==e;++l)n[l]=t.allocateTextureUnit();return n}function bo(t,e){const n=this.cache;n[0]!==e&&(t.uniform1f(this.addr,e),n[0]=e)}function wo(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(vo(n,e))return;t.uniform2fv(this.addr,e),yo(n,e)}}function _o(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else if(void 0!==e.r)n[0]===e.r&&n[1]===e.g&&n[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),n[0]=e.r,n[1]=e.g,n[2]=e.b);else{if(vo(n,e))return;t.uniform3fv(this.addr,e),yo(n,e)}}function Mo(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(vo(n,e))return;t.uniform4fv(this.addr,e),yo(n,e)}}function So(t,e){const n=this.cache,l=e.elements;if(void 0===l){if(vo(n,e))return;t.uniformMatrix2fv(this.addr,!1,e),yo(n,e)}else{if(vo(n,l))return;mo.set(l),t.uniformMatrix2fv(this.addr,!1,mo),yo(n,l)}}function Eo(t,e){const n=this.cache,l=e.elements;if(void 0===l){if(vo(n,e))return;t.uniformMatrix3fv(this.addr,!1,e),yo(n,e)}else{if(vo(n,l))return;fo.set(l),t.uniformMatrix3fv(this.addr,!1,fo),yo(n,l)}}function To(t,e){const n=this.cache,l=e.elements;if(void 0===l){if(vo(n,e))return;t.uniformMatrix4fv(this.addr,!1,e),yo(n,e)}else{if(vo(n,l))return;po.set(l),t.uniformMatrix4fv(this.addr,!1,po),yo(n,l)}}function Ao(t,e){const n=this.cache;n[0]!==e&&(t.uniform1i(this.addr,e),n[0]=e)}function Lo(t,e){const n=this.cache;vo(n,e)||(t.uniform2iv(this.addr,e),yo(n,e))}function Co(t,e){const n=this.cache;vo(n,e)||(t.uniform3iv(this.addr,e),yo(n,e))}function Po(t,e){const n=this.cache;vo(n,e)||(t.uniform4iv(this.addr,e),yo(n,e))}function Ro(t,e){const n=this.cache;n[0]!==e&&(t.uniform1ui(this.addr,e),n[0]=e)}function Oo(t,e){const n=this.cache;vo(n,e)||(t.uniform2uiv(this.addr,e),yo(n,e))}function Io(t,e){const n=this.cache;vo(n,e)||(t.uniform3uiv(this.addr,e),yo(n,e))}function Do(t,e){const n=this.cache;vo(n,e)||(t.uniform4uiv(this.addr,e),yo(n,e))}function ko(t,e,n){const l=this.cache,r=n.allocateTextureUnit();l[0]!==r&&(t.uniform1i(this.addr,r),l[0]=r),n.safeSetTexture2D(e||oo,r)}function No(t,e,n){const l=this.cache,r=n.allocateTextureUnit();l[0]!==r&&(t.uniform1i(this.addr,r),l[0]=r),n.setTexture3D(e||so,r)}function Bo(t,e,n){const l=this.cache,r=n.allocateTextureUnit();l[0]!==r&&(t.uniform1i(this.addr,r),l[0]=r),n.safeSetTextureCube(e||ao,r)}function Fo(t,e,n){const l=this.cache,r=n.allocateTextureUnit();l[0]!==r&&(t.uniform1i(this.addr,r),l[0]=r),n.setTexture2DArray(e||uo,r)}function zo(t,e){t.uniform1fv(this.addr,e)}function Ho(t,e){const n=go(e,this.size,2);t.uniform2fv(this.addr,n)}function jo(t,e){const n=go(e,this.size,3);t.uniform3fv(this.addr,n)}function Uo(t,e){const n=go(e,this.size,4);t.uniform4fv(this.addr,n)}function Go(t,e){const n=go(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,n)}function Vo(t,e){const n=go(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,n)}function Wo(t,e){const n=go(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,n)}function qo(t,e){t.uniform1iv(this.addr,e)}function Xo(t,e){t.uniform2iv(this.addr,e)}function Yo(t,e){t.uniform3iv(this.addr,e)}function $o(t,e){t.uniform4iv(this.addr,e)}function Jo(t,e){t.uniform1uiv(this.addr,e)}function Zo(t,e){t.uniform2uiv(this.addr,e)}function Ko(t,e){t.uniform3uiv(this.addr,e)}function Qo(t,e){t.uniform4uiv(this.addr,e)}function tu(t,e,n){const l=e.length,r=xo(n,l);t.uniform1iv(this.addr,r);for(let t=0;t!==l;++t)n.safeSetTexture2D(e[t]||oo,r[t])}function eu(t,e,n){const l=e.length,r=xo(n,l);t.uniform1iv(this.addr,r);for(let t=0;t!==l;++t)n.safeSetTextureCube(e[t]||ao,r[t])}function nu(t,e,n){this.id=t,this.addr=n,this.cache=[],this.setValue=function(t){switch(t){case 5126:return bo;case 35664:return wo;case 35665:return _o;case 35666:return Mo;case 35674:return So;case 35675:return Eo;case 35676:return To;case 5124:case 35670:return Ao;case 35667:case 35671:return Lo;case 35668:case 35672:return Co;case 35669:case 35673:return Po;case 5125:return Ro;case 36294:return Oo;case 36295:return Io;case 36296:return Do;case 35678:case 36198:case 36298:case 36306:case 35682:return ko;case 35679:case 36299:case 36307:return No;case 35680:case 36300:case 36308:case 36293:return Bo;case 36289:case 36303:case 36311:case 36292:return Fo}}(e.type)}function lu(t,e,n){this.id=t,this.addr=n,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return zo;case 35664:return Ho;case 35665:return jo;case 35666:return Uo;case 35674:return Go;case 35675:return Vo;case 35676:return Wo;case 5124:case 35670:return qo;case 35667:case 35671:return Xo;case 35668:case 35672:return Yo;case 35669:case 35673:return $o;case 5125:return Jo;case 36294:return Zo;case 36295:return Ko;case 36296:return Qo;case 35678:case 36198:case 36298:case 36306:case 35682:return tu;case 35680:case 36300:case 36308:case 36293:return eu}}(e.type)}function ru(t){this.id=t,this.seq=[],this.map={}}lu.prototype.updateCache=function(t){const e=this.cache;t instanceof Float32Array&&e.length!==t.length&&(this.cache=new Float32Array(t.length)),yo(e,t)},ru.prototype.setValue=function(t,e,n){const l=this.seq;for(let r=0,i=l.length;r!==i;++r){const i=l[r];i.setValue(t,e[i.id],n)}};const iu=/(\w+)(\])?(\[|\.)?/g;function ou(t,e){t.seq.push(e),t.map[e.id]=e}function uu(t,e,n){const l=t.name,r=l.length;for(iu.lastIndex=0;;){const i=iu.exec(l),o=iu.lastIndex;let u=i[1];const s="]"===i[2],a=i[3];if(s&&(u|=0),void 0===a||"["===a&&o+2===r){ou(n,void 0===a?new nu(u,t,e):new lu(u,t,e));break}{let t=n.map[u];void 0===t&&(t=new ru(u),ou(n,t)),n=t}}}function su(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,35718);for(let l=0;l<n;++l){const n=t.getActiveUniform(e,l);uu(n,t.getUniformLocation(e,n.name),this)}}function au(t,e,n){const l=t.createShader(e);return t.shaderSource(l,n),t.compileShader(l),l}su.prototype.setValue=function(t,e,n,l){const r=this.map[e];void 0!==r&&r.setValue(t,n,l)},su.prototype.setOptional=function(t,e,n){const l=e[n];void 0!==l&&this.setValue(t,n,l)},su.upload=function(t,e,n,l){for(let r=0,i=e.length;r!==i;++r){const i=e[r],o=n[i.id];!1!==o.needsUpdate&&i.setValue(t,o.value,l)}},su.seqWithValue=function(t,e){const n=[];for(let l=0,r=t.length;l!==r;++l){const r=t[l];r.id in e&&n.push(r)}return n};let cu=0;function hu(t){switch(t){case Je:return["Linear","( value )"];case Ze:return["sRGB","( value )"];case Qe:return["RGBE","( value )"];case en:return["RGBM","( value, 7.0 )"];case nn:return["RGBM","( value, 16.0 )"];case ln:return["RGBD","( value, 256.0 )"];case Ke:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case tn:return["LogLuv","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",t),["Linear","( value )"]}}function du(t,e,n){const l=t.getShaderParameter(e,35713),r=t.getShaderInfoLog(e).trim();return l&&""===r?"":"THREE.WebGLShader: gl.getShaderInfoLog() "+n+"\n"+r+function(t){const e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}(t.getShaderSource(e))}function pu(t,e){const n=hu(e);return"vec4 "+t+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function fu(t,e){const n=hu(e);return"vec4 "+t+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}function mu(t,e){let n;switch(e){case Q:n="Linear";break;case tt:n="Reinhard";break;case et:n="OptimizedCineon";break;case nt:n="ACESFilmic";break;case lt:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),n="Linear"}return"vec3 "+t+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function gu(t){return""!==t}function vu(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function yu(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const xu=/^[ \t]*#include +<([\w\d./]+)>/gm;function bu(t){return t.replace(xu,wu)}function wu(t,e){const n=ji[e];if(void 0===n)throw new Error("Can not resolve #include <"+e+">");return bu(n)}const _u=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,Mu=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Su(t){return t.replace(Mu,Tu).replace(_u,Eu)}function Eu(t,e,n,l){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),Tu(0,e,n,l)}function Tu(t,e,n,l){let r="";for(let t=parseInt(e);t<parseInt(n);t++)r+=l.replace(/\[\s*i\s*\]/g,"[ "+t+" ]").replace(/UNROLLED_LOOP_INDEX/g,t);return r}function Au(t){let e="precision "+t.precision+" float;\nprecision "+t.precision+" int;";return"highp"===t.precision?e+="\n#define HIGH_PRECISION":"mediump"===t.precision?e+="\n#define MEDIUM_PRECISION":"lowp"===t.precision&&(e+="\n#define LOW_PRECISION"),e}function Lu(t,e,n,l){const r=t.getContext(),i=n.defines;let o=n.vertexShader,u=n.fragmentShader;const s=function(t){let e="SHADOWMAP_TYPE_BASIC";return t.shadowMapType===h?e="SHADOWMAP_TYPE_PCF":t.shadowMapType===d?e="SHADOWMAP_TYPE_PCF_SOFT":t.shadowMapType===p&&(e="SHADOWMAP_TYPE_VSM"),e}(n),a=function(t){let e="ENVMAP_TYPE_CUBE";if(t.envMap)switch(t.envMapMode){case it:case ot:e="ENVMAP_TYPE_CUBE";break;case at:case ct:e="ENVMAP_TYPE_CUBE_UV"}return e}(n),c=function(t){let e="ENVMAP_MODE_REFLECTION";if(t.envMap)switch(t.envMapMode){case ot:case ct:e="ENVMAP_MODE_REFRACTION"}return e}(n),f=function(t){let e="ENVMAP_BLENDING_NONE";if(t.envMap)switch(t.combine){case $:e="ENVMAP_BLENDING_MULTIPLY";break;case J:e="ENVMAP_BLENDING_MIX";break;case Z:e="ENVMAP_BLENDING_ADD"}return e}(n),m=t.gammaFactor>0?t.gammaFactor:1,g=n.isWebGL2?"":function(t){return[t.extensionDerivatives||t.envMapCubeUV||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading||"physical"===t.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(t.extensionFragDepth||t.logarithmicDepthBuffer)&&t.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",t.extensionDrawBuffers&&t.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(t.extensionShaderTextureLOD||t.envMap||t.transmission>0)&&t.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(gu).join("\n")}(n),v=function(t){const e=[];for(const n in t){const l=t[n];!1!==l&&e.push("#define "+n+" "+l)}return e.join("\n")}(i),y=r.createProgram();let x,b,w=n.glslVersion?"#version "+n.glslVersion+"\n":"";n.isRawShaderMaterial?(x=[v].filter(gu).join("\n"),x.length>0&&(x+="\n"),b=[g,v].filter(gu).join("\n"),b.length>0&&(b+="\n")):(x=[Au(n),"#define SHADER_NAME "+n.shaderName,v,n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+m,"#define MAX_BONES "+n.maxBones,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+c:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.displacementMap&&n.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.useVertexTexture?"#define BONE_TEXTURE":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+s:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(gu).join("\n"),b=[g,Au(n),"#define SHADER_NAME "+n.shaderName,v,n.alphaTest?"#define ALPHATEST "+n.alphaTest+(n.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+m,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+a:"",n.envMap?"#define "+c:"",n.envMap?"#define "+f:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.sheen?"#define USE_SHEEN":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+s:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(n.extensionShaderTextureLOD||n.envMap)&&n.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==K?"#define TONE_MAPPING":"",n.toneMapping!==K?ji.tonemapping_pars_fragment:"",n.toneMapping!==K?mu("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",ji.encodings_pars_fragment,n.map?pu("mapTexelToLinear",n.mapEncoding):"",n.matcap?pu("matcapTexelToLinear",n.matcapEncoding):"",n.envMap?pu("envMapTexelToLinear",n.envMapEncoding):"",n.emissiveMap?pu("emissiveMapTexelToLinear",n.emissiveMapEncoding):"",n.lightMap?pu("lightMapTexelToLinear",n.lightMapEncoding):"",fu("linearToOutputTexel",n.outputEncoding),n.depthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(gu).join("\n")),o=bu(o),o=vu(o,n),o=yu(o,n),u=bu(u),u=vu(u,n),u=yu(u,n),o=Su(o),u=Su(u),n.isWebGL2&&!0!==n.isRawShaderMaterial&&(w="#version 300 es\n",x=["#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+x,b=["#define varying in",n.glslVersion===kn?"":"out highp vec4 pc_fragColor;",n.glslVersion===kn?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+b);const _=w+b+u,M=au(r,35633,w+x+o),S=au(r,35632,_);if(r.attachShader(y,M),r.attachShader(y,S),void 0!==n.index0AttributeName?r.bindAttribLocation(y,0,n.index0AttributeName):!0===n.morphTargets&&r.bindAttribLocation(y,0,"position"),r.linkProgram(y),t.debug.checkShaderErrors){const t=r.getProgramInfoLog(y).trim(),e=r.getShaderInfoLog(M).trim(),n=r.getShaderInfoLog(S).trim();let l=!0,i=!0;if(!1===r.getProgramParameter(y,35714)){l=!1;const e=du(r,M,"vertex"),n=du(r,S,"fragment");console.error("THREE.WebGLProgram: shader error: ",r.getError(),"35715",r.getProgramParameter(y,35715),"gl.getProgramInfoLog",t,e,n)}else""!==t?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",t):""!==e&&""!==n||(i=!1);i&&(this.diagnostics={runnable:l,programLog:t,vertexShader:{log:e,prefix:x},fragmentShader:{log:n,prefix:b}})}let E,T;return r.deleteShader(M),r.deleteShader(S),this.getUniforms=function(){return void 0===E&&(E=new su(r,y)),E},this.getAttributes=function(){return void 0===T&&(T=function(t,e){const n={},l=t.getProgramParameter(e,35721);for(let r=0;r<l;r++){const l=t.getActiveAttrib(e,r).name;n[l]=t.getAttribLocation(e,l)}return n}(r,y)),T},this.destroy=function(){l.releaseStatesOfProgram(this),r.deleteProgram(y),this.program=void 0},this.name=n.shaderName,this.id=cu++,this.cacheKey=e,this.usedTimes=1,this.program=y,this.vertexShader=M,this.fragmentShader=S,this}function Cu(t,e,n,l,r,i){const o=[],u=l.isWebGL2,s=l.logarithmicDepthBuffer,a=l.floatVertexTextures,c=l.maxVertexUniforms,h=l.vertexTextures;let d=l.precision;const p={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},f=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexAlphas","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen","transmission","transmissionMap","thicknessMap"];function v(t){let e;return t&&t.isTexture?e=t.encoding:t&&t.isWebGLRenderTarget?(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),e=t.texture.encoding):e=Je,e}return{getParameters:function(r,o,f,y,x){const b=y.fog,w=r.isMeshStandardMaterial?y.environment:null,_=e.get(r.envMap||w),M=p[r.type],S=x.isSkinnedMesh?function(t){const e=t.skeleton.bones;if(a)return 1024;{const t=c,n=Math.floor((t-20)/4),l=Math.min(n,e.length);return l<e.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+e.length+" bones. This GPU supports "+l+"."),0):l}}(x):0;let E,T;if(null!==r.precision&&(d=l.getMaxPrecision(r.precision),d!==r.precision&&console.warn("THREE.WebGLProgram.getParameters:",r.precision,"not supported, using",d,"instead.")),M){const t=Gi[M];E=t.vertexShader,T=t.fragmentShader}else E=r.vertexShader,T=r.fragmentShader;const A=t.getRenderTarget();return{isWebGL2:u,shaderID:M,shaderName:r.type,vertexShader:E,fragmentShader:T,defines:r.defines,isRawShaderMaterial:!0===r.isRawShaderMaterial,glslVersion:r.glslVersion,precision:d,instancing:!0===x.isInstancedMesh,instancingColor:!0===x.isInstancedMesh&&null!==x.instanceColor,supportsVertexTextures:h,outputEncoding:null!==A?v(A.texture):t.outputEncoding,map:!!r.map,mapEncoding:v(r.map),matcap:!!r.matcap,matcapEncoding:v(r.matcap),envMap:!!_,envMapMode:_&&_.mapping,envMapEncoding:v(_),envMapCubeUV:!!_&&(_.mapping===at||_.mapping===ct),lightMap:!!r.lightMap,lightMapEncoding:v(r.lightMap),aoMap:!!r.aoMap,emissiveMap:!!r.emissiveMap,emissiveMapEncoding:v(r.emissiveMap),bumpMap:!!r.bumpMap,normalMap:!!r.normalMap,objectSpaceNormalMap:r.normalMapType===sn,tangentSpaceNormalMap:r.normalMapType===un,clearcoatMap:!!r.clearcoatMap,clearcoatRoughnessMap:!!r.clearcoatRoughnessMap,clearcoatNormalMap:!!r.clearcoatNormalMap,displacementMap:!!r.displacementMap,roughnessMap:!!r.roughnessMap,metalnessMap:!!r.metalnessMap,specularMap:!!r.specularMap,alphaMap:!!r.alphaMap,gradientMap:!!r.gradientMap,sheen:!!r.sheen,transmission:!!r.transmission,transmissionMap:!!r.transmissionMap,thicknessMap:!!r.thicknessMap,combine:r.combine,vertexTangents:r.normalMap&&r.vertexTangents,vertexColors:r.vertexColors,vertexAlphas:!0===r.vertexColors&&x.geometry&&x.geometry.attributes.color&&4===x.geometry.attributes.color.itemSize,vertexUvs:!!(r.map||r.bumpMap||r.normalMap||r.specularMap||r.alphaMap||r.emissiveMap||r.roughnessMap||r.metalnessMap||r.clearcoatMap||r.clearcoatRoughnessMap||r.clearcoatNormalMap||r.displacementMap||r.transmissionMap||r.thicknessMap),uvsVertexOnly:!(r.map||r.bumpMap||r.normalMap||r.specularMap||r.alphaMap||r.emissiveMap||r.roughnessMap||r.metalnessMap||r.clearcoatNormalMap||r.transmission||r.transmissionMap||r.thicknessMap||!r.displacementMap),fog:!!b,useFog:r.fog,fogExp2:b&&b.isFogExp2,flatShading:!!r.flatShading,sizeAttenuation:r.sizeAttenuation,logarithmicDepthBuffer:s,skinning:!0===x.isSkinnedMesh&&S>0,maxBones:S,useVertexTexture:a,morphTargets:r.morphTargets,morphNormals:r.morphNormals,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numClippingPlanes:i.numPlanes,numClipIntersection:i.numIntersection,dithering:r.dithering,shadowMapEnabled:t.shadowMap.enabled&&f.length>0,shadowMapType:t.shadowMap.type,toneMapping:r.toneMapped?t.toneMapping:K,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:r.premultipliedAlpha,alphaTest:r.alphaTest,doubleSided:r.side===g,flipSided:r.side===m,depthPacking:void 0!==r.depthPacking&&r.depthPacking,index0AttributeName:r.index0AttributeName,extensionDerivatives:r.extensions&&r.extensions.derivatives,extensionFragDepth:r.extensions&&r.extensions.fragDepth,extensionDrawBuffers:r.extensions&&r.extensions.drawBuffers,extensionShaderTextureLOD:r.extensions&&r.extensions.shaderTextureLOD,rendererExtensionFragDepth:u||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:u||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:u||n.has("EXT_shader_texture_lod"),customProgramCacheKey:r.customProgramCacheKey()}},getProgramCacheKey:function(e){const n=[];if(e.shaderID?n.push(e.shaderID):(n.push(e.fragmentShader),n.push(e.vertexShader)),void 0!==e.defines)for(const t in e.defines)n.push(t),n.push(e.defines[t]);if(!1===e.isRawShaderMaterial){for(let t=0;t<f.length;t++)n.push(e[f[t]]);n.push(t.outputEncoding),n.push(t.gammaFactor)}return n.push(e.customProgramCacheKey),n.join()},getUniforms:function(t){const e=p[t.type];let n;if(e){const t=Gi[e];n=Mi.clone(t.uniforms)}else n=t.uniforms;return n},acquireProgram:function(e,n){let l;for(let t=0,e=o.length;t<e;t++){const e=o[t];if(e.cacheKey===n){l=e,++l.usedTimes;break}}return void 0===l&&(l=new Lu(t,n,e,r),o.push(l)),l},releaseProgram:function(t){if(0==--t.usedTimes){const e=o.indexOf(t);o[e]=o[o.length-1],o.pop(),t.destroy()}},programs:o}}function Pu(){let t=new WeakMap;return{get:function(e){let n=t.get(e);return void 0===n&&(n={},t.set(e,n)),n},remove:function(e){t.delete(e)},update:function(e,n,l){t.get(e)[n]=l},dispose:function(){t=new WeakMap}}}function Ru(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program!==e.program?t.program.id-e.program.id:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function Ou(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function Iu(t){const e=[];let n=0;const l=[],r=[],i=[],o={id:-1};function u(l,r,i,u,s,a){let c=e[n];const h=t.get(i);return void 0===c?(c={id:l.id,object:l,geometry:r,material:i,program:h.program||o,groupOrder:u,renderOrder:l.renderOrder,z:s,group:a},e[n]=c):(c.id=l.id,c.object=l,c.geometry=r,c.material=i,c.program=h.program||o,c.groupOrder=u,c.renderOrder=l.renderOrder,c.z=s,c.group=a),n++,c}return{opaque:l,transmissive:r,transparent:i,init:function(){n=0,l.length=0,r.length=0,i.length=0},push:function(t,e,n,o,s,a){const c=u(t,e,n,o,s,a);n.transmission>0?r.push(c):!0===n.transparent?i.push(c):l.push(c)},unshift:function(t,e,n,o,s,a){const c=u(t,e,n,o,s,a);n.transmission>0?r.unshift(c):!0===n.transparent?i.unshift(c):l.unshift(c)},finish:function(){for(let t=n,l=e.length;t<l;t++){const n=e[t];if(null===n.id)break;n.id=null,n.object=null,n.geometry=null,n.material=null,n.program=null,n.group=null}},sort:function(t,e){l.length>1&&l.sort(t||Ru),r.length>1&&r.sort(e||Ou),i.length>1&&i.sort(e||Ou)}}}function Du(t){let e=new WeakMap;return{get:function(n,l){let r;return!1===e.has(n)?(r=new Iu(t),e.set(n,[r])):l>=e.get(n).length?(r=new Iu(t),e.get(n).push(r)):r=e.get(n)[l],r},dispose:function(){e=new WeakMap}}}function ku(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case"DirectionalLight":n={direction:new ul,color:new Cr};break;case"SpotLight":n={position:new ul,direction:new ul,color:new Cr,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new ul,color:new Cr,distance:0,decay:0};break;case"HemisphereLight":n={direction:new ul,skyColor:new Cr,groundColor:new Cr};break;case"RectAreaLight":n={color:new Cr,position:new ul,halfWidth:new ul,halfHeight:new ul}}return t[e.id]=n,n}}}let Nu=0;function Bu(t,e){return(e.castShadow?1:0)-(t.castShadow?1:0)}function Fu(t,e){const n=new ku,l=function(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case"DirectionalLight":case"SpotLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new $n};break;case"PointLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new $n,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=n,n}}}(),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let t=0;t<9;t++)r.probe.push(new ul);const i=new ul,o=new Fl,u=new Fl;return{setup:function(i){let o=0,u=0,s=0;for(let t=0;t<9;t++)r.probe[t].set(0,0,0);let a=0,c=0,h=0,d=0,p=0,f=0,m=0,g=0;i.sort(Bu);for(let t=0,e=i.length;t<e;t++){const e=i[t],v=e.color,y=e.intensity,x=e.distance,b=e.shadow&&e.shadow.map?e.shadow.map.texture:null;if(e.isAmbientLight)o+=v.r*y,u+=v.g*y,s+=v.b*y;else if(e.isLightProbe)for(let t=0;t<9;t++)r.probe[t].addScaledVector(e.sh.coefficients[t],y);else if(e.isDirectionalLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity),e.castShadow){const t=e.shadow,n=l.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,r.directionalShadow[a]=n,r.directionalShadowMap[a]=b,r.directionalShadowMatrix[a]=e.shadow.matrix,f++}r.directional[a]=t,a++}else if(e.isSpotLight){const t=n.get(e);if(t.position.setFromMatrixPosition(e.matrixWorld),t.color.copy(v).multiplyScalar(y),t.distance=x,t.coneCos=Math.cos(e.angle),t.penumbraCos=Math.cos(e.angle*(1-e.penumbra)),t.decay=e.decay,e.castShadow){const t=e.shadow,n=l.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,r.spotShadow[h]=n,r.spotShadowMap[h]=b,r.spotShadowMatrix[h]=e.shadow.matrix,g++}r.spot[h]=t,h++}else if(e.isRectAreaLight){const t=n.get(e);t.color.copy(v).multiplyScalar(y),t.halfWidth.set(.5*e.width,0,0),t.halfHeight.set(0,.5*e.height,0),r.rectArea[d]=t,d++}else if(e.isPointLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity),t.distance=e.distance,t.decay=e.decay,e.castShadow){const t=e.shadow,n=l.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,n.shadowCameraNear=t.camera.near,n.shadowCameraFar=t.camera.far,r.pointShadow[c]=n,r.pointShadowMap[c]=b,r.pointShadowMatrix[c]=e.shadow.matrix,m++}r.point[c]=t,c++}else if(e.isHemisphereLight){const t=n.get(e);t.skyColor.copy(e.color).multiplyScalar(y),t.groundColor.copy(e.groundColor).multiplyScalar(y),r.hemi[p]=t,p++}}d>0&&(e.isWebGL2||!0===t.has("OES_texture_float_linear")?(r.rectAreaLTC1=Ui.LTC_FLOAT_1,r.rectAreaLTC2=Ui.LTC_FLOAT_2):!0===t.has("OES_texture_half_float_linear")?(r.rectAreaLTC1=Ui.LTC_HALF_1,r.rectAreaLTC2=Ui.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),r.ambient[0]=o,r.ambient[1]=u,r.ambient[2]=s;const v=r.hash;v.directionalLength===a&&v.pointLength===c&&v.spotLength===h&&v.rectAreaLength===d&&v.hemiLength===p&&v.numDirectionalShadows===f&&v.numPointShadows===m&&v.numSpotShadows===g||(r.directional.length=a,r.spot.length=h,r.rectArea.length=d,r.point.length=c,r.hemi.length=p,r.directionalShadow.length=f,r.directionalShadowMap.length=f,r.pointShadow.length=m,r.pointShadowMap.length=m,r.spotShadow.length=g,r.spotShadowMap.length=g,r.directionalShadowMatrix.length=f,r.pointShadowMatrix.length=m,r.spotShadowMatrix.length=g,v.directionalLength=a,v.pointLength=c,v.spotLength=h,v.rectAreaLength=d,v.hemiLength=p,v.numDirectionalShadows=f,v.numPointShadows=m,v.numSpotShadows=g,r.version=Nu++)},setupView:function(t,e){let n=0,l=0,s=0,a=0,c=0;const h=e.matrixWorldInverse;for(let e=0,d=t.length;e<d;e++){const d=t[e];if(d.isDirectionalLight){const t=r.directional[n];t.direction.setFromMatrixPosition(d.matrixWorld),i.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(i),t.direction.transformDirection(h),n++}else if(d.isSpotLight){const t=r.spot[s];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(h),t.direction.setFromMatrixPosition(d.matrixWorld),i.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(i),t.direction.transformDirection(h),s++}else if(d.isRectAreaLight){const t=r.rectArea[a];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(h),u.identity(),o.copy(d.matrixWorld),o.premultiply(h),u.extractRotation(o),t.halfWidth.set(.5*d.width,0,0),t.halfHeight.set(0,.5*d.height,0),t.halfWidth.applyMatrix4(u),t.halfHeight.applyMatrix4(u),a++}else if(d.isPointLight){const t=r.point[l];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(h),l++}else if(d.isHemisphereLight){const t=r.hemi[c];t.direction.setFromMatrixPosition(d.matrixWorld),t.direction.transformDirection(h),t.direction.normalize(),c++}}},state:r}}function zu(t,e){const n=new Fu(t,e),l=[],r=[];return{init:function(){l.length=0,r.length=0},state:{lightsArray:l,shadowsArray:r,lights:n},setupLights:function(){n.setup(l)},setupLightsView:function(t){n.setupView(l,t)},pushLight:function(t){l.push(t)},pushShadow:function(t){r.push(t)}}}function Hu(t,e){let n=new WeakMap;return{get:function(l,r=0){let i;return!1===n.has(l)?(i=new zu(t,e),n.set(l,[i])):r>=n.get(l).length?(i=new zu(t,e),n.get(l).push(i)):i=n.get(l)[r],i},dispose:function(){n=new WeakMap}}}class ju extends _r{constructor(t){super(),this.type="MeshDepthMaterial",this.depthPacking=rn,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}ju.prototype.isMeshDepthMaterial=!0;class Uu extends _r{constructor(t){super(),this.type="MeshDistanceMaterial",this.referencePosition=new ul,this.nearDistance=1,this.farDistance=1e3,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}function Gu(t,e,n){let l=new Bi;const r=new $n,i=new $n,o=new nl,u=[],s=[],a={},c=n.maxTextureSize,d={0:m,1:f,2:g},v=new Si({defines:{SAMPLE_RATE:2/8,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new $n},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean * HALF_SAMPLE_RATE;\n\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),y=v.clone();y.defines.HORIZONTAL_PASS=1;const b=new ti;b.setAttribute("position",new Ir(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const w=new yi(b,v),_=this;function M(n,l){const r=e.update(w);v.uniforms.shadow_pass.value=n.map.texture,v.uniforms.resolution.value=n.mapSize,v.uniforms.radius.value=n.radius,t.setRenderTarget(n.mapPass),t.clear(),t.renderBufferDirect(l,null,r,v,w,null),y.uniforms.shadow_pass.value=n.mapPass.texture,y.uniforms.resolution.value=n.mapSize,y.uniforms.radius.value=n.radius,t.setRenderTarget(n.map),t.clear(),t.renderBufferDirect(l,null,r,y,w,null)}function S(t){const e=t<<0;let n=u[e];return void 0===n&&(n=new ju({depthPacking:on,morphTargets:t}),u[e]=n),n}function E(t){const e=t<<0;let n=s[e];return void 0===n&&(n=new Uu({morphTargets:t}),s[e]=n),n}function T(e,n,l,r,i,o,u){let s=null,c=S,h=e.customDepthMaterial;if(!0===r.isPointLight&&(c=E,h=e.customDistanceMaterial),void 0===h){let t=!1;!0===l.morphTargets&&(t=n.morphAttributes&&n.morphAttributes.position&&n.morphAttributes.position.length>0),s=c(t)}else s=h;if(t.localClippingEnabled&&!0===l.clipShadows&&0!==l.clippingPlanes.length){const t=s.uuid,e=l.uuid;let n=a[t];void 0===n&&(n={},a[t]=n);let r=n[e];void 0===r&&(r=s.clone(),n[e]=r),s=r}return s.visible=l.visible,s.wireframe=l.wireframe,s.side=u===p?null!==l.shadowSide?l.shadowSide:l.side:null!==l.shadowSide?l.shadowSide:d[l.side],s.clipShadows=l.clipShadows,s.clippingPlanes=l.clippingPlanes,s.clipIntersection=l.clipIntersection,s.wireframeLinewidth=l.wireframeLinewidth,s.linewidth=l.linewidth,!0===r.isPointLight&&!0===s.isMeshDistanceMaterial&&(s.referencePosition.setFromMatrixPosition(r.matrixWorld),s.nearDistance=i,s.farDistance=o),s}function A(n,r,i,o,u){if(!1===n.visible)return;if(n.layers.test(r.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&u===p)&&(!n.frustumCulled||l.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,n.matrixWorld);const l=e.update(n),r=n.material;if(Array.isArray(r)){const e=l.groups;for(let s=0,a=e.length;s<a;s++){const a=e[s],c=r[a.materialIndex];if(c&&c.visible){const e=T(n,l,c,o,i.near,i.far,u);t.renderBufferDirect(i,null,l,e,n,a)}}}else if(r.visible){const e=T(n,l,r,o,i.near,i.far,u);t.renderBufferDirect(i,null,l,e,n,null)}}const s=n.children;for(let t=0,e=s.length;t<e;t++)A(s[t],r,i,o,u)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=h,this.render=function(e,n,u){if(!1===_.enabled)return;if(!1===_.autoUpdate&&!1===_.needsUpdate)return;if(0===e.length)return;const s=t.getRenderTarget(),a=t.getActiveCubeFace(),h=t.getActiveMipmapLevel(),d=t.state;d.setBlending(x),d.buffers.color.setClear(1,1,1,1),d.buffers.depth.setTest(!0),d.setScissorTest(!1);for(let s=0,a=e.length;s<a;s++){const a=e[s],h=a.shadow;if(void 0===h){console.warn("THREE.WebGLShadowMap:",a,"has no shadow.");continue}if(!1===h.autoUpdate&&!1===h.needsUpdate)continue;r.copy(h.mapSize);const f=h.getFrameExtents();if(r.multiply(f),i.copy(h.mapSize),(r.x>c||r.y>c)&&(r.x>c&&(i.x=Math.floor(c/f.x),r.x=i.x*f.x,h.mapSize.x=i.x),r.y>c&&(i.y=Math.floor(c/f.y),r.y=i.y*f.y,h.mapSize.y=i.y)),null===h.map&&!h.isPointLightShadow&&this.type===p){const t={minFilter:xt,magFilter:xt,format:Ft};h.map=new ll(r.x,r.y,t),h.map.texture.name=a.name+".shadowMap",h.mapPass=new ll(r.x,r.y,t),h.camera.updateProjectionMatrix()}if(null===h.map){const t={minFilter:ft,magFilter:ft,format:Ft};h.map=new ll(r.x,r.y,t),h.map.texture.name=a.name+".shadowMap",h.camera.updateProjectionMatrix()}t.setRenderTarget(h.map),t.clear();const m=h.getViewportCount();for(let t=0;t<m;t++){const e=h.getViewport(t);o.set(i.x*e.x,i.y*e.y,i.x*e.z,i.y*e.w),d.viewport(o),h.updateMatrices(a,t),l=h.getFrustum(),A(n,u,h.camera,a,this.type)}h.isPointLightShadow||this.type!==p||M(h,u),h.needsUpdate=!1}_.needsUpdate=!1,t.setRenderTarget(s,a,h)}}function Vu(t,e,n){const l=n.isWebGL2,r=new function(){let e=!1;const n=new nl;let l=null;const r=new nl(0,0,0,0);return{setMask:function(n){l===n||e||(t.colorMask(n,n,n,n),l=n)},setLocked:function(t){e=t},setClear:function(e,l,i,o,u){!0===u&&(e*=o,l*=o,i*=o),n.set(e,l,i,o),!1===r.equals(n)&&(t.clearColor(e,l,i,o),r.copy(n))},reset:function(){e=!1,l=null,r.set(-1,0,0,0)}}},i=new function(){let e=!1,n=null,l=null,r=null;return{setTest:function(t){t?yt(2929):xt(2929)},setMask:function(l){n===l||e||(t.depthMask(l),n=l)},setFunc:function(e){if(l!==e){if(e)switch(e){case j:t.depthFunc(512);break;case U:t.depthFunc(519);break;case G:t.depthFunc(513);break;case V:t.depthFunc(515);break;case W:t.depthFunc(514);break;case q:t.depthFunc(518);break;case X:t.depthFunc(516);break;case Y:t.depthFunc(517);break;default:t.depthFunc(515)}else t.depthFunc(515);l=e}},setLocked:function(t){e=t},setClear:function(e){r!==e&&(t.clearDepth(e),r=e)},reset:function(){e=!1,n=null,l=null,r=null}}},a=new function(){let e=!1,n=null,l=null,r=null,i=null,o=null,u=null,s=null,a=null;return{setTest:function(t){e||(t?yt(2960):xt(2960))},setMask:function(l){n===l||e||(t.stencilMask(l),n=l)},setFunc:function(e,n,o){l===e&&r===n&&i===o||(t.stencilFunc(e,n,o),l=e,r=n,i=o)},setOp:function(e,n,l){o===e&&u===n&&s===l||(t.stencilOp(e,n,l),o=e,u=n,s=l)},setLocked:function(t){e=t},setClear:function(e){a!==e&&(t.clearStencil(e),a=e)},reset:function(){e=!1,n=null,l=null,r=null,i=null,o=null,u=null,s=null,a=null}}};let c={},h=null,d={},p=null,f=!1,v=null,y=null,$=null,J=null,Z=null,K=null,Q=null,tt=!1,et=null,nt=null,lt=null,rt=null,it=null;const ot=t.getParameter(35661);let ut=!1,st=0;const at=t.getParameter(7938);-1!==at.indexOf("WebGL")?(st=parseFloat(/^WebGL (\d)/.exec(at)[1]),ut=st>=1):-1!==at.indexOf("OpenGL ES")&&(st=parseFloat(/^OpenGL ES (\d)/.exec(at)[1]),ut=st>=2);let ct=null,ht={};const dt=t.getParameter(3088),pt=t.getParameter(2978),ft=(new nl).fromArray(dt),mt=(new nl).fromArray(pt);function gt(e,n,l){const r=new Uint8Array(4),i=t.createTexture();t.bindTexture(e,i),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(let e=0;e<l;e++)t.texImage2D(n+e,0,6408,1,1,0,6408,5121,r);return i}const vt={};function yt(e){!0!==c[e]&&(t.enable(e),c[e]=!0)}function xt(e){!1!==c[e]&&(t.disable(e),c[e]=!1)}vt[3553]=gt(3553,3553,1),vt[34067]=gt(34067,34069,6),r.setClear(0,0,0,1),i.setClear(1),a.setClear(0),yt(2929),i.setFunc(V),Mt(!1),St(u),yt(2884),_t(x);const bt={[E]:32774,[T]:32778,[A]:32779};if(l)bt[L]=32775,bt[C]=32776;else{const t=e.get("EXT_blend_minmax");null!==t&&(bt[L]=t.MIN_EXT,bt[C]=t.MAX_EXT)}const wt={[P]:0,[R]:1,[O]:768,[D]:770,[H]:776,[F]:774,[N]:772,[I]:769,[k]:771,[z]:775,[B]:773};function _t(e,n,l,r,i,o,u,s){if(e!==x){if(!1===f&&(yt(3042),f=!0),e===S)i=i||n,o=o||l,u=u||r,n===y&&i===Z||(t.blendEquationSeparate(bt[n],bt[i]),y=n,Z=i),l===$&&r===J&&o===K&&u===Q||(t.blendFuncSeparate(wt[l],wt[r],wt[o],wt[u]),$=l,J=r,K=o,Q=u),v=e,tt=null;else if(e!==v||s!==tt){if(y===E&&Z===E||(t.blendEquation(32774),y=E,Z=E),s)switch(e){case b:t.blendFuncSeparate(1,771,1,771);break;case w:t.blendFunc(1,1);break;case _:t.blendFuncSeparate(0,0,769,771);break;case M:t.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case b:t.blendFuncSeparate(770,771,1,771);break;case w:t.blendFunc(770,1);break;case _:t.blendFunc(0,769);break;case M:t.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}$=null,J=null,K=null,Q=null,v=e,tt=s}}else!0===f&&(xt(3042),f=!1)}function Mt(e){et!==e&&(e?t.frontFace(2304):t.frontFace(2305),et=e)}function St(e){e!==o?(yt(2884),e!==nt&&(e===u?t.cullFace(1029):e===s?t.cullFace(1028):t.cullFace(1032))):xt(2884),nt=e}function Et(e,n,l){e?(yt(32823),rt===n&&it===l||(t.polygonOffset(n,l),rt=n,it=l)):xt(32823)}function Tt(e){void 0===e&&(e=33984+ot-1),ct!==e&&(t.activeTexture(e),ct=e)}return{buffers:{color:r,depth:i,stencil:a},enable:yt,disable:xt,bindFramebuffer:function(e,n){return null===n&&null!==h&&(n=h),d[e]!==n&&(t.bindFramebuffer(e,n),d[e]=n,l&&(36009===e&&(d[36160]=n),36160===e&&(d[36009]=n)),!0)},bindXRFramebuffer:function(e){e!==h&&(t.bindFramebuffer(36160,e),h=e)},useProgram:function(e){return p!==e&&(t.useProgram(e),p=e,!0)},setBlending:_t,setMaterial:function(t,e){t.side===g?xt(2884):yt(2884);let n=t.side===m;e&&(n=!n),Mt(n),t.blending===b&&!1===t.transparent?_t(x):_t(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),i.setFunc(t.depthFunc),i.setTest(t.depthTest),i.setMask(t.depthWrite),r.setMask(t.colorWrite);const l=t.stencilWrite;a.setTest(l),l&&(a.setMask(t.stencilWriteMask),a.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),a.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),Et(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?yt(32926):xt(32926)},setFlipSided:Mt,setCullFace:St,setLineWidth:function(e){e!==lt&&(ut&&t.lineWidth(e),lt=e)},setPolygonOffset:Et,setScissorTest:function(t){t?yt(3089):xt(3089)},activeTexture:Tt,bindTexture:function(e,n){null===ct&&Tt();let l=ht[ct];void 0===l&&(l={type:void 0,texture:void 0},ht[ct]=l),l.type===e&&l.texture===n||(t.bindTexture(e,n||vt[e]),l.type=e,l.texture=n)},unbindTexture:function(){const e=ht[ct];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===ft.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),ft.copy(e))},viewport:function(e){!1===mt.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),mt.copy(e))},reset:function(){t.disable(3042),t.disable(2884),t.disable(2929),t.disable(32823),t.disable(3089),t.disable(2960),t.disable(32926),t.blendEquation(32774),t.blendFunc(1,0),t.blendFuncSeparate(1,0,1,0),t.colorMask(!0,!0,!0,!0),t.clearColor(0,0,0,0),t.depthMask(!0),t.depthFunc(513),t.clearDepth(1),t.stencilMask(4294967295),t.stencilFunc(519,0,4294967295),t.stencilOp(7680,7680,7680),t.clearStencil(0),t.cullFace(1029),t.frontFace(2305),t.polygonOffset(0,0),t.activeTexture(33984),t.bindFramebuffer(36160,null),!0===l&&(t.bindFramebuffer(36009,null),t.bindFramebuffer(36008,null)),t.useProgram(null),t.lineWidth(1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.viewport(0,0,t.canvas.width,t.canvas.height),c={},ct=null,ht={},h=null,d={},p=null,f=!1,v=null,y=null,$=null,J=null,Z=null,K=null,Q=null,tt=!1,et=null,nt=null,lt=null,rt=null,it=null,ft.set(0,0,t.canvas.width,t.canvas.height),mt.set(0,0,t.canvas.width,t.canvas.height),r.reset(),i.reset(),a.reset()}}}function Wu(t,e,n,l,r,i,o){const u=r.isWebGL2,s=r.maxTextures,a=r.maxCubemapSize,c=r.maxTextureSize,h=r.maxSamples,d=new WeakMap;let p,f=!1;try{f="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(t){}function m(t,e){return f?new OffscreenCanvas(t,e):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function g(t,e,n,l){let r=1;if((t.width>l||t.height>l)&&(r=l/Math.max(t.width,t.height)),r<1||!0===e){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const l=e?Xn:Math.floor,i=l(r*t.width),o=l(r*t.height);void 0===p&&(p=m(i,o));const u=n?m(i,o):p;return u.width=i,u.height=o,u.getContext("2d").drawImage(t,0,0,i,o),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+t.width+"x"+t.height+") to ("+i+"x"+o+")."),u}return"data"in t&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+t.width+"x"+t.height+")."),t}return t}function v(t){return Wn(t.width)&&Wn(t.height)}function y(t,e){return t.generateMipmaps&&e&&t.minFilter!==ft&&t.minFilter!==xt}function x(e,n,r,i,o=1){t.generateMipmap(e),l.get(n).__maxMipLevel=Math.log2(Math.max(r,i,o))}function b(n,l,r){if(!1===u)return l;if(null!==n){if(void 0!==t[n])return t[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let i=l;return 6403===l&&(5126===r&&(i=33326),5131===r&&(i=33325),5121===r&&(i=33321)),6407===l&&(5126===r&&(i=34837),5131===r&&(i=34843),5121===r&&(i=32849)),6408===l&&(5126===r&&(i=34836),5131===r&&(i=34842),5121===r&&(i=32856)),33325!==i&&33326!==i&&34842!==i&&34836!==i||e.get("EXT_color_buffer_float"),i}function w(t){return t===ft||t===mt||t===vt?9728:9729}function _(e){const n=e.target;n.removeEventListener("dispose",_),function(e){const n=l.get(e);void 0!==n.__webglInit&&(t.deleteTexture(n.__webglTexture),l.remove(e))}(n),n.isVideoTexture&&d.delete(n),o.memory.textures--}function M(e){const n=e.target;n.removeEventListener("dispose",M),function(e){const n=e.texture,r=l.get(e),i=l.get(n);if(e){if(void 0!==i.__webglTexture&&(t.deleteTexture(i.__webglTexture),o.memory.textures--),e.depthTexture&&e.depthTexture.dispose(),e.isWebGLCubeRenderTarget)for(let e=0;e<6;e++)t.deleteFramebuffer(r.__webglFramebuffer[e]),r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer[e]);else t.deleteFramebuffer(r.__webglFramebuffer),r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer),r.__webglMultisampledFramebuffer&&t.deleteFramebuffer(r.__webglMultisampledFramebuffer),r.__webglColorRenderbuffer&&t.deleteRenderbuffer(r.__webglColorRenderbuffer),r.__webglDepthRenderbuffer&&t.deleteRenderbuffer(r.__webglDepthRenderbuffer);if(e.isWebGLMultipleRenderTargets)for(let e=0,r=n.length;e<r;e++){const r=l.get(n[e]);r.__webglTexture&&(t.deleteTexture(r.__webglTexture),o.memory.textures--),l.remove(n[e])}l.remove(n),l.remove(e)}}(n)}let S=0;function E(t,e){const r=l.get(t);if(t.isVideoTexture&&function(t){const e=o.render.frame;d.get(t)!==e&&(d.set(t,e),t.update())}(t),t.version>0&&r.__version!==t.version){const n=t.image;if(void 0===n)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==n.complete)return void R(r,t,e);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.activeTexture(33984+e),n.bindTexture(3553,r.__webglTexture)}function T(e,r){const o=l.get(e);e.version>0&&o.__version!==e.version?function(e,l,r){if(6!==l.image.length)return;P(e,l),n.activeTexture(33984+r),n.bindTexture(34067,e.__webglTexture),t.pixelStorei(37440,l.flipY),t.pixelStorei(37441,l.premultiplyAlpha),t.pixelStorei(3317,l.unpackAlignment),t.pixelStorei(37443,0);const o=l&&(l.isCompressedTexture||l.image[0].isCompressedTexture),s=l.image[0]&&l.image[0].isDataTexture,c=[];for(let t=0;t<6;t++)c[t]=o||s?s?l.image[t].image:l.image[t]:g(l.image[t],!1,!0,a);const h=c[0],d=v(h)||u,p=i.convert(l.format),f=i.convert(l.type),m=b(l.internalFormat,p,f);let w;if(C(34067,l,d),o){for(let t=0;t<6;t++){w=c[t].mipmaps;for(let e=0;e<w.length;e++){const r=w[e];l.format!==Ft&&l.format!==Bt?null!==p?n.compressedTexImage2D(34069+t,e,m,r.width,r.height,0,r.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):n.texImage2D(34069+t,e,m,r.width,r.height,0,p,f,r.data)}}e.__maxMipLevel=w.length-1}else{w=l.mipmaps;for(let t=0;t<6;t++)if(s){n.texImage2D(34069+t,0,m,c[t].width,c[t].height,0,p,f,c[t].data);for(let e=0;e<w.length;e++){const l=w[e].image[t].image;n.texImage2D(34069+t,e+1,m,l.width,l.height,0,p,f,l.data)}}else{n.texImage2D(34069+t,0,m,p,f,c[t]);for(let e=0;e<w.length;e++){const l=w[e];n.texImage2D(34069+t,e+1,m,p,f,l.image[t])}}e.__maxMipLevel=w.length}y(l,d)&&x(34067,l,h.width,h.height),e.__version=l.version,l.onUpdate&&l.onUpdate(l)}(o,e,r):(n.activeTexture(33984+r),n.bindTexture(34067,o.__webglTexture))}const A={[ht]:10497,[dt]:33071,[pt]:33648},L={[ft]:9728,[mt]:9984,[vt]:9986,[xt]:9729,[bt]:9985,[_t]:9987};function C(n,i,o){if(o?(t.texParameteri(n,10242,A[i.wrapS]),t.texParameteri(n,10243,A[i.wrapT]),32879!==n&&35866!==n||t.texParameteri(n,32882,A[i.wrapR]),t.texParameteri(n,10240,L[i.magFilter]),t.texParameteri(n,10241,L[i.minFilter])):(t.texParameteri(n,10242,33071),t.texParameteri(n,10243,33071),32879!==n&&35866!==n||t.texParameteri(n,32882,33071),i.wrapS===dt&&i.wrapT===dt||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),t.texParameteri(n,10240,w(i.magFilter)),t.texParameteri(n,10241,w(i.minFilter)),i.minFilter!==ft&&i.minFilter!==xt&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),!0===e.has("EXT_texture_filter_anisotropic")){const o=e.get("EXT_texture_filter_anisotropic");if(i.type===Pt&&!1===e.has("OES_texture_float_linear"))return;if(!1===u&&i.type===Rt&&!1===e.has("OES_texture_half_float_linear"))return;(i.anisotropy>1||l.get(i).__currentAnisotropy)&&(t.texParameterf(n,o.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(i.anisotropy,r.getMaxAnisotropy())),l.get(i).__currentAnisotropy=i.anisotropy)}}function P(e,n){void 0===e.__webglInit&&(e.__webglInit=!0,n.addEventListener("dispose",_),e.__webglTexture=t.createTexture(),o.memory.textures++)}function R(e,l,r){let o=3553;l.isDataTexture2DArray&&(o=35866),l.isDataTexture3D&&(o=32879),P(e,l),n.activeTexture(33984+r),n.bindTexture(o,e.__webglTexture),t.pixelStorei(37440,l.flipY),t.pixelStorei(37441,l.premultiplyAlpha),t.pixelStorei(3317,l.unpackAlignment),t.pixelStorei(37443,0);const s=function(t){return!u&&(t.wrapS!==dt||t.wrapT!==dt||t.minFilter!==ft&&t.minFilter!==xt)}(l)&&!1===v(l.image),a=g(l.image,s,!1,c),h=v(a)||u,d=i.convert(l.format);let p,f=i.convert(l.type),m=b(l.internalFormat,d,f);C(o,l,h);const w=l.mipmaps;if(l.isDepthTexture)m=6402,u?m=l.type===Pt?36012:l.type===Ct?33190:l.type===kt?35056:33189:l.type===Pt&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),l.format===Ut&&6402===m&&l.type!==At&&l.type!==Ct&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),l.type=At,f=i.convert(l.type)),l.format===Gt&&6402===m&&(m=34041,l.type!==kt&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),l.type=kt,f=i.convert(l.type))),n.texImage2D(3553,0,m,a.width,a.height,0,d,f,null);else if(l.isDataTexture)if(w.length>0&&h){for(let t=0,e=w.length;t<e;t++)p=w[t],n.texImage2D(3553,t,m,p.width,p.height,0,d,f,p.data);l.generateMipmaps=!1,e.__maxMipLevel=w.length-1}else n.texImage2D(3553,0,m,a.width,a.height,0,d,f,a.data),e.__maxMipLevel=0;else if(l.isCompressedTexture){for(let t=0,e=w.length;t<e;t++)p=w[t],l.format!==Ft&&l.format!==Bt?null!==d?n.compressedTexImage2D(3553,t,m,p.width,p.height,0,p.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):n.texImage2D(3553,t,m,p.width,p.height,0,d,f,p.data);e.__maxMipLevel=w.length-1}else if(l.isDataTexture2DArray)n.texImage3D(35866,0,m,a.width,a.height,a.depth,0,d,f,a.data),e.__maxMipLevel=0;else if(l.isDataTexture3D)n.texImage3D(32879,0,m,a.width,a.height,a.depth,0,d,f,a.data),e.__maxMipLevel=0;else if(w.length>0&&h){for(let t=0,e=w.length;t<e;t++)p=w[t],n.texImage2D(3553,t,m,d,f,p);l.generateMipmaps=!1,e.__maxMipLevel=w.length-1}else n.texImage2D(3553,0,m,d,f,a),e.__maxMipLevel=0;y(l,h)&&x(o,l,a.width,a.height),e.__version=l.version,l.onUpdate&&l.onUpdate(l)}function O(e,r,o,u,s){const a=i.convert(o.format),c=i.convert(o.type),h=b(o.internalFormat,a,c);32879===s||35866===s?n.texImage3D(s,0,h,r.width,r.height,r.depth,0,a,c,null):n.texImage2D(s,0,h,r.width,r.height,0,a,c,null),n.bindFramebuffer(36160,e),t.framebufferTexture2D(36160,u,s,l.get(o).__webglTexture,0),n.bindFramebuffer(36160,null)}function I(e,n,l){if(t.bindRenderbuffer(36161,e),n.depthBuffer&&!n.stencilBuffer){let r=33189;if(l){const e=n.depthTexture;e&&e.isDepthTexture&&(e.type===Pt?r=36012:e.type===Ct&&(r=33190));const l=D(n);t.renderbufferStorageMultisample(36161,l,r,n.width,n.height)}else t.renderbufferStorage(36161,r,n.width,n.height);t.framebufferRenderbuffer(36160,36096,36161,e)}else if(n.depthBuffer&&n.stencilBuffer){if(l){const e=D(n);t.renderbufferStorageMultisample(36161,e,35056,n.width,n.height)}else t.renderbufferStorage(36161,34041,n.width,n.height);t.framebufferRenderbuffer(36160,33306,36161,e)}else{const e=!0===n.isWebGLMultipleRenderTargets?n.texture[0]:n.texture,r=i.convert(e.format),o=i.convert(e.type),u=b(e.internalFormat,r,o);if(l){const e=D(n);t.renderbufferStorageMultisample(36161,e,u,n.width,n.height)}else t.renderbufferStorage(36161,u,n.width,n.height)}t.bindRenderbuffer(36161,null)}function D(t){return u&&t.isWebGLMultisampleRenderTarget?Math.min(h,t.samples):0}let k=!1,N=!1;this.allocateTextureUnit=function(){const t=S;return t>=s&&console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+s),S+=1,t},this.resetTextureUnits=function(){S=0},this.setTexture2D=E,this.setTexture2DArray=function(t,e){const r=l.get(t);t.version>0&&r.__version!==t.version?R(r,t,e):(n.activeTexture(33984+e),n.bindTexture(35866,r.__webglTexture))},this.setTexture3D=function(t,e){const r=l.get(t);t.version>0&&r.__version!==t.version?R(r,t,e):(n.activeTexture(33984+e),n.bindTexture(32879,r.__webglTexture))},this.setTextureCube=T,this.setupRenderTarget=function(e){const s=e.texture,a=l.get(e),c=l.get(s);e.addEventListener("dispose",M),!0!==e.isWebGLMultipleRenderTargets&&(c.__webglTexture=t.createTexture(),c.__version=s.version,o.memory.textures++);const h=!0===e.isWebGLCubeRenderTarget,d=!0===e.isWebGLMultipleRenderTargets,p=!0===e.isWebGLMultisampleRenderTarget,f=s.isDataTexture3D||s.isDataTexture2DArray,m=v(e)||u;if(!u||s.format!==Bt||s.type!==Pt&&s.type!==Rt||(s.format=Ft,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),h){a.__webglFramebuffer=[];for(let e=0;e<6;e++)a.__webglFramebuffer[e]=t.createFramebuffer()}else if(a.__webglFramebuffer=t.createFramebuffer(),d)if(r.drawBuffers){const n=e.texture;for(let e=0,r=n.length;e<r;e++){const r=l.get(n[e]);void 0===r.__webglTexture&&(r.__webglTexture=t.createTexture(),o.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");else if(p)if(u){a.__webglMultisampledFramebuffer=t.createFramebuffer(),a.__webglColorRenderbuffer=t.createRenderbuffer(),t.bindRenderbuffer(36161,a.__webglColorRenderbuffer);const l=i.convert(s.format),r=i.convert(s.type),o=b(s.internalFormat,l,r),u=D(e);t.renderbufferStorageMultisample(36161,u,o,e.width,e.height),n.bindFramebuffer(36160,a.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064,36161,a.__webglColorRenderbuffer),t.bindRenderbuffer(36161,null),e.depthBuffer&&(a.__webglDepthRenderbuffer=t.createRenderbuffer(),I(a.__webglDepthRenderbuffer,e,!0)),n.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(h){n.bindTexture(34067,c.__webglTexture),C(34067,s,m);for(let t=0;t<6;t++)O(a.__webglFramebuffer[t],e,s,36064,34069+t);y(s,m)&&x(34067,s,e.width,e.height),n.bindTexture(34067,null)}else if(d){const t=e.texture;for(let r=0,i=t.length;r<i;r++){const i=t[r],o=l.get(i);n.bindTexture(3553,o.__webglTexture),C(3553,i,m),O(a.__webglFramebuffer,e,i,36064+r,3553),y(i,m)&&x(3553,i,e.width,e.height)}n.bindTexture(3553,null)}else{let t=3553;f&&(u?t=s.isDataTexture3D?32879:35866:console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.")),n.bindTexture(t,c.__webglTexture),C(t,s,m),O(a.__webglFramebuffer,e,s,36064,t),y(s,m)&&x(t,s,e.width,e.height,e.depth),n.bindTexture(t,null)}e.depthBuffer&&function(e){const r=l.get(e),i=!0===e.isWebGLCubeRenderTarget;if(e.depthTexture){if(i)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,r){if(r&&r.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(36160,e),!r.depthTexture||!r.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");l.get(r.depthTexture).__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),E(r.depthTexture,0);const i=l.get(r.depthTexture).__webglTexture;if(r.depthTexture.format===Ut)t.framebufferTexture2D(36160,36096,3553,i,0);else{if(r.depthTexture.format!==Gt)throw new Error("Unknown depthTexture format");t.framebufferTexture2D(36160,33306,3553,i,0)}}(r.__webglFramebuffer,e)}else if(i){r.__webglDepthbuffer=[];for(let l=0;l<6;l++)n.bindFramebuffer(36160,r.__webglFramebuffer[l]),r.__webglDepthbuffer[l]=t.createRenderbuffer(),I(r.__webglDepthbuffer[l],e,!1)}else n.bindFramebuffer(36160,r.__webglFramebuffer),r.__webglDepthbuffer=t.createRenderbuffer(),I(r.__webglDepthbuffer,e,!1);n.bindFramebuffer(36160,null)}(e)},this.updateRenderTargetMipmap=function(t){const e=v(t)||u,r=!0===t.isWebGLMultipleRenderTargets?t.texture:[t.texture];for(let i=0,o=r.length;i<o;i++){const o=r[i];if(y(o,e)){const e=t.isWebGLCubeRenderTarget?34067:3553,r=l.get(o).__webglTexture;n.bindTexture(e,r),x(e,o,t.width,t.height),n.bindTexture(e,null)}}},this.updateMultisampleRenderTarget=function(e){if(e.isWebGLMultisampleRenderTarget)if(u){const r=e.width,i=e.height;let o=16384;e.depthBuffer&&(o|=256),e.stencilBuffer&&(o|=1024);const u=l.get(e);n.bindFramebuffer(36008,u.__webglMultisampledFramebuffer),n.bindFramebuffer(36009,u.__webglFramebuffer),t.blitFramebuffer(0,0,r,i,0,0,r,i,o,9728),n.bindFramebuffer(36008,null),n.bindFramebuffer(36009,u.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(t,e){t&&t.isWebGLRenderTarget&&(!1===k&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),k=!0),t=t.texture),E(t,e)},this.safeSetTextureCube=function(t,e){t&&t.isWebGLCubeRenderTarget&&(!1===N&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),N=!0),t=t.texture),T(t,e)}}function qu(t,e,n){const l=n.isWebGL2;return{convert:function(t){let n;if(t===St)return 5121;if(t===Ot)return 32819;if(t===It)return 32820;if(t===Dt)return 33635;if(t===Et)return 5120;if(t===Tt)return 5122;if(t===At)return 5123;if(t===Lt)return 5124;if(t===Ct)return 5125;if(t===Pt)return 5126;if(t===Rt)return l?5131:(n=e.get("OES_texture_half_float"),null!==n?n.HALF_FLOAT_OES:null);if(t===Nt)return 6406;if(t===Bt)return 6407;if(t===Ft)return 6408;if(t===zt)return 6409;if(t===Ht)return 6410;if(t===Ut)return 6402;if(t===Gt)return 34041;if(t===Vt)return 6403;if(t===Wt)return 36244;if(t===qt)return 33319;if(t===Xt)return 33320;if(t===Yt)return 36248;if(t===$t)return 36249;if(t===Jt||t===Zt||t===Kt||t===Qt){if(n=e.get("WEBGL_compressed_texture_s3tc"),null===n)return null;if(t===Jt)return n.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===Zt)return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===Kt)return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===Qt)return n.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(t===te||t===ee||t===ne||t===le){if(n=e.get("WEBGL_compressed_texture_pvrtc"),null===n)return null;if(t===te)return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===ee)return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===ne)return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===le)return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(t===re)return n=e.get("WEBGL_compressed_texture_etc1"),null!==n?n.COMPRESSED_RGB_ETC1_WEBGL:null;if((t===ie||t===oe)&&(n=e.get("WEBGL_compressed_texture_etc"),null!==n)){if(t===ie)return n.COMPRESSED_RGB8_ETC2;if(t===oe)return n.COMPRESSED_RGBA8_ETC2_EAC}return t===ue||t===se||t===ae||t===ce||t===he||t===de||t===pe||t===fe||t===me||t===ge||t===ve||t===ye||t===xe||t===be||t===_e||t===Me||t===Se||t===Ee||t===Te||t===Ae||t===Le||t===Ce||t===Pe||t===Re||t===Oe||t===Ie||t===De||t===ke?(n=e.get("WEBGL_compressed_texture_astc"),null!==n?t:null):t===we?(n=e.get("EXT_texture_compression_bptc"),null!==n?t:null):t===kt?l?34042:(n=e.get("WEBGL_depth_texture"),null!==n?n.UNSIGNED_INT_24_8_WEBGL:null):void 0}}}Uu.prototype.isMeshDistanceMaterial=!0;class Xu extends Ti{constructor(t=[]){super(),this.cameras=t}}Xu.prototype.isArrayCamera=!0;class Yu extends ar{constructor(){super(),this.type="Group"}}Yu.prototype.isGroup=!0;const $u={type:"move"};class Ju{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new Yu,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new Yu,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new ul,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new ul),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new Yu,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new ul,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new ul),this._grip}dispatchEvent(t){return null!==this._targetRay&&this._targetRay.dispatchEvent(t),null!==this._grip&&this._grip.dispatchEvent(t),null!==this._hand&&this._hand.dispatchEvent(t),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(t,e,n){let l=null,r=null,i=null;const o=this._targetRay,u=this._grip,s=this._hand;if(t&&"visible-blurred"!==e.session.visibilityState)if(null!==o&&(l=e.getPose(t.targetRaySpace,n),null!==l&&(o.matrix.fromArray(l.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),l.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(l.linearVelocity)):o.hasLinearVelocity=!1,l.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(l.angularVelocity)):o.hasAngularVelocity=!1,this.dispatchEvent($u))),s&&t.hand){i=!0;for(const l of t.hand.values()){const t=e.getJointPose(l,n);if(void 0===s.joints[l.jointName]){const t=new Yu;t.matrixAutoUpdate=!1,t.visible=!1,s.joints[l.jointName]=t,s.add(t)}const r=s.joints[l.jointName];null!==t&&(r.matrix.fromArray(t.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.jointRadius=t.radius),r.visible=null!==t}const l=s.joints["index-finger-tip"],r=s.joints["thumb-tip"],o=l.position.distanceTo(r.position),u=.02,a=.005;s.inputState.pinching&&o>u+a?(s.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!s.inputState.pinching&&o<=u-a&&(s.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else null!==u&&t.gripSpace&&(r=e.getPose(t.gripSpace,n),null!==r&&(u.matrix.fromArray(r.transform.matrix),u.matrix.decompose(u.position,u.rotation,u.scale),r.linearVelocity?(u.hasLinearVelocity=!0,u.linearVelocity.copy(r.linearVelocity)):u.hasLinearVelocity=!1,r.angularVelocity?(u.hasAngularVelocity=!0,u.angularVelocity.copy(r.angularVelocity)):u.hasAngularVelocity=!1));return null!==o&&(o.visible=null!==l),null!==u&&(u.visible=null!==r),null!==s&&(s.visible=null!==i),this}}class Zu extends Nn{constructor(t,e){super();const n=this,l=t.state;let r=null,i=1,o=null,u="local-floor",s=null,a=null,c=null,h=null;const d=[],p=new Map,f=new Ti;f.layers.enable(1),f.viewport=new nl;const m=new Ti;m.layers.enable(2),m.viewport=new nl;const g=[f,m],v=new Xu;v.layers.enable(1),v.layers.enable(2);let y=null,x=null;function b(t){const e=p.get(t.inputSource);e&&e.dispatchEvent({type:t.type,data:t.inputSource})}function w(){p.forEach((function(t,e){t.disconnect(e)})),p.clear(),y=null,x=null,l.bindXRFramebuffer(null),t.setRenderTarget(t.getRenderTarget()),A.stop(),n.isPresenting=!1,n.dispatchEvent({type:"sessionend"})}function _(t){const e=r.inputSources;for(let t=0;t<d.length;t++)p.set(e[t],d[t]);for(let e=0;e<t.removed.length;e++){const n=t.removed[e],l=p.get(n);l&&(l.dispatchEvent({type:"disconnected",data:n}),p.delete(n))}for(let e=0;e<t.added.length;e++){const n=t.added[e],l=p.get(n);l&&l.dispatchEvent({type:"connected",data:n})}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(t){let e=d[t];return void 0===e&&(e=new Ju,d[t]=e),e.getTargetRaySpace()},this.getControllerGrip=function(t){let e=d[t];return void 0===e&&(e=new Ju,d[t]=e),e.getGripSpace()},this.getHand=function(t){let e=d[t];return void 0===e&&(e=new Ju,d[t]=e),e.getHandSpace()},this.setFramebufferScaleFactor=function(t){i=t,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(t){u=t,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return o},this.getSession=function(){return r},this.setSession=async function(t){if(r=t,null!==r){r.addEventListener("select",b),r.addEventListener("selectstart",b),r.addEventListener("selectend",b),r.addEventListener("squeeze",b),r.addEventListener("squeezestart",b),r.addEventListener("squeezeend",b),r.addEventListener("end",w),r.addEventListener("inputsourceschange",_);const t=e.getContextAttributes();if(!0!==t.xrCompatible&&await e.makeXRCompatible(),void 0===r.renderState.layers){const n={antialias:t.antialias,alpha:t.alpha,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:i},l=new XRWebGLLayer(r,e,n);r.updateRenderState({baseLayer:l})}else{let n=0;t.depth&&(n=t.stencil?34041:6402);const l={colorFormat:t.alpha?6408:6407,depthFormat:n,scaleFactor:i};a=new XRWebGLBinding(r,e),h=a.createProjectionLayer(l),c=e.createFramebuffer(),r.updateRenderState({layers:[h]})}o=await r.requestReferenceSpace(u),A.setContext(r),A.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}};const M=new ul,S=new ul;function E(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.updateCamera=function(t){if(null===r)return;v.near=m.near=f.near=t.near,v.far=m.far=f.far=t.far,y===v.near&&x===v.far||(r.updateRenderState({depthNear:v.near,depthFar:v.far}),y=v.near,x=v.far);const e=t.parent,n=v.cameras;E(v,e);for(let t=0;t<n.length;t++)E(n[t],e);v.matrixWorld.decompose(v.position,v.quaternion,v.scale),t.position.copy(v.position),t.quaternion.copy(v.quaternion),t.scale.copy(v.scale),t.matrix.copy(v.matrix),t.matrixWorld.copy(v.matrixWorld);const l=t.children;for(let t=0,e=l.length;t<e;t++)l[t].updateMatrixWorld(!0);2===n.length?function(t,e,n){M.setFromMatrixPosition(e.matrixWorld),S.setFromMatrixPosition(n.matrixWorld);const l=M.distanceTo(S),r=e.projectionMatrix.elements,i=n.projectionMatrix.elements,o=r[14]/(r[10]-1),u=r[14]/(r[10]+1),s=(r[9]+1)/r[5],a=(r[9]-1)/r[5],c=(r[8]-1)/r[0],h=(i[8]+1)/i[0],d=o*c,p=o*h,f=l/(-c+h),m=f*-c;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(m),t.translateZ(f),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert();const g=o+f,v=u+f,y=d-m,x=p+(l-m),b=s*u/v*g,w=a*u/v*g;t.projectionMatrix.makePerspective(y,x,b,w,g,v)}(v,f,m):v.projectionMatrix.copy(f.projectionMatrix)},this.getCamera=function(){return v};let T=null;const A=new Fi;A.setAnimationLoop((function(t,n){if(s=n.getViewerPose(o),null!==s){const t=s.views,n=r.renderState.baseLayer;void 0===r.renderState.layers&&l.bindXRFramebuffer(n.framebuffer);let i=!1;t.length!==v.cameras.length&&(v.cameras.length=0,i=!0);for(let o=0;o<t.length;o++){const u=t[o];let s=null;if(void 0===r.renderState.layers)s=n.getViewport(u);else{const t=a.getViewSubImage(h,u);l.bindXRFramebuffer(c),e.framebufferTexture2D(36160,36064,3553,t.colorTexture,0),void 0!==t.depthStencilTexture&&e.framebufferTexture2D(36160,36096,3553,t.depthStencilTexture,0),s=t.viewport}const d=g[o];d.matrix.fromArray(u.transform.matrix),d.projectionMatrix.fromArray(u.projectionMatrix),d.viewport.set(s.x,s.y,s.width,s.height),0===o&&v.matrix.copy(d.matrix),!0===i&&v.cameras.push(d)}}const i=r.inputSources;for(let t=0;t<d.length;t++){const e=d[t],l=i[t];e.update(l,n,o)}T&&T(t,n)})),this.setAnimationLoop=function(t){T=t},this.dispose=function(){}}}function Ku(t){function e(e,n){e.opacity.value=n.opacity,n.color&&e.diffuse.value.copy(n.color),n.emissive&&e.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity),n.map&&(e.map.value=n.map),n.alphaMap&&(e.alphaMap.value=n.alphaMap),n.specularMap&&(e.specularMap.value=n.specularMap);const l=t.get(n).envMap;if(l){e.envMap.value=l,e.flipEnvMap.value=l.isCubeTexture&&l._needsFlipEnvMap?-1:1,e.reflectivity.value=n.reflectivity,e.refractionRatio.value=n.refractionRatio;const r=t.get(l).__maxMipLevel;void 0!==r&&(e.maxMipLevel.value=r)}let r,i;n.lightMap&&(e.lightMap.value=n.lightMap,e.lightMapIntensity.value=n.lightMapIntensity),n.aoMap&&(e.aoMap.value=n.aoMap,e.aoMapIntensity.value=n.aoMapIntensity),n.map?r=n.map:n.specularMap?r=n.specularMap:n.displacementMap?r=n.displacementMap:n.normalMap?r=n.normalMap:n.bumpMap?r=n.bumpMap:n.roughnessMap?r=n.roughnessMap:n.metalnessMap?r=n.metalnessMap:n.alphaMap?r=n.alphaMap:n.emissiveMap?r=n.emissiveMap:n.clearcoatMap?r=n.clearcoatMap:n.clearcoatNormalMap?r=n.clearcoatNormalMap:n.clearcoatRoughnessMap&&(r=n.clearcoatRoughnessMap),void 0!==r&&(r.isWebGLRenderTarget&&(r=r.texture),!0===r.matrixAutoUpdate&&r.updateMatrix(),e.uvTransform.value.copy(r.matrix)),n.aoMap?i=n.aoMap:n.lightMap&&(i=n.lightMap),void 0!==i&&(i.isWebGLRenderTarget&&(i=i.texture),!0===i.matrixAutoUpdate&&i.updateMatrix(),e.uv2Transform.value.copy(i.matrix))}function n(e,n){e.roughness.value=n.roughness,e.metalness.value=n.metalness,n.roughnessMap&&(e.roughnessMap.value=n.roughnessMap),n.metalnessMap&&(e.metalnessMap.value=n.metalnessMap),n.emissiveMap&&(e.emissiveMap.value=n.emissiveMap),n.bumpMap&&(e.bumpMap.value=n.bumpMap,e.bumpScale.value=n.bumpScale,n.side===m&&(e.bumpScale.value*=-1)),n.normalMap&&(e.normalMap.value=n.normalMap,e.normalScale.value.copy(n.normalScale),n.side===m&&e.normalScale.value.negate()),n.displacementMap&&(e.displacementMap.value=n.displacementMap,e.displacementScale.value=n.displacementScale,e.displacementBias.value=n.displacementBias),t.get(n).envMap&&(e.envMapIntensity.value=n.envMapIntensity)}return{refreshFogUniforms:function(t,e){t.fogColor.value.copy(e.color),e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)},refreshMaterialUniforms:function(t,l,r,i,o){l.isMeshBasicMaterial?e(t,l):l.isMeshLambertMaterial?(e(t,l),function(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)}(t,l)):l.isMeshToonMaterial?(e(t,l),function(t,e){e.gradientMap&&(t.gradientMap.value=e.gradientMap),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===m&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===m&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,l)):l.isMeshPhongMaterial?(e(t,l),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===m&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===m&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,l)):l.isMeshStandardMaterial?(e(t,l),l.isMeshPhysicalMaterial?function(t,e,l){n(t,e),t.reflectivity.value=e.reflectivity,t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.sheen&&t.sheen.value.copy(e.sheen),e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap),e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap),e.clearcoatNormalMap&&(t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),t.clearcoatNormalMap.value=e.clearcoatNormalMap,e.side===m&&t.clearcoatNormalScale.value.negate()),t.transmission.value=e.transmission,e.transmissionMap&&(t.transmissionMap.value=e.transmissionMap),e.transmission>0&&(t.transmissionSamplerMap.value=l.texture,t.transmissionSamplerSize.value.set(l.width,l.height)),t.thickness.value=e.thickness,e.thicknessMap&&(t.thicknessMap.value=e.thicknessMap),t.attenuationDistance.value=e.attenuationDistance,t.attenuationColor.value.copy(e.attenuationColor)}(t,l,o):n(t,l)):l.isMeshMatcapMaterial?(e(t,l),function(t,e){e.matcap&&(t.matcap.value=e.matcap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===m&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===m&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,l)):l.isMeshDepthMaterial?(e(t,l),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,l)):l.isMeshDistanceMaterial?(e(t,l),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias),t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(t,l)):l.isMeshNormalMaterial?(e(t,l),function(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===m&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===m&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,l)):l.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity}(t,l),l.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(t,l)):l.isPointsMaterial?function(t,e,n,l){let r;t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*n,t.scale.value=.5*l,e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.map?r=e.map:e.alphaMap&&(r=e.alphaMap),void 0!==r&&(!0===r.matrixAutoUpdate&&r.updateMatrix(),t.uvTransform.value.copy(r.matrix))}(t,l,r,i):l.isSpriteMaterial?function(t,e){let n;t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.map?n=e.map:e.alphaMap&&(n=e.alphaMap),void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),t.uvTransform.value.copy(n.matrix))}(t,l):l.isShadowMaterial?(t.color.value.copy(l.color),t.opacity.value=l.opacity):l.isShaderMaterial&&(l.uniformsNeedUpdate=!1)}}}function Qu(t={}){const e=void 0!==t.canvas?t.canvas:function(){const t=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");return t.style.display="block",t}(),n=void 0!==t.context?t.context:null,l=void 0!==t.alpha&&t.alpha,r=void 0===t.depth||t.depth,i=void 0===t.stencil||t.stencil,o=void 0!==t.antialias&&t.antialias,u=void 0===t.premultipliedAlpha||t.premultipliedAlpha,s=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,a=void 0!==t.powerPreference?t.powerPreference:"default",c=void 0!==t.failIfMajorPerformanceCaveat&&t.failIfMajorPerformanceCaveat;let h=null,d=null;const p=[],v=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=Je,this.physicallyCorrectLights=!1,this.toneMapping=K,this.toneMappingExposure=1;const y=this;let x=!1,b=0,w=0,_=null,M=-1,S=null;const E=new nl,T=new nl;let A=null,L=e.width,C=e.height,P=1,R=null,O=null;const I=new nl(0,0,L,C),D=new nl(0,0,L,C);let k=!1;const N=[],B=new Bi;let F=!1,z=!1,H=null;const j=new Fl,U=new ul,G={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function V(){return null===_?P:1}let W,q,X,Y,$,J,Z,Q,tt,et,nt,lt,rt,it,ot,ut,st,at,ct,ht,pt,mt,gt=n;function vt(t,n){for(let l=0;l<t.length;l++){const r=t[l],i=e.getContext(r,n);if(null!==i)return i}return null}try{const t={alpha:l,depth:r,stencil:i,antialias:o,premultipliedAlpha:u,preserveDrawingBuffer:s,powerPreference:a,failIfMajorPerformanceCaveat:c};if(e.addEventListener("webglcontextlost",bt,!1),e.addEventListener("webglcontextrestored",wt,!1),null===gt){const e=["webgl2","webgl","experimental-webgl"];if(!0===y.isWebGL1Renderer&&e.shift(),gt=vt(e,t),null===gt)throw vt(e)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}void 0===gt.getShaderPrecisionFormat&&(gt.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){throw console.error("THREE.WebGLRenderer: "+t.message),t}function yt(){W=new Ji(gt),q=new Xi(gt,W,t),W.init(q),pt=new qu(gt,W,q),X=new Vu(gt,W,q),N[0]=1029,Y=new Qi(gt),$=new Pu,J=new Wu(gt,W,X,$,q,pt,Y),Z=new $i(y),Q=new zi(gt,q),mt=new Wi(gt,W,Q,q),tt=new Zi(gt,Q,Y,mt),et=new lo(gt,tt,Q,Y),at=new no(gt),ot=new Yi($),nt=new Cu(y,Z,W,q,mt,ot),lt=new Ku($),rt=new Du($),it=new Hu(W,q),st=new Vi(y,Z,X,et,u),ut=new Gu(y,et,q),ct=new qi(gt,W,Y,q),ht=new Ki(gt,W,Y,q),Y.programs=nt.programs,y.capabilities=q,y.extensions=W,y.properties=$,y.renderLists=rt,y.shadowMap=ut,y.state=X,y.info=Y}yt();const xt=new Zu(y,gt);function bt(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),x=!0}function wt(){console.log("THREE.WebGLRenderer: Context Restored."),x=!1;const t=Y.autoReset,e=ut.enabled,n=ut.autoUpdate,l=ut.needsUpdate,r=ut.type;yt(),Y.autoReset=t,ut.enabled=e,ut.autoUpdate=n,ut.needsUpdate=l,ut.type=r}function Mt(t){const e=t.target;e.removeEventListener("dispose",Mt),function(t){(function(t){const e=$.get(t).programs;void 0!==e&&e.forEach((function(t){nt.releaseProgram(t)}))})(t),$.remove(t)}(e)}this.xr=xt,this.getContext=function(){return gt},this.getContextAttributes=function(){return gt.getContextAttributes()},this.forceContextLoss=function(){const t=W.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){const t=W.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return P},this.setPixelRatio=function(t){void 0!==t&&(P=t,this.setSize(L,C,!1))},this.getSize=function(t){return t.set(L,C)},this.setSize=function(t,n,l){xt.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(L=t,C=n,e.width=Math.floor(t*P),e.height=Math.floor(n*P),!1!==l&&(e.style.width=t+"px",e.style.height=n+"px"),this.setViewport(0,0,t,n))},this.getDrawingBufferSize=function(t){return t.set(L*P,C*P).floor()},this.setDrawingBufferSize=function(t,n,l){L=t,C=n,P=l,e.width=Math.floor(t*l),e.height=Math.floor(n*l),this.setViewport(0,0,t,n)},this.getCurrentViewport=function(t){return t.copy(E)},this.getViewport=function(t){return t.copy(I)},this.setViewport=function(t,e,n,l){t.isVector4?I.set(t.x,t.y,t.z,t.w):I.set(t,e,n,l),X.viewport(E.copy(I).multiplyScalar(P).floor())},this.getScissor=function(t){return t.copy(D)},this.setScissor=function(t,e,n,l){t.isVector4?D.set(t.x,t.y,t.z,t.w):D.set(t,e,n,l),X.scissor(T.copy(D).multiplyScalar(P).floor())},this.getScissorTest=function(){return k},this.setScissorTest=function(t){X.setScissorTest(k=t)},this.setOpaqueSort=function(t){R=t},this.setTransparentSort=function(t){O=t},this.getClearColor=function(t){return t.copy(st.getClearColor())},this.setClearColor=function(){st.setClearColor.apply(st,arguments)},this.getClearAlpha=function(){return st.getClearAlpha()},this.setClearAlpha=function(){st.setClearAlpha.apply(st,arguments)},this.clear=function(t,e,n){let l=0;(void 0===t||t)&&(l|=16384),(void 0===e||e)&&(l|=256),(void 0===n||n)&&(l|=1024),gt.clear(l)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",bt,!1),e.removeEventListener("webglcontextrestored",wt,!1),rt.dispose(),it.dispose(),$.dispose(),Z.dispose(),et.dispose(),mt.dispose(),xt.dispose(),xt.removeEventListener("sessionstart",Tt),xt.removeEventListener("sessionend",At),H&&(H.dispose(),H=null),Lt.stop()},this.renderBufferImmediate=function(t,e){mt.initAttributes();const n=$.get(t);t.hasPositions&&!n.position&&(n.position=gt.createBuffer()),t.hasNormals&&!n.normal&&(n.normal=gt.createBuffer()),t.hasUvs&&!n.uv&&(n.uv=gt.createBuffer()),t.hasColors&&!n.color&&(n.color=gt.createBuffer());const l=e.getAttributes();t.hasPositions&&(gt.bindBuffer(34962,n.position),gt.bufferData(34962,t.positionArray,35048),mt.enableAttribute(l.position),gt.vertexAttribPointer(l.position,3,5126,!1,0,0)),t.hasNormals&&(gt.bindBuffer(34962,n.normal),gt.bufferData(34962,t.normalArray,35048),mt.enableAttribute(l.normal),gt.vertexAttribPointer(l.normal,3,5126,!1,0,0)),t.hasUvs&&(gt.bindBuffer(34962,n.uv),gt.bufferData(34962,t.uvArray,35048),mt.enableAttribute(l.uv),gt.vertexAttribPointer(l.uv,2,5126,!1,0,0)),t.hasColors&&(gt.bindBuffer(34962,n.color),gt.bufferData(34962,t.colorArray,35048),mt.enableAttribute(l.color),gt.vertexAttribPointer(l.color,3,5126,!1,0,0)),mt.disableUnusedAttributes(),gt.drawArrays(4,0,t.count),t.count=0},this.renderBufferDirect=function(t,e,n,l,r,i){null===e&&(e=G);const o=r.isMesh&&r.matrixWorld.determinant()<0,u=Nt(t,e,l,r);X.setMaterial(l,o);let s=n.index;const a=n.attributes.position;if(null===s){if(void 0===a||0===a.count)return}else if(0===s.count)return;let c,h=1;!0===l.wireframe&&(s=tt.getWireframeAttribute(n),h=2),(l.morphTargets||l.morphNormals)&&at.update(r,n,l,u),mt.setup(r,l,u,n,s);let d=ct;null!==s&&(c=Q.get(s),d=ht,d.setIndex(c));const p=null!==s?s.count:a.count,f=n.drawRange.start*h,m=n.drawRange.count*h,g=null!==i?i.start*h:0,v=null!==i?i.count*h:1/0,y=Math.max(f,g),x=Math.min(p,f+m,g+v)-1,b=Math.max(0,x-y+1);if(0!==b){if(r.isMesh)!0===l.wireframe?(X.setLineWidth(l.wireframeLinewidth*V()),d.setMode(1)):d.setMode(4);else if(r.isLine){let t=l.linewidth;void 0===t&&(t=1),X.setLineWidth(t*V()),r.isLineSegments?d.setMode(1):r.isLineLoop?d.setMode(2):d.setMode(3)}else r.isPoints?d.setMode(0):r.isSprite&&d.setMode(4);if(r.isInstancedMesh)d.renderInstances(y,b,r.count);else if(n.isInstancedBufferGeometry){const t=Math.min(n.instanceCount,n._maxInstanceCount);d.renderInstances(y,b,t)}else d.render(y,b)}},this.compile=function(t,e){d=it.get(t),d.init(),t.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(d.pushLight(t),t.castShadow&&d.pushShadow(t))})),d.setupLights(),t.traverse((function(e){const n=e.material;if(n)if(Array.isArray(n))for(let l=0;l<n.length;l++)Dt(n[l],t,e);else Dt(n,t,e)}))};let Et=null;function Tt(){Lt.stop()}function At(){Lt.start()}const Lt=new Fi;function Ct(t,e,n,l){if(!1===t.visible)return;if(t.layers.test(e.layers))if(t.isGroup)n=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)d.pushLight(t),t.castShadow&&d.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||B.intersectsSprite(t)){l&&U.setFromMatrixPosition(t.matrixWorld).applyMatrix4(j);const e=et.update(t),r=t.material;r.visible&&h.push(t,e,r,n,U.z,null)}}else if(t.isImmediateRenderObject)l&&U.setFromMatrixPosition(t.matrixWorld).applyMatrix4(j),h.push(t,null,t.material,n,U.z,null);else if((t.isMesh||t.isLine||t.isPoints)&&(t.isSkinnedMesh&&t.skeleton.frame!==Y.render.frame&&(t.skeleton.update(),t.skeleton.frame=Y.render.frame),!t.frustumCulled||B.intersectsObject(t))){l&&U.setFromMatrixPosition(t.matrixWorld).applyMatrix4(j);const e=et.update(t),r=t.material;if(Array.isArray(r)){const l=e.groups;for(let i=0,o=l.length;i<o;i++){const o=l[i],u=r[o.materialIndex];u&&u.visible&&h.push(t,e,u,n,U.z,o)}}else r.visible&&h.push(t,e,r,n,U.z,null)}const r=t.children;for(let t=0,i=r.length;t<i;t++)Ct(r[t],e,n,l)}function Ot(t,e,n){const l=!0===e.isScene?e.overrideMaterial:null;for(let r=0,i=t.length;r<i;r++){const i=t[r],o=i.object,u=i.geometry,s=null===l?i.material:l,a=i.group;if(n.isArrayCamera){const t=n.cameras;for(let n=0,l=t.length;n<l;n++){const l=t[n];o.layers.test(l.layers)&&(X.viewport(E.copy(l.viewport)),d.setupLightsView(l),It(o,e,l,u,s,a))}}else It(o,e,n,u,s,a)}}function It(t,e,n,l,r,i){if(t.onBeforeRender(y,e,n,l,r,i),t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),t.isImmediateRenderObject){const l=Nt(n,e,r,t);X.setMaterial(r),mt.reset(),function(t,e){t.render((function(t){y.renderBufferImmediate(t,e)}))}(t,l)}else!0===r.transparent&&r.side===g?(r.side=m,r.needsUpdate=!0,y.renderBufferDirect(n,e,l,r,t,i),r.side=f,r.needsUpdate=!0,y.renderBufferDirect(n,e,l,r,t,i),r.side=g):y.renderBufferDirect(n,e,l,r,t,i);t.onAfterRender(y,e,n,l,r,i)}function Dt(t,e,n){!0!==e.isScene&&(e=G);const l=$.get(t),r=d.state.lights,i=d.state.shadowsArray,o=r.state.version,u=nt.getParameters(t,r.state,i,e,n),s=nt.getProgramCacheKey(u);let a=l.programs;l.environment=t.isMeshStandardMaterial?e.environment:null,l.fog=e.fog,l.envMap=Z.get(t.envMap||l.environment),void 0===a&&(t.addEventListener("dispose",Mt),a=new Map,l.programs=a);let c=a.get(s);if(void 0!==c){if(l.currentProgram===c&&l.lightsStateVersion===o)return kt(t,u),c}else u.uniforms=nt.getUniforms(t),t.onBuild(u,y),t.onBeforeCompile(u,y),c=nt.acquireProgram(u,s),a.set(s,c),l.uniforms=u.uniforms;const h=l.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(h.clippingPlanes=ot.uniform),kt(t,u),l.needsLights=function(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights}(t),l.lightsStateVersion=o,l.needsLights&&(h.ambientLightColor.value=r.state.ambient,h.lightProbe.value=r.state.probe,h.directionalLights.value=r.state.directional,h.directionalLightShadows.value=r.state.directionalShadow,h.spotLights.value=r.state.spot,h.spotLightShadows.value=r.state.spotShadow,h.rectAreaLights.value=r.state.rectArea,h.ltc_1.value=r.state.rectAreaLTC1,h.ltc_2.value=r.state.rectAreaLTC2,h.pointLights.value=r.state.point,h.pointLightShadows.value=r.state.pointShadow,h.hemisphereLights.value=r.state.hemi,h.directionalShadowMap.value=r.state.directionalShadowMap,h.directionalShadowMatrix.value=r.state.directionalShadowMatrix,h.spotShadowMap.value=r.state.spotShadowMap,h.spotShadowMatrix.value=r.state.spotShadowMatrix,h.pointShadowMap.value=r.state.pointShadowMap,h.pointShadowMatrix.value=r.state.pointShadowMatrix);const p=c.getUniforms(),f=su.seqWithValue(p.seq,h);return l.currentProgram=c,l.uniformsList=f,c}function kt(t,e){const n=$.get(t);n.outputEncoding=e.outputEncoding,n.instancing=e.instancing,n.skinning=e.skinning,n.numClippingPlanes=e.numClippingPlanes,n.numIntersection=e.numClipIntersection,n.vertexAlphas=e.vertexAlphas}function Nt(t,e,n,l){!0!==e.isScene&&(e=G),J.resetTextureUnits();const r=e.fog,i=n.isMeshStandardMaterial?e.environment:null,o=null===_?y.outputEncoding:_.texture.encoding,u=Z.get(n.envMap||i),s=!0===n.vertexColors&&l.geometry&&l.geometry.attributes.color&&4===l.geometry.attributes.color.itemSize,a=$.get(n),c=d.state.lights;if(!0===F&&(!0===z||t!==S)){const e=t===S&&n.id===M;ot.setState(n,t,e)}let h=!1;n.version===a.__version?a.needsLights&&a.lightsStateVersion!==c.state.version||a.outputEncoding!==o||l.isInstancedMesh&&!1===a.instancing?h=!0:l.isInstancedMesh||!0!==a.instancing?l.isSkinnedMesh&&!1===a.skinning?h=!0:l.isSkinnedMesh||!0!==a.skinning?a.envMap!==u||n.fog&&a.fog!==r?h=!0:void 0===a.numClippingPlanes||a.numClippingPlanes===ot.numPlanes&&a.numIntersection===ot.numIntersection?a.vertexAlphas!==s&&(h=!0):h=!0:h=!0:h=!0:(h=!0,a.__version=n.version);let p=a.currentProgram;!0===h&&(p=Dt(n,e,l));let f=!1,m=!1,g=!1;const v=p.getUniforms(),x=a.uniforms;if(X.useProgram(p.program)&&(f=!0,m=!0,g=!0),n.id!==M&&(M=n.id,m=!0),f||S!==t){if(v.setValue(gt,"projectionMatrix",t.projectionMatrix),q.logarithmicDepthBuffer&&v.setValue(gt,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),S!==t&&(S=t,m=!0,g=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshStandardMaterial||n.envMap){const e=v.map.cameraPosition;void 0!==e&&e.setValue(gt,U.setFromMatrixPosition(t.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial)&&v.setValue(gt,"isOrthographic",!0===t.isOrthographicCamera),(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.isShadowMaterial||l.isSkinnedMesh)&&v.setValue(gt,"viewMatrix",t.matrixWorldInverse)}if(l.isSkinnedMesh){v.setOptional(gt,l,"bindMatrix"),v.setOptional(gt,l,"bindMatrixInverse");const t=l.skeleton;t&&(q.floatVertexTextures?(null===t.boneTexture&&t.computeBoneTexture(),v.setValue(gt,"boneTexture",t.boneTexture,J),v.setValue(gt,"boneTextureSize",t.boneTextureSize)):v.setOptional(gt,t,"boneMatrices"))}var b,w;return(m||a.receiveShadow!==l.receiveShadow)&&(a.receiveShadow=l.receiveShadow,v.setValue(gt,"receiveShadow",l.receiveShadow)),m&&(v.setValue(gt,"toneMappingExposure",y.toneMappingExposure),a.needsLights&&(w=g,(b=x).ambientLightColor.needsUpdate=w,b.lightProbe.needsUpdate=w,b.directionalLights.needsUpdate=w,b.directionalLightShadows.needsUpdate=w,b.pointLights.needsUpdate=w,b.pointLightShadows.needsUpdate=w,b.spotLights.needsUpdate=w,b.spotLightShadows.needsUpdate=w,b.rectAreaLights.needsUpdate=w,b.hemisphereLights.needsUpdate=w),r&&n.fog&&lt.refreshFogUniforms(x,r),lt.refreshMaterialUniforms(x,n,P,C,H),su.upload(gt,a.uniformsList,x,J)),n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(su.upload(gt,a.uniformsList,x,J),n.uniformsNeedUpdate=!1),n.isSpriteMaterial&&v.setValue(gt,"center",l.center),v.setValue(gt,"modelViewMatrix",l.modelViewMatrix),v.setValue(gt,"normalMatrix",l.normalMatrix),v.setValue(gt,"modelMatrix",l.matrixWorld),p}Lt.setAnimationLoop((function(t){Et&&Et(t)})),"undefined"!=typeof window&&Lt.setContext(window),this.setAnimationLoop=function(t){Et=t,xt.setAnimationLoop(t),null===t?Lt.stop():Lt.start()},xt.addEventListener("sessionstart",Tt),xt.addEventListener("sessionend",At),this.render=function(t,e){if(void 0!==e&&!0!==e.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===x)return;!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),!0===xt.enabled&&!0===xt.isPresenting&&(!0===xt.cameraAutoUpdate&&xt.updateCamera(e),e=xt.getCamera()),!0===t.isScene&&t.onBeforeRender(y,t,e,_),d=it.get(t,v.length),d.init(),v.push(d),j.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),B.setFromProjectionMatrix(j),z=this.localClippingEnabled,F=ot.init(this.clippingPlanes,z,e),h=rt.get(t,p.length),h.init(),p.push(h),Ct(t,e,0,y.sortObjects),h.finish(),!0===y.sortObjects&&h.sort(R,O),!0===F&&ot.beginShadows();const n=d.state.shadowsArray;ut.render(n,t,e),d.setupLights(),d.setupLightsView(e),!0===F&&ot.endShadows(),!0===this.info.autoReset&&this.info.reset(),st.render(h,t);const l=h.opaque,r=h.transmissive,i=h.transparent;l.length>0&&Ot(l,t,e),r.length>0&&function(t,e,n,l){if(null===H){const t=!0===o&&!0===q.isWebGL2;H=new(t?il:ll)(1024,1024,{generateMipmaps:!0,type:null!==pt.convert(Rt)?Rt:St,minFilter:_t,magFilter:ft,wrapS:dt,wrapT:dt})}const r=y.getRenderTarget();y.setRenderTarget(H),y.clear();const i=y.toneMapping;y.toneMapping=K,Ot(t,n,l),y.toneMapping=i,J.updateMultisampleRenderTarget(H),J.updateRenderTargetMipmap(H),y.setRenderTarget(r),Ot(e,n,l)}(l,r,t,e),i.length>0&&Ot(i,t,e),null!==_&&(J.updateMultisampleRenderTarget(_),J.updateRenderTargetMipmap(_)),!0===t.isScene&&t.onAfterRender(y,t,e),X.buffers.depth.setTest(!0),X.buffers.depth.setMask(!0),X.buffers.color.setMask(!0),X.setPolygonOffset(!1),mt.resetDefaultState(),M=-1,S=null,v.pop(),d=v.length>0?v[v.length-1]:null,p.pop(),h=p.length>0?p[p.length-1]:null},this.getActiveCubeFace=function(){return b},this.getActiveMipmapLevel=function(){return w},this.getRenderTarget=function(){return _},this.setRenderTarget=function(t,e=0,n=0){_=t,b=e,w=n,t&&void 0===$.get(t).__webglFramebuffer&&J.setupRenderTarget(t);let l=null,r=!1,i=!1;if(t){const n=t.texture;(n.isDataTexture3D||n.isDataTexture2DArray)&&(i=!0);const o=$.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(l=o[e],r=!0):l=t.isWebGLMultisampleRenderTarget?$.get(t).__webglMultisampledFramebuffer:o,E.copy(t.viewport),T.copy(t.scissor),A=t.scissorTest}else E.copy(I).multiplyScalar(P).floor(),T.copy(D).multiplyScalar(P).floor(),A=k;if(X.bindFramebuffer(36160,l)&&q.drawBuffers){let e=!1;if(t)if(t.isWebGLMultipleRenderTargets){const n=t.texture;if(N.length!==n.length||36064!==N[0]){for(let t=0,e=n.length;t<e;t++)N[t]=36064+t;N.length=n.length,e=!0}}else 1===N.length&&36064===N[0]||(N[0]=36064,N.length=1,e=!0);else 1===N.length&&1029===N[0]||(N[0]=1029,N.length=1,e=!0);e&&(q.isWebGL2?gt.drawBuffers(N):W.get("WEBGL_draw_buffers").drawBuffersWEBGL(N))}if(X.viewport(E),X.scissor(T),X.setScissorTest(A),r){const l=$.get(t.texture);gt.framebufferTexture2D(36160,36064,34069+e,l.__webglTexture,n)}else if(i){const l=$.get(t.texture),r=e||0;gt.framebufferTextureLayer(36160,36064,l.__webglTexture,n||0,r)}},this.readRenderTargetPixels=function(t,e,n,l,r,i,o){if(!t||!t.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let u=$.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==o&&(u=u[o]),u){X.bindFramebuffer(36160,u);try{const o=t.texture,u=o.format,s=o.type;if(u!==Ft&&pt.convert(u)!==gt.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const a=s===Rt&&(W.has("EXT_color_buffer_half_float")||q.isWebGL2&&W.has("EXT_color_buffer_float"));if(!(s===St||pt.convert(s)===gt.getParameter(35738)||s===Pt&&(q.isWebGL2||W.has("OES_texture_float")||W.has("WEBGL_color_buffer_float"))||a))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===gt.checkFramebufferStatus(36160)?e>=0&&e<=t.width-l&&n>=0&&n<=t.height-r&&gt.readPixels(e,n,l,r,pt.convert(u),pt.convert(s),i):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{const t=null!==_?$.get(_).__webglFramebuffer:null;X.bindFramebuffer(36160,t)}}},this.copyFramebufferToTexture=function(t,e,n=0){const l=Math.pow(2,-n),r=Math.floor(e.image.width*l),i=Math.floor(e.image.height*l);let o=pt.convert(e.format);q.isWebGL2&&(6407===o&&(o=32849),6408===o&&(o=32856)),J.setTexture2D(e,0),gt.copyTexImage2D(3553,n,o,t.x,t.y,r,i,0),X.unbindTexture()},this.copyTextureToTexture=function(t,e,n,l=0){const r=e.image.width,i=e.image.height,o=pt.convert(n.format),u=pt.convert(n.type);J.setTexture2D(n,0),gt.pixelStorei(37440,n.flipY),gt.pixelStorei(37441,n.premultiplyAlpha),gt.pixelStorei(3317,n.unpackAlignment),e.isDataTexture?gt.texSubImage2D(3553,l,t.x,t.y,r,i,o,u,e.image.data):e.isCompressedTexture?gt.compressedTexSubImage2D(3553,l,t.x,t.y,e.mipmaps[0].width,e.mipmaps[0].height,o,e.mipmaps[0].data):gt.texSubImage2D(3553,l,t.x,t.y,o,u,e.image),0===l&&n.generateMipmaps&&gt.generateMipmap(3553),X.unbindTexture()},this.copyTextureToTexture3D=function(t,e,n,l,r=0){if(y.isWebGL1Renderer)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");const i=t.max.x-t.min.x+1,o=t.max.y-t.min.y+1,u=t.max.z-t.min.z+1,s=pt.convert(l.format),a=pt.convert(l.type);let c;if(l.isDataTexture3D)J.setTexture3D(l,0),c=32879;else{if(!l.isDataTexture2DArray)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");J.setTexture2DArray(l,0),c=35866}gt.pixelStorei(37440,l.flipY),gt.pixelStorei(37441,l.premultiplyAlpha),gt.pixelStorei(3317,l.unpackAlignment);const h=gt.getParameter(3314),d=gt.getParameter(32878),p=gt.getParameter(3316),f=gt.getParameter(3315),m=gt.getParameter(32877),g=n.isCompressedTexture?n.mipmaps[0]:n.image;gt.pixelStorei(3314,g.width),gt.pixelStorei(32878,g.height),gt.pixelStorei(3316,t.min.x),gt.pixelStorei(3315,t.min.y),gt.pixelStorei(32877,t.min.z),n.isDataTexture||n.isDataTexture3D?gt.texSubImage3D(c,r,e.x,e.y,e.z,i,o,u,s,a,g.data):n.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),gt.compressedTexSubImage3D(c,r,e.x,e.y,e.z,i,o,u,s,g.data)):gt.texSubImage3D(c,r,e.x,e.y,e.z,i,o,u,s,a,g),gt.pixelStorei(3314,h),gt.pixelStorei(32878,d),gt.pixelStorei(3316,p),gt.pixelStorei(3315,f),gt.pixelStorei(32877,m),0===r&&l.generateMipmaps&&gt.generateMipmap(c),X.unbindTexture()},this.initTexture=function(t){J.setTexture2D(t,0),X.unbindTexture()},this.resetState=function(){b=0,w=0,_=null,X.reset(),mt.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}class ts extends Qu{}ts.prototype.isWebGL1Renderer=!0;class es{constructor(t,e=25e-5){this.name="",this.color=new Cr(t),this.density=e}clone(){return new es(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}es.prototype.isFogExp2=!0;class ns{constructor(t,e=1,n=1e3){this.name="",this.color=new Cr(t),this.near=e,this.far=n}clone(){return new ns(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}ns.prototype.isFog=!0;class ls extends ar{constructor(){super(),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return null!==this.fog&&(e.object.fog=this.fog.toJSON()),e}}ls.prototype.isScene=!0;class rs{constructor(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=En,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=jn()}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,n){t*=this.stride,n*=e.stride;for(let l=0,r=this.stride;l<r;l++)this.array[t+l]=e.array[n+l];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=jn()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(e,this.stride);return n.setUsage(this.usage),n}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=jn()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}rs.prototype.isInterleavedBuffer=!0;const is=new ul;class os{constructor(t,e,n,l=!1){this.name="",this.data=t,this.itemSize=e,this.offset=n,this.normalized=!0===l}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,n=this.data.count;e<n;e++)is.x=this.getX(e),is.y=this.getY(e),is.z=this.getZ(e),is.applyMatrix4(t),this.setXYZ(e,is.x,is.y,is.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)is.x=this.getX(e),is.y=this.getY(e),is.z=this.getZ(e),is.applyNormalMatrix(t),this.setXYZ(e,is.x,is.y,is.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)is.x=this.getX(e),is.y=this.getY(e),is.z=this.getZ(e),is.transformDirection(t),this.setXYZ(e,is.x,is.y,is.z);return this}setX(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){return this.data.array[t*this.data.stride+this.offset]}getY(t){return this.data.array[t*this.data.stride+this.offset+1]}getZ(t){return this.data.array[t*this.data.stride+this.offset+2]}getW(t){return this.data.array[t*this.data.stride+this.offset+3]}setXY(t,e,n){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this}setXYZ(t,e,n,l){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=l,this}setXYZW(t,e,n,l,r){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=l,this.data.array[t+3]=r,this}clone(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[n+e])}return new Ir(new this.array.constructor(t),this.itemSize,this.normalized)}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new os(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[n+e])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}os.prototype.isInterleavedBufferAttribute=!0;class us extends _r{constructor(t){super(),this.type="SpriteMaterial",this.color=new Cr(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this}}let ss;us.prototype.isSpriteMaterial=!0;const as=new ul,cs=new ul,hs=new ul,ds=new $n,ps=new $n,fs=new Fl,ms=new ul,gs=new ul,vs=new ul,ys=new $n,xs=new $n,bs=new $n;class ws extends ar{constructor(t){if(super(),this.type="Sprite",void 0===ss){ss=new ti;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),e=new rs(t,5);ss.setIndex([0,1,2,0,2,3]),ss.setAttribute("position",new os(e,3,0,!1)),ss.setAttribute("uv",new os(e,2,3,!1))}this.geometry=ss,this.material=void 0!==t?t:new us,this.center=new $n(.5,.5)}raycast(t,e){null===t.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),cs.setFromMatrixScale(this.matrixWorld),fs.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),hs.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&cs.multiplyScalar(-hs.z);const n=this.material.rotation;let l,r;0!==n&&(r=Math.cos(n),l=Math.sin(n));const i=this.center;_s(ms.set(-.5,-.5,0),hs,i,cs,l,r),_s(gs.set(.5,-.5,0),hs,i,cs,l,r),_s(vs.set(.5,.5,0),hs,i,cs,l,r),ys.set(0,0),xs.set(1,0),bs.set(1,1);let o=t.ray.intersectTriangle(ms,gs,vs,!1,as);if(null===o&&(_s(gs.set(-.5,.5,0),hs,i,cs,l,r),xs.set(0,1),o=t.ray.intersectTriangle(ms,vs,gs,!1,as),null===o))return;const u=t.ray.origin.distanceTo(as);u<t.near||u>t.far||e.push({distance:u,point:as.clone(),uv:br.getUV(as,ms,gs,vs,ys,xs,bs,new $n),face:null,object:this})}copy(t){return super.copy(t),void 0!==t.center&&this.center.copy(t.center),this.material=t.material,this}}function _s(t,e,n,l,r,i){ds.subVectors(t,n).addScalar(.5).multiply(l),void 0!==r?(ps.x=i*ds.x-r*ds.y,ps.y=r*ds.x+i*ds.y):ps.copy(ds),t.copy(e),t.x+=ps.x,t.y+=ps.y,t.applyMatrix4(fs)}ws.prototype.isSprite=!0;const Ms=new ul,Ss=new ul;class Es extends ar{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(t){super.copy(t,!1);const e=t.levels;for(let t=0,n=e.length;t<n;t++){const n=e[t];this.addLevel(n.object.clone(),n.distance)}return this.autoUpdate=t.autoUpdate,this}addLevel(t,e=0){e=Math.abs(e);const n=this.levels;let l;for(l=0;l<n.length&&!(e<n[l].distance);l++);return n.splice(l,0,{distance:e,object:t}),this.add(t),this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(t){const e=this.levels;if(e.length>0){let n,l;for(n=1,l=e.length;n<l&&!(t<e[n].distance);n++);return e[n-1].object}return null}raycast(t,e){if(this.levels.length>0){Ms.setFromMatrixPosition(this.matrixWorld);const n=t.ray.origin.distanceTo(Ms);this.getObjectForDistance(n).raycast(t,e)}}update(t){const e=this.levels;if(e.length>1){Ms.setFromMatrixPosition(t.matrixWorld),Ss.setFromMatrixPosition(this.matrixWorld);const n=Ms.distanceTo(Ss)/t.zoom;let l,r;for(e[0].object.visible=!0,l=1,r=e.length;l<r&&n>=e[l].distance;l++)e[l-1].object.visible=!1,e[l].object.visible=!0;for(this._currentLevel=l-1;l<r;l++)e[l].object.visible=!1}}toJSON(t){const e=super.toJSON(t);!1===this.autoUpdate&&(e.object.autoUpdate=!1),e.object.levels=[];const n=this.levels;for(let t=0,l=n.length;t<l;t++){const l=n[t];e.object.levels.push({object:l.object.uuid,distance:l.distance})}return e}}const Ts=new ul,As=new nl,Ls=new nl,Cs=new ul,Ps=new Fl;class Rs extends yi{constructor(t,e){super(t,e),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Fl,this.bindMatrixInverse=new Fl}copy(t){return super.copy(t),this.bindMode=t.bindMode,this.bindMatrix.copy(t.bindMatrix),this.bindMatrixInverse.copy(t.bindMatrixInverse),this.skeleton=t.skeleton,this}bind(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.copy(e).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const t=new nl,e=this.geometry.attributes.skinWeight;for(let n=0,l=e.count;n<l;n++){t.x=e.getX(n),t.y=e.getY(n),t.z=e.getZ(n),t.w=e.getW(n);const l=1/t.manhattanLength();l!==1/0?t.multiplyScalar(l):t.set(1,0,0,0),e.setXYZW(n,t.x,t.y,t.z,t.w)}}updateMatrixWorld(t){super.updateMatrixWorld(t),"attached"===this.bindMode?this.bindMatrixInverse.copy(this.matrixWorld).invert():"detached"===this.bindMode?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(t,e){const n=this.skeleton,l=this.geometry;As.fromBufferAttribute(l.attributes.skinIndex,t),Ls.fromBufferAttribute(l.attributes.skinWeight,t),Ts.fromBufferAttribute(l.attributes.position,t).applyMatrix4(this.bindMatrix),e.set(0,0,0);for(let t=0;t<4;t++){const l=Ls.getComponent(t);if(0!==l){const r=As.getComponent(t);Ps.multiplyMatrices(n.bones[r].matrixWorld,n.boneInverses[r]),e.addScaledVector(Cs.copy(Ts).applyMatrix4(Ps),l)}}return e.applyMatrix4(this.bindMatrixInverse)}}Rs.prototype.isSkinnedMesh=!0;class Os extends ar{constructor(){super(),this.type="Bone"}}Os.prototype.isBone=!0;class Is extends tl{constructor(t=null,e=1,n=1,l,r,i,o,u,s=ft,a=ft,c,h){super(null,i,o,u,s,a,l,r,c,h),this.image={data:t,width:e,height:n},this.magFilter=s,this.minFilter=a,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}Is.prototype.isDataTexture=!0;const Ds=new Fl,ks=new Fl;class Ns{constructor(t=[],e=[]){this.uuid=jn(),this.bones=t.slice(0),this.boneInverses=e,this.boneMatrices=null,this.boneTexture=null,this.boneTextureSize=0,this.frame=-1,this.init()}init(){const t=this.bones,e=this.boneInverses;if(this.boneMatrices=new Float32Array(16*t.length),0===e.length)this.calculateInverses();else if(t.length!==e.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let t=0,e=this.bones.length;t<e;t++)this.boneInverses.push(new Fl)}}calculateInverses(){this.boneInverses.length=0;for(let t=0,e=this.bones.length;t<e;t++){const e=new Fl;this.bones[t]&&e.copy(this.bones[t].matrixWorld).invert(),this.boneInverses.push(e)}}pose(){for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&e.matrixWorld.copy(this.boneInverses[t]).invert()}for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&(e.parent&&e.parent.isBone?(e.matrix.copy(e.parent.matrixWorld).invert(),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))}}update(){const t=this.bones,e=this.boneInverses,n=this.boneMatrices,l=this.boneTexture;for(let l=0,r=t.length;l<r;l++){const r=t[l]?t[l].matrixWorld:ks;Ds.multiplyMatrices(r,e[l]),Ds.toArray(n,16*l)}null!==l&&(l.needsUpdate=!0)}clone(){return new Ns(this.bones,this.boneInverses)}computeBoneTexture(){let t=Math.sqrt(4*this.bones.length);t=qn(t),t=Math.max(t,4);const e=new Float32Array(t*t*4);e.set(this.boneMatrices);const n=new Is(e,t,t,Ft,Pt);return this.boneMatrices=e,this.boneTexture=n,this.boneTextureSize=t,this}getBoneByName(t){for(let e=0,n=this.bones.length;e<n;e++){const n=this.bones[e];if(n.name===t)return n}}dispose(){null!==this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(t,e){this.uuid=t.uuid;for(let n=0,l=t.bones.length;n<l;n++){const l=t.bones[n];let r=e[l];void 0===r&&(console.warn("THREE.Skeleton: No bone found with UUID:",l),r=new Os),this.bones.push(r),this.boneInverses.push((new Fl).fromArray(t.boneInverses[n]))}return this.init(),this}toJSON(){const t={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};t.uuid=this.uuid;const e=this.bones,n=this.boneInverses;for(let l=0,r=e.length;l<r;l++){const r=e[l];t.bones.push(r.uuid);const i=n[l];t.boneInverses.push(i.toArray())}return t}}const Bs=new Fl,Fs=new Fl,zs=[],Hs=new yi;class js extends yi{constructor(t,e,n){super(t,e),this.instanceMatrix=new Ir(new Float32Array(16*n),16),this.instanceColor=null,this.count=n,this.frustumCulled=!1}copy(t){return super.copy(t),this.instanceMatrix.copy(t.instanceMatrix),null!==t.instanceColor&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,this}getColorAt(t,e){e.fromArray(this.instanceColor.array,3*t)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,16*t)}raycast(t,e){const n=this.matrixWorld,l=this.count;if(Hs.geometry=this.geometry,Hs.material=this.material,void 0!==Hs.material)for(let r=0;r<l;r++){this.getMatrixAt(r,Bs),Fs.multiplyMatrices(n,Bs),Hs.matrixWorld=Fs,Hs.raycast(t,zs);for(let t=0,n=zs.length;t<n;t++){const n=zs[t];n.instanceId=r,n.object=this,e.push(n)}zs.length=0}}setColorAt(t,e){null===this.instanceColor&&(this.instanceColor=new Ir(new Float32Array(3*this.count),3)),e.toArray(this.instanceColor.array,3*t)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,16*t)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}js.prototype.isInstancedMesh=!0;class Us extends _r{constructor(t){super(),this.type="LineBasicMaterial",this.color=new Cr(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.morphTargets=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this.morphTargets=t.morphTargets,this}}Us.prototype.isLineBasicMaterial=!0;const Gs=new ul,Vs=new ul,Ws=new Fl,qs=new Bl,Xs=new Cl;class Ys extends ar{constructor(t=new ti,e=new Us){super(),this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,n=[0];for(let t=1,l=e.count;t<l;t++)Gs.fromBufferAttribute(e,t-1),Vs.fromBufferAttribute(e,t),n[t]=n[t-1],n[t]+=Gs.distanceTo(Vs);t.setAttribute("lineDistance",new Ur(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else t.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(t,e){const n=this.geometry,l=this.matrixWorld,r=t.params.Line.threshold,i=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),Xs.copy(n.boundingSphere),Xs.applyMatrix4(l),Xs.radius+=r,!1===t.ray.intersectsSphere(Xs))return;Ws.copy(l).invert(),qs.copy(t.ray).applyMatrix4(Ws);const o=r/((this.scale.x+this.scale.y+this.scale.z)/3),u=o*o,s=new ul,a=new ul,c=new ul,h=new ul,d=this.isLineSegments?2:1;if(n.isBufferGeometry){const l=n.index,r=n.attributes.position;if(null!==l)for(let n=Math.max(0,i.start),o=Math.min(l.count,i.start+i.count)-1;n<o;n+=d){const i=l.getX(n),o=l.getX(n+1);if(s.fromBufferAttribute(r,i),a.fromBufferAttribute(r,o),qs.distanceSqToSegment(s,a,h,c)>u)continue;h.applyMatrix4(this.matrixWorld);const d=t.ray.origin.distanceTo(h);d<t.near||d>t.far||e.push({distance:d,point:c.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}else for(let n=Math.max(0,i.start),l=Math.min(r.count,i.start+i.count)-1;n<l;n+=d){if(s.fromBufferAttribute(r,n),a.fromBufferAttribute(r,n+1),qs.distanceSqToSegment(s,a,h,c)>u)continue;h.applyMatrix4(this.matrixWorld);const l=t.ray.origin.distanceTo(h);l<t.near||l>t.far||e.push({distance:l,point:c.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}}else n.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}Ys.prototype.isLine=!0;const $s=new ul,Js=new ul;class Zs extends Ys{constructor(t,e){super(t,e),this.type="LineSegments"}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,n=[];for(let t=0,l=e.count;t<l;t+=2)$s.fromBufferAttribute(e,t),Js.fromBufferAttribute(e,t+1),n[t]=0===t?0:n[t-1],n[t+1]=n[t]+$s.distanceTo(Js);t.setAttribute("lineDistance",new Ur(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else t.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}Zs.prototype.isLineSegments=!0;class Ks extends Ys{constructor(t,e){super(t,e),this.type="LineLoop"}}Ks.prototype.isLineLoop=!0;class Qs extends _r{constructor(t){super(),this.type="PointsMaterial",this.color=new Cr(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.morphTargets=t.morphTargets,this}}Qs.prototype.isPointsMaterial=!0;const ta=new Fl,ea=new Bl,na=new Cl,la=new ul;class ra extends ar{constructor(t=new ti,e=new Qs){super(),this.type="Points",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}raycast(t,e){const n=this.geometry,l=this.matrixWorld,r=t.params.Points.threshold,i=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),na.copy(n.boundingSphere),na.applyMatrix4(l),na.radius+=r,!1===t.ray.intersectsSphere(na))return;ta.copy(l).invert(),ea.copy(t.ray).applyMatrix4(ta);const o=r/((this.scale.x+this.scale.y+this.scale.z)/3),u=o*o;if(n.isBufferGeometry){const r=n.index,o=n.attributes.position;if(null!==r)for(let n=Math.max(0,i.start),s=Math.min(r.count,i.start+i.count);n<s;n++){const i=r.getX(n);la.fromBufferAttribute(o,i),ia(la,i,u,l,t,e,this)}else for(let n=Math.max(0,i.start),r=Math.min(o.count,i.start+i.count);n<r;n++)la.fromBufferAttribute(o,n),ia(la,n,u,l,t,e,this)}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}function ia(t,e,n,l,r,i,o){const u=ea.distanceSqToPoint(t);if(u<n){const n=new ul;ea.closestPointToPoint(t,n),n.applyMatrix4(l);const s=r.ray.origin.distanceTo(n);if(s<r.near||s>r.far)return;i.push({distance:s,distanceToRay:Math.sqrt(u),point:n,index:e,face:null,object:o})}}ra.prototype.isPoints=!0;class oa extends tl{constructor(t,e,n,l,r,i,o,u,s){super(t,e,n,l,r,i,o,u,s),this.format=void 0!==o?o:Bt,this.minFilter=void 0!==i?i:xt,this.magFilter=void 0!==r?r:xt,this.generateMipmaps=!1;const a=this;"requestVideoFrameCallback"in t&&t.requestVideoFrameCallback((function e(){a.needsUpdate=!0,t.requestVideoFrameCallback(e)}))}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;!1=="requestVideoFrameCallback"in t&&t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}oa.prototype.isVideoTexture=!0;class ua extends tl{constructor(t,e,n,l,r,i,o,u,s,a,c,h){super(null,i,o,u,s,a,l,r,c,h),this.image={width:e,height:n},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}}ua.prototype.isCompressedTexture=!0;class sa extends tl{constructor(t,e,n,l,r,i,o,u,s){super(t,e,n,l,r,i,o,u,s),this.needsUpdate=!0}}sa.prototype.isCanvasTexture=!0;class aa extends tl{constructor(t,e,n,l,r,i,o,u,s,a){if((a=void 0!==a?a:Ut)!==Ut&&a!==Gt)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&a===Ut&&(n=At),void 0===n&&a===Gt&&(n=kt),super(null,l,r,i,o,u,a,n,s),this.image={width:t,height:e},this.magFilter=void 0!==o?o:ft,this.minFilter=void 0!==u?u:ft,this.flipY=!1,this.generateMipmaps=!1}}aa.prototype.isDepthTexture=!0;class ca extends ti{constructor(t=1,e=8,n=0,l=2*Math.PI){super(),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:l},e=Math.max(3,e);const r=[],i=[],o=[],u=[],s=new ul,a=new $n;i.push(0,0,0),o.push(0,0,1),u.push(.5,.5);for(let r=0,c=3;r<=e;r++,c+=3){const h=n+r/e*l;s.x=t*Math.cos(h),s.y=t*Math.sin(h),i.push(s.x,s.y,s.z),o.push(0,0,1),a.x=(i[c]/t+1)/2,a.y=(i[c+1]/t+1)/2,u.push(a.x,a.y)}for(let t=1;t<=e;t++)r.push(t,t+1,0);this.setIndex(r),this.setAttribute("position",new Ur(i,3)),this.setAttribute("normal",new Ur(o,3)),this.setAttribute("uv",new Ur(u,2))}static fromJSON(t){return new ca(t.radius,t.segments,t.thetaStart,t.thetaLength)}}class ha extends ti{constructor(t=1,e=1,n=1,l=8,r=1,i=!1,o=0,u=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:l,heightSegments:r,openEnded:i,thetaStart:o,thetaLength:u};const s=this;l=Math.floor(l),r=Math.floor(r);const a=[],c=[],h=[],d=[];let p=0;const f=[],m=n/2;let g=0;function v(n){const r=p,i=new $n,f=new ul;let v=0;const y=!0===n?t:e,x=!0===n?1:-1;for(let t=1;t<=l;t++)c.push(0,m*x,0),h.push(0,x,0),d.push(.5,.5),p++;const b=p;for(let t=0;t<=l;t++){const e=t/l*u+o,n=Math.cos(e),r=Math.sin(e);f.x=y*r,f.y=m*x,f.z=y*n,c.push(f.x,f.y,f.z),h.push(0,x,0),i.x=.5*n+.5,i.y=.5*r*x+.5,d.push(i.x,i.y),p++}for(let t=0;t<l;t++){const e=r+t,l=b+t;!0===n?a.push(l,l+1,e):a.push(l+1,l,e),v+=3}s.addGroup(g,v,!0===n?1:2),g+=v}!function(){const i=new ul,v=new ul;let y=0;const x=(e-t)/n;for(let s=0;s<=r;s++){const a=[],g=s/r,y=g*(e-t)+t;for(let t=0;t<=l;t++){const e=t/l,r=e*u+o,s=Math.sin(r),f=Math.cos(r);v.x=y*s,v.y=-g*n+m,v.z=y*f,c.push(v.x,v.y,v.z),i.set(s,x,f).normalize(),h.push(i.x,i.y,i.z),d.push(e,1-g),a.push(p++)}f.push(a)}for(let t=0;t<l;t++)for(let e=0;e<r;e++){const n=f[e][t],l=f[e+1][t],r=f[e+1][t+1],i=f[e][t+1];a.push(n,l,i),a.push(l,r,i),y+=6}s.addGroup(g,y,0),g+=y}(),!1===i&&(t>0&&v(!0),e>0&&v(!1)),this.setIndex(a),this.setAttribute("position",new Ur(c,3)),this.setAttribute("normal",new Ur(h,3)),this.setAttribute("uv",new Ur(d,2))}static fromJSON(t){return new ha(t.radiusTop,t.radiusBottom,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class da extends ha{constructor(t=1,e=1,n=8,l=1,r=!1,i=0,o=2*Math.PI){super(0,t,e,n,l,r,i,o),this.type="ConeGeometry",this.parameters={radius:t,height:e,radialSegments:n,heightSegments:l,openEnded:r,thetaStart:i,thetaLength:o}}static fromJSON(t){return new da(t.radius,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class pa extends ti{constructor(t,e,n=1,l=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:n,detail:l};const r=[],i=[];function o(t,e,n,l){const r=l+1,i=[];for(let l=0;l<=r;l++){i[l]=[];const o=t.clone().lerp(n,l/r),u=e.clone().lerp(n,l/r),s=r-l;for(let t=0;t<=s;t++)i[l][t]=0===t&&l===r?o:o.clone().lerp(u,t/s)}for(let t=0;t<r;t++)for(let e=0;e<2*(r-t)-1;e++){const n=Math.floor(e/2);e%2==0?(u(i[t][n+1]),u(i[t+1][n]),u(i[t][n])):(u(i[t][n+1]),u(i[t+1][n+1]),u(i[t+1][n]))}}function u(t){r.push(t.x,t.y,t.z)}function s(e,n){const l=3*e;n.x=t[l+0],n.y=t[l+1],n.z=t[l+2]}function a(t,e,n,l){l<0&&1===t.x&&(i[e]=t.x-1),0===n.x&&0===n.z&&(i[e]=l/2/Math.PI+.5)}function c(t){return Math.atan2(t.z,-t.x)}!function(t){const n=new ul,l=new ul,r=new ul;for(let i=0;i<e.length;i+=3)s(e[i+0],n),s(e[i+1],l),s(e[i+2],r),o(n,l,r,t)}(l),function(t){const e=new ul;for(let n=0;n<r.length;n+=3)e.x=r[n+0],e.y=r[n+1],e.z=r[n+2],e.normalize().multiplyScalar(t),r[n+0]=e.x,r[n+1]=e.y,r[n+2]=e.z}(n),function(){const t=new ul;for(let n=0;n<r.length;n+=3){t.x=r[n+0],t.y=r[n+1],t.z=r[n+2];const l=c(t)/2/Math.PI+.5,o=(e=t,Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))/Math.PI+.5);i.push(l,1-o)}var e;(function(){const t=new ul,e=new ul,n=new ul,l=new ul,o=new $n,u=new $n,s=new $n;for(let h=0,d=0;h<r.length;h+=9,d+=6){t.set(r[h+0],r[h+1],r[h+2]),e.set(r[h+3],r[h+4],r[h+5]),n.set(r[h+6],r[h+7],r[h+8]),o.set(i[d+0],i[d+1]),u.set(i[d+2],i[d+3]),s.set(i[d+4],i[d+5]),l.copy(t).add(e).add(n).divideScalar(3);const p=c(l);a(o,d+0,t,p),a(u,d+2,e,p),a(s,d+4,n,p)}})(),function(){for(let t=0;t<i.length;t+=6){const e=i[t+0],n=i[t+2],l=i[t+4],r=Math.max(e,n,l),o=Math.min(e,n,l);r>.9&&o<.1&&(e<.2&&(i[t+0]+=1),n<.2&&(i[t+2]+=1),l<.2&&(i[t+4]+=1))}}()}(),this.setAttribute("position",new Ur(r,3)),this.setAttribute("normal",new Ur(r.slice(),3)),this.setAttribute("uv",new Ur(i,2)),0===l?this.computeVertexNormals():this.normalizeNormals()}static fromJSON(t){return new pa(t.vertices,t.indices,t.radius,t.details)}}class fa extends pa{constructor(t=1,e=0){const n=(1+Math.sqrt(5))/2,l=1/n;super([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-l,-n,0,-l,n,0,l,-n,0,l,n,-l,-n,0,-l,n,0,l,-n,0,l,n,0,-n,0,-l,n,0,-l,-n,0,l,n,0,l],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type="DodecahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new fa(t.radius,t.detail)}}const ma=new ul,ga=new ul,va=new ul,ya=new br;class xa extends ti{constructor(t,e){if(super(),this.type="EdgesGeometry",this.parameters={thresholdAngle:e},e=void 0!==e?e:1,!0===t.isGeometry)return void console.error("THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");const n=Math.pow(10,4),l=Math.cos(zn*e),r=t.getIndex(),i=t.getAttribute("position"),o=r?r.count:i.count,u=[0,0,0],s=["a","b","c"],a=new Array(3),c={},h=[];for(let t=0;t<o;t+=3){r?(u[0]=r.getX(t),u[1]=r.getX(t+1),u[2]=r.getX(t+2)):(u[0]=t,u[1]=t+1,u[2]=t+2);const{a:e,b:o,c:d}=ya;if(e.fromBufferAttribute(i,u[0]),o.fromBufferAttribute(i,u[1]),d.fromBufferAttribute(i,u[2]),ya.getNormal(va),a[0]=`${Math.round(e.x*n)},${Math.round(e.y*n)},${Math.round(e.z*n)}`,a[1]=`${Math.round(o.x*n)},${Math.round(o.y*n)},${Math.round(o.z*n)}`,a[2]=`${Math.round(d.x*n)},${Math.round(d.y*n)},${Math.round(d.z*n)}`,a[0]!==a[1]&&a[1]!==a[2]&&a[2]!==a[0])for(let t=0;t<3;t++){const e=(t+1)%3,n=a[t],r=a[e],i=ya[s[t]],o=ya[s[e]],d=`${n}_${r}`,p=`${r}_${n}`;p in c&&c[p]?(va.dot(c[p].normal)<=l&&(h.push(i.x,i.y,i.z),h.push(o.x,o.y,o.z)),c[p]=null):d in c||(c[d]={index0:u[t],index1:u[e],normal:va.clone()})}}for(const t in c)if(c[t]){const{index0:e,index1:n}=c[t];ma.fromBufferAttribute(i,e),ga.fromBufferAttribute(i,n),h.push(ma.x,ma.y,ma.z),h.push(ga.x,ga.y,ga.z)}this.setAttribute("position",new Ur(h,3))}}class ba{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(t,e){const n=this.getUtoTmapping(t);return this.getPoint(n,e)}getPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return e}getSpacedPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPointAt(n/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let n,l=this.getPoint(0),r=0;e.push(0);for(let i=1;i<=t;i++)n=this.getPoint(i/t),r+=n.distanceTo(l),e.push(r),l=n;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(t,e){const n=this.getLengths();let l=0;const r=n.length;let i;i=e||t*n[r-1];let o,u=0,s=r-1;for(;u<=s;)if(l=Math.floor(u+(s-u)/2),o=n[l]-i,o<0)u=l+1;else{if(!(o>0)){s=l;break}s=l-1}if(l=s,n[l]===i)return l/(r-1);const a=n[l];return(l+(i-a)/(n[l+1]-a))/(r-1)}getTangent(t,e){const n=1e-4;let l=t-n,r=t+n;l<0&&(l=0),r>1&&(r=1);const i=this.getPoint(l),o=this.getPoint(r),u=e||(i.isVector2?new $n:new ul);return u.copy(o).sub(i).normalize(),u}getTangentAt(t,e){const n=this.getUtoTmapping(t);return this.getTangent(n,e)}computeFrenetFrames(t,e){const n=new ul,l=[],r=[],i=[],o=new ul,u=new Fl;for(let e=0;e<=t;e++){const n=e/t;l[e]=this.getTangentAt(n,new ul),l[e].normalize()}r[0]=new ul,i[0]=new ul;let s=Number.MAX_VALUE;const a=Math.abs(l[0].x),c=Math.abs(l[0].y),h=Math.abs(l[0].z);a<=s&&(s=a,n.set(1,0,0)),c<=s&&(s=c,n.set(0,1,0)),h<=s&&n.set(0,0,1),o.crossVectors(l[0],n).normalize(),r[0].crossVectors(l[0],o),i[0].crossVectors(l[0],r[0]);for(let e=1;e<=t;e++){if(r[e]=r[e-1].clone(),i[e]=i[e-1].clone(),o.crossVectors(l[e-1],l[e]),o.length()>Number.EPSILON){o.normalize();const t=Math.acos(Un(l[e-1].dot(l[e]),-1,1));r[e].applyMatrix4(u.makeRotationAxis(o,t))}i[e].crossVectors(l[e],r[e])}if(!0===e){let e=Math.acos(Un(r[0].dot(r[t]),-1,1));e/=t,l[0].dot(o.crossVectors(r[0],r[t]))>0&&(e=-e);for(let n=1;n<=t;n++)r[n].applyMatrix4(u.makeRotationAxis(l[n],e*n)),i[n].crossVectors(l[n],r[n])}return{tangents:l,normals:r,binormals:i}}clone(){return(new this.constructor).copy(this)}copy(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}toJSON(){const t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}class wa extends ba{constructor(t=0,e=0,n=1,l=1,r=0,i=2*Math.PI,o=!1,u=0){super(),this.type="EllipseCurve",this.aX=t,this.aY=e,this.xRadius=n,this.yRadius=l,this.aStartAngle=r,this.aEndAngle=i,this.aClockwise=o,this.aRotation=u}getPoint(t,e){const n=e||new $n,l=2*Math.PI;let r=this.aEndAngle-this.aStartAngle;const i=Math.abs(r)<Number.EPSILON;for(;r<0;)r+=l;for(;r>l;)r-=l;r<Number.EPSILON&&(r=i?0:l),!0!==this.aClockwise||i||(r===l?r=-l:r-=l);const o=this.aStartAngle+t*r;let u=this.aX+this.xRadius*Math.cos(o),s=this.aY+this.yRadius*Math.sin(o);if(0!==this.aRotation){const t=Math.cos(this.aRotation),e=Math.sin(this.aRotation),n=u-this.aX,l=s-this.aY;u=n*t-l*e+this.aX,s=n*e+l*t+this.aY}return n.set(u,s)}copy(t){return super.copy(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}toJSON(){const t=super.toJSON();return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}wa.prototype.isEllipseCurve=!0;class _a extends wa{constructor(t,e,n,l,r,i){super(t,e,n,n,l,r,i),this.type="ArcCurve"}}function Ma(){let t=0,e=0,n=0,l=0;function r(r,i,o,u){t=r,e=o,n=-3*r+3*i-2*o-u,l=2*r-2*i+o+u}return{initCatmullRom:function(t,e,n,l,i){r(e,n,i*(n-t),i*(l-e))},initNonuniformCatmullRom:function(t,e,n,l,i,o,u){let s=(e-t)/i-(n-t)/(i+o)+(n-e)/o,a=(n-e)/o-(l-e)/(o+u)+(l-n)/u;s*=o,a*=o,r(e,n,s,a)},calc:function(r){const i=r*r;return t+e*r+n*i+l*(i*r)}}}_a.prototype.isArcCurve=!0;const Sa=new ul,Ea=new Ma,Ta=new Ma,Aa=new Ma;class La extends ba{constructor(t=[],e=!1,n="centripetal",l=.5){super(),this.type="CatmullRomCurve3",this.points=t,this.closed=e,this.curveType=n,this.tension=l}getPoint(t,e=new ul){const n=e,l=this.points,r=l.length,i=(r-(this.closed?0:1))*t;let o,u,s=Math.floor(i),a=i-s;this.closed?s+=s>0?0:(Math.floor(Math.abs(s)/r)+1)*r:0===a&&s===r-1&&(s=r-2,a=1),this.closed||s>0?o=l[(s-1)%r]:(Sa.subVectors(l[0],l[1]).add(l[0]),o=Sa);const c=l[s%r],h=l[(s+1)%r];if(this.closed||s+2<r?u=l[(s+2)%r]:(Sa.subVectors(l[r-1],l[r-2]).add(l[r-1]),u=Sa),"centripetal"===this.curveType||"chordal"===this.curveType){const t="chordal"===this.curveType?.5:.25;let e=Math.pow(o.distanceToSquared(c),t),n=Math.pow(c.distanceToSquared(h),t),l=Math.pow(h.distanceToSquared(u),t);n<1e-4&&(n=1),e<1e-4&&(e=n),l<1e-4&&(l=n),Ea.initNonuniformCatmullRom(o.x,c.x,h.x,u.x,e,n,l),Ta.initNonuniformCatmullRom(o.y,c.y,h.y,u.y,e,n,l),Aa.initNonuniformCatmullRom(o.z,c.z,h.z,u.z,e,n,l)}else"catmullrom"===this.curveType&&(Ea.initCatmullRom(o.x,c.x,h.x,u.x,this.tension),Ta.initCatmullRom(o.y,c.y,h.y,u.y,this.tension),Aa.initCatmullRom(o.z,c.z,h.z,u.z,this.tension));return n.set(Ea.calc(a),Ta.calc(a),Aa.calc(a)),n}copy(t){super.copy(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push(n.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){const n=this.points[e];t.points.push(n.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new ul).fromArray(n))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}function Ca(t,e,n,l,r){const i=.5*(l-e),o=.5*(r-n),u=t*t;return(2*n-2*l+i+o)*(t*u)+(-3*n+3*l-2*i-o)*u+i*t+n}function Pa(t,e,n,l){return function(t,e){const n=1-t;return n*n*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,n)+function(t,e){return t*t*e}(t,l)}function Ra(t,e,n,l,r){return function(t,e){const n=1-t;return n*n*n*e}(t,e)+function(t,e){const n=1-t;return 3*n*n*t*e}(t,n)+function(t,e){return 3*(1-t)*t*t*e}(t,l)+function(t,e){return t*t*t*e}(t,r)}La.prototype.isCatmullRomCurve3=!0;class Oa extends ba{constructor(t=new $n,e=new $n,n=new $n,l=new $n){super(),this.type="CubicBezierCurve",this.v0=t,this.v1=e,this.v2=n,this.v3=l}getPoint(t,e=new $n){const n=e,l=this.v0,r=this.v1,i=this.v2,o=this.v3;return n.set(Ra(t,l.x,r.x,i.x,o.x),Ra(t,l.y,r.y,i.y,o.y)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}Oa.prototype.isCubicBezierCurve=!0;class Ia extends ba{constructor(t=new ul,e=new ul,n=new ul,l=new ul){super(),this.type="CubicBezierCurve3",this.v0=t,this.v1=e,this.v2=n,this.v3=l}getPoint(t,e=new ul){const n=e,l=this.v0,r=this.v1,i=this.v2,o=this.v3;return n.set(Ra(t,l.x,r.x,i.x,o.x),Ra(t,l.y,r.y,i.y,o.y),Ra(t,l.z,r.z,i.z,o.z)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}Ia.prototype.isCubicBezierCurve3=!0;class Da extends ba{constructor(t=new $n,e=new $n){super(),this.type="LineCurve",this.v1=t,this.v2=e}getPoint(t,e=new $n){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e){const n=e||new $n;return n.copy(this.v2).sub(this.v1).normalize(),n}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}Da.prototype.isLineCurve=!0;class ka extends ba{constructor(t=new ul,e=new ul){super(),this.type="LineCurve3",this.isLineCurve3=!0,this.v1=t,this.v2=e}getPoint(t,e=new ul){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(t,e){return this.getPoint(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class Na extends ba{constructor(t=new $n,e=new $n,n=new $n){super(),this.type="QuadraticBezierCurve",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new $n){const n=e,l=this.v0,r=this.v1,i=this.v2;return n.set(Pa(t,l.x,r.x,i.x),Pa(t,l.y,r.y,i.y)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}Na.prototype.isQuadraticBezierCurve=!0;class Ba extends ba{constructor(t=new ul,e=new ul,n=new ul){super(),this.type="QuadraticBezierCurve3",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new ul){const n=e,l=this.v0,r=this.v1,i=this.v2;return n.set(Pa(t,l.x,r.x,i.x),Pa(t,l.y,r.y,i.y),Pa(t,l.z,r.z,i.z)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}Ba.prototype.isQuadraticBezierCurve3=!0;class Fa extends ba{constructor(t=[]){super(),this.type="SplineCurve",this.points=t}getPoint(t,e=new $n){const n=e,l=this.points,r=(l.length-1)*t,i=Math.floor(r),o=r-i,u=l[0===i?i:i-1],s=l[i],a=l[i>l.length-2?l.length-1:i+1],c=l[i>l.length-3?l.length-1:i+2];return n.set(Ca(o,u.x,s.x,a.x,c.x),Ca(o,u.y,s.y,a.y,c.y)),n}copy(t){super.copy(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push(n.clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){const n=this.points[e];t.points.push(n.toArray())}return t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new $n).fromArray(n))}return this}}Fa.prototype.isSplineCurve=!0;var za=Object.freeze({__proto__:null,ArcCurve:_a,CatmullRomCurve3:La,CubicBezierCurve:Oa,CubicBezierCurve3:Ia,EllipseCurve:wa,LineCurve:Da,LineCurve3:ka,QuadraticBezierCurve:Na,QuadraticBezierCurve3:Ba,SplineCurve:Fa});function Ha(t,e,n,l,r){let i,o;if(r===function(t,e,n,l){let r=0;for(let i=e,o=n-l;i<n;i+=l)r+=(t[o]-t[i])*(t[i+1]+t[o+1]),o=i;return r}(t,e,n,l)>0)for(i=e;i<n;i+=l)o=uc(i,t[i],t[i+1],o);else for(i=n-l;i>=e;i-=l)o=uc(i,t[i],t[i+1],o);return o&&ec(o,o.next)&&(sc(o),o=o.next),o}function ja(t,e){if(!t)return t;e||(e=t);let n,l=t;do{if(n=!1,l.steiner||!ec(l,l.next)&&0!==tc(l.prev,l,l.next))l=l.next;else{if(sc(l),l=e=l.prev,l===l.next)break;n=!0}}while(n||l!==e);return e}function Ua(t,e,n,l,r,i,o){if(!t)return;!o&&i&&function(t,e,n,l){let r=t;do{null===r.z&&(r.z=Ja(r.x,r.y,e,n,l)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,function(t){let e,n,l,r,i,o,u,s,a=1;do{for(n=t,t=null,i=null,o=0;n;){for(o++,l=n,u=0,e=0;e<a&&(u++,l=l.nextZ,l);e++);for(s=a;u>0||s>0&&l;)0!==u&&(0===s||!l||n.z<=l.z)?(r=n,n=n.nextZ,u--):(r=l,l=l.nextZ,s--),i?i.nextZ=r:t=r,r.prevZ=i,i=r;n=l}i.nextZ=null,a*=2}while(o>1)}(r)}(t,l,r,i);let u,s,a=t;for(;t.prev!==t.next;)if(u=t.prev,s=t.next,i?Va(t,l,r,i):Ga(t))e.push(u.i/n),e.push(t.i/n),e.push(s.i/n),sc(t),t=s.next,a=s.next;else if((t=s)===a){o?1===o?Ua(t=Wa(ja(t),e,n),e,n,l,r,i,2):2===o&&qa(t,e,n,l,r,i):Ua(ja(t),e,n,l,r,i,1);break}}function Ga(t){const e=t.prev,n=t,l=t.next;if(tc(e,n,l)>=0)return!1;let r=t.next.next;for(;r!==t.prev;){if(Ka(e.x,e.y,n.x,n.y,l.x,l.y,r.x,r.y)&&tc(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function Va(t,e,n,l){const r=t.prev,i=t,o=t.next;if(tc(r,i,o)>=0)return!1;const u=r.x<i.x?r.x<o.x?r.x:o.x:i.x<o.x?i.x:o.x,s=r.y<i.y?r.y<o.y?r.y:o.y:i.y<o.y?i.y:o.y,a=r.x>i.x?r.x>o.x?r.x:o.x:i.x>o.x?i.x:o.x,c=r.y>i.y?r.y>o.y?r.y:o.y:i.y>o.y?i.y:o.y,h=Ja(u,s,e,n,l),d=Ja(a,c,e,n,l);let p=t.prevZ,f=t.nextZ;for(;p&&p.z>=h&&f&&f.z<=d;){if(p!==t.prev&&p!==t.next&&Ka(r.x,r.y,i.x,i.y,o.x,o.y,p.x,p.y)&&tc(p.prev,p,p.next)>=0)return!1;if(p=p.prevZ,f!==t.prev&&f!==t.next&&Ka(r.x,r.y,i.x,i.y,o.x,o.y,f.x,f.y)&&tc(f.prev,f,f.next)>=0)return!1;f=f.nextZ}for(;p&&p.z>=h;){if(p!==t.prev&&p!==t.next&&Ka(r.x,r.y,i.x,i.y,o.x,o.y,p.x,p.y)&&tc(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;f&&f.z<=d;){if(f!==t.prev&&f!==t.next&&Ka(r.x,r.y,i.x,i.y,o.x,o.y,f.x,f.y)&&tc(f.prev,f,f.next)>=0)return!1;f=f.nextZ}return!0}function Wa(t,e,n){let l=t;do{const r=l.prev,i=l.next.next;!ec(r,i)&&nc(r,l,l.next,i)&&ic(r,i)&&ic(i,r)&&(e.push(r.i/n),e.push(l.i/n),e.push(i.i/n),sc(l),sc(l.next),l=t=i),l=l.next}while(l!==t);return ja(l)}function qa(t,e,n,l,r,i){let o=t;do{let t=o.next.next;for(;t!==o.prev;){if(o.i!==t.i&&Qa(o,t)){let u=oc(o,t);return o=ja(o,o.next),u=ja(u,u.next),Ua(o,e,n,l,r,i),void Ua(u,e,n,l,r,i)}t=t.next}o=o.next}while(o!==t)}function Xa(t,e){return t.x-e.x}function Ya(t,e){if(e=function(t,e){let n=e;const l=t.x,r=t.y;let i,o=-1/0;do{if(r<=n.y&&r>=n.next.y&&n.next.y!==n.y){const t=n.x+(r-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(t<=l&&t>o){if(o=t,t===l){if(r===n.y)return n;if(r===n.next.y)return n.next}i=n.x<n.next.x?n:n.next}}n=n.next}while(n!==e);if(!i)return null;if(l===o)return i;const u=i,s=i.x,a=i.y;let c,h=1/0;n=i;do{l>=n.x&&n.x>=s&&l!==n.x&&Ka(r<a?l:o,r,s,a,r<a?o:l,r,n.x,n.y)&&(c=Math.abs(r-n.y)/(l-n.x),ic(n,t)&&(c<h||c===h&&(n.x>i.x||n.x===i.x&&$a(i,n)))&&(i=n,h=c)),n=n.next}while(n!==u);return i}(t,e)){const n=oc(e,t);ja(e,e.next),ja(n,n.next)}}function $a(t,e){return tc(t.prev,t,e.prev)<0&&tc(e.next,t,t.next)<0}function Ja(t,e,n,l,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*r)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-l)*r)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function Za(t){let e=t,n=t;do{(e.x<n.x||e.x===n.x&&e.y<n.y)&&(n=e),e=e.next}while(e!==t);return n}function Ka(t,e,n,l,r,i,o,u){return(r-o)*(e-u)-(t-o)*(i-u)>=0&&(t-o)*(l-u)-(n-o)*(e-u)>=0&&(n-o)*(i-u)-(r-o)*(l-u)>=0}function Qa(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){let n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&nc(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1}(t,e)&&(ic(t,e)&&ic(e,t)&&function(t,e){let n=t,l=!1;const r=(t.x+e.x)/2,i=(t.y+e.y)/2;do{n.y>i!=n.next.y>i&&n.next.y!==n.y&&r<(n.next.x-n.x)*(i-n.y)/(n.next.y-n.y)+n.x&&(l=!l),n=n.next}while(n!==t);return l}(t,e)&&(tc(t.prev,t,e.prev)||tc(t,e.prev,e))||ec(t,e)&&tc(t.prev,t,t.next)>0&&tc(e.prev,e,e.next)>0)}function tc(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function ec(t,e){return t.x===e.x&&t.y===e.y}function nc(t,e,n,l){const r=rc(tc(t,e,n)),i=rc(tc(t,e,l)),o=rc(tc(n,l,t)),u=rc(tc(n,l,e));return r!==i&&o!==u||!(0!==r||!lc(t,n,e))||!(0!==i||!lc(t,l,e))||!(0!==o||!lc(n,t,l))||!(0!==u||!lc(n,e,l))}function lc(t,e,n){return e.x<=Math.max(t.x,n.x)&&e.x>=Math.min(t.x,n.x)&&e.y<=Math.max(t.y,n.y)&&e.y>=Math.min(t.y,n.y)}function rc(t){return t>0?1:t<0?-1:0}function ic(t,e){return tc(t.prev,t,t.next)<0?tc(t,e,t.next)>=0&&tc(t,t.prev,e)>=0:tc(t,e,t.prev)<0||tc(t,t.next,e)<0}function oc(t,e){const n=new ac(t.i,t.x,t.y),l=new ac(e.i,e.x,e.y),r=t.next,i=e.prev;return t.next=e,e.prev=t,n.next=r,r.prev=n,l.next=n,n.prev=l,i.next=l,l.prev=i,l}function uc(t,e,n,l){const r=new ac(t,e,n);return l?(r.next=l.next,r.prev=l,l.next.prev=r,l.next=r):(r.prev=r,r.next=r),r}function sc(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function ac(t,e,n){this.i=t,this.x=e,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}class cc{static area(t){const e=t.length;let n=0;for(let l=e-1,r=0;r<e;l=r++)n+=t[l].x*t[r].y-t[r].x*t[l].y;return.5*n}static isClockWise(t){return cc.area(t)<0}static triangulateShape(t,e){const n=[],l=[],r=[];hc(t),dc(n,t);let i=t.length;e.forEach(hc);for(let t=0;t<e.length;t++)l.push(i),i+=e[t].length,dc(n,e[t]);const o=function(t,e,n=2){const l=e&&e.length,r=l?e[0]*n:t.length;let i=Ha(t,0,r,n,!0);const o=[];if(!i||i.next===i.prev)return o;let u,s,a,c,h,d,p;if(l&&(i=function(t,e,n,l){const r=[];let i,o,u,s,a;for(i=0,o=e.length;i<o;i++)u=e[i]*l,s=i<o-1?e[i+1]*l:t.length,a=Ha(t,u,s,l,!1),a===a.next&&(a.steiner=!0),r.push(Za(a));for(r.sort(Xa),i=0;i<r.length;i++)Ya(r[i],n),n=ja(n,n.next);return n}(t,e,i,n)),t.length>80*n){u=a=t[0],s=c=t[1];for(let e=n;e<r;e+=n)h=t[e],d=t[e+1],h<u&&(u=h),d<s&&(s=d),h>a&&(a=h),d>c&&(c=d);p=Math.max(a-u,c-s),p=0!==p?1/p:0}return Ua(i,o,n,u,s,p),o}(n,l);for(let t=0;t<o.length;t+=3)r.push(o.slice(t,t+3));return r}}function hc(t){const e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function dc(t,e){for(let n=0;n<e.length;n++)t.push(e[n].x),t.push(e[n].y)}class pc extends ti{constructor(t,e){super(),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];const n=this,l=[],r=[];for(let e=0,n=t.length;e<n;e++)i(t[e]);function i(t){const i=[],o=void 0!==e.curveSegments?e.curveSegments:12,u=void 0!==e.steps?e.steps:1;let s=void 0!==e.depth?e.depth:100,a=void 0===e.bevelEnabled||e.bevelEnabled,c=void 0!==e.bevelThickness?e.bevelThickness:6,h=void 0!==e.bevelSize?e.bevelSize:c-2,d=void 0!==e.bevelOffset?e.bevelOffset:0,p=void 0!==e.bevelSegments?e.bevelSegments:3;const f=e.extrudePath,m=void 0!==e.UVGenerator?e.UVGenerator:fc;void 0!==e.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),s=e.amount);let g,v,y,x,b,w=!1;f&&(g=f.getSpacedPoints(u),w=!0,a=!1,v=f.computeFrenetFrames(u,!1),y=new ul,x=new ul,b=new ul),a||(p=0,c=0,h=0,d=0);const _=t.extractPoints(o);let M=_.shape;const S=_.holes;if(!cc.isClockWise(M)){M=M.reverse();for(let t=0,e=S.length;t<e;t++){const e=S[t];cc.isClockWise(e)&&(S[t]=e.reverse())}}const E=cc.triangulateShape(M,S),T=M;for(let t=0,e=S.length;t<e;t++){const e=S[t];M=M.concat(e)}function A(t,e,n){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().multiplyScalar(n).add(t)}const L=M.length,C=E.length;function P(t,e,n){let l,r,i;const o=t.x-e.x,u=t.y-e.y,s=n.x-t.x,a=n.y-t.y,c=o*o+u*u,h=o*a-u*s;if(Math.abs(h)>Number.EPSILON){const h=Math.sqrt(c),d=Math.sqrt(s*s+a*a),p=e.x-u/h,f=e.y+o/h,m=((n.x-a/d-p)*a-(n.y+s/d-f)*s)/(o*a-u*s);l=p+o*m-t.x,r=f+u*m-t.y;const g=l*l+r*r;if(g<=2)return new $n(l,r);i=Math.sqrt(g/2)}else{let t=!1;o>Number.EPSILON?s>Number.EPSILON&&(t=!0):o<-Number.EPSILON?s<-Number.EPSILON&&(t=!0):Math.sign(u)===Math.sign(a)&&(t=!0),t?(l=-u,r=o,i=Math.sqrt(c)):(l=o,r=u,i=Math.sqrt(c/2))}return new $n(l/i,r/i)}const R=[];for(let t=0,e=T.length,n=e-1,l=t+1;t<e;t++,n++,l++)n===e&&(n=0),l===e&&(l=0),R[t]=P(T[t],T[n],T[l]);const O=[];let I,D=R.concat();for(let t=0,e=S.length;t<e;t++){const e=S[t];I=[];for(let t=0,n=e.length,l=n-1,r=t+1;t<n;t++,l++,r++)l===n&&(l=0),r===n&&(r=0),I[t]=P(e[t],e[l],e[r]);O.push(I),D=D.concat(I)}for(let t=0;t<p;t++){const e=t/p,n=c*Math.cos(e*Math.PI/2),l=h*Math.sin(e*Math.PI/2)+d;for(let t=0,e=T.length;t<e;t++){const e=A(T[t],R[t],l);B(e.x,e.y,-n)}for(let t=0,e=S.length;t<e;t++){const e=S[t];I=O[t];for(let t=0,r=e.length;t<r;t++){const r=A(e[t],I[t],l);B(r.x,r.y,-n)}}}const k=h+d;for(let t=0;t<L;t++){const e=a?A(M[t],D[t],k):M[t];w?(x.copy(v.normals[0]).multiplyScalar(e.x),y.copy(v.binormals[0]).multiplyScalar(e.y),b.copy(g[0]).add(x).add(y),B(b.x,b.y,b.z)):B(e.x,e.y,0)}for(let t=1;t<=u;t++)for(let e=0;e<L;e++){const n=a?A(M[e],D[e],k):M[e];w?(x.copy(v.normals[t]).multiplyScalar(n.x),y.copy(v.binormals[t]).multiplyScalar(n.y),b.copy(g[t]).add(x).add(y),B(b.x,b.y,b.z)):B(n.x,n.y,s/u*t)}for(let t=p-1;t>=0;t--){const e=t/p,n=c*Math.cos(e*Math.PI/2),l=h*Math.sin(e*Math.PI/2)+d;for(let t=0,e=T.length;t<e;t++){const e=A(T[t],R[t],l);B(e.x,e.y,s+n)}for(let t=0,e=S.length;t<e;t++){const e=S[t];I=O[t];for(let t=0,r=e.length;t<r;t++){const r=A(e[t],I[t],l);w?B(r.x,r.y+g[u-1].y,g[u-1].x+n):B(r.x,r.y,s+n)}}}function N(t,e){let n=t.length;for(;--n>=0;){const l=n;let r=n-1;r<0&&(r=t.length-1);for(let t=0,n=u+2*p;t<n;t++){const n=L*t,i=L*(t+1);z(e+l+n,e+r+n,e+r+i,e+l+i)}}}function B(t,e,n){i.push(t),i.push(e),i.push(n)}function F(t,e,r){H(t),H(e),H(r);const i=l.length/3,o=m.generateTopUV(n,l,i-3,i-2,i-1);j(o[0]),j(o[1]),j(o[2])}function z(t,e,r,i){H(t),H(e),H(i),H(e),H(r),H(i);const o=l.length/3,u=m.generateSideWallUV(n,l,o-6,o-3,o-2,o-1);j(u[0]),j(u[1]),j(u[3]),j(u[1]),j(u[2]),j(u[3])}function H(t){l.push(i[3*t+0]),l.push(i[3*t+1]),l.push(i[3*t+2])}function j(t){r.push(t.x),r.push(t.y)}!function(){const t=l.length/3;if(a){let t=0,e=L*t;for(let t=0;t<C;t++){const n=E[t];F(n[2]+e,n[1]+e,n[0]+e)}t=u+2*p,e=L*t;for(let t=0;t<C;t++){const n=E[t];F(n[0]+e,n[1]+e,n[2]+e)}}else{for(let t=0;t<C;t++){const e=E[t];F(e[2],e[1],e[0])}for(let t=0;t<C;t++){const e=E[t];F(e[0]+L*u,e[1]+L*u,e[2]+L*u)}}n.addGroup(t,l.length/3-t,0)}(),function(){const t=l.length/3;let e=0;N(T,e),e+=T.length;for(let t=0,n=S.length;t<n;t++){const n=S[t];N(n,e),e+=n.length}n.addGroup(t,l.length/3-t,1)}()}this.setAttribute("position",new Ur(l,3)),this.setAttribute("uv",new Ur(r,2)),this.computeVertexNormals()}toJSON(){const t=super.toJSON();return function(t,e,n){if(n.shapes=[],Array.isArray(t))for(let e=0,l=t.length;e<l;e++){const l=t[e];n.shapes.push(l.uuid)}else n.shapes.push(t.uuid);return void 0!==e.extrudePath&&(n.options.extrudePath=e.extrudePath.toJSON()),n}(this.parameters.shapes,this.parameters.options,t)}static fromJSON(t,e){const n=[];for(let l=0,r=t.shapes.length;l<r;l++){const r=e[t.shapes[l]];n.push(r)}const l=t.options.extrudePath;return void 0!==l&&(t.options.extrudePath=(new za[l.type]).fromJSON(l)),new pc(n,t.options)}}const fc={generateTopUV:function(t,e,n,l,r){const i=e[3*n],o=e[3*n+1],u=e[3*l],s=e[3*l+1],a=e[3*r],c=e[3*r+1];return[new $n(i,o),new $n(u,s),new $n(a,c)]},generateSideWallUV:function(t,e,n,l,r,i){const o=e[3*n],u=e[3*n+1],s=e[3*n+2],a=e[3*l],c=e[3*l+1],h=e[3*l+2],d=e[3*r],p=e[3*r+1],f=e[3*r+2],m=e[3*i],g=e[3*i+1],v=e[3*i+2];return Math.abs(u-c)<Math.abs(o-a)?[new $n(o,1-s),new $n(a,1-h),new $n(d,1-f),new $n(m,1-v)]:[new $n(u,1-s),new $n(c,1-h),new $n(p,1-f),new $n(g,1-v)]}};class mc extends pa{constructor(t=1,e=0){const n=(1+Math.sqrt(5))/2;super([-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type="IcosahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new mc(t.radius,t.detail)}}class gc extends ti{constructor(t,e=12,n=0,l=2*Math.PI){super(),this.type="LatheGeometry",this.parameters={points:t,segments:e,phiStart:n,phiLength:l},e=Math.floor(e),l=Un(l,0,2*Math.PI);const r=[],i=[],o=[],u=1/e,s=new ul,a=new $n;for(let r=0;r<=e;r++){const c=n+r*u*l,h=Math.sin(c),d=Math.cos(c);for(let n=0;n<=t.length-1;n++)s.x=t[n].x*h,s.y=t[n].y,s.z=t[n].x*d,i.push(s.x,s.y,s.z),a.x=r/e,a.y=n/(t.length-1),o.push(a.x,a.y)}for(let n=0;n<e;n++)for(let e=0;e<t.length-1;e++){const l=e+n*t.length,i=l,o=l+t.length,u=l+t.length+1,s=l+1;r.push(i,o,s),r.push(o,u,s)}if(this.setIndex(r),this.setAttribute("position",new Ur(i,3)),this.setAttribute("uv",new Ur(o,2)),this.computeVertexNormals(),l===2*Math.PI){const n=this.attributes.normal.array,l=new ul,r=new ul,i=new ul,o=e*t.length*3;for(let e=0,u=0;e<t.length;e++,u+=3)l.x=n[u+0],l.y=n[u+1],l.z=n[u+2],r.x=n[o+u+0],r.y=n[o+u+1],r.z=n[o+u+2],i.addVectors(l,r).normalize(),n[u+0]=n[o+u+0]=i.x,n[u+1]=n[o+u+1]=i.y,n[u+2]=n[o+u+2]=i.z}}static fromJSON(t){return new gc(t.points,t.segments,t.phiStart,t.phiLength)}}class vc extends pa{constructor(t=1,e=0){super([1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type="OctahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new vc(t.radius,t.detail)}}class yc extends ti{constructor(t,e,n){super(),this.type="ParametricGeometry",this.parameters={func:t,slices:e,stacks:n};const l=[],r=[],i=[],o=[],u=1e-5,s=new ul,a=new ul,c=new ul,h=new ul,d=new ul;t.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");const p=e+1;for(let l=0;l<=n;l++){const p=l/n;for(let n=0;n<=e;n++){const l=n/e;t(l,p,a),r.push(a.x,a.y,a.z),l-u>=0?(t(l-u,p,c),h.subVectors(a,c)):(t(l+u,p,c),h.subVectors(c,a)),p-u>=0?(t(l,p-u,c),d.subVectors(a,c)):(t(l,p+u,c),d.subVectors(c,a)),s.crossVectors(h,d).normalize(),i.push(s.x,s.y,s.z),o.push(l,p)}}for(let t=0;t<n;t++)for(let n=0;n<e;n++){const e=t*p+n,r=t*p+n+1,i=(t+1)*p+n+1,o=(t+1)*p+n;l.push(e,r,o),l.push(r,i,o)}this.setIndex(l),this.setAttribute("position",new Ur(r,3)),this.setAttribute("normal",new Ur(i,3)),this.setAttribute("uv",new Ur(o,2))}}class xc extends ti{constructor(t=.5,e=1,n=8,l=1,r=0,i=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:l,thetaStart:r,thetaLength:i},n=Math.max(3,n);const o=[],u=[],s=[],a=[];let c=t;const h=(e-t)/(l=Math.max(1,l)),d=new ul,p=new $n;for(let t=0;t<=l;t++){for(let t=0;t<=n;t++){const l=r+t/n*i;d.x=c*Math.cos(l),d.y=c*Math.sin(l),u.push(d.x,d.y,d.z),s.push(0,0,1),p.x=(d.x/e+1)/2,p.y=(d.y/e+1)/2,a.push(p.x,p.y)}c+=h}for(let t=0;t<l;t++){const e=t*(n+1);for(let t=0;t<n;t++){const l=t+e,r=l,i=l+n+1,u=l+n+2,s=l+1;o.push(r,i,s),o.push(i,u,s)}}this.setIndex(o),this.setAttribute("position",new Ur(u,3)),this.setAttribute("normal",new Ur(s,3)),this.setAttribute("uv",new Ur(a,2))}static fromJSON(t){return new xc(t.innerRadius,t.outerRadius,t.thetaSegments,t.phiSegments,t.thetaStart,t.thetaLength)}}class bc extends ti{constructor(t,e=12){super(),this.type="ShapeGeometry",this.parameters={shapes:t,curveSegments:e};const n=[],l=[],r=[],i=[];let o=0,u=0;if(!1===Array.isArray(t))s(t);else for(let e=0;e<t.length;e++)s(t[e]),this.addGroup(o,u,e),o+=u,u=0;function s(t){const o=l.length/3,s=t.extractPoints(e);let a=s.shape;const c=s.holes;!1===cc.isClockWise(a)&&(a=a.reverse());for(let t=0,e=c.length;t<e;t++){const e=c[t];!0===cc.isClockWise(e)&&(c[t]=e.reverse())}const h=cc.triangulateShape(a,c);for(let t=0,e=c.length;t<e;t++){const e=c[t];a=a.concat(e)}for(let t=0,e=a.length;t<e;t++){const e=a[t];l.push(e.x,e.y,0),r.push(0,0,1),i.push(e.x,e.y)}for(let t=0,e=h.length;t<e;t++){const e=h[t],l=e[0]+o,r=e[1]+o,i=e[2]+o;n.push(l,r,i),u+=3}}this.setIndex(n),this.setAttribute("position",new Ur(l,3)),this.setAttribute("normal",new Ur(r,3)),this.setAttribute("uv",new Ur(i,2))}toJSON(){const t=super.toJSON();return function(t,e){if(e.shapes=[],Array.isArray(t))for(let n=0,l=t.length;n<l;n++){const l=t[n];e.shapes.push(l.uuid)}else e.shapes.push(t.uuid);return e}(this.parameters.shapes,t)}static fromJSON(t,e){const n=[];for(let l=0,r=t.shapes.length;l<r;l++){const r=e[t.shapes[l]];n.push(r)}return new bc(n,t.curveSegments)}}class wc extends ti{constructor(t=1,e=8,n=6,l=0,r=2*Math.PI,i=0,o=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:l,phiLength:r,thetaStart:i,thetaLength:o},e=Math.max(3,Math.floor(e)),n=Math.max(2,Math.floor(n));const u=Math.min(i+o,Math.PI);let s=0;const a=[],c=new ul,h=new ul,d=[],p=[],f=[],m=[];for(let d=0;d<=n;d++){const g=[],v=d/n;let y=0;0==d&&0==i?y=.5/e:d==n&&u==Math.PI&&(y=-.5/e);for(let n=0;n<=e;n++){const u=n/e;c.x=-t*Math.cos(l+u*r)*Math.sin(i+v*o),c.y=t*Math.cos(i+v*o),c.z=t*Math.sin(l+u*r)*Math.sin(i+v*o),p.push(c.x,c.y,c.z),h.copy(c).normalize(),f.push(h.x,h.y,h.z),m.push(u+y,1-v),g.push(s++)}a.push(g)}for(let t=0;t<n;t++)for(let l=0;l<e;l++){const e=a[t][l+1],r=a[t][l],o=a[t+1][l],s=a[t+1][l+1];(0!==t||i>0)&&d.push(e,r,s),(t!==n-1||u<Math.PI)&&d.push(r,o,s)}this.setIndex(d),this.setAttribute("position",new Ur(p,3)),this.setAttribute("normal",new Ur(f,3)),this.setAttribute("uv",new Ur(m,2))}static fromJSON(t){return new wc(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class _c extends pa{constructor(t=1,e=0){super([1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type="TetrahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new _c(t.radius,t.detail)}}class Mc extends pc{constructor(t,e={}){const n=e.font;if(!n||!n.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new ti;const l=n.generateShapes(t,e.size);e.depth=void 0!==e.height?e.height:50,void 0===e.bevelThickness&&(e.bevelThickness=10),void 0===e.bevelSize&&(e.bevelSize=8),void 0===e.bevelEnabled&&(e.bevelEnabled=!1),super(l,e),this.type="TextGeometry"}}class Sc extends ti{constructor(t=1,e=.4,n=8,l=6,r=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:l,arc:r},n=Math.floor(n),l=Math.floor(l);const i=[],o=[],u=[],s=[],a=new ul,c=new ul,h=new ul;for(let i=0;i<=n;i++)for(let d=0;d<=l;d++){const p=d/l*r,f=i/n*Math.PI*2;c.x=(t+e*Math.cos(f))*Math.cos(p),c.y=(t+e*Math.cos(f))*Math.sin(p),c.z=e*Math.sin(f),o.push(c.x,c.y,c.z),a.x=t*Math.cos(p),a.y=t*Math.sin(p),h.subVectors(c,a).normalize(),u.push(h.x,h.y,h.z),s.push(d/l),s.push(i/n)}for(let t=1;t<=n;t++)for(let e=1;e<=l;e++){const n=(l+1)*t+e-1,r=(l+1)*(t-1)+e-1,o=(l+1)*(t-1)+e,u=(l+1)*t+e;i.push(n,r,u),i.push(r,o,u)}this.setIndex(i),this.setAttribute("position",new Ur(o,3)),this.setAttribute("normal",new Ur(u,3)),this.setAttribute("uv",new Ur(s,2))}static fromJSON(t){return new Sc(t.radius,t.tube,t.radialSegments,t.tubularSegments,t.arc)}}class Ec extends ti{constructor(t=1,e=.4,n=64,l=8,r=2,i=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:t,tube:e,tubularSegments:n,radialSegments:l,p:r,q:i},n=Math.floor(n),l=Math.floor(l);const o=[],u=[],s=[],a=[],c=new ul,h=new ul,d=new ul,p=new ul,f=new ul,m=new ul,g=new ul;for(let o=0;o<=n;++o){const y=o/n*r*Math.PI*2;v(y,r,i,t,d),v(y+.01,r,i,t,p),m.subVectors(p,d),g.addVectors(p,d),f.crossVectors(m,g),g.crossVectors(f,m),f.normalize(),g.normalize();for(let t=0;t<=l;++t){const r=t/l*Math.PI*2,i=-e*Math.cos(r),p=e*Math.sin(r);c.x=d.x+(i*g.x+p*f.x),c.y=d.y+(i*g.y+p*f.y),c.z=d.z+(i*g.z+p*f.z),u.push(c.x,c.y,c.z),h.subVectors(c,d).normalize(),s.push(h.x,h.y,h.z),a.push(o/n),a.push(t/l)}}for(let t=1;t<=n;t++)for(let e=1;e<=l;e++){const n=(l+1)*(t-1)+(e-1),r=(l+1)*t+(e-1),i=(l+1)*t+e,u=(l+1)*(t-1)+e;o.push(n,r,u),o.push(r,i,u)}function v(t,e,n,l,r){const i=Math.cos(t),o=Math.sin(t),u=n/e*t,s=Math.cos(u);r.x=l*(2+s)*.5*i,r.y=l*(2+s)*o*.5,r.z=l*Math.sin(u)*.5}this.setIndex(o),this.setAttribute("position",new Ur(u,3)),this.setAttribute("normal",new Ur(s,3)),this.setAttribute("uv",new Ur(a,2))}static fromJSON(t){return new Ec(t.radius,t.tube,t.tubularSegments,t.radialSegments,t.p,t.q)}}class Tc extends ti{constructor(t,e=64,n=1,l=8,r=!1){super(),this.type="TubeGeometry",this.parameters={path:t,tubularSegments:e,radius:n,radialSegments:l,closed:r};const i=t.computeFrenetFrames(e,r);this.tangents=i.tangents,this.normals=i.normals,this.binormals=i.binormals;const o=new ul,u=new ul,s=new $n;let a=new ul;const c=[],h=[],d=[],p=[];function f(r){a=t.getPointAt(r/e,a);const s=i.normals[r],d=i.binormals[r];for(let t=0;t<=l;t++){const e=t/l*Math.PI*2,r=Math.sin(e),i=-Math.cos(e);u.x=i*s.x+r*d.x,u.y=i*s.y+r*d.y,u.z=i*s.z+r*d.z,u.normalize(),h.push(u.x,u.y,u.z),o.x=a.x+n*u.x,o.y=a.y+n*u.y,o.z=a.z+n*u.z,c.push(o.x,o.y,o.z)}}!function(){for(let t=0;t<e;t++)f(t);f(!1===r?e:0),function(){for(let t=0;t<=e;t++)for(let n=0;n<=l;n++)s.x=t/e,s.y=n/l,d.push(s.x,s.y)}(),function(){for(let t=1;t<=e;t++)for(let e=1;e<=l;e++){const n=(l+1)*(t-1)+(e-1),r=(l+1)*t+(e-1),i=(l+1)*t+e,o=(l+1)*(t-1)+e;p.push(n,r,o),p.push(r,i,o)}}()}(),this.setIndex(p),this.setAttribute("position",new Ur(c,3)),this.setAttribute("normal",new Ur(h,3)),this.setAttribute("uv",new Ur(d,2))}toJSON(){const t=super.toJSON();return t.path=this.parameters.path.toJSON(),t}static fromJSON(t){return new Tc((new za[t.path.type]).fromJSON(t.path),t.tubularSegments,t.radius,t.radialSegments,t.closed)}}class Ac extends ti{constructor(t){if(super(),this.type="WireframeGeometry",!0===t.isGeometry)return void console.error("THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");const e=[],n=[0,0],l={},r=new ul;if(null!==t.index){const i=t.attributes.position,o=t.index;let u=t.groups;0===u.length&&(u=[{start:0,count:o.count,materialIndex:0}]);for(let t=0,e=u.length;t<e;++t){const e=u[t],r=e.start;for(let t=r,i=r+e.count;t<i;t+=3)for(let e=0;e<3;e++){const r=o.getX(t+e),i=o.getX(t+(e+1)%3);n[0]=Math.min(r,i),n[1]=Math.max(r,i);const u=n[0]+","+n[1];void 0===l[u]&&(l[u]={index1:n[0],index2:n[1]})}}for(const t in l){const n=l[t];r.fromBufferAttribute(i,n.index1),e.push(r.x,r.y,r.z),r.fromBufferAttribute(i,n.index2),e.push(r.x,r.y,r.z)}}else{const n=t.attributes.position;for(let t=0,l=n.count/3;t<l;t++)for(let l=0;l<3;l++){const i=3*t+l;r.fromBufferAttribute(n,i),e.push(r.x,r.y,r.z);const o=3*t+(l+1)%3;r.fromBufferAttribute(n,o),e.push(r.x,r.y,r.z)}}this.setAttribute("position",new Ur(e,3))}}var Lc=Object.freeze({__proto__:null,BoxGeometry:bi,BoxBufferGeometry:bi,CircleGeometry:ca,CircleBufferGeometry:ca,ConeGeometry:da,ConeBufferGeometry:da,CylinderGeometry:ha,CylinderBufferGeometry:ha,DodecahedronGeometry:fa,DodecahedronBufferGeometry:fa,EdgesGeometry:xa,ExtrudeGeometry:pc,ExtrudeBufferGeometry:pc,IcosahedronGeometry:mc,IcosahedronBufferGeometry:mc,LatheGeometry:gc,LatheBufferGeometry:gc,OctahedronGeometry:vc,OctahedronBufferGeometry:vc,ParametricGeometry:yc,ParametricBufferGeometry:yc,PlaneGeometry:Hi,PlaneBufferGeometry:Hi,PolyhedronGeometry:pa,PolyhedronBufferGeometry:pa,RingGeometry:xc,RingBufferGeometry:xc,ShapeGeometry:bc,ShapeBufferGeometry:bc,SphereGeometry:wc,SphereBufferGeometry:wc,TetrahedronGeometry:_c,TetrahedronBufferGeometry:_c,TextGeometry:Mc,TextBufferGeometry:Mc,TorusGeometry:Sc,TorusBufferGeometry:Sc,TorusKnotGeometry:Ec,TorusKnotBufferGeometry:Ec,TubeGeometry:Tc,TubeBufferGeometry:Tc,WireframeGeometry:Ac});class Cc extends _r{constructor(t){super(),this.type="ShadowMaterial",this.color=new Cr(0),this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this}}Cc.prototype.isShadowMaterial=!0;class Pc extends Si{constructor(t){super(t),this.type="RawShaderMaterial"}}Pc.prototype.isRawShaderMaterial=!0;class Rc extends _r{constructor(t){super(),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Cr(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Cr(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=un,this.normalScale=new $n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.vertexTangents=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.flatShading=t.flatShading,this.vertexTangents=t.vertexTangents,this}}Rc.prototype.isMeshStandardMaterial=!0;class Oc extends Rc{constructor(t){super(),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoat=0,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new $n(1,1),this.clearcoatNormalMap=null,this.reflectivity=.5,Object.defineProperty(this,"ior",{get:function(){return(1+.4*this.reflectivity)/(1-.4*this.reflectivity)},set:function(t){this.reflectivity=Un(2.5*(t-1)/(t+1),0,1)}}),this.sheen=null,this.transmission=0,this.transmissionMap=null,this.thickness=.01,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationColor=new Cr(1,1,1),this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.reflectivity=t.reflectivity,t.sheen?this.sheen=(this.sheen||new Cr).copy(t.sheen):this.sheen=null,this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this.thickness=t.thickness,this.thicknessMap=t.thicknessMap,this.attenuationDistance=t.attenuationDistance,this.attenuationColor.copy(t.attenuationColor),this}}Oc.prototype.isMeshPhysicalMaterial=!0;class Ic extends _r{constructor(t){super(),this.type="MeshPhongMaterial",this.color=new Cr(16777215),this.specular=new Cr(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Cr(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=un,this.normalScale=new $n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=$,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.flatShading=t.flatShading,this}}Ic.prototype.isMeshPhongMaterial=!0;class Dc extends _r{constructor(t){super(),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Cr(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Cr(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=un,this.normalScale=new $n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this}}Dc.prototype.isMeshToonMaterial=!0;class kc extends _r{constructor(t){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=un,this.normalScale=new $n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.flatShading=t.flatShading,this}}kc.prototype.isMeshNormalMaterial=!0;class Nc extends _r{constructor(t){super(),this.type="MeshLambertMaterial",this.color=new Cr(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Cr(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=$,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this}}Nc.prototype.isMeshLambertMaterial=!0;class Bc extends _r{constructor(t){super(),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Cr(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=un,this.normalScale=new $n(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.morphTargets=!1,this.morphNormals=!1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.flatShading=t.flatShading,this}}Bc.prototype.isMeshMatcapMaterial=!0;class Fc extends Us{constructor(t){super(),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}Fc.prototype.isLineDashedMaterial=!0;var zc=Object.freeze({__proto__:null,ShadowMaterial:Cc,SpriteMaterial:us,RawShaderMaterial:Pc,ShaderMaterial:Si,PointsMaterial:Qs,MeshPhysicalMaterial:Oc,MeshStandardMaterial:Rc,MeshPhongMaterial:Ic,MeshToonMaterial:Dc,MeshNormalMaterial:kc,MeshLambertMaterial:Nc,MeshDepthMaterial:ju,MeshDistanceMaterial:Uu,MeshBasicMaterial:Pr,MeshMatcapMaterial:Bc,LineDashedMaterial:Fc,LineBasicMaterial:Us,Material:_r});const Hc={arraySlice:function(t,e,n){return Hc.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==n?n:t.length)):t.slice(e,n)},convertArray:function(t,e,n){return!t||!n&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){const e=t.length,n=new Array(e);for(let t=0;t!==e;++t)n[t]=t;return n.sort((function(e,n){return t[e]-t[n]})),n},sortedArray:function(t,e,n){const l=t.length,r=new t.constructor(l);for(let i=0,o=0;o!==l;++i){const l=n[i]*e;for(let n=0;n!==e;++n)r[o++]=t[l+n]}return r},flattenJSON:function(t,e,n,l){let r=1,i=t[0];for(;void 0!==i&&void 0===i[l];)i=t[r++];if(void 0===i)return;let o=i[l];if(void 0!==o)if(Array.isArray(o))do{o=i[l],void 0!==o&&(e.push(i.time),n.push.apply(n,o)),i=t[r++]}while(void 0!==i);else if(void 0!==o.toArray)do{o=i[l],void 0!==o&&(e.push(i.time),o.toArray(n,n.length)),i=t[r++]}while(void 0!==i);else do{o=i[l],void 0!==o&&(e.push(i.time),n.push(o)),i=t[r++]}while(void 0!==i)},subclip:function(t,e,n,l,r=30){const i=t.clone();i.name=e;const o=[];for(let t=0;t<i.tracks.length;++t){const e=i.tracks[t],u=e.getValueSize(),s=[],a=[];for(let t=0;t<e.times.length;++t){const i=e.times[t]*r;if(!(i<n||i>=l)){s.push(e.times[t]);for(let n=0;n<u;++n)a.push(e.values[t*u+n])}}0!==s.length&&(e.times=Hc.convertArray(s,e.times.constructor),e.values=Hc.convertArray(a,e.values.constructor),o.push(e))}i.tracks=o;let u=1/0;for(let t=0;t<i.tracks.length;++t)u>i.tracks[t].times[0]&&(u=i.tracks[t].times[0]);for(let t=0;t<i.tracks.length;++t)i.tracks[t].shift(-1*u);return i.resetDuration(),i},makeClipAdditive:function(t,e=0,n=t,l=30){l<=0&&(l=30);const r=n.tracks.length,i=e/l;for(let e=0;e<r;++e){const l=n.tracks[e],r=l.ValueTypeName;if("bool"===r||"string"===r)continue;const o=t.tracks.find((function(t){return t.name===l.name&&t.ValueTypeName===r}));if(void 0===o)continue;let u=0;const s=l.getValueSize();l.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(u=s/3);let a=0;const c=o.getValueSize();o.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(a=c/3);const h=l.times.length-1;let d;if(i<=l.times[0]){const t=u,e=s-u;d=Hc.arraySlice(l.values,t,e)}else if(i>=l.times[h]){const t=h*s+u,e=t+s-u;d=Hc.arraySlice(l.values,t,e)}else{const t=l.createInterpolant(),e=u,n=s-u;t.evaluate(i),d=Hc.arraySlice(t.resultBuffer,e,n)}"quaternion"===r&&(new ol).fromArray(d).normalize().conjugate().toArray(d);const p=o.times.length;for(let t=0;t<p;++t){const e=t*c+a;if("quaternion"===r)ol.multiplyQuaternionsFlat(o.values,e,d,0,o.values,e);else{const t=c-2*a;for(let n=0;n<t;++n)o.values[e+n]-=d[n]}}}return t.blendMode=qe,t}};class jc{constructor(t,e,n,l){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==l?l:new e.constructor(n),this.sampleValues=e,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let n=this._cachedIndex,l=e[n],r=e[n-1];t:{e:{let i;n:{l:if(!(t<l)){for(let i=n+2;;){if(void 0===l){if(t<r)break l;return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,t,r)}if(n===i)break;if(r=l,l=e[++n],t<l)break e}i=e.length;break n}if(t>=r)break t;{const o=e[1];t<o&&(n=2,r=o);for(let i=n-2;;){if(void 0===r)return this._cachedIndex=0,this.beforeStart_(0,t,l);if(n===i)break;if(l=r,r=e[--n-1],t>=r)break e}i=n,n=0}}for(;n<i;){const l=n+i>>>1;t<e[l]?i=l:n=l+1}if(l=e[n],r=e[n-1],void 0===r)return this._cachedIndex=0,this.beforeStart_(0,t,l);if(void 0===l)return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,r,t)}this._cachedIndex=n,this.intervalChanged_(n,r,l)}return this.interpolate_(n,r,t,l)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,n=this.sampleValues,l=this.valueSize,r=t*l;for(let t=0;t!==l;++t)e[t]=n[r+t];return e}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}jc.prototype.beforeStart_=jc.prototype.copySampleValue_,jc.prototype.afterEnd_=jc.prototype.copySampleValue_;class Uc extends jc{constructor(t,e,n,l){super(t,e,n,l),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:Ue,endingEnd:Ue}}intervalChanged_(t,e,n){const l=this.parameterPositions;let r=t-2,i=t+1,o=l[r],u=l[i];if(void 0===o)switch(this.getSettings_().endingStart){case Ge:r=t,o=2*e-n;break;case Ve:r=l.length-2,o=e+l[r]-l[r+1];break;default:r=t,o=n}if(void 0===u)switch(this.getSettings_().endingEnd){case Ge:i=t,u=2*n-e;break;case Ve:i=1,u=n+l[1]-l[0];break;default:i=t-1,u=e}const s=.5*(n-e),a=this.valueSize;this._weightPrev=s/(e-o),this._weightNext=s/(u-n),this._offsetPrev=r*a,this._offsetNext=i*a}interpolate_(t,e,n,l){const r=this.resultBuffer,i=this.sampleValues,o=this.valueSize,u=t*o,s=u-o,a=this._offsetPrev,c=this._offsetNext,h=this._weightPrev,d=this._weightNext,p=(n-e)/(l-e),f=p*p,m=f*p,g=-h*m+2*h*f-h*p,v=(1+h)*m+(-1.5-2*h)*f+(-.5+h)*p+1,y=(-1-d)*m+(1.5+d)*f+.5*p,x=d*m-d*f;for(let t=0;t!==o;++t)r[t]=g*i[a+t]+v*i[s+t]+y*i[u+t]+x*i[c+t];return r}}class Gc extends jc{constructor(t,e,n,l){super(t,e,n,l)}interpolate_(t,e,n,l){const r=this.resultBuffer,i=this.sampleValues,o=this.valueSize,u=t*o,s=u-o,a=(n-e)/(l-e),c=1-a;for(let t=0;t!==o;++t)r[t]=i[s+t]*c+i[u+t]*a;return r}}class Vc extends jc{constructor(t,e,n,l){super(t,e,n,l)}interpolate_(t){return this.copySampleValue_(t-1)}}class Wc{constructor(t,e,n,l){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=Hc.convertArray(e,this.TimeBufferType),this.values=Hc.convertArray(n,this.ValueBufferType),this.setInterpolation(l||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let n;if(e.toJSON!==this.toJSON)n=e.toJSON(t);else{n={name:t.name,times:Hc.convertArray(t.times,Array),values:Hc.convertArray(t.values,Array)};const e=t.getInterpolation();e!==t.DefaultInterpolation&&(n.interpolation=e)}return n.type=t.ValueTypeName,n}InterpolantFactoryMethodDiscrete(t){return new Vc(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new Gc(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new Uc(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case ze:e=this.InterpolantFactoryMethodDiscrete;break;case He:e=this.InterpolantFactoryMethodLinear;break;case je:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return ze;case this.InterpolantFactoryMethodLinear:return He;case this.InterpolantFactoryMethodSmooth:return je}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let n=0,l=e.length;n!==l;++n)e[n]+=t}return this}scale(t){if(1!==t){const e=this.times;for(let n=0,l=e.length;n!==l;++n)e[n]*=t}return this}trim(t,e){const n=this.times,l=n.length;let r=0,i=l-1;for(;r!==l&&n[r]<t;)++r;for(;-1!==i&&n[i]>e;)--i;if(++i,0!==r||i!==l){r>=i&&(i=Math.max(i,1),r=i-1);const t=this.getValueSize();this.times=Hc.arraySlice(n,r,i),this.values=Hc.arraySlice(this.values,r*t,i*t)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);const n=this.times,l=this.values,r=n.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);let i=null;for(let e=0;e!==r;e++){const l=n[e];if("number"==typeof l&&isNaN(l)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,l),t=!1;break}if(null!==i&&i>l){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,l,i),t=!1;break}i=l}if(void 0!==l&&Hc.isTypedArray(l))for(let e=0,n=l.length;e!==n;++e){const n=l[e];if(isNaN(n)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,n),t=!1;break}}return t}optimize(){const t=Hc.arraySlice(this.times),e=Hc.arraySlice(this.values),n=this.getValueSize(),l=this.getInterpolation()===je,r=t.length-1;let i=1;for(let o=1;o<r;++o){let r=!1;const u=t[o];if(u!==t[o+1]&&(1!==o||u!==t[0]))if(l)r=!0;else{const t=o*n,l=t-n,i=t+n;for(let o=0;o!==n;++o){const n=e[t+o];if(n!==e[l+o]||n!==e[i+o]){r=!0;break}}}if(r){if(o!==i){t[i]=t[o];const l=o*n,r=i*n;for(let t=0;t!==n;++t)e[r+t]=e[l+t]}++i}}if(r>0){t[i]=t[r];for(let t=r*n,l=i*n,o=0;o!==n;++o)e[l+o]=e[t+o];++i}return i!==t.length?(this.times=Hc.arraySlice(t,0,i),this.values=Hc.arraySlice(e,0,i*n)):(this.times=t,this.values=e),this}clone(){const t=Hc.arraySlice(this.times,0),e=Hc.arraySlice(this.values,0),n=new(0,this.constructor)(this.name,t,e);return n.createInterpolant=this.createInterpolant,n}}Wc.prototype.TimeBufferType=Float32Array,Wc.prototype.ValueBufferType=Float32Array,Wc.prototype.DefaultInterpolation=He;class qc extends Wc{}qc.prototype.ValueTypeName="bool",qc.prototype.ValueBufferType=Array,qc.prototype.DefaultInterpolation=ze,qc.prototype.InterpolantFactoryMethodLinear=void 0,qc.prototype.InterpolantFactoryMethodSmooth=void 0;class Xc extends Wc{}Xc.prototype.ValueTypeName="color";class Yc extends Wc{}Yc.prototype.ValueTypeName="number";class $c extends jc{constructor(t,e,n,l){super(t,e,n,l)}interpolate_(t,e,n,l){const r=this.resultBuffer,i=this.sampleValues,o=this.valueSize,u=(n-e)/(l-e);let s=t*o;for(let t=s+o;s!==t;s+=4)ol.slerpFlat(r,0,i,s-o,i,s,u);return r}}class Jc extends Wc{InterpolantFactoryMethodLinear(t){return new $c(this.times,this.values,this.getValueSize(),t)}}Jc.prototype.ValueTypeName="quaternion",Jc.prototype.DefaultInterpolation=He,Jc.prototype.InterpolantFactoryMethodSmooth=void 0;class Zc extends Wc{}Zc.prototype.ValueTypeName="string",Zc.prototype.ValueBufferType=Array,Zc.prototype.DefaultInterpolation=ze,Zc.prototype.InterpolantFactoryMethodLinear=void 0,Zc.prototype.InterpolantFactoryMethodSmooth=void 0;class Kc extends Wc{}Kc.prototype.ValueTypeName="vector";class Qc{constructor(t,e=-1,n,l=We){this.name=t,this.tracks=n,this.duration=e,this.blendMode=l,this.uuid=jn(),this.duration<0&&this.resetDuration()}static parse(t){const e=[],n=t.tracks,l=1/(t.fps||1);for(let t=0,r=n.length;t!==r;++t)e.push(th(n[t]).scale(l));const r=new this(t.name,t.duration,e,t.blendMode);return r.uuid=t.uuid,r}static toJSON(t){const e=[],n=t.tracks,l={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let t=0,l=n.length;t!==l;++t)e.push(Wc.toJSON(n[t]));return l}static CreateFromMorphTargetSequence(t,e,n,l){const r=e.length,i=[];for(let t=0;t<r;t++){let o=[],u=[];o.push((t+r-1)%r,t,(t+1)%r),u.push(0,1,0);const s=Hc.getKeyframeOrder(o);o=Hc.sortedArray(o,1,s),u=Hc.sortedArray(u,1,s),l||0!==o[0]||(o.push(r),u.push(u[0])),i.push(new Yc(".morphTargetInfluences["+e[t].name+"]",o,u).scale(1/n))}return new this(t,-1,i)}static findByName(t,e){let n=t;if(!Array.isArray(t)){const e=t;n=e.geometry&&e.geometry.animations||e.animations}for(let t=0;t<n.length;t++)if(n[t].name===e)return n[t];return null}static CreateClipsFromMorphTargetSequences(t,e,n){const l={},r=/^([\w-]*?)([\d]+)$/;for(let e=0,n=t.length;e<n;e++){const n=t[e],i=n.name.match(r);if(i&&i.length>1){const t=i[1];let e=l[t];e||(l[t]=e=[]),e.push(n)}}const i=[];for(const t in l)i.push(this.CreateFromMorphTargetSequence(t,l[t],e,n));return i}static parseAnimation(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const n=function(t,e,n,l,r){if(0!==n.length){const i=[],o=[];Hc.flattenJSON(n,i,o,l),0!==i.length&&r.push(new t(e,i,o))}},l=[],r=t.name||"default",i=t.fps||30,o=t.blendMode;let u=t.length||-1;const s=t.hierarchy||[];for(let t=0;t<s.length;t++){const r=s[t].keys;if(r&&0!==r.length)if(r[0].morphTargets){const t={};let e;for(e=0;e<r.length;e++)if(r[e].morphTargets)for(let n=0;n<r[e].morphTargets.length;n++)t[r[e].morphTargets[n]]=-1;for(const n in t){const t=[],i=[];for(let l=0;l!==r[e].morphTargets.length;++l){const l=r[e];t.push(l.time),i.push(l.morphTarget===n?1:0)}l.push(new Yc(".morphTargetInfluence["+n+"]",t,i))}u=t.length*(i||1)}else{const i=".bones["+e[t].name+"]";n(Kc,i+".position",r,"pos",l),n(Jc,i+".quaternion",r,"rot",l),n(Kc,i+".scale",r,"scl",l)}}return 0===l.length?null:new this(r,u,l,o)}resetDuration(){let t=0;for(let e=0,n=this.tracks.length;e!==n;++e){const n=this.tracks[e];t=Math.max(t,n.times[n.times.length-1])}return this.duration=t,this}trim(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this}validate(){let t=!0;for(let e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t}optimize(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function th(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Yc;case"vector":case"vector2":case"vector3":case"vector4":return Kc;case"color":return Xc;case"quaternion":return Jc;case"bool":case"boolean":return qc;case"string":return Zc}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){const e=[],n=[];Hc.flattenJSON(t.keys,e,n,"value"),t.times=e,t.values=n}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}const eh={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};class nh{constructor(t,e,n){const l=this;let r,i=!1,o=0,u=0;const s=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=n,this.itemStart=function(t){u++,!1===i&&void 0!==l.onStart&&l.onStart(t,o,u),i=!0},this.itemEnd=function(t){o++,void 0!==l.onProgress&&l.onProgress(t,o,u),o===u&&(i=!1,void 0!==l.onLoad&&l.onLoad())},this.itemError=function(t){void 0!==l.onError&&l.onError(t)},this.resolveURL=function(t){return r?r(t):t},this.setURLModifier=function(t){return r=t,this},this.addHandler=function(t,e){return s.push(t,e),this},this.removeHandler=function(t){const e=s.indexOf(t);return-1!==e&&s.splice(e,2),this},this.getHandler=function(t){for(let e=0,n=s.length;e<n;e+=2){const n=s[e],l=s[e+1];if(n.global&&(n.lastIndex=0),n.test(t))return l}return null}}}const lh=new nh;class rh{constructor(t){this.manager=void 0!==t?t:lh,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,e){const n=this;return new Promise((function(l,r){n.load(t,l,e,r)}))}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}const ih={};class oh extends rh{constructor(t){super(t)}load(t,e,n,l){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,i=eh.get(t);if(void 0!==i)return r.manager.itemStart(t),setTimeout((function(){e&&e(i),r.manager.itemEnd(t)}),0),i;if(void 0!==ih[t])return void ih[t].push({onLoad:e,onProgress:n,onError:l});const o=t.match(/^data:(.*?)(;base64)?,(.*)$/);let u;if(o){const n=o[1],i=!!o[2];let u=o[3];u=decodeURIComponent(u),i&&(u=atob(u));try{let l;const i=(this.responseType||"").toLowerCase();switch(i){case"arraybuffer":case"blob":const t=new Uint8Array(u.length);for(let e=0;e<u.length;e++)t[e]=u.charCodeAt(e);l="blob"===i?new Blob([t.buffer],{type:n}):t.buffer;break;case"document":const e=new DOMParser;l=e.parseFromString(u,n);break;case"json":l=JSON.parse(u);break;default:l=u}setTimeout((function(){e&&e(l),r.manager.itemEnd(t)}),0)}catch(e){setTimeout((function(){l&&l(e),r.manager.itemError(t),r.manager.itemEnd(t)}),0)}}else{ih[t]=[],ih[t].push({onLoad:e,onProgress:n,onError:l}),u=new XMLHttpRequest,u.open("GET",t,!0),u.addEventListener("load",(function(e){const n=this.response,l=ih[t];if(delete ih[t],200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),eh.add(t,n);for(let t=0,e=l.length;t<e;t++){const e=l[t];e.onLoad&&e.onLoad(n)}r.manager.itemEnd(t)}else{for(let t=0,n=l.length;t<n;t++){const n=l[t];n.onError&&n.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)}}),!1),u.addEventListener("progress",(function(e){const n=ih[t];for(let t=0,l=n.length;t<l;t++){const l=n[t];l.onProgress&&l.onProgress(e)}}),!1),u.addEventListener("error",(function(e){const n=ih[t];delete ih[t];for(let t=0,l=n.length;t<l;t++){const l=n[t];l.onError&&l.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)}),!1),u.addEventListener("abort",(function(e){const n=ih[t];delete ih[t];for(let t=0,l=n.length;t<l;t++){const l=n[t];l.onError&&l.onError(e)}r.manager.itemError(t),r.manager.itemEnd(t)}),!1),void 0!==this.responseType&&(u.responseType=this.responseType),void 0!==this.withCredentials&&(u.withCredentials=this.withCredentials),u.overrideMimeType&&u.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain");for(const t in this.requestHeader)u.setRequestHeader(t,this.requestHeader[t]);u.send(null)}return r.manager.itemStart(t),u}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class uh extends rh{constructor(t){super(t)}load(t,e,n,l){const r=this,i=new oh(this.manager);i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials),i.load(t,(function(n){try{e(r.parse(JSON.parse(n)))}catch(e){l?l(e):console.error(e),r.manager.itemError(t)}}),n,l)}parse(t){const e=[];for(let n=0;n<t.length;n++){const l=Qc.parse(t[n]);e.push(l)}return e}}class sh extends rh{constructor(t){super(t)}load(t,e,n,l){const r=this,i=[],o=new ua,u=new oh(this.manager);u.setPath(this.path),u.setResponseType("arraybuffer"),u.setRequestHeader(this.requestHeader),u.setWithCredentials(r.withCredentials);let s=0;function a(a){u.load(t[a],(function(t){const n=r.parse(t,!0);i[a]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps},s+=1,6===s&&(1===n.mipmapCount&&(o.minFilter=xt),o.image=i,o.format=n.format,o.needsUpdate=!0,e&&e(o))}),n,l)}if(Array.isArray(t))for(let e=0,n=t.length;e<n;++e)a(e);else u.load(t,(function(t){const n=r.parse(t,!0);if(n.isCubemap){const t=n.mipmaps.length/n.mipmapCount;for(let e=0;e<t;e++){i[e]={mipmaps:[]};for(let t=0;t<n.mipmapCount;t++)i[e].mipmaps.push(n.mipmaps[e*n.mipmapCount+t]),i[e].format=n.format,i[e].width=n.width,i[e].height=n.height}o.image=i}else o.image.width=n.width,o.image.height=n.height,o.mipmaps=n.mipmaps;1===n.mipmapCount&&(o.minFilter=xt),o.format=n.format,o.needsUpdate=!0,e&&e(o)}),n,l);return o}}class ah extends rh{constructor(t){super(t)}load(t,e,n,l){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,i=eh.get(t);if(void 0!==i)return r.manager.itemStart(t),setTimeout((function(){e&&e(i),r.manager.itemEnd(t)}),0),i;const o=document.createElementNS("http://www.w3.org/1999/xhtml","img");function u(){o.removeEventListener("load",u,!1),o.removeEventListener("error",s,!1),eh.add(t,this),e&&e(this),r.manager.itemEnd(t)}function s(e){o.removeEventListener("load",u,!1),o.removeEventListener("error",s,!1),l&&l(e),r.manager.itemError(t),r.manager.itemEnd(t)}return o.addEventListener("load",u,!1),o.addEventListener("error",s,!1),"data:"!==t.substr(0,5)&&void 0!==this.crossOrigin&&(o.crossOrigin=this.crossOrigin),r.manager.itemStart(t),o.src=t,o}}class ch extends rh{constructor(t){super(t)}load(t,e,n,l){const r=new Ci,i=new ah(this.manager);i.setCrossOrigin(this.crossOrigin),i.setPath(this.path);let o=0;function u(n){i.load(t[n],(function(t){r.images[n]=t,o++,6===o&&(r.needsUpdate=!0,e&&e(r))}),void 0,l)}for(let e=0;e<t.length;++e)u(e);return r}}class hh extends rh{constructor(t){super(t)}load(t,e,n,l){const r=this,i=new Is,o=new oh(this.manager);return o.setResponseType("arraybuffer"),o.setRequestHeader(this.requestHeader),o.setPath(this.path),o.setWithCredentials(r.withCredentials),o.load(t,(function(t){const n=r.parse(t);n&&(void 0!==n.image?i.image=n.image:void 0!==n.data&&(i.image.width=n.width,i.image.height=n.height,i.image.data=n.data),i.wrapS=void 0!==n.wrapS?n.wrapS:dt,i.wrapT=void 0!==n.wrapT?n.wrapT:dt,i.magFilter=void 0!==n.magFilter?n.magFilter:xt,i.minFilter=void 0!==n.minFilter?n.minFilter:xt,i.anisotropy=void 0!==n.anisotropy?n.anisotropy:1,void 0!==n.encoding&&(i.encoding=n.encoding),void 0!==n.flipY&&(i.flipY=n.flipY),void 0!==n.format&&(i.format=n.format),void 0!==n.type&&(i.type=n.type),void 0!==n.mipmaps&&(i.mipmaps=n.mipmaps,i.minFilter=_t),1===n.mipmapCount&&(i.minFilter=xt),void 0!==n.generateMipmaps&&(i.generateMipmaps=n.generateMipmaps),i.needsUpdate=!0,e&&e(i,n))}),n,l),i}}class dh extends rh{constructor(t){super(t)}load(t,e,n,l){const r=new tl,i=new ah(this.manager);return i.setCrossOrigin(this.crossOrigin),i.setPath(this.path),i.load(t,(function(n){r.image=n;const l=t.search(/\.jpe?g($|\?)/i)>0||0===t.search(/^data\:image\/jpeg/);r.format=l?Bt:Ft,r.needsUpdate=!0,void 0!==e&&e(r)}),n,l),r}}class ph extends ba{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new Da(e,t))}getPoint(t){const e=t*this.getLength(),n=this.getCurveLengths();let l=0;for(;l<n.length;){if(n[l]>=e){const t=n[l]-e,r=this.curves[l],i=r.getLength(),o=0===i?0:1-t/i;return r.getPointAt(o)}l++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const t=[];let e=0;for(let n=0,l=this.curves.length;n<l;n++)e+=this.curves[n].getLength(),t.push(e);return this.cacheLengths=t,t}getSpacedPoints(t=40){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return this.autoClose&&e.push(e[0]),e}getPoints(t=12){const e=[];let n;for(let l=0,r=this.curves;l<r.length;l++){const i=r[l],o=i&&i.isEllipseCurve?2*t:i&&(i.isLineCurve||i.isLineCurve3)?1:i&&i.isSplineCurve?t*i.points.length:t,u=i.getPoints(o);for(let t=0;t<u.length;t++){const l=u[t];n&&n.equals(l)||(e.push(l),n=l)}}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e}copy(t){super.copy(t),this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push(n.clone())}return this.autoClose=t.autoClose,this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose,t.curves=[];for(let e=0,n=this.curves.length;e<n;e++){const n=this.curves[e];t.curves.push(n.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.autoClose=t.autoClose,this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push((new za[n.type]).fromJSON(n))}return this}}class fh extends ph{constructor(t){super(),this.type="Path",this.currentPoint=new $n,t&&this.setFromPoints(t)}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let e=1,n=t.length;e<n;e++)this.lineTo(t[e].x,t[e].y);return this}moveTo(t,e){return this.currentPoint.set(t,e),this}lineTo(t,e){const n=new Da(this.currentPoint.clone(),new $n(t,e));return this.curves.push(n),this.currentPoint.set(t,e),this}quadraticCurveTo(t,e,n,l){const r=new Na(this.currentPoint.clone(),new $n(t,e),new $n(n,l));return this.curves.push(r),this.currentPoint.set(n,l),this}bezierCurveTo(t,e,n,l,r,i){const o=new Oa(this.currentPoint.clone(),new $n(t,e),new $n(n,l),new $n(r,i));return this.curves.push(o),this.currentPoint.set(r,i),this}splineThru(t){const e=[this.currentPoint.clone()].concat(t),n=new Fa(e);return this.curves.push(n),this.currentPoint.copy(t[t.length-1]),this}arc(t,e,n,l,r,i){const o=this.currentPoint.x,u=this.currentPoint.y;return this.absarc(t+o,e+u,n,l,r,i),this}absarc(t,e,n,l,r,i){return this.absellipse(t,e,n,n,l,r,i),this}ellipse(t,e,n,l,r,i,o,u){const s=this.currentPoint.x,a=this.currentPoint.y;return this.absellipse(t+s,e+a,n,l,r,i,o,u),this}absellipse(t,e,n,l,r,i,o,u){const s=new wa(t,e,n,l,r,i,o,u);if(this.curves.length>0){const t=s.getPoint(0);t.equals(this.currentPoint)||this.lineTo(t.x,t.y)}this.curves.push(s);const a=s.getPoint(1);return this.currentPoint.copy(a),this}copy(t){return super.copy(t),this.currentPoint.copy(t.currentPoint),this}toJSON(){const t=super.toJSON();return t.currentPoint=this.currentPoint.toArray(),t}fromJSON(t){return super.fromJSON(t),this.currentPoint.fromArray(t.currentPoint),this}}class mh extends fh{constructor(t){super(t),this.uuid=jn(),this.type="Shape",this.holes=[]}getPointsHoles(t){const e=[];for(let n=0,l=this.holes.length;n<l;n++)e[n]=this.holes[n].getPoints(t);return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(t){super.copy(t),this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push(n.clone())}return this}toJSON(){const t=super.toJSON();t.uuid=this.uuid,t.holes=[];for(let e=0,n=this.holes.length;e<n;e++){const n=this.holes[e];t.holes.push(n.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.uuid=t.uuid,this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push((new fh).fromJSON(n))}return this}}class gh extends ar{constructor(t,e=1){super(),this.type="Light",this.color=new Cr(t),this.intensity=e}dispose(){}copy(t){return super.copy(t),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}gh.prototype.isLight=!0;class vh extends gh{constructor(t,e,n){super(t,n),this.type="HemisphereLight",this.position.copy(ar.DefaultUp),this.updateMatrix(),this.groundColor=new Cr(e)}copy(t){return gh.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}vh.prototype.isHemisphereLight=!0;const yh=new Fl,xh=new ul,bh=new ul;class wh{constructor(t){this.camera=t,this.bias=0,this.normalBias=0,this.radius=1,this.mapSize=new $n(512,512),this.map=null,this.mapPass=null,this.matrix=new Fl,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Bi,this._frameExtents=new $n(1,1),this._viewportCount=1,this._viewports=[new nl(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,n=this.matrix;xh.setFromMatrixPosition(t.matrixWorld),e.position.copy(xh),bh.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(bh),e.updateMatrixWorld(),yh.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(yh),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(e.projectionMatrix),n.multiply(e.matrixWorldInverse)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};return 0!==this.bias&&(t.bias=this.bias),0!==this.normalBias&&(t.normalBias=this.normalBias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class _h extends wh{constructor(){super(new Ti(50,1,.5,500)),this.focus=1}updateMatrices(t){const e=this.camera,n=2*Hn*t.angle*this.focus,l=this.mapSize.width/this.mapSize.height,r=t.distance||e.far;n===e.fov&&l===e.aspect&&r===e.far||(e.fov=n,e.aspect=l,e.far=r,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}_h.prototype.isSpotLightShadow=!0;class Mh extends gh{constructor(t,e,n=0,l=Math.PI/3,r=0,i=1){super(t,e),this.type="SpotLight",this.position.copy(ar.DefaultUp),this.updateMatrix(),this.target=new ar,this.distance=n,this.angle=l,this.penumbra=r,this.decay=i,this.shadow=new _h}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}Mh.prototype.isSpotLight=!0;const Sh=new Fl,Eh=new ul,Th=new ul;class Ah extends wh{constructor(){super(new Ti(90,1,.5,500)),this._frameExtents=new $n(4,2),this._viewportCount=6,this._viewports=[new nl(2,1,1,1),new nl(0,1,1,1),new nl(3,1,1,1),new nl(1,1,1,1),new nl(3,0,1,1),new nl(1,0,1,1)],this._cubeDirections=[new ul(1,0,0),new ul(-1,0,0),new ul(0,0,1),new ul(0,0,-1),new ul(0,1,0),new ul(0,-1,0)],this._cubeUps=[new ul(0,1,0),new ul(0,1,0),new ul(0,1,0),new ul(0,1,0),new ul(0,0,1),new ul(0,0,-1)]}updateMatrices(t,e=0){const n=this.camera,l=this.matrix,r=t.distance||n.far;r!==n.far&&(n.far=r,n.updateProjectionMatrix()),Eh.setFromMatrixPosition(t.matrixWorld),n.position.copy(Eh),Th.copy(n.position),Th.add(this._cubeDirections[e]),n.up.copy(this._cubeUps[e]),n.lookAt(Th),n.updateMatrixWorld(),l.makeTranslation(-Eh.x,-Eh.y,-Eh.z),Sh.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Sh)}}Ah.prototype.isPointLightShadow=!0;class Lh extends gh{constructor(t,e,n=0,l=1){super(t,e),this.type="PointLight",this.distance=n,this.decay=l,this.shadow=new Ah}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}Lh.prototype.isPointLight=!0;class Ch extends Ei{constructor(t=-1,e=1,n=1,l=-1,r=.1,i=2e3){super(),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=l,this.near=r,this.far=i,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this}setViewOffset(t,e,n,l,r,i){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=l,this.view.width=r,this.view.height=i,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,l=(this.top+this.bottom)/2;let r=n-t,i=n+t,o=l+e,u=l-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=t*this.view.offsetX,i=r+t*this.view.width,o-=e*this.view.offsetY,u=o-e*this.view.height}this.projectionMatrix.makeOrthographic(r,i,o,u,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}Ch.prototype.isOrthographicCamera=!0;class Ph extends wh{constructor(){super(new Ch(-5,5,5,-5,.5,500))}}Ph.prototype.isDirectionalLightShadow=!0;class Rh extends gh{constructor(t,e){super(t,e),this.type="DirectionalLight",this.position.copy(ar.DefaultUp),this.updateMatrix(),this.target=new ar,this.shadow=new Ph}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}Rh.prototype.isDirectionalLight=!0;class Oh extends gh{constructor(t,e){super(t,e),this.type="AmbientLight"}}Oh.prototype.isAmbientLight=!0;class Ih extends gh{constructor(t,e,n=10,l=10){super(t,e),this.type="RectAreaLight",this.width=n,this.height=l}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}Ih.prototype.isRectAreaLight=!0;class Dh{constructor(){this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new ul)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const n=t.x,l=t.y,r=t.z,i=this.coefficients;return e.copy(i[0]).multiplyScalar(.282095),e.addScaledVector(i[1],.488603*l),e.addScaledVector(i[2],.488603*r),e.addScaledVector(i[3],.488603*n),e.addScaledVector(i[4],n*l*1.092548),e.addScaledVector(i[5],l*r*1.092548),e.addScaledVector(i[6],.315392*(3*r*r-1)),e.addScaledVector(i[7],n*r*1.092548),e.addScaledVector(i[8],.546274*(n*n-l*l)),e}getIrradianceAt(t,e){const n=t.x,l=t.y,r=t.z,i=this.coefficients;return e.copy(i[0]).multiplyScalar(.886227),e.addScaledVector(i[1],1.023328*l),e.addScaledVector(i[2],1.023328*r),e.addScaledVector(i[3],1.023328*n),e.addScaledVector(i[4],.858086*n*l),e.addScaledVector(i[5],.858086*l*r),e.addScaledVector(i[6],.743125*r*r-.247708),e.addScaledVector(i[7],.858086*n*r),e.addScaledVector(i[8],.429043*(n*n-l*l)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(t.coefficients[n],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let n=0;n<9;n++)this.coefficients[n].lerp(t.coefficients[n],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){const n=this.coefficients;for(let l=0;l<9;l++)n[l].fromArray(t,e+3*l);return this}toArray(t=[],e=0){const n=this.coefficients;for(let l=0;l<9;l++)n[l].toArray(t,e+3*l);return t}static getBasisAt(t,e){const n=t.x,l=t.y,r=t.z;e[0]=.282095,e[1]=.488603*l,e[2]=.488603*r,e[3]=.488603*n,e[4]=1.092548*n*l,e[5]=1.092548*l*r,e[6]=.315392*(3*r*r-1),e[7]=1.092548*n*r,e[8]=.546274*(n*n-l*l)}}Dh.prototype.isSphericalHarmonics3=!0;class kh extends gh{constructor(t=new Dh,e=1){super(void 0,e),this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}kh.prototype.isLightProbe=!0;class Nh extends rh{constructor(t){super(t),this.textures={}}load(t,e,n,l){const r=this,i=new oh(r.manager);i.setPath(r.path),i.setRequestHeader(r.requestHeader),i.setWithCredentials(r.withCredentials),i.load(t,(function(n){try{e(r.parse(JSON.parse(n)))}catch(e){l?l(e):console.error(e),r.manager.itemError(t)}}),n,l)}parse(t){const e=this.textures;function n(t){return void 0===e[t]&&console.warn("THREE.MaterialLoader: Undefined texture",t),e[t]}const l=new zc[t.type];if(void 0!==t.uuid&&(l.uuid=t.uuid),void 0!==t.name&&(l.name=t.name),void 0!==t.color&&void 0!==l.color&&l.color.setHex(t.color),void 0!==t.roughness&&(l.roughness=t.roughness),void 0!==t.metalness&&(l.metalness=t.metalness),void 0!==t.sheen&&(l.sheen=(new Cr).setHex(t.sheen)),void 0!==t.emissive&&void 0!==l.emissive&&l.emissive.setHex(t.emissive),void 0!==t.specular&&void 0!==l.specular&&l.specular.setHex(t.specular),void 0!==t.shininess&&(l.shininess=t.shininess),void 0!==t.clearcoat&&(l.clearcoat=t.clearcoat),void 0!==t.clearcoatRoughness&&(l.clearcoatRoughness=t.clearcoatRoughness),void 0!==t.transmission&&(l.transmission=t.transmission),void 0!==t.thickness&&(l.thickness=t.thickness),void 0!==t.attenuationDistance&&(l.attenuationDistance=t.attenuationDistance),void 0!==t.attenuationColor&&void 0!==l.attenuationColor&&l.attenuationColor.setHex(t.attenuationColor),void 0!==t.fog&&(l.fog=t.fog),void 0!==t.flatShading&&(l.flatShading=t.flatShading),void 0!==t.blending&&(l.blending=t.blending),void 0!==t.combine&&(l.combine=t.combine),void 0!==t.side&&(l.side=t.side),void 0!==t.shadowSide&&(l.shadowSide=t.shadowSide),void 0!==t.opacity&&(l.opacity=t.opacity),void 0!==t.transparent&&(l.transparent=t.transparent),void 0!==t.alphaTest&&(l.alphaTest=t.alphaTest),void 0!==t.depthTest&&(l.depthTest=t.depthTest),void 0!==t.depthWrite&&(l.depthWrite=t.depthWrite),void 0!==t.colorWrite&&(l.colorWrite=t.colorWrite),void 0!==t.stencilWrite&&(l.stencilWrite=t.stencilWrite),void 0!==t.stencilWriteMask&&(l.stencilWriteMask=t.stencilWriteMask),void 0!==t.stencilFunc&&(l.stencilFunc=t.stencilFunc),void 0!==t.stencilRef&&(l.stencilRef=t.stencilRef),void 0!==t.stencilFuncMask&&(l.stencilFuncMask=t.stencilFuncMask),void 0!==t.stencilFail&&(l.stencilFail=t.stencilFail),void 0!==t.stencilZFail&&(l.stencilZFail=t.stencilZFail),void 0!==t.stencilZPass&&(l.stencilZPass=t.stencilZPass),void 0!==t.wireframe&&(l.wireframe=t.wireframe),void 0!==t.wireframeLinewidth&&(l.wireframeLinewidth=t.wireframeLinewidth),void 0!==t.wireframeLinecap&&(l.wireframeLinecap=t.wireframeLinecap),void 0!==t.wireframeLinejoin&&(l.wireframeLinejoin=t.wireframeLinejoin),void 0!==t.rotation&&(l.rotation=t.rotation),1!==t.linewidth&&(l.linewidth=t.linewidth),void 0!==t.dashSize&&(l.dashSize=t.dashSize),void 0!==t.gapSize&&(l.gapSize=t.gapSize),void 0!==t.scale&&(l.scale=t.scale),void 0!==t.polygonOffset&&(l.polygonOffset=t.polygonOffset),void 0!==t.polygonOffsetFactor&&(l.polygonOffsetFactor=t.polygonOffsetFactor),void 0!==t.polygonOffsetUnits&&(l.polygonOffsetUnits=t.polygonOffsetUnits),void 0!==t.morphTargets&&(l.morphTargets=t.morphTargets),void 0!==t.morphNormals&&(l.morphNormals=t.morphNormals),void 0!==t.dithering&&(l.dithering=t.dithering),void 0!==t.alphaToCoverage&&(l.alphaToCoverage=t.alphaToCoverage),void 0!==t.premultipliedAlpha&&(l.premultipliedAlpha=t.premultipliedAlpha),void 0!==t.vertexTangents&&(l.vertexTangents=t.vertexTangents),void 0!==t.visible&&(l.visible=t.visible),void 0!==t.toneMapped&&(l.toneMapped=t.toneMapped),void 0!==t.userData&&(l.userData=t.userData),void 0!==t.vertexColors&&("number"==typeof t.vertexColors?l.vertexColors=t.vertexColors>0:l.vertexColors=t.vertexColors),void 0!==t.uniforms)for(const e in t.uniforms){const r=t.uniforms[e];switch(l.uniforms[e]={},r.type){case"t":l.uniforms[e].value=n(r.value);break;case"c":l.uniforms[e].value=(new Cr).setHex(r.value);break;case"v2":l.uniforms[e].value=(new $n).fromArray(r.value);break;case"v3":l.uniforms[e].value=(new ul).fromArray(r.value);break;case"v4":l.uniforms[e].value=(new nl).fromArray(r.value);break;case"m3":l.uniforms[e].value=(new Jn).fromArray(r.value);break;case"m4":l.uniforms[e].value=(new Fl).fromArray(r.value);break;default:l.uniforms[e].value=r.value}}if(void 0!==t.defines&&(l.defines=t.defines),void 0!==t.vertexShader&&(l.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(l.fragmentShader=t.fragmentShader),void 0!==t.extensions)for(const e in t.extensions)l.extensions[e]=t.extensions[e];if(void 0!==t.shading&&(l.flatShading=1===t.shading),void 0!==t.size&&(l.size=t.size),void 0!==t.sizeAttenuation&&(l.sizeAttenuation=t.sizeAttenuation),void 0!==t.map&&(l.map=n(t.map)),void 0!==t.matcap&&(l.matcap=n(t.matcap)),void 0!==t.alphaMap&&(l.alphaMap=n(t.alphaMap)),void 0!==t.bumpMap&&(l.bumpMap=n(t.bumpMap)),void 0!==t.bumpScale&&(l.bumpScale=t.bumpScale),void 0!==t.normalMap&&(l.normalMap=n(t.normalMap)),void 0!==t.normalMapType&&(l.normalMapType=t.normalMapType),void 0!==t.normalScale){let e=t.normalScale;!1===Array.isArray(e)&&(e=[e,e]),l.normalScale=(new $n).fromArray(e)}return void 0!==t.displacementMap&&(l.displacementMap=n(t.displacementMap)),void 0!==t.displacementScale&&(l.displacementScale=t.displacementScale),void 0!==t.displacementBias&&(l.displacementBias=t.displacementBias),void 0!==t.roughnessMap&&(l.roughnessMap=n(t.roughnessMap)),void 0!==t.metalnessMap&&(l.metalnessMap=n(t.metalnessMap)),void 0!==t.emissiveMap&&(l.emissiveMap=n(t.emissiveMap)),void 0!==t.emissiveIntensity&&(l.emissiveIntensity=t.emissiveIntensity),void 0!==t.specularMap&&(l.specularMap=n(t.specularMap)),void 0!==t.envMap&&(l.envMap=n(t.envMap)),void 0!==t.envMapIntensity&&(l.envMapIntensity=t.envMapIntensity),void 0!==t.reflectivity&&(l.reflectivity=t.reflectivity),void 0!==t.refractionRatio&&(l.refractionRatio=t.refractionRatio),void 0!==t.lightMap&&(l.lightMap=n(t.lightMap)),void 0!==t.lightMapIntensity&&(l.lightMapIntensity=t.lightMapIntensity),void 0!==t.aoMap&&(l.aoMap=n(t.aoMap)),void 0!==t.aoMapIntensity&&(l.aoMapIntensity=t.aoMapIntensity),void 0!==t.gradientMap&&(l.gradientMap=n(t.gradientMap)),void 0!==t.clearcoatMap&&(l.clearcoatMap=n(t.clearcoatMap)),void 0!==t.clearcoatRoughnessMap&&(l.clearcoatRoughnessMap=n(t.clearcoatRoughnessMap)),void 0!==t.clearcoatNormalMap&&(l.clearcoatNormalMap=n(t.clearcoatNormalMap)),void 0!==t.clearcoatNormalScale&&(l.clearcoatNormalScale=(new $n).fromArray(t.clearcoatNormalScale)),void 0!==t.transmissionMap&&(l.transmissionMap=n(t.transmissionMap)),void 0!==t.thicknessMap&&(l.thicknessMap=n(t.thicknessMap)),l}setTextures(t){return this.textures=t,this}}class Bh{static decodeText(t){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);let e="";for(let n=0,l=t.length;n<l;n++)e+=String.fromCharCode(t[n]);try{return decodeURIComponent(escape(e))}catch(t){return e}}static extractUrlBase(t){const e=t.lastIndexOf("/");return-1===e?"./":t.substr(0,e+1)}}class Fh extends ti{constructor(){super(),this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(t){return super.copy(t),this.instanceCount=t.instanceCount,this}clone(){return(new this.constructor).copy(this)}toJSON(){const t=super.toJSON(this);return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}Fh.prototype.isInstancedBufferGeometry=!0;class zh extends Ir{constructor(t,e,n,l=1){"number"==typeof n&&(l=n,n=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),super(t,e,n),this.meshPerAttribute=l}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}zh.prototype.isInstancedBufferAttribute=!0;class Hh extends rh{constructor(t){super(t)}load(t,e,n,l){const r=this,i=new oh(r.manager);i.setPath(r.path),i.setRequestHeader(r.requestHeader),i.setWithCredentials(r.withCredentials),i.load(t,(function(n){try{e(r.parse(JSON.parse(n)))}catch(e){l?l(e):console.error(e),r.manager.itemError(t)}}),n,l)}parse(t){const e={},n={};function l(t,l){if(void 0!==e[l])return e[l];const r=t.interleavedBuffers[l],i=function(t,e){if(void 0!==n[e])return n[e];const l=t.arrayBuffers[e],r=new Uint32Array(l).buffer;return n[e]=r,r}(t,r.buffer),o=qr(r.type,i),u=new rs(o,r.stride);return u.uuid=r.uuid,e[l]=u,u}const r=t.isInstancedBufferGeometry?new Fh:new ti,i=t.data.index;if(void 0!==i){const t=qr(i.type,i.array);r.setIndex(new Ir(t,1))}const o=t.data.attributes;for(const e in o){const n=o[e];let i;if(n.isInterleavedBufferAttribute){const e=l(t.data,n.data);i=new os(e,n.itemSize,n.offset,n.normalized)}else{const t=qr(n.type,n.array);i=new(n.isInstancedBufferAttribute?zh:Ir)(t,n.itemSize,n.normalized)}void 0!==n.name&&(i.name=n.name),void 0!==n.usage&&i.setUsage(n.usage),void 0!==n.updateRange&&(i.updateRange.offset=n.updateRange.offset,i.updateRange.count=n.updateRange.count),r.setAttribute(e,i)}const u=t.data.morphAttributes;if(u)for(const e in u){const n=u[e],i=[];for(let e=0,r=n.length;e<r;e++){const r=n[e];let o;if(r.isInterleavedBufferAttribute){const e=l(t.data,r.data);o=new os(e,r.itemSize,r.offset,r.normalized)}else{const t=qr(r.type,r.array);o=new Ir(t,r.itemSize,r.normalized)}void 0!==r.name&&(o.name=r.name),i.push(o)}r.morphAttributes[e]=i}t.data.morphTargetsRelative&&(r.morphTargetsRelative=!0);const s=t.data.groups||t.data.drawcalls||t.data.offsets;if(void 0!==s)for(let t=0,e=s.length;t!==e;++t){const e=s[t];r.addGroup(e.start,e.count,e.materialIndex)}const a=t.data.boundingSphere;if(void 0!==a){const t=new ul;void 0!==a.center&&t.fromArray(a.center),r.boundingSphere=new Cl(t,a.radius)}return t.name&&(r.name=t.name),t.userData&&(r.userData=t.userData),r}}class jh extends rh{constructor(t){super(t)}load(t,e,n,l){const r=this,i=""===this.path?Bh.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||i;const o=new oh(this.manager);o.setPath(this.path),o.setRequestHeader(this.requestHeader),o.setWithCredentials(this.withCredentials),o.load(t,(function(n){let i=null;try{i=JSON.parse(n)}catch(e){return void 0!==l&&l(e),void console.error("THREE:ObjectLoader: Can't parse "+t+".",e.message)}const o=i.metadata;void 0!==o&&void 0!==o.type&&"geometry"!==o.type.toLowerCase()?r.parse(i,e):console.error("THREE.ObjectLoader: Can't load "+t)}),n,l)}async loadAsync(t,e){const n=""===this.path?Bh.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||n;const l=new oh(this.manager);l.setPath(this.path),l.setRequestHeader(this.requestHeader),l.setWithCredentials(this.withCredentials);const r=await l.loadAsync(t,e),i=JSON.parse(r),o=i.metadata;if(void 0===o||void 0===o.type||"geometry"===o.type.toLowerCase())throw new Error("THREE.ObjectLoader: Can't load "+t);return await this.parseAsync(i)}parse(t,e){const n=this.parseAnimations(t.animations),l=this.parseShapes(t.shapes),r=this.parseGeometries(t.geometries,l),i=this.parseImages(t.images,(function(){void 0!==e&&e(s)})),o=this.parseTextures(t.textures,i),u=this.parseMaterials(t.materials,o),s=this.parseObject(t.object,r,u,o,n),a=this.parseSkeletons(t.skeletons,s);if(this.bindSkeletons(s,a),void 0!==e){let t=!1;for(const e in i)if(i[e]instanceof HTMLImageElement){t=!0;break}!1===t&&e(s)}return s}async parseAsync(t){const e=this.parseAnimations(t.animations),n=this.parseShapes(t.shapes),l=this.parseGeometries(t.geometries,n),r=await this.parseImagesAsync(t.images),i=this.parseTextures(t.textures,r),o=this.parseMaterials(t.materials,i),u=this.parseObject(t.object,l,o,i,e),s=this.parseSkeletons(t.skeletons,u);return this.bindSkeletons(u,s),u}parseShapes(t){const e={};if(void 0!==t)for(let n=0,l=t.length;n<l;n++){const l=(new mh).fromJSON(t[n]);e[l.uuid]=l}return e}parseSkeletons(t,e){const n={},l={};if(e.traverse((function(t){t.isBone&&(l[t.uuid]=t)})),void 0!==t)for(let e=0,r=t.length;e<r;e++){const r=(new Ns).fromJSON(t[e],l);n[r.uuid]=r}return n}parseGeometries(t,e){const n={};if(void 0!==t){const l=new Hh;for(let r=0,i=t.length;r<i;r++){let i;const o=t[r];switch(o.type){case"BufferGeometry":case"InstancedBufferGeometry":i=l.parse(o);break;case"Geometry":console.error("THREE.ObjectLoader: The legacy Geometry type is no longer supported.");break;default:o.type in Lc?i=Lc[o.type].fromJSON(o,e):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${o.type}"`)}i.uuid=o.uuid,void 0!==o.name&&(i.name=o.name),!0===i.isBufferGeometry&&void 0!==o.userData&&(i.userData=o.userData),n[o.uuid]=i}}return n}parseMaterials(t,e){const n={},l={};if(void 0!==t){const r=new Nh;r.setTextures(e);for(let e=0,i=t.length;e<i;e++){const i=t[e];if("MultiMaterial"===i.type){const t=[];for(let e=0;e<i.materials.length;e++){const l=i.materials[e];void 0===n[l.uuid]&&(n[l.uuid]=r.parse(l)),t.push(n[l.uuid])}l[i.uuid]=t}else void 0===n[i.uuid]&&(n[i.uuid]=r.parse(i)),l[i.uuid]=n[i.uuid]}}return l}parseAnimations(t){const e={};if(void 0!==t)for(let n=0;n<t.length;n++){const l=t[n],r=Qc.parse(l);e[r.uuid]=r}return e}parseImages(t,e){const n=this,l={};let r;function i(t){if("string"==typeof t){const e=t;return function(t){return n.manager.itemStart(t),r.load(t,(function(){n.manager.itemEnd(t)}),void 0,(function(){n.manager.itemError(t),n.manager.itemEnd(t)}))}(/^(\/\/)|([a-z]+:(\/\/)?)/i.test(e)?e:n.resourcePath+e)}return t.data?{data:qr(t.type,t.data),width:t.width,height:t.height}:null}if(void 0!==t&&t.length>0){const n=new nh(e);r=new ah(n),r.setCrossOrigin(this.crossOrigin);for(let e=0,n=t.length;e<n;e++){const n=t[e],r=n.url;if(Array.isArray(r)){l[n.uuid]=[];for(let t=0,e=r.length;t<e;t++){const e=i(r[t]);null!==e&&(e instanceof HTMLImageElement?l[n.uuid].push(e):l[n.uuid].push(new Is(e.data,e.width,e.height)))}}else{const t=i(n.url);null!==t&&(l[n.uuid]=t)}}}return l}async parseImagesAsync(t){const e=this,n={};let l;async function r(t){if("string"==typeof t){const n=t,r=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(n)?n:e.resourcePath+n;return await l.loadAsync(r)}return t.data?{data:qr(t.type,t.data),width:t.width,height:t.height}:null}if(void 0!==t&&t.length>0){l=new ah(this.manager),l.setCrossOrigin(this.crossOrigin);for(let e=0,l=t.length;e<l;e++){const l=t[e],i=l.url;if(Array.isArray(i)){n[l.uuid]=[];for(let t=0,e=i.length;t<e;t++){const e=i[t],o=await r(e);null!==o&&(o instanceof HTMLImageElement?n[l.uuid].push(o):n[l.uuid].push(new Is(o.data,o.width,o.height)))}}else{const t=await r(l.url);null!==t&&(n[l.uuid]=t)}}}return n}parseTextures(t,e){function n(t,e){return"number"==typeof t?t:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",t),e[t])}const l={};if(void 0!==t)for(let r=0,i=t.length;r<i;r++){const i=t[r];let o;void 0===i.image&&console.warn('THREE.ObjectLoader: No "image" specified for',i.uuid),void 0===e[i.image]&&console.warn("THREE.ObjectLoader: Undefined image",i.image);const u=e[i.image];Array.isArray(u)?(o=new Ci(u),6===u.length&&(o.needsUpdate=!0)):(o=u&&u.data?new Is(u.data,u.width,u.height):new tl(u),u&&(o.needsUpdate=!0)),o.uuid=i.uuid,void 0!==i.name&&(o.name=i.name),void 0!==i.mapping&&(o.mapping=n(i.mapping,Uh)),void 0!==i.offset&&o.offset.fromArray(i.offset),void 0!==i.repeat&&o.repeat.fromArray(i.repeat),void 0!==i.center&&o.center.fromArray(i.center),void 0!==i.rotation&&(o.rotation=i.rotation),void 0!==i.wrap&&(o.wrapS=n(i.wrap[0],Gh),o.wrapT=n(i.wrap[1],Gh)),void 0!==i.format&&(o.format=i.format),void 0!==i.type&&(o.type=i.type),void 0!==i.encoding&&(o.encoding=i.encoding),void 0!==i.minFilter&&(o.minFilter=n(i.minFilter,Vh)),void 0!==i.magFilter&&(o.magFilter=n(i.magFilter,Vh)),void 0!==i.anisotropy&&(o.anisotropy=i.anisotropy),void 0!==i.flipY&&(o.flipY=i.flipY),void 0!==i.premultiplyAlpha&&(o.premultiplyAlpha=i.premultiplyAlpha),void 0!==i.unpackAlignment&&(o.unpackAlignment=i.unpackAlignment),l[i.uuid]=o}return l}parseObject(t,e,n,l,r){let i,o,u;function s(t){return void 0===e[t]&&console.warn("THREE.ObjectLoader: Undefined geometry",t),e[t]}function a(t){if(void 0!==t){if(Array.isArray(t)){const e=[];for(let l=0,r=t.length;l<r;l++){const r=t[l];void 0===n[r]&&console.warn("THREE.ObjectLoader: Undefined material",r),e.push(n[r])}return e}return void 0===n[t]&&console.warn("THREE.ObjectLoader: Undefined material",t),n[t]}}function c(t){return void 0===l[t]&&console.warn("THREE.ObjectLoader: Undefined texture",t),l[t]}switch(t.type){case"Scene":i=new ls,void 0!==t.background&&(Number.isInteger(t.background)?i.background=new Cr(t.background):i.background=c(t.background)),void 0!==t.environment&&(i.environment=c(t.environment)),void 0!==t.fog&&("Fog"===t.fog.type?i.fog=new ns(t.fog.color,t.fog.near,t.fog.far):"FogExp2"===t.fog.type&&(i.fog=new es(t.fog.color,t.fog.density)));break;case"PerspectiveCamera":i=new Ti(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(i.focus=t.focus),void 0!==t.zoom&&(i.zoom=t.zoom),void 0!==t.filmGauge&&(i.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(i.filmOffset=t.filmOffset),void 0!==t.view&&(i.view=Object.assign({},t.view));break;case"OrthographicCamera":i=new Ch(t.left,t.right,t.top,t.bottom,t.near,t.far),void 0!==t.zoom&&(i.zoom=t.zoom),void 0!==t.view&&(i.view=Object.assign({},t.view));break;case"AmbientLight":i=new Oh(t.color,t.intensity);break;case"DirectionalLight":i=new Rh(t.color,t.intensity);break;case"PointLight":i=new Lh(t.color,t.intensity,t.distance,t.decay);break;case"RectAreaLight":i=new Ih(t.color,t.intensity,t.width,t.height);break;case"SpotLight":i=new Mh(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case"HemisphereLight":i=new vh(t.color,t.groundColor,t.intensity);break;case"LightProbe":i=(new kh).fromJSON(t);break;case"SkinnedMesh":o=s(t.geometry),u=a(t.material),i=new Rs(o,u),void 0!==t.bindMode&&(i.bindMode=t.bindMode),void 0!==t.bindMatrix&&i.bindMatrix.fromArray(t.bindMatrix),void 0!==t.skeleton&&(i.skeleton=t.skeleton);break;case"Mesh":o=s(t.geometry),u=a(t.material),i=new yi(o,u);break;case"InstancedMesh":o=s(t.geometry),u=a(t.material);const e=t.count,n=t.instanceMatrix,l=t.instanceColor;i=new js(o,u,e),i.instanceMatrix=new Ir(new Float32Array(n.array),16),void 0!==l&&(i.instanceColor=new Ir(new Float32Array(l.array),l.itemSize));break;case"LOD":i=new Es;break;case"Line":i=new Ys(s(t.geometry),a(t.material));break;case"LineLoop":i=new Ks(s(t.geometry),a(t.material));break;case"LineSegments":i=new Zs(s(t.geometry),a(t.material));break;case"PointCloud":case"Points":i=new ra(s(t.geometry),a(t.material));break;case"Sprite":i=new ws(a(t.material));break;case"Group":i=new Yu;break;case"Bone":i=new Os;break;default:i=new ar}if(i.uuid=t.uuid,void 0!==t.name&&(i.name=t.name),void 0!==t.matrix?(i.matrix.fromArray(t.matrix),void 0!==t.matrixAutoUpdate&&(i.matrixAutoUpdate=t.matrixAutoUpdate),i.matrixAutoUpdate&&i.matrix.decompose(i.position,i.quaternion,i.scale)):(void 0!==t.position&&i.position.fromArray(t.position),void 0!==t.rotation&&i.rotation.fromArray(t.rotation),void 0!==t.quaternion&&i.quaternion.fromArray(t.quaternion),void 0!==t.scale&&i.scale.fromArray(t.scale)),void 0!==t.castShadow&&(i.castShadow=t.castShadow),void 0!==t.receiveShadow&&(i.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.bias&&(i.shadow.bias=t.shadow.bias),void 0!==t.shadow.normalBias&&(i.shadow.normalBias=t.shadow.normalBias),void 0!==t.shadow.radius&&(i.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&i.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(i.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(i.visible=t.visible),void 0!==t.frustumCulled&&(i.frustumCulled=t.frustumCulled),void 0!==t.renderOrder&&(i.renderOrder=t.renderOrder),void 0!==t.userData&&(i.userData=t.userData),void 0!==t.layers&&(i.layers.mask=t.layers),void 0!==t.children){const o=t.children;for(let t=0;t<o.length;t++)i.add(this.parseObject(o[t],e,n,l,r))}if(void 0!==t.animations){const e=t.animations;for(let t=0;t<e.length;t++){const n=e[t];i.animations.push(r[n])}}if("LOD"===t.type){void 0!==t.autoUpdate&&(i.autoUpdate=t.autoUpdate);const e=t.levels;for(let t=0;t<e.length;t++){const n=e[t],l=i.getObjectByProperty("uuid",n.object);void 0!==l&&i.addLevel(l,n.distance)}}return i}bindSkeletons(t,e){0!==Object.keys(e).length&&t.traverse((function(t){if(!0===t.isSkinnedMesh&&void 0!==t.skeleton){const n=e[t.skeleton];void 0===n?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",t.skeleton):t.bind(n,t.bindMatrix)}}))}setTexturePath(t){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(t)}}const Uh={UVMapping:rt,CubeReflectionMapping:it,CubeRefractionMapping:ot,EquirectangularReflectionMapping:ut,EquirectangularRefractionMapping:st,CubeUVReflectionMapping:at,CubeUVRefractionMapping:ct},Gh={RepeatWrapping:ht,ClampToEdgeWrapping:dt,MirroredRepeatWrapping:pt},Vh={NearestFilter:ft,NearestMipmapNearestFilter:mt,NearestMipmapLinearFilter:vt,LinearFilter:xt,LinearMipmapNearestFilter:bt,LinearMipmapLinearFilter:_t};class Wh extends rh{constructor(t){super(t),"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(t){return this.options=t,this}load(t,e,n,l){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,i=eh.get(t);if(void 0!==i)return r.manager.itemStart(t),setTimeout((function(){e&&e(i),r.manager.itemEnd(t)}),0),i;const o={};o.credentials="anonymous"===this.crossOrigin?"same-origin":"include",o.headers=this.requestHeader,fetch(t,o).then((function(t){return t.blob()})).then((function(t){return createImageBitmap(t,Object.assign(r.options,{colorSpaceConversion:"none"}))})).then((function(n){eh.add(t,n),e&&e(n),r.manager.itemEnd(t)})).catch((function(e){l&&l(e),r.manager.itemError(t),r.manager.itemEnd(t)})),r.manager.itemStart(t)}}Wh.prototype.isImageBitmapLoader=!0;class qh{constructor(){this.type="ShapePath",this.color=new Cr,this.subPaths=[],this.currentPath=null}moveTo(t,e){return this.currentPath=new fh,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e),this}lineTo(t,e){return this.currentPath.lineTo(t,e),this}quadraticCurveTo(t,e,n,l){return this.currentPath.quadraticCurveTo(t,e,n,l),this}bezierCurveTo(t,e,n,l,r,i){return this.currentPath.bezierCurveTo(t,e,n,l,r,i),this}splineThru(t){return this.currentPath.splineThru(t),this}toShapes(t,e){function n(t){const e=[];for(let n=0,l=t.length;n<l;n++){const l=t[n],r=new mh;r.curves=l.curves,e.push(r)}return e}function l(t,e){const n=e.length;let l=!1;for(let r=n-1,i=0;i<n;r=i++){let n=e[r],o=e[i],u=o.x-n.x,s=o.y-n.y;if(Math.abs(s)>Number.EPSILON){if(s<0&&(n=e[i],u=-u,o=e[r],s=-s),t.y<n.y||t.y>o.y)continue;if(t.y===n.y){if(t.x===n.x)return!0}else{const e=s*(t.x-n.x)-u*(t.y-n.y);if(0===e)return!0;if(e<0)continue;l=!l}}else{if(t.y!==n.y)continue;if(o.x<=t.x&&t.x<=n.x||n.x<=t.x&&t.x<=o.x)return!0}}return l}const r=cc.isClockWise,i=this.subPaths;if(0===i.length)return[];if(!0===e)return n(i);let o,u,s;const a=[];if(1===i.length)return u=i[0],s=new mh,s.curves=u.curves,a.push(s),a;let c=!r(i[0].getPoints());c=t?!c:c;const h=[],d=[];let p,f,m=[],g=0;d[g]=void 0,m[g]=[];for(let e=0,n=i.length;e<n;e++)u=i[e],p=u.getPoints(),o=r(p),o=t?!o:o,o?(!c&&d[g]&&g++,d[g]={s:new mh,p:p},d[g].s.curves=u.curves,c&&g++,m[g]=[]):m[g].push({h:u,p:p[0]});if(!d[0])return n(i);if(d.length>1){let t=!1;const e=[];for(let t=0,e=d.length;t<e;t++)h[t]=[];for(let n=0,r=d.length;n<r;n++){const r=m[n];for(let i=0;i<r.length;i++){const o=r[i];let u=!0;for(let r=0;r<d.length;r++)l(o.p,d[r].p)&&(n!==r&&e.push({froms:n,tos:r,hole:i}),u?(u=!1,h[r].push(o)):t=!0);u&&h[n].push(o)}}e.length>0&&(t||(m=h))}for(let t=0,e=d.length;t<e;t++){s=d[t].s,a.push(s),f=m[t];for(let t=0,e=f.length;t<e;t++)s.holes.push(f[t].h)}return a}}class Xh{constructor(t){this.type="Font",this.data=t}generateShapes(t,e=100){const n=[],l=function(t,e,n){const l=Array.from(t),r=e/n.resolution,i=(n.boundingBox.yMax-n.boundingBox.yMin+n.underlineThickness)*r,o=[];let u=0,s=0;for(let t=0;t<l.length;t++){const e=l[t];if("\n"===e)u=0,s-=i;else{const t=Yh(e,r,u,s,n);u+=t.offsetX,o.push(t.path)}}return o}(t,e,this.data);for(let t=0,e=l.length;t<e;t++)Array.prototype.push.apply(n,l[t].toShapes());return n}}function Yh(t,e,n,l,r){const i=r.glyphs[t]||r.glyphs["?"];if(!i)return void console.error('THREE.Font: character "'+t+'" does not exists in font family '+r.familyName+".");const o=new qh;let u,s,a,c,h,d,p,f;if(i.o){const t=i._cachedOutline||(i._cachedOutline=i.o.split(" "));for(let r=0,i=t.length;r<i;)switch(t[r++]){case"m":u=t[r++]*e+n,s=t[r++]*e+l,o.moveTo(u,s);break;case"l":u=t[r++]*e+n,s=t[r++]*e+l,o.lineTo(u,s);break;case"q":a=t[r++]*e+n,c=t[r++]*e+l,h=t[r++]*e+n,d=t[r++]*e+l,o.quadraticCurveTo(h,d,a,c);break;case"b":a=t[r++]*e+n,c=t[r++]*e+l,h=t[r++]*e+n,d=t[r++]*e+l,p=t[r++]*e+n,f=t[r++]*e+l,o.bezierCurveTo(h,d,p,f,a,c)}}return{offsetX:i.ha*e,path:o}}Xh.prototype.isFont=!0;class $h extends rh{constructor(t){super(t)}load(t,e,n,l){const r=this,i=new oh(this.manager);i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(r.withCredentials),i.load(t,(function(t){let n;try{n=JSON.parse(t)}catch(e){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),n=JSON.parse(t.substring(65,t.length-2))}const l=r.parse(n);e&&e(l)}),n,l)}parse(t){return new Xh(t)}}let Jh;const Zh={getContext:function(){return void 0===Jh&&(Jh=new(window.AudioContext||window.webkitAudioContext)),Jh},setContext:function(t){Jh=t}};class Kh extends rh{constructor(t){super(t)}load(t,e,n,l){const r=this,i=new oh(this.manager);i.setResponseType("arraybuffer"),i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials),i.load(t,(function(n){try{const t=n.slice(0);Zh.getContext().decodeAudioData(t,(function(t){e(t)}))}catch(e){l?l(e):console.error(e),r.manager.itemError(t)}}),n,l)}}class Qh extends kh{constructor(t,e,n=1){super(void 0,n);const l=(new Cr).set(t),r=(new Cr).set(e),i=new ul(l.r,l.g,l.b),o=new ul(r.r,r.g,r.b),u=Math.sqrt(Math.PI),s=u*Math.sqrt(.75);this.sh.coefficients[0].copy(i).add(o).multiplyScalar(u),this.sh.coefficients[1].copy(i).sub(o).multiplyScalar(s)}}Qh.prototype.isHemisphereLightProbe=!0;class td extends kh{constructor(t,e=1){super(void 0,e);const n=(new Cr).set(t);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}}td.prototype.isAmbientLightProbe=!0;const ed=new Fl,nd=new Fl;class ld{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new Ti,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new Ti,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(t){const e=this._cache;if(e.focus!==t.focus||e.fov!==t.fov||e.aspect!==t.aspect*this.aspect||e.near!==t.near||e.far!==t.far||e.zoom!==t.zoom||e.eyeSep!==this.eyeSep){e.focus=t.focus,e.fov=t.fov,e.aspect=t.aspect*this.aspect,e.near=t.near,e.far=t.far,e.zoom=t.zoom,e.eyeSep=this.eyeSep;const n=t.projectionMatrix.clone(),l=e.eyeSep/2,r=l*e.near/e.focus,i=e.near*Math.tan(zn*e.fov*.5)/e.zoom;let o,u;nd.elements[12]=-l,ed.elements[12]=l,o=-i*e.aspect+r,u=i*e.aspect+r,n.elements[0]=2*e.near/(u-o),n.elements[8]=(u+o)/(u-o),this.cameraL.projectionMatrix.copy(n),o=-i*e.aspect-r,u=i*e.aspect-r,n.elements[0]=2*e.near/(u-o),n.elements[8]=(u+o)/(u-o),this.cameraR.projectionMatrix.copy(n)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(nd),this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(ed)}}class rd{constructor(t=!0){this.autoStart=t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=id(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const e=id();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}function id(){return("undefined"==typeof performance?Date:performance).now()}const od=new ul,ud=new ol,sd=new ul,ad=new ul;class cd extends ar{constructor(){super(),this.type="AudioListener",this.context=Zh.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new rd}getInput(){return this.gain}removeFilter(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}updateMatrixWorld(t){super.updateMatrixWorld(t);const e=this.context.listener,n=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(od,ud,sd),ad.set(0,0,-1).applyQuaternion(ud),e.positionX){const t=this.context.currentTime+this.timeDelta;e.positionX.linearRampToValueAtTime(od.x,t),e.positionY.linearRampToValueAtTime(od.y,t),e.positionZ.linearRampToValueAtTime(od.z,t),e.forwardX.linearRampToValueAtTime(ad.x,t),e.forwardY.linearRampToValueAtTime(ad.y,t),e.forwardZ.linearRampToValueAtTime(ad.z,t),e.upX.linearRampToValueAtTime(n.x,t),e.upY.linearRampToValueAtTime(n.y,t),e.upZ.linearRampToValueAtTime(n.z,t)}else e.setPosition(od.x,od.y,od.z),e.setOrientation(ad.x,ad.y,ad.z,n.x,n.y,n.z)}}class hd extends ar{constructor(t){super(),this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this}setMediaElementSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this}setMediaStreamSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(t),this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this}play(t=0){if(!0===this.isPlaying)return void console.warn("THREE.Audio: Audio is already playing.");if(!1===this.hasPlaybackControl)return void console.warn("THREE.Audio: this Audio has no playback control.");this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")}stop(){if(!1!==this.hasPlaybackControl)return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(t){return t||(t=[]),!0===this._connected?(this.disconnect(),this.filters=t.slice(),this.connect()):this.filters=t.slice(),this}setDetune(t){if(this.detune=t,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")}setLoopStart(t){return this.loopStart=t,this}setLoopEnd(t){return this.loopEnd=t,this}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}const dd=new ul,pd=new ol,fd=new ul,md=new ul;class gd extends hd{constructor(t){super(t),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(t){return this.panner.refDistance=t,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(t){return this.panner.rolloffFactor=t,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(t){return this.panner.distanceModel=t,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(t){return this.panner.maxDistance=t,this}setDirectionalCone(t,e,n){return this.panner.coneInnerAngle=t,this.panner.coneOuterAngle=e,this.panner.coneOuterGain=n,this}updateMatrixWorld(t){if(super.updateMatrixWorld(t),!0===this.hasPlaybackControl&&!1===this.isPlaying)return;this.matrixWorld.decompose(dd,pd,fd),md.set(0,0,1).applyQuaternion(pd);const e=this.panner;if(e.positionX){const t=this.context.currentTime+this.listener.timeDelta;e.positionX.linearRampToValueAtTime(dd.x,t),e.positionY.linearRampToValueAtTime(dd.y,t),e.positionZ.linearRampToValueAtTime(dd.z,t),e.orientationX.linearRampToValueAtTime(md.x,t),e.orientationY.linearRampToValueAtTime(md.y,t),e.orientationZ.linearRampToValueAtTime(md.z,t)}else e.setPosition(dd.x,dd.y,dd.z),e.setOrientation(md.x,md.y,md.z)}}class vd{constructor(t,e=2048){this.analyser=t.context.createAnalyser(),this.analyser.fftSize=e,this.data=new Uint8Array(this.analyser.frequencyBinCount),t.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let t=0;const e=this.getFrequencyData();for(let n=0;n<e.length;n++)t+=e[n];return t/e.length}}class yd{constructor(t,e,n){let l,r,i;switch(this.binding=t,this.valueSize=n,e){case"quaternion":l=this._slerp,r=this._slerpAdditive,i=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*n),this._workIndex=5;break;case"string":case"bool":l=this._select,r=this._select,i=this._setAdditiveIdentityOther,this.buffer=new Array(5*n);break;default:l=this._lerp,r=this._lerpAdditive,i=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*n)}this._mixBufferRegion=l,this._mixBufferRegionAdditive=r,this._setIdentity=i,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(t,e){const n=this.buffer,l=this.valueSize,r=t*l+l;let i=this.cumulativeWeight;if(0===i){for(let t=0;t!==l;++t)n[r+t]=n[t];i=e}else{i+=e;const t=e/i;this._mixBufferRegion(n,r,0,t,l)}this.cumulativeWeight=i}accumulateAdditive(t){const e=this.buffer,n=this.valueSize,l=n*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(e,l,0,t,n),this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,n=this.buffer,l=t*e+e,r=this.cumulativeWeight,i=this.cumulativeWeightAdditive,o=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,r<1){const t=e*this._origIndex;this._mixBufferRegion(n,l,t,1-r,e)}i>0&&this._mixBufferRegionAdditive(n,l,this._addIndex*e,1,e);for(let t=e,r=e+e;t!==r;++t)if(n[t]!==n[t+e]){o.setValue(n,l);break}}saveOriginalState(){const t=this.binding,e=this.buffer,n=this.valueSize,l=n*this._origIndex;t.getValue(e,l);for(let t=n,r=l;t!==r;++t)e[t]=e[l+t%n];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const t=3*this.valueSize;this.binding.setValue(this.buffer,t)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,e=t+this.valueSize;for(let n=t;n<e;n++)this.buffer[n]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,e=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++)this.buffer[e+n]=this.buffer[t+n]}_select(t,e,n,l,r){if(l>=.5)for(let l=0;l!==r;++l)t[e+l]=t[n+l]}_slerp(t,e,n,l){ol.slerpFlat(t,e,t,e,t,n,l)}_slerpAdditive(t,e,n,l,r){const i=this._workIndex*r;ol.multiplyQuaternionsFlat(t,i,t,e,t,n),ol.slerpFlat(t,e,t,e,t,i,l)}_lerp(t,e,n,l,r){const i=1-l;for(let o=0;o!==r;++o){const r=e+o;t[r]=t[r]*i+t[n+o]*l}}_lerpAdditive(t,e,n,l,r){for(let i=0;i!==r;++i){const r=e+i;t[r]=t[r]+t[n+i]*l}}}const xd=new RegExp("[\\[\\]\\.:\\/]","g"),bd="[^\\[\\]\\.:\\/]",wd="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",_d=/((?:WC+[\/:])*)/.source.replace("WC",bd),Md=/(WCOD+)?/.source.replace("WCOD",wd),Sd=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",bd),Ed=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",bd),Td=new RegExp("^"+_d+Md+Sd+Ed+"$"),Ad=["material","materials","bones"];class Ld{constructor(t,e,n){this.path=e,this.parsedPath=n||Ld.parseTrackName(e),this.node=Ld.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(t,e,n){return t&&t.isAnimationObjectGroup?new Ld.Composite(t,e,n):new Ld(t,e,n)}static sanitizeNodeName(t){return t.replace(/\s/g,"_").replace(xd,"")}static parseTrackName(t){const e=Td.exec(t);if(!e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);const n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},l=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==l&&-1!==l){const t=n.nodeName.substring(l+1);-1!==Ad.indexOf(t)&&(n.nodeName=n.nodeName.substring(0,l),n.objectName=t)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return n}static findNode(t,e){if(!e||""===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const n=t.skeleton.getBoneByName(e);if(void 0!==n)return n}if(t.children){const n=function(t){for(let l=0;l<t.length;l++){const r=t[l];if(r.name===e||r.uuid===e)return r;const i=n(r.children);if(i)return i}return null},l=n(t.children);if(l)return l}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.node[this.propertyName]}_getValue_array(t,e){const n=this.resolvedProperty;for(let l=0,r=n.length;l!==r;++l)t[e++]=n[l]}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(t,e){const n=this.resolvedProperty;for(let l=0,r=n.length;l!==r;++l)n[l]=t[e++]}_setValue_array_setNeedsUpdate(t,e){const n=this.resolvedProperty;for(let l=0,r=n.length;l!==r;++l)n[l]=t[e++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const n=this.resolvedProperty;for(let l=0,r=n.length;l!==r;++l)n[l]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(t,e){this.bind(),this.getValue(t,e)}_setValue_unbound(t,e){this.bind(),this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath,n=e.objectName,l=e.propertyName;let r=e.propertyIndex;if(t||(t=Ld.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");if(n){let l=e.objectIndex;switch(n){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(let e=0;e<t.length;e++)if(t[e].name===l){l=e;break}break;default:if(void 0===t[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[n]}if(void 0!==l){if(void 0===t[l])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[l]}}const i=t[l];if(void 0===i){const n=e.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+n+"."+l+" but it wasn't found.",t)}let o=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?o=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(o=this.Versioning.MatrixWorldNeedsUpdate);let u=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===l){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!t.geometry.isBufferGeometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==t.morphTargetDictionary[r]&&(r=t.morphTargetDictionary[r])}u=this.BindingType.ArrayElement,this.resolvedProperty=i,this.propertyIndex=r}else void 0!==i.fromArray&&void 0!==i.toArray?(u=this.BindingType.HasFromToArray,this.resolvedProperty=i):Array.isArray(i)?(u=this.BindingType.EntireArray,this.resolvedProperty=i):this.propertyName=l;this.getValue=this.GetterByBindingType[u],this.setValue=this.SetterByBindingTypeAndVersioning[u][o]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Ld.Composite=class{constructor(t,e,n){const l=n||Ld.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,l)}getValue(t,e){this.bind();const n=this._targetGroup.nCachedObjects_,l=this._bindings[n];void 0!==l&&l.getValue(t,e)}setValue(t,e){const n=this._bindings;for(let l=this._targetGroup.nCachedObjects_,r=n.length;l!==r;++l)n[l].setValue(t,e)}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].bind()}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].unbind()}},Ld.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Ld.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Ld.prototype.GetterByBindingType=[Ld.prototype._getValue_direct,Ld.prototype._getValue_array,Ld.prototype._getValue_arrayElement,Ld.prototype._getValue_toArray],Ld.prototype.SetterByBindingTypeAndVersioning=[[Ld.prototype._setValue_direct,Ld.prototype._setValue_direct_setNeedsUpdate,Ld.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Ld.prototype._setValue_array,Ld.prototype._setValue_array_setNeedsUpdate,Ld.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Ld.prototype._setValue_arrayElement,Ld.prototype._setValue_arrayElement_setNeedsUpdate,Ld.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Ld.prototype._setValue_fromArray,Ld.prototype._setValue_fromArray_setNeedsUpdate,Ld.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class Cd{constructor(){this.uuid=jn(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const t={};this._indicesByUUID=t;for(let e=0,n=arguments.length;e!==n;++e)t[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const e=this;this.stats={objects:{get total(){return e._objects.length},get inUse(){return this.total-e.nCachedObjects_}},get bindingsPerObject(){return e._bindings.length}}}add(){const t=this._objects,e=this._indicesByUUID,n=this._paths,l=this._parsedPaths,r=this._bindings,i=r.length;let o,u=t.length,s=this.nCachedObjects_;for(let a=0,c=arguments.length;a!==c;++a){const c=arguments[a],h=c.uuid;let d=e[h];if(void 0===d){d=u++,e[h]=d,t.push(c);for(let t=0,e=i;t!==e;++t)r[t].push(new Ld(c,n[t],l[t]))}else if(d<s){o=t[d];const u=--s,a=t[u];e[a.uuid]=d,t[d]=a,e[h]=u,t[u]=c;for(let t=0,e=i;t!==e;++t){const e=r[t],i=e[u];let o=e[d];e[d]=i,void 0===o&&(o=new Ld(c,n[t],l[t])),e[u]=o}}else t[d]!==o&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=s}remove(){const t=this._objects,e=this._indicesByUUID,n=this._bindings,l=n.length;let r=this.nCachedObjects_;for(let i=0,o=arguments.length;i!==o;++i){const o=arguments[i],u=o.uuid,s=e[u];if(void 0!==s&&s>=r){const i=r++,a=t[i];e[a.uuid]=s,t[s]=a,e[u]=i,t[i]=o;for(let t=0,e=l;t!==e;++t){const e=n[t],l=e[i],r=e[s];e[s]=l,e[i]=r}}}this.nCachedObjects_=r}uncache(){const t=this._objects,e=this._indicesByUUID,n=this._bindings,l=n.length;let r=this.nCachedObjects_,i=t.length;for(let o=0,u=arguments.length;o!==u;++o){const u=arguments[o].uuid,s=e[u];if(void 0!==s)if(delete e[u],s<r){const o=--r,u=t[o],a=--i,c=t[a];e[u.uuid]=s,t[s]=u,e[c.uuid]=o,t[o]=c,t.pop();for(let t=0,e=l;t!==e;++t){const e=n[t],l=e[o],r=e[a];e[s]=l,e[o]=r,e.pop()}}else{const r=--i,o=t[r];r>0&&(e[o.uuid]=s),t[s]=o,t.pop();for(let t=0,e=l;t!==e;++t){const e=n[t];e[s]=e[r],e.pop()}}}this.nCachedObjects_=r}subscribe_(t,e){const n=this._bindingsIndicesByPath;let l=n[t];const r=this._bindings;if(void 0!==l)return r[l];const i=this._paths,o=this._parsedPaths,u=this._objects,s=u.length,a=this.nCachedObjects_,c=new Array(s);l=r.length,n[t]=l,i.push(t),o.push(e),r.push(c);for(let n=a,l=u.length;n!==l;++n){const l=u[n];c[n]=new Ld(l,t,e)}return c}unsubscribe_(t){const e=this._bindingsIndicesByPath,n=e[t];if(void 0!==n){const l=this._paths,r=this._parsedPaths,i=this._bindings,o=i.length-1,u=i[o];e[t[o]]=n,i[n]=u,i.pop(),r[n]=r[o],r.pop(),l[n]=l[o],l.pop()}}}Cd.prototype.isAnimationObjectGroup=!0;class Pd{constructor(t,e,n=null,l=e.blendMode){this._mixer=t,this._clip=e,this._localRoot=n,this.blendMode=l;const r=e.tracks,i=r.length,o=new Array(i),u={endingStart:Ue,endingEnd:Ue};for(let t=0;t!==i;++t){const e=r[t].createInterpolant(null);o[t]=e,e.settings=u}this._interpolantSettings=u,this._interpolants=o,this._propertyBindings=new Array(i),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Be,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){return this._startTime=t,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,n){if(t.fadeOut(e),this.fadeIn(e),n){const n=this._clip.duration,l=t._clip.duration,r=l/n,i=n/l;t.warp(1,r,e),this.warp(i,1,e)}return this}crossFadeTo(t,e,n){return t.crossFadeFrom(this,e,n)}stopFading(){const t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,n){const l=this._mixer,r=l.time,i=this.timeScale;let o=this._timeScaleInterpolant;null===o&&(o=l._lendControlInterpolant(),this._timeScaleInterpolant=o);const u=o.parameterPositions,s=o.sampleValues;return u[0]=r,u[1]=r+n,s[0]=t/i,s[1]=e/i,this}stopWarping(){const t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,n,l){if(!this.enabled)return void this._updateWeight(t);const r=this._startTime;if(null!==r){const l=(t-r)*n;if(l<0||0===n)return;this._startTime=null,e=n*l}e*=this._updateTimeScale(t);const i=this._updateTime(e),o=this._updateWeight(t);if(o>0){const t=this._interpolants,e=this._propertyBindings;switch(this.blendMode){case qe:for(let n=0,l=t.length;n!==l;++n)t[n].evaluate(i),e[n].accumulateAdditive(o);break;case We:default:for(let n=0,r=t.length;n!==r;++n)t[n].evaluate(i),e[n].accumulate(l,o)}}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const n=this._weightInterpolant;if(null!==n){const l=n.evaluate(t)[0];e*=l,t>n.parameterPositions[1]&&(this.stopFading(),0===l&&(this.enabled=!1))}}return this._effectiveWeight=e,e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const n=this._timeScaleInterpolant;null!==n&&(e*=n.evaluate(t)[0],t>n.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e))}return this._effectiveTimeScale=e,e}_updateTime(t){const e=this._clip.duration,n=this.loop;let l=this.time+t,r=this._loopCount;const i=n===Fe;if(0===t)return-1===r?l:i&&1==(1&r)?e-l:l;if(n===Ne){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(l>=e)l=e;else{if(!(l<0)){this.time=l;break t}l=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=l,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(-1===r&&(t>=0?(r=0,this._setEndings(!0,0===this.repetitions,i)):this._setEndings(0===this.repetitions,!0,i)),l>=e||l<0){const n=Math.floor(l/e);l-=e*n,r+=Math.abs(n);const o=this.repetitions-r;if(o<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,l=t>0?e:0,this.time=l,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===o){const e=t<0;this._setEndings(e,!e,i)}else this._setEndings(!1,!1,i);this._loopCount=r,this.time=l,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:n})}}else this.time=l;if(i&&1==(1&r))return e-l}return l}_setEndings(t,e,n){const l=this._interpolantSettings;n?(l.endingStart=Ge,l.endingEnd=Ge):(l.endingStart=t?this.zeroSlopeAtStart?Ge:Ue:Ve,l.endingEnd=e?this.zeroSlopeAtEnd?Ge:Ue:Ve)}_scheduleFading(t,e,n){const l=this._mixer,r=l.time;let i=this._weightInterpolant;null===i&&(i=l._lendControlInterpolant(),this._weightInterpolant=i);const o=i.parameterPositions,u=i.sampleValues;return o[0]=r,u[0]=e,o[1]=r+t,u[1]=n,this}}class Rd extends Nn{constructor(t){super(),this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(t,e){const n=t._localRoot||this._root,l=t._clip.tracks,r=l.length,i=t._propertyBindings,o=t._interpolants,u=n.uuid,s=this._bindingsByRootAndName;let a=s[u];void 0===a&&(a={},s[u]=a);for(let t=0;t!==r;++t){const r=l[t],s=r.name;let c=a[s];if(void 0!==c)i[t]=c;else{if(c=i[t],void 0!==c){null===c._cacheIndex&&(++c.referenceCount,this._addInactiveBinding(c,u,s));continue}const l=e&&e._propertyBindings[t].binding.parsedPath;c=new yd(Ld.create(n,s,l),r.ValueTypeName,r.getValueSize()),++c.referenceCount,this._addInactiveBinding(c,u,s),i[t]=c}o[t].resultBuffer=c.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){const e=(t._localRoot||this._root).uuid,n=t._clip.uuid,l=this._actionsByClip[n];this._bindAction(t,l&&l.knownActions[0]),this._addInactiveAction(t,n,e)}const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==n.useCount++&&(this._lendBinding(n),n.saveOriginalState())}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==--n.useCount&&(n.restoreOriginalState(),this._takeBackBinding(n))}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return null!==e&&e<this._nActiveActions}_addInactiveAction(t,e,n){const l=this._actions,r=this._actionsByClip;let i=r[e];if(void 0===i)i={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,r[e]=i;else{const e=i.knownActions;t._byClipCacheIndex=e.length,e.push(t)}t._cacheIndex=l.length,l.push(t),i.actionByRoot[n]=t}_removeInactiveAction(t){const e=this._actions,n=e[e.length-1],l=t._cacheIndex;n._cacheIndex=l,e[l]=n,e.pop(),t._cacheIndex=null;const r=t._clip.uuid,i=this._actionsByClip,o=i[r],u=o.knownActions,s=u[u.length-1],a=t._byClipCacheIndex;s._byClipCacheIndex=a,u[a]=s,u.pop(),t._byClipCacheIndex=null,delete o.actionByRoot[(t._localRoot||this._root).uuid],0===u.length&&delete i[r],this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==--n.referenceCount&&this._removeInactiveBinding(n)}}_lendAction(t){const e=this._actions,n=t._cacheIndex,l=this._nActiveActions++,r=e[l];t._cacheIndex=l,e[l]=t,r._cacheIndex=n,e[n]=r}_takeBackAction(t){const e=this._actions,n=t._cacheIndex,l=--this._nActiveActions,r=e[l];t._cacheIndex=l,e[l]=t,r._cacheIndex=n,e[n]=r}_addInactiveBinding(t,e,n){const l=this._bindingsByRootAndName,r=this._bindings;let i=l[e];void 0===i&&(i={},l[e]=i),i[n]=t,t._cacheIndex=r.length,r.push(t)}_removeInactiveBinding(t){const e=this._bindings,n=t.binding,l=n.rootNode.uuid,r=n.path,i=this._bindingsByRootAndName,o=i[l],u=e[e.length-1],s=t._cacheIndex;u._cacheIndex=s,e[s]=u,e.pop(),delete o[r],0===Object.keys(o).length&&delete i[l]}_lendBinding(t){const e=this._bindings,n=t._cacheIndex,l=this._nActiveBindings++,r=e[l];t._cacheIndex=l,e[l]=t,r._cacheIndex=n,e[n]=r}_takeBackBinding(t){const e=this._bindings,n=t._cacheIndex,l=--this._nActiveBindings,r=e[l];t._cacheIndex=l,e[l]=t,r._cacheIndex=n,e[n]=r}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let n=t[e];return void 0===n&&(n=new Gc(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),n.__cacheIndex=e,t[e]=n),n}_takeBackControlInterpolant(t){const e=this._controlInterpolants,n=t.__cacheIndex,l=--this._nActiveControlInterpolants,r=e[l];t.__cacheIndex=l,e[l]=t,r.__cacheIndex=n,e[n]=r}clipAction(t,e,n){const l=e||this._root,r=l.uuid;let i="string"==typeof t?Qc.findByName(l,t):t;const o=null!==i?i.uuid:t,u=this._actionsByClip[o];let s=null;if(void 0===n&&(n=null!==i?i.blendMode:We),void 0!==u){const t=u.actionByRoot[r];if(void 0!==t&&t.blendMode===n)return t;s=u.knownActions[0],null===i&&(i=s._clip)}if(null===i)return null;const a=new Pd(this,i,e,n);return this._bindAction(a,s),this._addInactiveAction(a,o,r),a}existingAction(t,e){const n=e||this._root,l=n.uuid,r="string"==typeof t?Qc.findByName(n,t):t,i=r?r.uuid:t,o=this._actionsByClip[i];return void 0!==o&&o.actionByRoot[l]||null}stopAllAction(){const t=this._actions;for(let e=this._nActiveActions-1;e>=0;--e)t[e].stop();return this}update(t){t*=this.timeScale;const e=this._actions,n=this._nActiveActions,l=this.time+=t,r=Math.sign(t),i=this._accuIndex^=1;for(let o=0;o!==n;++o)e[o]._update(l,t,r,i);const o=this._bindings,u=this._nActiveBindings;for(let t=0;t!==u;++t)o[t].apply(i);return this}setTime(t){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,n=t.uuid,l=this._actionsByClip,r=l[n];if(void 0!==r){const t=r.knownActions;for(let n=0,l=t.length;n!==l;++n){const l=t[n];this._deactivateAction(l);const r=l._cacheIndex,i=e[e.length-1];l._cacheIndex=null,l._byClipCacheIndex=null,i._cacheIndex=r,e[r]=i,e.pop(),this._removeInactiveBindingsForAction(l)}delete l[n]}}uncacheRoot(t){const e=t.uuid,n=this._actionsByClip;for(const t in n){const l=n[t].actionByRoot[e];void 0!==l&&(this._deactivateAction(l),this._removeInactiveAction(l))}const l=this._bindingsByRootAndName[e];if(void 0!==l)for(const t in l){const e=l[t];e.restoreOriginalState(),this._removeInactiveBinding(e)}}uncacheAction(t,e){const n=this.existingAction(t,e);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}Rd.prototype._controlInterpolantsResultBuffer=new Float32Array(1);class Od{constructor(t){"string"==typeof t&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),t=arguments[1]),this.value=t}clone(){return new Od(void 0===this.value.clone?this.value:this.value.clone())}}class Id extends rs{constructor(t,e,n=1){super(t,e),this.meshPerAttribute=n}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}}Id.prototype.isInstancedInterleavedBuffer=!0;class Dd{constructor(t,e,n,l,r){this.buffer=t,this.type=e,this.itemSize=n,this.elementSize=l,this.count=r,this.version=0}set needsUpdate(t){!0===t&&this.version++}setBuffer(t){return this.buffer=t,this}setType(t,e){return this.type=t,this.elementSize=e,this}setItemSize(t){return this.itemSize=t,this}setCount(t){return this.count=t,this}}Dd.prototype.isGLBufferAttribute=!0;class kd{constructor(t,e,n=0,l=1/0){this.ray=new Bl(t,e),this.near=n,this.far=l,this.camera=null,this.layers=new $l,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(t,e){this.ray.set(t,e)}setFromCamera(t,e){e&&e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e):e&&e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e):console.error("THREE.Raycaster: Unsupported camera type: "+e.type)}intersectObject(t,e=!1,n=[]){return Bd(t,this,n,e),n.sort(Nd),n}intersectObjects(t,e=!1,n=[]){for(let l=0,r=t.length;l<r;l++)Bd(t[l],this,n,e);return n.sort(Nd),n}}function Nd(t,e){return t.distance-e.distance}function Bd(t,e,n,l){if(t.layers.test(e.layers)&&t.raycast(e,n),!0===l){const l=t.children;for(let t=0,r=l.length;t<r;t++)Bd(l[t],e,n,!0)}}class Fd{constructor(t=1,e=0,n=0){return this.radius=t,this.phi=e,this.theta=n,this}set(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){const t=1e-6;return this.phi=Math.max(t,Math.min(Math.PI-t,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+e*e+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,n),this.phi=Math.acos(Un(e/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}}class zd{constructor(t=1,e=0,n=0){return this.radius=t,this.theta=e,this.y=n,this}set(t,e,n){return this.radius=t,this.theta=e,this.y=n,this}copy(t){return this.radius=t.radius,this.theta=t.theta,this.y=t.y,this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+n*n),this.theta=Math.atan2(t,n),this.y=e,this}clone(){return(new this.constructor).copy(this)}}const Hd=new $n;class jd{constructor(t=new $n(1/0,1/0),e=new $n(-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=Hd.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(t){return this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return Hd.copy(t).clamp(this.min,this.max).sub(t).length()}intersect(t){return this.min.max(t.min),this.max.min(t.max),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}jd.prototype.isBox2=!0;const Ud=new ul,Gd=new ul;class Vd{constructor(t=new ul,e=new ul){this.start=t,this.end=e}set(t,e){return this.start.copy(t),this.end.copy(e),this}copy(t){return this.start.copy(t.start),this.end.copy(t.end),this}getCenter(t){return t.addVectors(this.start,this.end).multiplyScalar(.5)}delta(t){return t.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(t,e){return this.delta(e).multiplyScalar(t).add(this.start)}closestPointToPointParameter(t,e){Ud.subVectors(t,this.start),Gd.subVectors(this.end,this.start);const n=Gd.dot(Gd);let l=Gd.dot(Ud)/n;return e&&(l=Un(l,0,1)),l}closestPointToPoint(t,e,n){const l=this.closestPointToPointParameter(t,e);return this.delta(n).multiplyScalar(l).add(this.start)}applyMatrix4(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this}equals(t){return t.start.equals(this.start)&&t.end.equals(this.end)}clone(){return(new this.constructor).copy(this)}}class Wd extends ar{constructor(t){super(),this.material=t,this.render=function(){},this.hasPositions=!1,this.hasNormals=!1,this.hasColors=!1,this.hasUvs=!1,this.positionArray=null,this.normalArray=null,this.colorArray=null,this.uvArray=null,this.count=0}}Wd.prototype.isImmediateRenderObject=!0;const qd=new ul;class Xd extends ar{constructor(t,e){super(),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e;const n=new ti,l=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let t=0,e=1,n=32;t<n;t++,e++){const r=t/n*Math.PI*2,i=e/n*Math.PI*2;l.push(Math.cos(r),Math.sin(r),1,Math.cos(i),Math.sin(i),1)}n.setAttribute("position",new Ur(l,3));const r=new Us({fog:!1,toneMapped:!1});this.cone=new Zs(n,r),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateMatrixWorld();const t=this.light.distance?this.light.distance:1e3,e=t*Math.tan(this.light.angle);this.cone.scale.set(e,e,t),qd.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(qd),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const Yd=new ul,$d=new Fl,Jd=new Fl;class Zd extends Zs{constructor(t){const e=Kd(t),n=new ti,l=[],r=[],i=new Cr(0,0,1),o=new Cr(0,1,0);for(let t=0;t<e.length;t++){const n=e[t];n.parent&&n.parent.isBone&&(l.push(0,0,0),l.push(0,0,0),r.push(i.r,i.g,i.b),r.push(o.r,o.g,o.b))}n.setAttribute("position",new Ur(l,3)),n.setAttribute("color",new Ur(r,3)),super(n,new Us({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(t){const e=this.bones,n=this.geometry,l=n.getAttribute("position");Jd.copy(this.root.matrixWorld).invert();for(let t=0,n=0;t<e.length;t++){const r=e[t];r.parent&&r.parent.isBone&&($d.multiplyMatrices(Jd,r.matrixWorld),Yd.setFromMatrixPosition($d),l.setXYZ(n,Yd.x,Yd.y,Yd.z),$d.multiplyMatrices(Jd,r.parent.matrixWorld),Yd.setFromMatrixPosition($d),l.setXYZ(n+1,Yd.x,Yd.y,Yd.z),n+=2)}n.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(t)}}function Kd(t){const e=[];t&&t.isBone&&e.push(t);for(let n=0;n<t.children.length;n++)e.push.apply(e,Kd(t.children[n]));return e}class Qd extends yi{constructor(t,e,n){super(new wc(e,4,2),new Pr({wireframe:!0,fog:!1,toneMapped:!1})),this.light=t,this.light.updateMatrixWorld(),this.color=n,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const tp=new ul,ep=new Cr,np=new Cr;class lp extends ar{constructor(t,e,n){super(),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n;const l=new vc(e);l.rotateY(.5*Math.PI),this.material=new Pr({wireframe:!0,fog:!1,toneMapped:!1}),void 0===this.color&&(this.material.vertexColors=!0);const r=l.getAttribute("position"),i=new Float32Array(3*r.count);l.setAttribute("color",new Ir(i,3)),this.add(new yi(l,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const t=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{const e=t.geometry.getAttribute("color");ep.copy(this.light.color),np.copy(this.light.groundColor);for(let t=0,n=e.count;t<n;t++){const l=t<n/2?ep:np;e.setXYZ(t,l.r,l.g,l.b)}e.needsUpdate=!0}t.lookAt(tp.setFromMatrixPosition(this.light.matrixWorld).negate())}}class rp extends Zs{constructor(t=10,e=10,n=4473924,l=8947848){n=new Cr(n),l=new Cr(l);const r=e/2,i=t/e,o=t/2,u=[],s=[];for(let t=0,a=0,c=-o;t<=e;t++,c+=i){u.push(-o,0,c,o,0,c),u.push(c,0,-o,c,0,o);const e=t===r?n:l;e.toArray(s,a),a+=3,e.toArray(s,a),a+=3,e.toArray(s,a),a+=3,e.toArray(s,a),a+=3}const a=new ti;a.setAttribute("position",new Ur(u,3)),a.setAttribute("color",new Ur(s,3)),super(a,new Us({vertexColors:!0,toneMapped:!1})),this.type="GridHelper"}}class ip extends Zs{constructor(t=10,e=16,n=8,l=64,r=4473924,i=8947848){r=new Cr(r),i=new Cr(i);const o=[],u=[];for(let n=0;n<=e;n++){const l=n/e*(2*Math.PI),s=Math.sin(l)*t,a=Math.cos(l)*t;o.push(0,0,0),o.push(s,0,a);const c=1&n?r:i;u.push(c.r,c.g,c.b),u.push(c.r,c.g,c.b)}for(let e=0;e<=n;e++){const s=1&e?r:i,a=t-t/n*e;for(let t=0;t<l;t++){let e=t/l*(2*Math.PI),n=Math.sin(e)*a,r=Math.cos(e)*a;o.push(n,0,r),u.push(s.r,s.g,s.b),e=(t+1)/l*(2*Math.PI),n=Math.sin(e)*a,r=Math.cos(e)*a,o.push(n,0,r),u.push(s.r,s.g,s.b)}}const s=new ti;s.setAttribute("position",new Ur(o,3)),s.setAttribute("color",new Ur(u,3)),super(s,new Us({vertexColors:!0,toneMapped:!1})),this.type="PolarGridHelper"}}const op=new ul,up=new ul,sp=new ul;class ap extends ar{constructor(t,e,n){super(),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,void 0===e&&(e=1);let l=new ti;l.setAttribute("position",new Ur([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));const r=new Us({fog:!1,toneMapped:!1});this.lightPlane=new Ys(l,r),this.add(this.lightPlane),l=new ti,l.setAttribute("position",new Ur([0,0,0,0,0,1],3)),this.targetLine=new Ys(l,r),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){op.setFromMatrixPosition(this.light.matrixWorld),up.setFromMatrixPosition(this.light.target.matrixWorld),sp.subVectors(up,op),this.lightPlane.lookAt(up),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(up),this.targetLine.scale.z=sp.length()}}const cp=new ul,hp=new Ei;class dp extends Zs{constructor(t){const e=new ti,n=new Us({color:16777215,vertexColors:!0,toneMapped:!1}),l=[],r=[],i={},o=new Cr(16755200),u=new Cr(16711680),s=new Cr(43775),a=new Cr(16777215),c=new Cr(3355443);function h(t,e,n){d(t,n),d(e,n)}function d(t,e){l.push(0,0,0),r.push(e.r,e.g,e.b),void 0===i[t]&&(i[t]=[]),i[t].push(l.length/3-1)}h("n1","n2",o),h("n2","n4",o),h("n4","n3",o),h("n3","n1",o),h("f1","f2",o),h("f2","f4",o),h("f4","f3",o),h("f3","f1",o),h("n1","f1",o),h("n2","f2",o),h("n3","f3",o),h("n4","f4",o),h("p","n1",u),h("p","n2",u),h("p","n3",u),h("p","n4",u),h("u1","u2",s),h("u2","u3",s),h("u3","u1",s),h("c","t",a),h("p","c",c),h("cn1","cn2",c),h("cn3","cn4",c),h("cf1","cf2",c),h("cf3","cf4",c),e.setAttribute("position",new Ur(l,3)),e.setAttribute("color",new Ur(r,3)),super(e,n),this.type="CameraHelper",this.camera=t,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=i,this.update()}update(){const t=this.geometry,e=this.pointMap;hp.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),pp("c",e,t,hp,0,0,-1),pp("t",e,t,hp,0,0,1),pp("n1",e,t,hp,-1,-1,-1),pp("n2",e,t,hp,1,-1,-1),pp("n3",e,t,hp,-1,1,-1),pp("n4",e,t,hp,1,1,-1),pp("f1",e,t,hp,-1,-1,1),pp("f2",e,t,hp,1,-1,1),pp("f3",e,t,hp,-1,1,1),pp("f4",e,t,hp,1,1,1),pp("u1",e,t,hp,.7,1.1,-1),pp("u2",e,t,hp,-.7,1.1,-1),pp("u3",e,t,hp,0,2,-1),pp("cf1",e,t,hp,-1,0,1),pp("cf2",e,t,hp,1,0,1),pp("cf3",e,t,hp,0,-1,1),pp("cf4",e,t,hp,0,1,1),pp("cn1",e,t,hp,-1,0,-1),pp("cn2",e,t,hp,1,0,-1),pp("cn3",e,t,hp,0,-1,-1),pp("cn4",e,t,hp,0,1,-1),t.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function pp(t,e,n,l,r,i,o){cp.set(r,i,o).unproject(l);const u=e[t];if(void 0!==u){const t=n.getAttribute("position");for(let e=0,n=u.length;e<n;e++)t.setXYZ(u[e],cp.x,cp.y,cp.z)}}const fp=new cl;class mp extends Zs{constructor(t,e=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),l=new Float32Array(24),r=new ti;r.setIndex(new Ir(n,1)),r.setAttribute("position",new Ir(l,3)),super(r,new Us({color:e,toneMapped:!1})),this.object=t,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(t){if(void 0!==t&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&fp.setFromObject(this.object),fp.isEmpty())return;const e=fp.min,n=fp.max,l=this.geometry.attributes.position,r=l.array;r[0]=n.x,r[1]=n.y,r[2]=n.z,r[3]=e.x,r[4]=n.y,r[5]=n.z,r[6]=e.x,r[7]=e.y,r[8]=n.z,r[9]=n.x,r[10]=e.y,r[11]=n.z,r[12]=n.x,r[13]=n.y,r[14]=e.z,r[15]=e.x,r[16]=n.y,r[17]=e.z,r[18]=e.x,r[19]=e.y,r[20]=e.z,r[21]=n.x,r[22]=e.y,r[23]=e.z,l.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(t){return this.object=t,this.update(),this}copy(t){return Zs.prototype.copy.call(this,t),this.object=t.object,this}}class gp extends Zs{constructor(t,e=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),l=new ti;l.setIndex(new Ir(n,1)),l.setAttribute("position",new Ur([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),super(l,new Us({color:e,toneMapped:!1})),this.box=t,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(t){const e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(t))}}class vp extends Ys{constructor(t,e=1,n=16776960){const l=n,r=new ti;r.setAttribute("position",new Ur([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),r.computeBoundingSphere(),super(r,new Us({color:l,toneMapped:!1})),this.type="PlaneHelper",this.plane=t,this.size=e;const i=new ti;i.setAttribute("position",new Ur([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),i.computeBoundingSphere(),this.add(new yi(i,new Pr({color:l,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(t){let e=-this.plane.constant;Math.abs(e)<1e-8&&(e=1e-8),this.scale.set(.5*this.size,.5*this.size,e),this.children[0].material.side=e<0?m:f,this.lookAt(this.plane.normal),super.updateMatrixWorld(t)}}const yp=new ul;let xp,bp;class wp extends ar{constructor(t=new ul(0,0,1),e=new ul(0,0,0),n=1,l=16776960,r=.2*n,i=.2*r){super(),this.type="ArrowHelper",void 0===xp&&(xp=new ti,xp.setAttribute("position",new Ur([0,0,0,0,1,0],3)),bp=new ha(0,.5,1,5,1),bp.translate(0,-.5,0)),this.position.copy(e),this.line=new Ys(xp,new Us({color:l,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new yi(bp,new Pr({color:l,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(n,r,i)}setDirection(t){if(t.y>.99999)this.quaternion.set(0,0,0,1);else if(t.y<-.99999)this.quaternion.set(1,0,0,0);else{yp.set(t.z,0,-t.x).normalize();const e=Math.acos(t.y);this.quaternion.setFromAxisAngle(yp,e)}}setLength(t,e=.2*t,n=.2*e){this.line.scale.set(1,Math.max(1e-4,t-e),1),this.line.updateMatrix(),this.cone.scale.set(n,e,n),this.cone.position.y=t,this.cone.updateMatrix()}setColor(t){this.line.material.color.set(t),this.cone.material.color.set(t)}copy(t){return super.copy(t,!1),this.line.copy(t.line),this.cone.copy(t.cone),this}}class _p extends Zs{constructor(t=1){const e=[0,0,0,t,0,0,0,0,0,0,t,0,0,0,0,0,0,t],n=new ti;n.setAttribute("position",new Ur(e,3)),n.setAttribute("color",new Ur([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3)),super(n,new Us({vertexColors:!0,toneMapped:!1})),this.type="AxesHelper"}setColors(t,e,n){const l=new Cr,r=this.geometry.attributes.color.array;return l.set(t),l.toArray(r,0),l.toArray(r,3),l.set(e),l.toArray(r,6),l.toArray(r,9),l.set(n),l.toArray(r,12),l.toArray(r,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}const Mp=new Float32Array(1),Sp=new Int32Array(Mp.buffer);class Ep{static toHalfFloat(t){Mp[0]=t;const e=Sp[0];let n=e>>16&32768,l=e>>12&2047;const r=e>>23&255;return r<103?n:r>142?(n|=31744,n|=(255==r?0:1)&&8388607&e,n):r<113?(l|=2048,n|=(l>>114-r)+(l>>113-r&1),n):(n|=r-112<<10|l>>1,n+=1&l,n)}}const Tp=Math.pow(2,8),Ap=[.125,.215,.35,.446,.526,.582],Lp=5+Ap.length,Cp={[Je]:0,[Ze]:1,[Qe]:2,[en]:3,[nn]:4,[ln]:5,[Ke]:6},Pp=new Pr({side:m,depthWrite:!1,depthTest:!1}),Rp=new yi(new bi,Pp),Op=new Ch,{_lodPlanes:Ip,_sizeLods:Dp,_sigmas:kp}=Vp(),Np=new Cr;let Bp=null;const Fp=(1+Math.sqrt(5))/2,zp=1/Fp,Hp=[new ul(1,1,1),new ul(-1,1,1),new ul(1,1,-1),new ul(-1,1,-1),new ul(0,Fp,zp),new ul(0,Fp,-zp),new ul(zp,0,Fp),new ul(-zp,0,Fp),new ul(Fp,zp,0),new ul(-Fp,zp,0)];function jp(t){const e=Math.max(t.r,t.g,t.b),n=Math.min(Math.max(Math.ceil(Math.log2(e)),-128),127);return t.multiplyScalar(Math.pow(2,-n)),(n+128)/255}class Up{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._blurMaterial=function(t){const e=new Float32Array(20),n=new ul(0,1,0);return new Pc({name:"SphericalGaussianBlur",defines:{n:20},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:e},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:n},inputEncoding:{value:Cp[Je]},outputEncoding:{value:Cp[Je]}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t",blending:x,depthTest:!1,depthWrite:!1})}(),this._equirectShader=null,this._cubemapShader=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,l=100){Bp=this._renderer.getRenderTarget();const r=this._allocateTargets();return this._sceneToCubeUV(t,n,l,r),e>0&&this._blur(r,0,0,e),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(t){return this._fromTexture(t)}fromCubemap(t){return this._fromTexture(t)}compileCubemapShader(){null===this._cubemapShader&&(this._cubemapShader=Yp(),this._compileMaterial(this._cubemapShader))}compileEquirectangularShader(){null===this._equirectShader&&(this._equirectShader=Xp(),this._compileMaterial(this._equirectShader))}dispose(){this._blurMaterial.dispose(),null!==this._cubemapShader&&this._cubemapShader.dispose(),null!==this._equirectShader&&this._equirectShader.dispose();for(let t=0;t<Ip.length;t++)Ip[t].dispose()}_cleanup(t){this._pingPongRenderTarget.dispose(),this._renderer.setRenderTarget(Bp),t.scissorTest=!1,qp(t,0,0,t.width,t.height)}_fromTexture(t){Bp=this._renderer.getRenderTarget();const e=this._allocateTargets(t);return this._textureToCubeUV(t,e),this._applyPMREM(e),this._cleanup(e),e}_allocateTargets(t){const e={magFilter:ft,minFilter:ft,generateMipmaps:!1,type:St,format:jt,encoding:Gp(t)?t.encoding:Qe,depthBuffer:!1},n=Wp(e);return n.depthBuffer=!t,this._pingPongRenderTarget=Wp(e),n}_compileMaterial(t){const e=new yi(Ip[0],t);this._renderer.compile(e,Op)}_sceneToCubeUV(t,e,n,l){const r=new Ti(90,1,e,n),i=[1,-1,1,1,1,1],o=[1,1,1,-1,-1,-1],u=this._renderer,s=u.autoClear,a=u.outputEncoding,c=u.toneMapping;u.getClearColor(Np),u.toneMapping=K,u.outputEncoding=Je,u.autoClear=!1;let h=!1;const d=t.background;if(d){if(d.isColor){Pp.color.copy(d).convertSRGBToLinear(),t.background=null;const e=jp(Pp.color);Pp.opacity=e,h=!0}}else{Pp.color.copy(Np).convertSRGBToLinear();const t=jp(Pp.color);Pp.opacity=t,h=!0}for(let e=0;e<6;e++){const n=e%3;0==n?(r.up.set(0,i[e],0),r.lookAt(o[e],0,0)):1==n?(r.up.set(0,0,i[e]),r.lookAt(0,o[e],0)):(r.up.set(0,i[e],0),r.lookAt(0,0,o[e])),qp(l,n*Tp,e>2?Tp:0,Tp,Tp),u.setRenderTarget(l),h&&u.render(Rp,r),u.render(t,r)}u.toneMapping=c,u.outputEncoding=a,u.autoClear=s}_textureToCubeUV(t,e){const n=this._renderer;t.isCubeTexture?null==this._cubemapShader&&(this._cubemapShader=Yp()):null==this._equirectShader&&(this._equirectShader=Xp());const l=t.isCubeTexture?this._cubemapShader:this._equirectShader,r=new yi(Ip[0],l),i=l.uniforms;i.envMap.value=t,t.isCubeTexture||i.texelSize.value.set(1/t.image.width,1/t.image.height),i.inputEncoding.value=Cp[t.encoding],i.outputEncoding.value=Cp[e.texture.encoding],qp(e,0,0,3*Tp,2*Tp),n.setRenderTarget(e),n.render(r,Op)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;for(let e=1;e<Lp;e++){const n=Math.sqrt(kp[e]*kp[e]-kp[e-1]*kp[e-1]),l=Hp[(e-1)%Hp.length];this._blur(t,e-1,e,n,l)}e.autoClear=n}_blur(t,e,n,l,r){const i=this._pingPongRenderTarget;this._halfBlur(t,i,e,n,l,"latitudinal",r),this._halfBlur(i,t,n,n,l,"longitudinal",r)}_halfBlur(t,e,n,l,r,i,o){const u=this._renderer,s=this._blurMaterial;"latitudinal"!==i&&"longitudinal"!==i&&console.error("blur direction must be either latitudinal or longitudinal!");const a=new yi(Ip[l],s),c=s.uniforms,h=Dp[n]-1,d=isFinite(r)?Math.PI/(2*h):2*Math.PI/39,p=r/d,f=isFinite(r)?1+Math.floor(3*p):20;f>20&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${f} samples when the maximum is set to 20`);const m=[];let g=0;for(let t=0;t<20;++t){const e=t/p,n=Math.exp(-e*e/2);m.push(n),0==t?g+=n:t<f&&(g+=2*n)}for(let t=0;t<m.length;t++)m[t]=m[t]/g;c.envMap.value=t.texture,c.samples.value=f,c.weights.value=m,c.latitudinal.value="latitudinal"===i,o&&(c.poleAxis.value=o),c.dTheta.value=d,c.mipInt.value=8-n,c.inputEncoding.value=Cp[t.texture.encoding],c.outputEncoding.value=Cp[t.texture.encoding];const v=Dp[l];qp(e,3*Math.max(0,Tp-2*v),(0===l?0:2*Tp)+2*v*(l>4?l-8+4:0),3*v,2*v),u.setRenderTarget(e),u.render(a,Op)}}function Gp(t){return void 0!==t&&t.type===St&&(t.encoding===Je||t.encoding===Ze||t.encoding===Ke)}function Vp(){const t=[],e=[],n=[];let l=8;for(let r=0;r<Lp;r++){const i=Math.pow(2,l);e.push(i);let o=1/i;r>4?o=Ap[r-8+4-1]:0==r&&(o=0),n.push(o);const u=1/(i-1),s=-u/2,a=1+u/2,c=[s,s,a,s,a,a,s,s,a,a,s,a],h=6,d=6,p=3,f=2,m=1,g=new Float32Array(p*d*h),v=new Float32Array(f*d*h),y=new Float32Array(m*d*h);for(let t=0;t<h;t++){const e=t%3*2/3-1,n=t>2?0:-1,l=[e,n,0,e+2/3,n,0,e+2/3,n+1,0,e,n,0,e+2/3,n+1,0,e,n+1,0];g.set(l,p*d*t),v.set(c,f*d*t);const r=[t,t,t,t,t,t];y.set(r,m*d*t)}const x=new ti;x.setAttribute("position",new Ir(g,p)),x.setAttribute("uv",new Ir(v,f)),x.setAttribute("faceIndex",new Ir(y,m)),t.push(x),l>4&&l--}return{_lodPlanes:t,_sizeLods:e,_sigmas:n}}function Wp(t){const e=new ll(3*Tp,3*Tp,t);return e.texture.mapping=at,e.texture.name="PMREM.cubeUv",e.scissorTest=!0,e}function qp(t,e,n,l,r){t.viewport.set(e,n,l,r),t.scissor.set(e,n,l,r)}function Xp(){const t=new $n(1,1);return new Pc({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null},texelSize:{value:t},inputEncoding:{value:Cp[Je]},outputEncoding:{value:Cp[Je]}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t",blending:x,depthTest:!1,depthWrite:!1})}function Yp(){return new Pc({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},inputEncoding:{value:Cp[Je]},outputEncoding:{value:Cp[Je]}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t",blending:x,depthTest:!1,depthWrite:!1})}const $p=0,Jp=1,Zp=0,Kp=1,Qp=2;function tf(t){return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),t}function ef(t=[]){return console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),t.isMultiMaterial=!0,t.materials=t,t.clone=function(){return t.slice()},t}function nf(t,e){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new ra(t,e)}function lf(t){return console.warn("THREE.Particle has been renamed to THREE.Sprite."),new ws(t)}function rf(t,e){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new ra(t,e)}function of(t){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new Qs(t)}function uf(t){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new Qs(t)}function sf(t){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new Qs(t)}function af(t,e,n){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new ul(t,e,n)}function cf(t,e){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead."),new Ir(t,e).setUsage(Tn)}function hf(t,e){return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),new Dr(t,e)}function df(t,e){return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),new kr(t,e)}function pf(t,e){return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),new Nr(t,e)}function ff(t,e){return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),new Br(t,e)}function mf(t,e){return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),new Fr(t,e)}function gf(t,e){return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),new zr(t,e)}function vf(t,e){return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),new Hr(t,e)}function yf(t,e){return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),new Ur(t,e)}function xf(t,e){return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),new Gr(t,e)}function bf(t){return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),new _p(t)}function wf(t,e){return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),new mp(t,e)}function _f(t,e){return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),new Zs(new xa(t.geometry),new Us({color:void 0!==e?e:16777215}))}function Mf(t,e){return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),new Zs(new Ac(t.geometry),new Us({color:void 0!==e?e:16777215}))}function Sf(t){return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),new oh(t)}function Ef(t){return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),new hh(t)}function Tf(t,e,n){return console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options )."),new Pi(t,n)}function Af(){console.error("THREE.CanvasRenderer has been removed")}function Lf(){console.error("THREE.JSONLoader has been removed.")}ba.create=function(t,e){return console.log("THREE.Curve.create() has been deprecated"),t.prototype=Object.create(ba.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},fh.prototype.fromPoints=function(t){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(t)},rp.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},Zd.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},rh.prototype.extractUrlBase=function(t){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),Bh.extractUrlBase(t)},rh.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},jd.prototype.center=function(t){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(t)},jd.prototype.empty=function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},jd.prototype.isIntersectionBox=function(t){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},jd.prototype.size=function(t){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(t)},cl.prototype.center=function(t){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(t)},cl.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},cl.prototype.isIntersectionBox=function(t){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},cl.prototype.isIntersectionSphere=function(t){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},cl.prototype.size=function(t){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(t)},Cl.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()},Bi.prototype.setFromMatrix=function(t){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(t)},Vd.prototype.center=function(t){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(t)},Jn.prototype.flattenToArrayOffset=function(t,e){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},Jn.prototype.multiplyVector3=function(t){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},Jn.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},Jn.prototype.applyToBufferAttribute=function(t){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},Jn.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")},Jn.prototype.getInverse=function(t){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(t).invert()},Fl.prototype.extractPosition=function(t){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(t)},Fl.prototype.flattenToArrayOffset=function(t,e){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},Fl.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),(new ul).setFromMatrixColumn(this,3)},Fl.prototype.setRotationFromQuaternion=function(t){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(t)},Fl.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},Fl.prototype.multiplyVector3=function(t){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Fl.prototype.multiplyVector4=function(t){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Fl.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},Fl.prototype.rotateAxis=function(t){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),t.transformDirection(this)},Fl.prototype.crossVector=function(t){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Fl.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")},Fl.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},Fl.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},Fl.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},Fl.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},Fl.prototype.applyToBufferAttribute=function(t){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Fl.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},Fl.prototype.makeFrustum=function(t,e,n,l,r,i){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(t,e,l,n,r,i)},Fl.prototype.getInverse=function(t){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(t).invert()},Di.prototype.isIntersectionLine=function(t){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(t)},ol.prototype.multiplyVector3=function(t){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),t.applyQuaternion(this)},ol.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()},Bl.prototype.isIntersectionBox=function(t){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},Bl.prototype.isIntersectionPlane=function(t){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(t)},Bl.prototype.isIntersectionSphere=function(t){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},br.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},br.prototype.barycoordFromPoint=function(t,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(t,e)},br.prototype.midpoint=function(t){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(t)},br.prototypenormal=function(t){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(t)},br.prototype.plane=function(t){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(t)},br.barycoordFromPoint=function(t,e,n,l,r){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),br.getBarycoord(t,e,n,l,r)},br.normal=function(t,e,n,l){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),br.getNormal(t,e,n,l)},mh.prototype.extractAllPoints=function(t){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(t)},mh.prototype.extrude=function(t){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new pc(this,t)},mh.prototype.makeGeometry=function(t){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new bc(this,t)},$n.prototype.fromAttribute=function(t,e,n){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},$n.prototype.distanceToManhattan=function(t){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},$n.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},ul.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},ul.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},ul.prototype.getPositionFromMatrix=function(t){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(t)},ul.prototype.getScaleFromMatrix=function(t){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(t)},ul.prototype.getColumnFromMatrix=function(t,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(e,t)},ul.prototype.applyProjection=function(t){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(t)},ul.prototype.fromAttribute=function(t,e,n){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},ul.prototype.distanceToManhattan=function(t){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},ul.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},nl.prototype.fromAttribute=function(t,e,n){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},nl.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},ar.prototype.getChildByName=function(t){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(t)},ar.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},ar.prototype.translate=function(t,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,t)},ar.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},ar.prototype.applyMatrix=function(t){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)},Object.defineProperties(ar.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(t){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=t}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),yi.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")},Object.defineProperties(yi.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),Xe},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}}),Rs.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},Ti.prototype.setLens=function(t,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(gh.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(t){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(t){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(t){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=t}}}),Object.defineProperties(Ir.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===Tn},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(Tn)}}}),Ir.prototype.setDynamic=function(t){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?Tn:En),this},Ir.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},Ir.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},ti.prototype.addIndex=function(t){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(t)},ti.prototype.addAttribute=function(t,e){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?"index"===t?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(e),this):this.setAttribute(t,e):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(t,new Ir(arguments[1],arguments[2])))},ti.prototype.addDrawCall=function(t,e,n){void 0!==n&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(t,e)},ti.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},ti.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},ti.prototype.removeAttribute=function(t){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(t)},ti.prototype.applyMatrix=function(t){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)},Object.defineProperties(ti.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),rs.prototype.setDynamic=function(t){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?Tn:En),this},rs.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},pc.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")},pc.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")},pc.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")},ls.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")},Od.prototype.onUpdate=function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this},Object.defineProperties(_r.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new Cr}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=t===v}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(t){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=t}}}),Object.defineProperties(Si.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(t){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=t}}}),Qu.prototype.clearTarget=function(t,e,n,l){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(t),this.clear(e,n,l)},Qu.prototype.animate=function(t){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(t)},Qu.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},Qu.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},Qu.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},Qu.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},Qu.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},Qu.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},Qu.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},Qu.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},Qu.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},Qu.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},Qu.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},Qu.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},Qu.prototype.enableScissorTest=function(t){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(t)},Qu.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},Qu.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},Qu.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},Qu.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},Qu.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},Qu.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},Qu.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},Qu.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},Qu.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},Qu.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()},Object.defineProperties(Qu.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(t){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=!0===t?Ze:Je}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}}}),Object.defineProperties(Gu.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(ll.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(t){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=t}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(t){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=t}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(t){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=t}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(t){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=t}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(t){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(t){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=t}}}),hd.prototype.load=function(t){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const e=this;return(new Kh).load(t,(function(t){e.setBuffer(t)})),this},vd.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},Li.prototype.updateCubeMap=function(t,e){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(t,e)},Li.prototype.clear=function(t,e,n,l){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(t,e,n,l)},Kn.crossOrigin=void 0,Kn.loadTexture=function(t,e,n,l){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const r=new dh;r.setCrossOrigin(this.crossOrigin);const i=r.load(t,n,void 0,l);return e&&(i.mapping=e),i},Kn.loadTextureCube=function(t,e,n,l){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const r=new ch;r.setCrossOrigin(this.crossOrigin);const i=r.load(t,n,void 0,l);return e&&(i.mapping=e),i},Kn.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},Kn.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};const Cf={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")}};function Pf(){console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js")}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:l}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=l)},7013:function(t,e,n){t.exports=function(){"use strict";var t="function"==typeof Promise,e="object"==typeof self?self:n.g,l="undefined"!=typeof Symbol,r="undefined"!=typeof Map,i="undefined"!=typeof Set,o="undefined"!=typeof WeakMap,u="undefined"!=typeof WeakSet,s="undefined"!=typeof DataView,a=l&&void 0!==Symbol.iterator,c=l&&void 0!==Symbol.toStringTag,h=i&&"function"==typeof Set.prototype.entries,d=r&&"function"==typeof Map.prototype.entries,p=h&&Object.getPrototypeOf((new Set).entries()),f=d&&Object.getPrototypeOf((new Map).entries()),m=a&&"function"==typeof Array.prototype[Symbol.iterator],g=m&&Object.getPrototypeOf([][Symbol.iterator]()),v=a&&"function"==typeof String.prototype[Symbol.iterator],y=v&&Object.getPrototypeOf(""[Symbol.iterator]());return function(n){var l=typeof n;if("object"!==l)return l;if(null===n)return"null";if(n===e)return"global";if(Array.isArray(n)&&(!1===c||!(Symbol.toStringTag in n)))return"Array";if("object"==typeof window&&null!==window){if("object"==typeof window.location&&n===window.location)return"Location";if("object"==typeof window.document&&n===window.document)return"Document";if("object"==typeof window.navigator){if("object"==typeof window.navigator.mimeTypes&&n===window.navigator.mimeTypes)return"MimeTypeArray";if("object"==typeof window.navigator.plugins&&n===window.navigator.plugins)return"PluginArray"}if(("function"==typeof window.HTMLElement||"object"==typeof window.HTMLElement)&&n instanceof window.HTMLElement){if("BLOCKQUOTE"===n.tagName)return"HTMLQuoteElement";if("TD"===n.tagName)return"HTMLTableDataCellElement";if("TH"===n.tagName)return"HTMLTableHeaderCellElement"}}var a=c&&n[Symbol.toStringTag];if("string"==typeof a)return a;var h=Object.getPrototypeOf(n);return h===RegExp.prototype?"RegExp":h===Date.prototype?"Date":t&&h===Promise.prototype?"Promise":i&&h===Set.prototype?"Set":r&&h===Map.prototype?"Map":u&&h===WeakSet.prototype?"WeakSet":o&&h===WeakMap.prototype?"WeakMap":s&&h===DataView.prototype?"DataView":r&&h===f?"Map Iterator":i&&h===p?"Set Iterator":m&&h===g?"Array Iterator":v&&h===y?"String Iterator":null===h?"Object":Object.prototype.toString.call(n).slice(8,-1)}}()}},e={};function n(l){var r=e[l];if(void 0!==r)return r.exports;var i=e[l]={exports:{}};return t[l].call(i.exports,i,i.exports,n),i.exports}n.amdO={},n.d=function(t,e){for(var l in e)n.o(e,l)&&!n.o(t,l)&&Object.defineProperty(t,l,{enumerable:!0,get:e[l]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},function(){"use strict";function t(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}n(2222),n(2419),n(2212),n(2481);var e=n(2212);const l={type:"change"},r={type:"start"},i={type:"end"};class o extends e.EventDispatcher{constructor(t,n){super(),void 0===n&&console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.'),n===document&&console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'),this.object=t,this.domElement=n,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new e.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:e.MOUSE.ROTATE,MIDDLE:e.MOUSE.DOLLY,RIGHT:e.MOUSE.PAN},this.touches={ONE:e.TOUCH.ROTATE,TWO:e.TOUCH.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return c.phi},this.getAzimuthalAngle=function(){return c.theta},this.listenToKeyEvents=function(t){t.addEventListener("keydown",X),this._domElementKeyEvents=t},this.saveState=function(){o.target0.copy(o.target),o.position0.copy(o.object.position),o.zoom0=o.object.zoom},this.reset=function(){o.target.copy(o.target0),o.object.position.copy(o.position0),o.object.zoom=o.zoom0,o.object.updateProjectionMatrix(),o.dispatchEvent(l),o.update(),s=u.NONE},this.update=function(){const n=new e.Vector3,r=(new e.Quaternion).setFromUnitVectors(t.up,new e.Vector3(0,1,0)),i=r.clone().invert(),m=new e.Vector3,g=new e.Quaternion,v=2*Math.PI;return function(){const t=o.object.position;n.copy(t).sub(o.target),n.applyQuaternion(r),c.setFromVector3(n),o.autoRotate&&s===u.NONE&&A(2*Math.PI/60/60*o.autoRotateSpeed),o.enableDamping?(c.theta+=h.theta*o.dampingFactor,c.phi+=h.phi*o.dampingFactor):(c.theta+=h.theta,c.phi+=h.phi);let e=o.minAzimuthAngle,y=o.maxAzimuthAngle;return isFinite(e)&&isFinite(y)&&(e<-Math.PI?e+=v:e>Math.PI&&(e-=v),y<-Math.PI?y+=v:y>Math.PI&&(y-=v),c.theta=e<=y?Math.max(e,Math.min(y,c.theta)):c.theta>(e+y)/2?Math.max(e,c.theta):Math.min(y,c.theta)),c.phi=Math.max(o.minPolarAngle,Math.min(o.maxPolarAngle,c.phi)),c.makeSafe(),c.radius*=d,c.radius=Math.max(o.minDistance,Math.min(o.maxDistance,c.radius)),!0===o.enableDamping?o.target.addScaledVector(p,o.dampingFactor):o.target.add(p),n.setFromSpherical(c),n.applyQuaternion(i),t.copy(o.target).add(n),o.object.lookAt(o.target),!0===o.enableDamping?(h.theta*=1-o.dampingFactor,h.phi*=1-o.dampingFactor,p.multiplyScalar(1-o.dampingFactor)):(h.set(0,0,0),p.set(0,0,0)),d=1,!!(f||m.distanceToSquared(o.object.position)>a||8*(1-g.dot(o.object.quaternion))>a)&&(o.dispatchEvent(l),m.copy(o.object.position),g.copy(o.object.quaternion),f=!1,!0)}}(),this.dispose=function(){o.domElement.removeEventListener("contextmenu",Y),o.domElement.removeEventListener("pointerdown",U),o.domElement.removeEventListener("pointercancel",W),o.domElement.removeEventListener("wheel",q),o.domElement.ownerDocument.removeEventListener("pointermove",G),o.domElement.ownerDocument.removeEventListener("pointerup",V),null!==o._domElementKeyEvents&&o._domElementKeyEvents.removeEventListener("keydown",X)};const o=this,u={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let s=u.NONE;const a=1e-6,c=new e.Spherical,h=new e.Spherical;let d=1;const p=new e.Vector3;let f=!1;const m=new e.Vector2,g=new e.Vector2,v=new e.Vector2,y=new e.Vector2,x=new e.Vector2,b=new e.Vector2,w=new e.Vector2,_=new e.Vector2,M=new e.Vector2,S=[],E={};function T(){return Math.pow(.95,o.zoomSpeed)}function A(t){h.theta-=t}function L(t){h.phi-=t}const C=function(){const t=new e.Vector3;return function(e,n){t.setFromMatrixColumn(n,0),t.multiplyScalar(-e),p.add(t)}}(),P=function(){const t=new e.Vector3;return function(e,n){!0===o.screenSpacePanning?t.setFromMatrixColumn(n,1):(t.setFromMatrixColumn(n,0),t.crossVectors(o.object.up,t)),t.multiplyScalar(e),p.add(t)}}(),R=function(){const t=new e.Vector3;return function(e,n){const l=o.domElement;if(o.object.isPerspectiveCamera){const r=o.object.position;t.copy(r).sub(o.target);let i=t.length();i*=Math.tan(o.object.fov/2*Math.PI/180),C(2*e*i/l.clientHeight,o.object.matrix),P(2*n*i/l.clientHeight,o.object.matrix)}else o.object.isOrthographicCamera?(C(e*(o.object.right-o.object.left)/o.object.zoom/l.clientWidth,o.object.matrix),P(n*(o.object.top-o.object.bottom)/o.object.zoom/l.clientHeight,o.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),o.enablePan=!1)}}();function O(t){o.object.isPerspectiveCamera?d/=t:o.object.isOrthographicCamera?(o.object.zoom=Math.max(o.minZoom,Math.min(o.maxZoom,o.object.zoom*t)),o.object.updateProjectionMatrix(),f=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),o.enableZoom=!1)}function I(t){o.object.isPerspectiveCamera?d*=t:o.object.isOrthographicCamera?(o.object.zoom=Math.max(o.minZoom,Math.min(o.maxZoom,o.object.zoom/t)),o.object.updateProjectionMatrix(),f=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),o.enableZoom=!1)}function D(t){m.set(t.clientX,t.clientY)}function k(t){y.set(t.clientX,t.clientY)}function N(){if(1===S.length)m.set(S[0].pageX,S[0].pageY);else{const t=.5*(S[0].pageX+S[1].pageX),e=.5*(S[0].pageY+S[1].pageY);m.set(t,e)}}function B(){if(1===S.length)y.set(S[0].pageX,S[0].pageY);else{const t=.5*(S[0].pageX+S[1].pageX),e=.5*(S[0].pageY+S[1].pageY);y.set(t,e)}}function F(){const t=S[0].pageX-S[1].pageX,e=S[0].pageY-S[1].pageY,n=Math.sqrt(t*t+e*e);w.set(0,n)}function z(t){if(1==S.length)g.set(t.pageX,t.pageY);else{const e=Z(t),n=.5*(t.pageX+e.x),l=.5*(t.pageY+e.y);g.set(n,l)}v.subVectors(g,m).multiplyScalar(o.rotateSpeed);const e=o.domElement;A(2*Math.PI*v.x/e.clientHeight),L(2*Math.PI*v.y/e.clientHeight),m.copy(g)}function H(t){if(1===S.length)x.set(t.pageX,t.pageY);else{const e=Z(t),n=.5*(t.pageX+e.x),l=.5*(t.pageY+e.y);x.set(n,l)}b.subVectors(x,y).multiplyScalar(o.panSpeed),R(b.x,b.y),y.copy(x)}function j(t){const e=Z(t),n=t.pageX-e.x,l=t.pageY-e.y,r=Math.sqrt(n*n+l*l);_.set(0,r),M.set(0,Math.pow(_.y/w.y,o.zoomSpeed)),O(M.y),w.copy(_)}function U(t){!1!==o.enabled&&(0===S.length&&(o.domElement.ownerDocument.addEventListener("pointermove",G),o.domElement.ownerDocument.addEventListener("pointerup",V)),function(t){S.push(t)}(t),"touch"===t.pointerType?function(t){switch(J(t),S.length){case 1:switch(o.touches.ONE){case e.TOUCH.ROTATE:if(!1===o.enableRotate)return;N(),s=u.TOUCH_ROTATE;break;case e.TOUCH.PAN:if(!1===o.enablePan)return;B(),s=u.TOUCH_PAN;break;default:s=u.NONE}break;case 2:switch(o.touches.TWO){case e.TOUCH.DOLLY_PAN:if(!1===o.enableZoom&&!1===o.enablePan)return;o.enableZoom&&F(),o.enablePan&&B(),s=u.TOUCH_DOLLY_PAN;break;case e.TOUCH.DOLLY_ROTATE:if(!1===o.enableZoom&&!1===o.enableRotate)return;o.enableZoom&&F(),o.enableRotate&&N(),s=u.TOUCH_DOLLY_ROTATE;break;default:s=u.NONE}break;default:s=u.NONE}s!==u.NONE&&o.dispatchEvent(r)}(t):function(t){let n;switch(t.button){case 0:n=o.mouseButtons.LEFT;break;case 1:n=o.mouseButtons.MIDDLE;break;case 2:n=o.mouseButtons.RIGHT;break;default:n=-1}switch(n){case e.MOUSE.DOLLY:if(!1===o.enableZoom)return;!function(t){w.set(t.clientX,t.clientY)}(t),s=u.DOLLY;break;case e.MOUSE.ROTATE:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===o.enablePan)return;k(t),s=u.PAN}else{if(!1===o.enableRotate)return;D(t),s=u.ROTATE}break;case e.MOUSE.PAN:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===o.enableRotate)return;D(t),s=u.ROTATE}else{if(!1===o.enablePan)return;k(t),s=u.PAN}break;default:s=u.NONE}s!==u.NONE&&o.dispatchEvent(r)}(t))}function G(t){!1!==o.enabled&&("touch"===t.pointerType?function(t){switch(J(t),s){case u.TOUCH_ROTATE:if(!1===o.enableRotate)return;z(t),o.update();break;case u.TOUCH_PAN:if(!1===o.enablePan)return;H(t),o.update();break;case u.TOUCH_DOLLY_PAN:if(!1===o.enableZoom&&!1===o.enablePan)return;!function(t){o.enableZoom&&j(t),o.enablePan&&H(t)}(t),o.update();break;case u.TOUCH_DOLLY_ROTATE:if(!1===o.enableZoom&&!1===o.enableRotate)return;!function(t){o.enableZoom&&j(t),o.enableRotate&&z(t)}(t),o.update();break;default:s=u.NONE}}(t):function(t){if(!1!==o.enabled)switch(s){case u.ROTATE:if(!1===o.enableRotate)return;!function(t){g.set(t.clientX,t.clientY),v.subVectors(g,m).multiplyScalar(o.rotateSpeed);const e=o.domElement;A(2*Math.PI*v.x/e.clientHeight),L(2*Math.PI*v.y/e.clientHeight),m.copy(g),o.update()}(t);break;case u.DOLLY:if(!1===o.enableZoom)return;!function(t){_.set(t.clientX,t.clientY),M.subVectors(_,w),M.y>0?O(T()):M.y<0&&I(T()),w.copy(_),o.update()}(t);break;case u.PAN:if(!1===o.enablePan)return;!function(t){x.set(t.clientX,t.clientY),b.subVectors(x,y).multiplyScalar(o.panSpeed),R(b.x,b.y),y.copy(x),o.update()}(t)}}(t))}function V(t){!1!==o.enabled&&(t.pointerType,o.dispatchEvent(i),s=u.NONE,$(t),0===S.length&&(o.domElement.ownerDocument.removeEventListener("pointermove",G),o.domElement.ownerDocument.removeEventListener("pointerup",V)))}function W(t){$(t)}function q(t){!1===o.enabled||!1===o.enableZoom||s!==u.NONE&&s!==u.ROTATE||(t.preventDefault(),o.dispatchEvent(r),function(t){t.deltaY<0?I(T()):t.deltaY>0&&O(T()),o.update()}(t),o.dispatchEvent(i))}function X(t){!1!==o.enabled&&!1!==o.enablePan&&function(t){let e=!1;switch(t.code){case o.keys.UP:R(0,o.keyPanSpeed),e=!0;break;case o.keys.BOTTOM:R(0,-o.keyPanSpeed),e=!0;break;case o.keys.LEFT:R(o.keyPanSpeed,0),e=!0;break;case o.keys.RIGHT:R(-o.keyPanSpeed,0),e=!0}e&&(t.preventDefault(),o.update())}(t)}function Y(t){!1!==o.enabled&&t.preventDefault()}function $(t){delete E[t.pointerId];for(let e=0;e<S.length;e++)if(S[e].pointerId==t.pointerId)return void S.splice(e,1)}function J(t){let n=E[t.pointerId];void 0===n&&(n=new e.Vector2,E[t.pointerId]=n),n.set(t.pageX,t.pageY)}function Z(t){const e=t.pointerId===S[0].pointerId?S[1]:S[0];return E[e.pointerId]}o.domElement.addEventListener("contextmenu",Y),o.domElement.addEventListener("pointerdown",U),o.domElement.addEventListener("pointercancel",W),o.domElement.addEventListener("wheel",q,{passive:!1}),this.update()}}function u(t,e){for(var n=0;n<e.length;n++){var l=e[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(t,l.key,l)}}var s=function(){function t(){(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")})(this,t),this.scene=new e.Scene,this.camera=new e.PerspectiveCamera(75,1,.1,1e3),this.renderer=new e.WebGLRenderer({antialias:!0}),this.setup=this.setup.bind(this),this.createBoard=this.createBoard.bind(this),this.cleanup=this.cleanup.bind(this)}var n,l;return n=t,(l=[{key:"reset",value:function(){}},{key:"setup",value:function(){var t=this,n=document.getElementById("game");this.renderer.setSize(700,700),n.appendChild(this.renderer.domElement);var l=new e.BoxGeometry(1,1,1),r=new e.MeshPhongMaterial({color:16777215}),i=new e.Mesh(l,r);this.scene.add(i),this.camera.position.z=5,function e(){if(requestAnimationFrame(e),function(t){var e=t.domElement,n=e.clientWidth,l=e.clientHeight,r=e.width!==n||e.height!==l;return r&&t.setSize(n,l,!1),r}(t.renderer)){var n=t.renderer.domElement;t.camera.aspect=n.clientWidth/n.clientHeight,t.camera.updateProjectionMatrix()}i.rotation.x+=.01,i.rotation.y+=.01,t.renderer.render(t.scene,t.camera)}();var o=new e.DirectionalLight(16777215,.55);o.position.set(-1,2,4),this.scene.add(o);var u=new e.AmbientLight(16777215,.3);this.scene.add(u),document.getElementById("play").addEventListener("click",this.cleanup)}},{key:"cleanup",value:function(){for(;this.scene.children.length>0;)this.scene.remove(this.scene.children[0]);document.querySelector(".game-message").classList.toggle("inactive")}},{key:"animateScene",value:function(){document.getElementById("board").append(this.renderer.domElement)}},{key:"createBoard",value:function(){this.camera=new e.PerspectiveCamera(45,1,.1,100),this.camera.position.set(0,15,30),this.camera.lookAt(0,0,0);var t=new o(this.camera,this.renderer.domElement);t.target.set(0,0,0),t.update();var n=(new e.TextureLoader).load("../../assets/images/checker.png");n.wrapS=e.RepeatWrapping,n.wrapT=e.RepeatWrapping,n.magFilter=e.NearestFilter,n.repeat.set(10,10);var l=new e.PlaneGeometry(20,20),r=new e.MeshPhongMaterial({map:n,side:e.DoubleSide}),i=new e.Mesh(l,r);i.rotation.x=-.5*Math.PI,this.scene.add(i);var u=new e.AmbientLight(16777215,.4);this.scene.add(u);var s=new e.Mesh(l,r);s.rotation.x=-.5*Math.PI,this.scene.add(s);var a=new e.DirectionalLight(16777215,.7);a.position.set(-10,20,40),this.scene.add(a);var c=new e.BoxGeometry(2,2,2),h=new e.MeshPhongMaterial({color:16777215}),d=new e.Mesh(c,h);d.position.set(0,1,0),this.scene.add(d)}}])&&u(n.prototype,l),t}();function a(t){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&h(t,e)}function h(t,e){return(h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function d(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,l=f(t);if(e){var r=f(this).constructor;n=Reflect.construct(l,arguments,r)}else n=l.apply(this,arguments);return p(this,n)}}function p(t,e){return!e||"object"!==a(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function f(t){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function m(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,l=new Array(e);n<e;n++)l[n]=t[n];return l}function g(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function v(t,e){for(var n=0;n<e.length;n++){var l=e[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(t,l.key,l)}}function y(t,e,n){return e&&v(t.prototype,e),n&&v(t,n),t}n(4747),n(3210),n(9826),n(2526),n(1817),n(1539),n(2165),n(6992),n(8783),n(3948),n(7042),n(8309),n(1038),n(489);var x=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:100,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[0,0],l=arguments.length>2?arguments[2]:void 0;g(this,t),this.life=e,this.position=n,this.DIRECTIONS={left:[0,-1],right:[0,1],up:[-1,0],down:[1,0]},this.board=l,this.moveTo=this.moveTo.bind(this)}return y(t,[{key:"isDead",value:function(){return 0===this.life}},{key:"destroy",value:function(){this.life=0}},{key:"move",value:function(t){if(!this.DIRECTIONS[t])throw Error("Invalid Direction");var e,n,l=this.DIRECTIONS[t],r=(e=this.position,n=2,function(t){if(Array.isArray(t))return t}(e)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var l,r,i=[],o=!0,u=!1;try{for(n=n.call(t);!(o=(l=n.next()).done)&&(i.push(l.value),!e||i.length!==e);o=!0);}catch(t){u=!0,r=t}finally{try{o||null==n.return||n.return()}finally{if(u)throw r}}return i}}(e,n)||function(t,e){if(t){if("string"==typeof t)return m(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?m(t,e):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[0],o=r[1];if(this.board&&this.board.grid[i+l[0]][o+l[1]]instanceof b)throw document.getElementById("text-body").innerHTML="Cannot move through a wall",Error("Cannot move through a wall at position ".concat(this.board.grid[i+l[0]][o+l[1]]));this.position[0]+=l[0],this.position[1]+=l[1]}},{key:"moveTo",value:function(t){if(this.position[0]!==t[0]||this.position[1]!==t[1]){var e=[this.position[0]-t[0],this.position[1]-t[1]];0!==e[0]&&(e[0]<0?(this.move("down"),e[0]++):(this.move("up"),e[0]--)),0!==e[1]&&(e[1]<0?(this.move("right"),e[1]++):(this.move("left"),e[1]--)),this.moveTo(t)}}}]),t}(),b=function(t){c(n,t);var e=d(n);function n(t,l){return g(this,n),e.call(this,0,t,l)}return y(n,[{key:"move",value:function(){}},{key:"moveTo",value:function(){}}]),n}(x),w=function(t){c(n,t);var e=d(n);function n(t,l){return g(this,n),e.call(this,0,t,l)}return y(n,[{key:"move",value:function(){}},{key:"moveTo",value:function(){}}]),n}(x),_=(n(4916),n(3123),n(4960));const M=_.expect;let S;_.version,_.Assertion,_.AssertionError,_.util,_.config,_.use,_.should,_.assert,_.core,function t(e,n,l){function r(o,u){if(!n[o]){if(!e[o]){if(i)return i(o,!0);var s=new Error("Cannot find module '"+o+"'");throw s.code="MODULE_NOT_FOUND",s}var a=n[o]={exports:{}};e[o][0].call(a.exports,(function(t){return r(e[o][1][t]||t)}),a,a.exports,t,e,n,l)}return n[o].exports}for(var i=void 0,o=0;o<l.length;o++)r(l[o]);return r}({1:[function(t,e,n){S=t("./sinon")},{"./sinon":2}],2:[function(t,e,n){var l=t("./sinon/behavior"),r=t("./sinon/create-sandbox"),i=t("./sinon/util/core/extend"),o=t("./sinon/util/fake-timers"),u=t("./sinon/util/core/format"),s=t("nise"),a=t("./sinon/sandbox"),c=t("./sinon/stub"),h=t("./sinon/promise"),d={createSandbox:r,assert:t("./sinon/assert"),match:t("@sinonjs/samsam").createMatcher,restoreObject:t("./sinon/restore-object"),expectation:t("./sinon/mock-expectation"),defaultConfig:t("./sinon/util/core/default-config"),setFormatter:u.setFormatter,timers:o.timers,xhr:s.fakeXhr.xhr,FakeXMLHttpRequest:s.fakeXhr.FakeXMLHttpRequest,fakeServer:s.fakeServer,fakeServerWithClock:s.fakeServerWithClock,createFakeServer:s.fakeServer.create.bind(s.fakeServer),createFakeServerWithClock:s.fakeServerWithClock.create.bind(s.fakeServerWithClock),addBehavior:function(t,e){l.addBehavior(c,t,e)},promise:h},p=i(new a,d);e.exports=p},{"./sinon/assert":3,"./sinon/behavior":4,"./sinon/create-sandbox":7,"./sinon/mock-expectation":10,"./sinon/promise":12,"./sinon/restore-object":17,"./sinon/sandbox":18,"./sinon/stub":21,"./sinon/util/core/default-config":23,"./sinon/util/core/extend":25,"./sinon/util/core/format":26,"./sinon/util/fake-timers":40,"@sinonjs/samsam":85,nise:107}],3:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array,r=t("@sinonjs/commons").calledInOrder,i=t("@sinonjs/samsam").createMatcher,o=t("@sinonjs/commons").orderByFirstCall,u=t("./util/core/times-in-words"),s=t("./util/core/format"),a=t("@sinonjs/commons").prototypes.string.slice,c=t("@sinonjs/commons").global,h=l.slice,d=l.concat,p=l.forEach,f=l.join,m=l.splice;function g(){var t;function e(){var n=h(arguments);p(n,(function(n){n||t.fail("fake is not a spy"),n.proxy&&n.proxy.isSinonProxy?e(n.proxy):("function"!=typeof n&&t.fail(`${n} is not a function`),"function"!=typeof n.getCall&&t.fail(`${n} is not stubbed`))}))}function n(e,n){switch(e){case"notCalled":case"called":case"calledOnce":case"calledTwice":case"calledThrice":0!==n.length&&t.fail(`${e} takes 1 argument but was called with ${n.length+1} arguments`)}}function l(e,n){var l=e||c;(l.fail||t.fail).call(l,n)}function g(r,i,o){var u=o,s=i;2===arguments.length&&(u=i,s=r),t[r]=function(i){e(i);var o=h(arguments,1);n(r,o),("function"==typeof s?s(i):"function"==typeof i[s]?i[s].apply(i,o):i[s])?t.pass(r):l(this,(i.printf||i.proxy.printf).apply(i,d([u],o)))}}return t={failException:"AssertError",fail:function(e){var n=new Error(e);throw n.name=this.failException||t.failException,n},pass:function(){},callOrder:function(){e.apply(null,arguments);var n="",i="";if(r(arguments))t.pass("callOrder");else{try{n=f(arguments,", ");for(var u=h(arguments),s=u.length;s;)u[--s].called||m(u,s,1);i=f(o(u),", ")}catch(t){}l(this,`expected ${n} to be called in order but were called as ${i}`)}},callCount:function(n,r){if(e(n),n.callCount!==r){var i=`expected %n to be called ${u(r)} but was called %c%C`;l(this,n.printf(i))}else t.pass("callCount")},expose:function(t,e){if(!t)throw new TypeError("target is null or undefined");var n=e||{},l=void 0===n.prefix?"assert":n.prefix,r=void 0===n.includeFail||Boolean(n.includeFail),i=this;return p(Object.keys(i),(function(e){"expose"===e||!r&&/^(fail)/.test(e)||(t[function(t,e){return!t||/^fail/.test(e)?e:t+a(e,0,1).toUpperCase()+a(e,1)}(l,e)]=i[e])})),t},match:function(e,n){if(i(n).test(e))t.pass("match");else{var r=["expected value to match",`    expected = ${s(n)}`,`    actual = ${s(e)}`];l(this,f(r,"\n"))}}},g("called","expected %n to have been called at least once but was never called"),g("notCalled",(function(t){return!t.called}),"expected %n to not have been called but was called %c%C"),g("calledOnce","expected %n to be called once but was called %c%C"),g("calledTwice","expected %n to be called twice but was called %c%C"),g("calledThrice","expected %n to be called thrice but was called %c%C"),g("calledOn","expected %n to be called with %1 as this but was called with %t"),g("alwaysCalledOn","expected %n to always be called with %1 as this but was called with %t"),g("calledWithNew","expected %n to be called with new"),g("alwaysCalledWithNew","expected %n to always be called with new"),g("calledWith","expected %n to be called with arguments %D"),g("calledWithMatch","expected %n to be called with match %D"),g("alwaysCalledWith","expected %n to always be called with arguments %D"),g("alwaysCalledWithMatch","expected %n to always be called with match %D"),g("calledWithExactly","expected %n to be called with exact arguments %D"),g("calledOnceWithExactly","expected %n to be called once and with exact arguments %D"),g("calledOnceWithMatch","expected %n to be called once and with match %D"),g("alwaysCalledWithExactly","expected %n to always be called with exact arguments %D"),g("neverCalledWith","expected %n to never be called with arguments %*%C"),g("neverCalledWithMatch","expected %n to never be called with match %*%C"),g("threw","%n did not throw exception%C"),g("alwaysThrew","%n did not always throw exception%C"),t}e.exports=g(),e.exports.createAssertObject=g},{"./util/core/format":26,"./util/core/times-in-words":35,"@sinonjs/commons":47,"@sinonjs/samsam":85}],4:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array,r=t("./util/core/extend"),i=t("@sinonjs/commons").functionName,o=t("./util/core/next-tick"),u=t("@sinonjs/commons").valueToString,s=t("./util/core/export-async-behaviors"),a=l.concat,c=l.join,h=l.reverse,d=l.slice;function p(t,e,n){var l=e[t.replace(/sArg/,"ArgAt")];if(l>=n.length)throw new TypeError(`${t} failed: ${l+1} arguments required but only ${n.length} present`)}var f={create:function(t){var e=r({},f);return delete e.create,delete e.addBehavior,delete e.createBehavior,e.stub=t,t.defaultBehavior&&t.defaultBehavior.promiseLibrary&&(e.promiseLibrary=t.defaultBehavior.promiseLibrary),e},isPresent:function(){return"number"==typeof this.callArgAt||this.exception||this.exceptionCreator||"number"==typeof this.returnArgAt||this.returnThis||"number"==typeof this.resolveArgAt||this.resolveThis||"number"==typeof this.throwArgAt||this.fakeFn||this.returnValueDefined},invoke:function(t,e){var n=function(t,e){if("number"==typeof t.callArgAt){p("callsArg",t,e);var n=function(t,e){var n,l=t.callArgAt;if(l>=0)return e[l];-1===l&&(n=e),-2===l&&(n=h(d(e)));for(var r=t.callArgProp,i=0,o=n.length;i<o;++i){if(!r&&"function"==typeof n[i])return n[i];if(r&&n[i]&&"function"==typeof n[i][r])return n[i][r]}return null}(t,e);if("function"!=typeof n)throw new TypeError(function(t,e,n){var l;return t.callArgAt<0?(l=t.callArgProp?`${i(t.stub)} expected to yield to '${u(t.callArgProp)}', but no object with such a property was passed.`:`${i(t.stub)} expected to yield, but no callback was passed.`,n.length>0&&(l+=` Received [${c(n,", ")}]`),l):`argument at index ${t.callArgAt} is not a function: ${e}`}(t,n,e));if(!t.callbackAsync)return n.apply(t.callbackContext,t.callbackArguments);o((function(){n.apply(t.callbackContext,t.callbackArguments)}))}}(this,e);if(this.exception)throw this.exception;if(this.exceptionCreator)throw this.exception=this.exceptionCreator(),this.exceptionCreator=void 0,this.exception;if("number"==typeof this.returnArgAt)return p("returnsArg",this,e),e[this.returnArgAt];if(this.returnThis)return t;if("number"==typeof this.throwArgAt)throw p("throwsArg",this,e),e[this.throwArgAt];if(this.fakeFn)return this.fakeFn.apply(t,e);if("number"==typeof this.resolveArgAt)return p("resolvesArg",this,e),(this.promiseLibrary||Promise).resolve(e[this.resolveArgAt]);if(this.resolveThis)return(this.promiseLibrary||Promise).resolve(t);if(this.resolve)return(this.promiseLibrary||Promise).resolve(this.returnValue);if(this.reject)return(this.promiseLibrary||Promise).reject(this.returnValue);if(this.callsThrough)return this.effectiveWrappedMethod().apply(t,e);if(this.callsThroughWithNew){var l=this.effectiveWrappedMethod(),r=d(e);return new(l.bind.apply(l,a([null],r)))}return void 0!==this.returnValue?this.returnValue:"number"==typeof this.callArgAt?n:this.returnValue},effectiveWrappedMethod:function(){for(var t=this.stub;t;t=t.parent)if(t.wrappedMethod)return t.wrappedMethod;throw new Error("Unable to find wrapped method")},onCall:function(t){return this.stub.onCall(t)},onFirstCall:function(){return this.stub.onFirstCall()},onSecondCall:function(){return this.stub.onSecondCall()},onThirdCall:function(){return this.stub.onThirdCall()},withArgs:function(){throw new Error('Defining a stub by invoking "stub.onCall(...).withArgs(...)" is not supported. Use "stub.withArgs(...).onCall(...)" to define sequential behavior for calls with certain arguments.')}};function m(t){return function(){return this.defaultBehavior=this.defaultBehavior||f.create(this),this.defaultBehavior[t].apply(this.defaultBehavior,arguments),this}}f.addBehavior=function(t,e,n){f[e]=function(){return n.apply(this,a([this],d(arguments))),this.stub||this},t[e]=m(e)},f.createBehavior=m;var g=s(f);e.exports=r.nonEnum({},f,g)},{"./util/core/export-async-behaviors":24,"./util/core/extend":25,"./util/core/next-tick":34,"@sinonjs/commons":47}],5:[function(t,e,n){var l=t("./util/core/walk"),r=t("./util/core/get-property-descriptor"),i=t("@sinonjs/commons").prototypes.object.hasOwnProperty,o=t("@sinonjs/commons").prototypes.array.push;function u(t,e,n,l){"function"==typeof r(l,n).value&&i(e,n)&&o(t,e[n])}e.exports=function(t){var e=[];return l(t,u.bind(null,e,t)),e}},{"./util/core/get-property-descriptor":29,"./util/core/walk":38,"@sinonjs/commons":47}],6:[function(t,e,n){var l=t("supports-color");function r(t,e){return!1===l.stdout?t:`[${e}m${t}[0m`}n.red=function(t){return r(t,31)},n.green=function(t){return r(t,32)},n.cyan=function(t){return r(t,96)},n.white=function(t){return r(t,39)},n.bold=function(t){return r(t,1)}},{"supports-color":109}],7:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array,r=t("./sandbox"),i=l.forEach,o=l.push;function u(t,e,n,l){l&&(e.injectInto&&!(n in e.injectInto)?(e.injectInto[n]=l,o(t.injectedKeys,n)):o(t.args,l))}e.exports=function(t){if(!t)return new r;var e=function(t){var e=new r;return t.useFakeServer&&("object"==typeof t.useFakeServer&&(e.serverPrototype=t.useFakeServer),e.useFakeServer()),t.useFakeTimers&&("object"==typeof t.useFakeTimers?e.useFakeTimers(t.useFakeTimers):e.useFakeTimers()),e}(t);e.args=e.args||[],e.injectedKeys=[],e.injectInto=t.injectInto;var n=e.inject({});return t.properties?i(t.properties,(function(l){var r=n[l]||"sandbox"===l&&e;u(e,t,l,r)})):u(e,t,"sandbox"),e}},{"./sandbox":18,"@sinonjs/commons":47}],8:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array,r=t("./util/core/is-property-configurable"),i=t("./util/core/export-async-behaviors"),o=t("./util/core/extend"),u=l.slice,s=-1;function a(t,e,n){"function"==typeof e?t.exceptionCreator=e:"string"==typeof e?t.exceptionCreator=function(){var t=new Error(n||"");return t.name=e,t}:e?t.exception=e:t.exceptionCreator=function(){return new Error("Error")}}var c={callsFake:function(t,e){t.fakeFn=e},callsArg:function(t,e){if("number"!=typeof e)throw new TypeError("argument index is not number");t.callArgAt=e,t.callbackArguments=[],t.callbackContext=void 0,t.callArgProp=void 0,t.callbackAsync=!1},callsArgOn:function(t,e,n){if("number"!=typeof e)throw new TypeError("argument index is not number");t.callArgAt=e,t.callbackArguments=[],t.callbackContext=n,t.callArgProp=void 0,t.callbackAsync=!1},callsArgWith:function(t,e){if("number"!=typeof e)throw new TypeError("argument index is not number");t.callArgAt=e,t.callbackArguments=u(arguments,2),t.callbackContext=void 0,t.callArgProp=void 0,t.callbackAsync=!1},callsArgOnWith:function(t,e,n){if("number"!=typeof e)throw new TypeError("argument index is not number");t.callArgAt=e,t.callbackArguments=u(arguments,3),t.callbackContext=n,t.callArgProp=void 0,t.callbackAsync=!1},usingPromise:function(t,e){t.promiseLibrary=e},yields:function(t){t.callArgAt=s,t.callbackArguments=u(arguments,1),t.callbackContext=void 0,t.callArgProp=void 0,t.callbackAsync=!1,t.fakeFn=void 0},yieldsRight:function(t){t.callArgAt=-2,t.callbackArguments=u(arguments,1),t.callbackContext=void 0,t.callArgProp=void 0,t.callbackAsync=!1,t.fakeFn=void 0},yieldsOn:function(t,e){t.callArgAt=s,t.callbackArguments=u(arguments,2),t.callbackContext=e,t.callArgProp=void 0,t.callbackAsync=!1,t.fakeFn=void 0},yieldsTo:function(t,e){t.callArgAt=s,t.callbackArguments=u(arguments,2),t.callbackContext=void 0,t.callArgProp=e,t.callbackAsync=!1,t.fakeFn=void 0},yieldsToOn:function(t,e,n){t.callArgAt=s,t.callbackArguments=u(arguments,3),t.callbackContext=n,t.callArgProp=e,t.callbackAsync=!1,t.fakeFn=void 0},throws:a,throwsException:a,returns:function(t,e){t.returnValue=e,t.resolve=!1,t.reject=!1,t.returnValueDefined=!0,t.exception=void 0,t.exceptionCreator=void 0,t.fakeFn=void 0},returnsArg:function(t,e){if("number"!=typeof e)throw new TypeError("argument index is not number");t.returnArgAt=e},throwsArg:function(t,e){if("number"!=typeof e)throw new TypeError("argument index is not number");t.throwArgAt=e},returnsThis:function(t){t.returnThis=!0},resolves:function(t,e){t.returnValue=e,t.resolve=!0,t.resolveThis=!1,t.reject=!1,t.returnValueDefined=!0,t.exception=void 0,t.exceptionCreator=void 0,t.fakeFn=void 0},resolvesArg:function(t,e){if("number"!=typeof e)throw new TypeError("argument index is not number");t.resolveArgAt=e,t.returnValue=void 0,t.resolve=!0,t.resolveThis=!1,t.reject=!1,t.returnValueDefined=!1,t.exception=void 0,t.exceptionCreator=void 0,t.fakeFn=void 0},rejects:function(t,e,n){var l;return"string"==typeof e?(l=new Error(n||"")).name=e:l=e||new Error("Error"),t.returnValue=l,t.resolve=!1,t.resolveThis=!1,t.reject=!0,t.returnValueDefined=!0,t.exception=void 0,t.exceptionCreator=void 0,t.fakeFn=void 0,t},resolvesThis:function(t){t.returnValue=void 0,t.resolve=!1,t.resolveThis=!0,t.reject=!1,t.returnValueDefined=!1,t.exception=void 0,t.exceptionCreator=void 0,t.fakeFn=void 0},callThrough:function(t){t.callsThrough=!0},callThroughWithNew:function(t){t.callsThroughWithNew=!0},get:function(t,e){var n=t.stub||t;return Object.defineProperty(n.rootObj,n.propName,{get:e,configurable:r(n.rootObj,n.propName)}),t},set:function(t,e){var n=t.stub||t;return Object.defineProperty(n.rootObj,n.propName,{set:e,configurable:r(n.rootObj,n.propName)}),t},value:function(t,e){var n=t.stub||t;return Object.defineProperty(n.rootObj,n.propName,{value:e,enumerable:!0,configurable:n.shadowsPropOnPrototype||r(n.rootObj,n.propName)}),t}},h=i(c);e.exports=o({},c,h)},{"./util/core/export-async-behaviors":24,"./util/core/extend":25,"./util/core/is-property-configurable":32,"@sinonjs/commons":47}],9:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array,r=t("./proxy"),i=t("./util/core/next-tick"),o=l.slice,u=Promise;function s(t){if(arguments.length>0&&"function"!=typeof t)throw new TypeError("Expected f argument to be a Function");return c(t)}e.exports=s,s.returns=function(t){return c((function(){return t}))},s.throws=function(t){return c((function(){throw h(t)}))},s.resolves=function(t){return c((function(){return u.resolve(t)}))},s.rejects=function(t){return c((function(){return u.reject(h(t))}))},s.usingPromise=function(t){return u=t,s},s.yields=function(){var t=o(arguments);function e(){var e=arguments[arguments.length-1];if("function"!=typeof e)throw new TypeError("Expected last argument to be a function");e.apply(null,t)}return c(e)},s.yieldsAsync=function(){var t=o(arguments);function e(){var e=arguments[arguments.length-1];if("function"!=typeof e)throw new TypeError("Expected last argument to be a function");i((function(){e.apply(null,t)}))}return c(e)};var a=0;function c(t){var e,n=function(){var n,l;arguments.length>0&&(n=arguments[0],l=arguments[arguments.length-1]);var r=l&&"function"==typeof l?l:void 0;return e.firstArg=n,e.lastArg=l,e.callback=r,t&&t.apply(this,arguments)};return(e=r(n,t||n)).displayName="fake",e.id="fake#"+a++,e}function h(t){return t instanceof Error?t:new Error(t)}},{"./proxy":16,"./util/core/next-tick":34,"@sinonjs/commons":47}],10:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array,r=t("./proxy-invoke"),i=t("./proxy-call").toString,o=t("./util/core/times-in-words"),u=t("./util/core/extend"),s=t("@sinonjs/samsam").createMatcher,a=t("./stub"),c=t("./assert"),h=t("@sinonjs/samsam").deepEqual,d=t("./util/core/format"),p=t("@sinonjs/commons").valueToString,f=l.every,m=l.forEach,g=l.push,v=l.slice;function y(t){return"number"==typeof t.maxCalls&&t.callCount===t.maxCalls}function x(t,e){return s.isMatcher(t)&&t.test(e)||!0}var b={minCalls:1,maxCalls:1,create:function(t){var e=u.nonEnum(a(),b);return delete e.create,e.method=t,e},invoke:function(t,e,n){return this.verifyCallAllowed(e,n),r.apply(this,arguments)},atLeast:function(t){if("number"!=typeof t)throw new TypeError(`'${p(t)}' is not number`);return this.limitsSet||(this.maxCalls=null,this.limitsSet=!0),this.minCalls=t,this},atMost:function(t){if("number"!=typeof t)throw new TypeError(`'${p(t)}' is not number`);return this.limitsSet||(this.minCalls=null,this.limitsSet=!0),this.maxCalls=t,this},never:function(){return this.exactly(0)},once:function(){return this.exactly(1)},twice:function(){return this.exactly(2)},thrice:function(){return this.exactly(3)},exactly:function(t){if("number"!=typeof t)throw new TypeError(`'${p(t)}' is not a number`);return this.atLeast(t),this.atMost(t)},met:function(){return!this.failed&&(!("number"==typeof this.minCalls)||this.callCount>=this.minCalls)},verifyCallAllowed:function(t,e){var n=this.expectedArguments;y(this)&&(this.failed=!0,b.fail(`${this.method} already called ${o(this.maxCalls)}`)),"expectedThis"in this&&this.expectedThis!==t&&b.fail(`${this.method} called with ${p(t)} as thisValue, expected ${p(this.expectedThis)}`),"expectedArguments"in this&&(e||b.fail(`${this.method} received no arguments, expected ${d(n)}`),e.length<n.length&&b.fail(`${this.method} received too few arguments (${d(e)}), expected ${d(n)}`),this.expectsExactArgCount&&e.length!==n.length&&b.fail(`${this.method} received too many arguments (${d(e)}), expected ${d(n)}`),m(n,(function(t,l){x(t,e[l])||b.fail(`${this.method} received wrong arguments ${d(e)}, didn't match ${String(n)}`),h(e[l],t)||b.fail(`${this.method} received wrong arguments ${d(e)}, expected ${d(n)}`)}),this))},allowsCall:function(t,e){var n=this.expectedArguments;if(this.met()&&y(this))return!1;if("expectedThis"in this&&this.expectedThis!==t)return!1;if(!("expectedArguments"in this))return!0;var l=e||[];return!(l.length<n.length)&&(!this.expectsExactArgCount||l.length===n.length)&&f(n,(function(t,e){return!!x(t,l[e])&&!!h(l[e],t)}))},withArgs:function(){return this.expectedArguments=v(arguments),this},withExactArgs:function(){return this.withArgs.apply(this,arguments),this.expectsExactArgCount=!0,this},on:function(t){return this.expectedThis=t,this},toString:function(){var t=v(this.expectedArguments||[]);this.expectsExactArgCount||g(t,"[...]");var e,n=`${i.call({proxy:this.method||"anonymous mock expectation",args:t}).replace(", [...","[, ...")} ${function(t){var e=t.minCalls,n=t.maxCalls;if("number"==typeof e&&"number"==typeof n){var l=o(e);return e!==n&&(l=`at least ${l} and at most ${o(n)}`),l}return"number"==typeof e?`at least ${o(e)}`:`at most ${o(n)}`}(this)}`;return this.met()?`Expectation met: ${n}`:`Expected ${n} (${e=this.callCount,0===e?"never called":`called ${o(e)}`})`},verify:function(){return this.met()?b.pass(String(this)):b.fail(String(this)),!0},pass:function(t){c.pass(t)},fail:function(t){var e=new Error(t);throw e.name="ExpectationError",e}};e.exports=b},{"./assert":3,"./proxy-call":14,"./proxy-invoke":15,"./stub":21,"./util/core/extend":25,"./util/core/format":26,"./util/core/times-in-words":35,"@sinonjs/commons":47,"@sinonjs/samsam":85}],11:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array,r=t("./mock-expectation"),i=t("./proxy-call").toString,o=t("./util/core/extend"),u=t("@sinonjs/samsam").deepEqual,s=t("./util/core/wrap-method"),a=t("./util/core/use-promise-library"),c=l.concat,h=l.filter,d=l.forEach,p=l.every,f=l.join,m=l.push,g=l.slice,v=l.unshift;function y(t){return t&&"string"!=typeof t?y.create(t):r.create(t||"Anonymous mock")}function x(t,e){d(t||[],e)}o(y,{create:function(t){if(!t)throw new TypeError("object is null");var e=o.nonEnum({},y,{object:t});return delete e.create,e},expects:function(t){if(!t)throw new TypeError("method is falsy");if(this.expectations||(this.expectations={},this.proxies=[],this.failures=[]),!this.expectations[t]){this.expectations[t]=[];var e=this;s(this.object,t,(function(){return e.invokeMethod(t,this,arguments)})),m(this.proxies,t)}var n=r.create(t);return n.wrappedMethod=this.object[t].wrappedMethod,m(this.expectations[t],n),a(this.promiseLibrary,n),n},restore:function(){var t=this.object;x(this.proxies,(function(e){"function"==typeof t[e].restore&&t[e].restore()}))},verify:function(){var t=this.expectations||{},e=this.failures?g(this.failures):[],n=[];return x(this.proxies,(function(l){x(t[l],(function(t){t.met()?m(n,String(t)):m(e,String(t))}))})),this.restore(),e.length>0?r.fail(f(c(e,n),"\n")):n.length>0&&r.pass(f(c(e,n),"\n")),!0},usingPromise:function(t){return this.promiseLibrary=t,this},invokeMethod:function(t,e,n){var l,o=this.expectations&&this.expectations[t]?this.expectations[t]:[],s=n||[],a=h(o,(function(t){var e,n;return e=t.expectedArguments||[],n=s,(!t.expectsExactArgCount||e.length===n.length)&&p(e,(function(t,e){return u(n[e],t)}))})),c=h(a,(function(t){return!t.met()&&t.allowsCall(e,n)}));if(c.length>0)return c[0].apply(e,n);var g=[],y=0;if(d(a,(function(t){t.allowsCall(e,n)?l=l||t:y+=1})),l&&0===y)return l.apply(e,n);d(o,(function(t){m(g,`    ${String(t)}`)})),v(g,`Unexpected call: ${i.call({proxy:t,args:n})}`);var x=new Error;if(!x.stack)try{throw x}catch(t){}m(this.failures,`Unexpected call: ${i.call({proxy:t,args:n,stack:x.stack})}`),r.fail(f(g,"\n"))}}),e.exports=y},{"./mock-expectation":10,"./proxy-call":14,"./util/core/extend":25,"./util/core/use-promise-library":36,"./util/core/wrap-method":39,"@sinonjs/commons":47,"@sinonjs/samsam":85}],12:[function(t,e,n){var l=t("./fake"),r=t("./util/core/is-restorable"),i="pending",o="resolved",u="rejected";e.exports=function(t){var e=function(t){return r(t)?t:t?l(t):l()}(t),n=new Promise(e);function s(t,e,l){if(n.status!==i)throw new Error(`Promise already ${n.status}`);n.status=t,l(e)}return n.status=i,n.then((function(t){n.status=o,n.resolvedValue=t})).catch((function(t){n.status=u,n.rejectedValue=t})),n.resolve=function(t){return s(o,t,e.firstCall.args[0]),n},n.reject=function(t){return s(u,t,e.firstCall.args[1]),new Promise((function(t){n.catch((()=>t()))}))},n}},{"./fake":9,"./util/core/is-restorable":33}],13:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array.push;n.incrementCallCount=function(t){t.called=!0,t.callCount+=1,t.notCalled=!1,t.calledOnce=1===t.callCount,t.calledTwice=2===t.callCount,t.calledThrice=3===t.callCount},n.createCallProperties=function(t){t.firstCall=t.getCall(0),t.secondCall=t.getCall(1),t.thirdCall=t.getCall(2),t.lastCall=t.getCall(t.callCount-1)},n.delegateToCalls=function(t,e,n,r,i,o,u){t[e]=function(){if(!this.called)return!!o&&o.apply(this,arguments);if(void 0!==u&&this.callCount!==u)return!1;for(var t,s=0,a=[],c=0,h=this.callCount;c<h;c+=1){var d=(t=this.getCall(c))[r||e].apply(t,arguments);if(l(a,d),d&&(s+=1,n))return!0}return i?a:s===this.callCount}}},{"@sinonjs/commons":47}],14:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array,r=t("@sinonjs/samsam").createMatcher,i=t("@sinonjs/samsam").deepEqual,o=t("@sinonjs/commons").functionName,u=t("./util/core/format"),s=t("@sinonjs/commons").valueToString,a=l.concat,c=l.filter,h=l.join,d=l.map,p=l.reduce,f=l.slice;function m(t,e,n){var l=o(t)+e;throw n.length&&(l+=` Received [${h(f(n),", ")}]`),new Error(l)}var g={calledOn:function(t){return r.isMatcher(t)?t.test(this.thisValue):this.thisValue===t},calledWith:function(){var t=this,e=f(arguments);return!(e.length>t.args.length)&&p(e,(function(e,n,l){return e&&i(t.args[l],n)}),!0)},calledWithMatch:function(){var t=this,e=f(arguments);return!(e.length>t.args.length)&&p(e,(function(e,n,l){var i=t.args[l];return e&&r(n).test(i)}),!0)},calledWithExactly:function(){return arguments.length===this.args.length&&this.calledWith.apply(this,arguments)},notCalledWith:function(){return!this.calledWith.apply(this,arguments)},notCalledWithMatch:function(){return!this.calledWithMatch.apply(this,arguments)},returned:function(t){return i(this.returnValue,t)},threw:function(t){return void 0!==t&&this.exception?this.exception===t||this.exception.name===t:Boolean(this.exception)},calledWithNew:function(){return this.proxy.prototype&&this.thisValue instanceof this.proxy},calledBefore:function(t){return this.callId<t.callId},calledAfter:function(t){return this.callId>t.callId},calledImmediatelyBefore:function(t){return this.callId===t.callId-1},calledImmediatelyAfter:function(t){return this.callId===t.callId+1},callArg:function(t){return this.ensureArgIsAFunction(t),this.args[t]()},callArgOn:function(t,e){return this.ensureArgIsAFunction(t),this.args[t].apply(e)},callArgWith:function(t){return this.callArgOnWith.apply(this,a([t,null],f(arguments,1)))},callArgOnWith:function(t,e){this.ensureArgIsAFunction(t);var n=f(arguments,2);return this.args[t].apply(e,n)},throwArg:function(t){if(t>this.args.length)throw new TypeError(`Not enough arguments: ${t} required but only ${this.args.length} present`);throw this.args[t]},yield:function(){return this.yieldOn.apply(this,a([null],f(arguments,0)))},yieldOn:function(t){var e=f(this.args),n=c(e,(function(t){return"function"==typeof t}))[0];return n||m(this.proxy," cannot yield since no callback was passed.",e),n.apply(t,f(arguments,1))},yieldTo:function(t){return this.yieldToOn.apply(this,a([t,null],f(arguments,1)))},yieldToOn:function(t,e){var n=f(this.args),l=c(n,(function(e){return e&&"function"==typeof e[t]}))[0],r=l&&l[t];return r||m(this.proxy,` cannot yield to '${s(t)}' since no callback was passed.`,n),r.apply(e,f(arguments,2))},toString:function(){var t,e=this.proxy?`${String(this.proxy)}(`:"";return this.args?(t=d(this.args,(function(t){return u(t)})),e=`${e+h(t,", ")})`,void 0!==this.returnValue&&(e+=` => ${u(this.returnValue)}`),this.exception&&(e+=` !${this.exception.name}`,this.exception.message&&(e+=`(${this.exception.message})`)),this.stack&&(e+=(this.stack.split("\n")[3]||"unknown").replace(/^\s*(?:at\s+|@)?/," at ")),e):":("},ensureArgIsAFunction:function(t){if("function"!=typeof this.args[t])throw new TypeError(`Expected argument at position ${t} to be a Function, but was ${typeof this.args[t]}`)}};function v(t,e,n,l,r,i,o){if("number"!=typeof i)throw new TypeError("Call id is not a number");var u,s;n.length>0&&(u=n[0],s=n[n.length-1]);var a=Object.create(g),c=s&&"function"==typeof s?s:void 0;return a.proxy=t,a.thisValue=e,a.args=n,a.firstArg=u,a.lastArg=s,a.callback=c,a.returnValue=l,a.exception=r,a.callId=i,a.errorWithCallStack=o,a}Object.defineProperty(g,"stack",{enumerable:!0,configurable:!0,get:function(){return this.errorWithCallStack&&this.errorWithCallStack.stack||""}}),g.invokeCallback=g.yield,v.toString=g.toString,e.exports=v},{"./util/core/format":26,"@sinonjs/commons":47,"@sinonjs/samsam":85}],15:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array,r=t("./proxy-call-util"),i=l.push,o=l.forEach,u=l.concat,s=Error.prototype.constructor,a=Function.prototype.bind,c=0;e.exports=function(t,e,n){var l,h,d=this.matchingFakes(n),p=c++;r.incrementCallCount(this),i(this.thisValues,e),i(this.args,n),i(this.callIds,p),o(d,(function(t){r.incrementCallCount(t),i(t.thisValues,e),i(t.args,n),i(t.callIds,p)})),r.createCallProperties(this),o(d,r.createCallProperties);try{this.invoking=!0,this.getCall(this.callCount-1).calledWithNew()?"object"!=typeof(h=new(a.apply(this.func||t,u([e],n))))&&(h=e):h=(this.func||t).apply(e,n)}catch(t){l=t}finally{delete this.invoking}i(this.exceptions,l),i(this.returnValues,h),o(d,(function(t){i(t.exceptions,l),i(t.returnValues,h)}));var f=new s;try{throw f}catch(t){}if(i(this.errorsWithCallStack,f),o(d,(function(t){i(t.errorsWithCallStack,f)})),r.createCallProperties(this),o(d,r.createCallProperties),void 0!==l)throw l;return h}},{"./proxy-call-util":13,"@sinonjs/commons":47}],16:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array,r=t("./util/core/extend"),i=t("./util/core/function-to-string"),o=t("./proxy-call"),u=t("./proxy-call-util"),s=t("./proxy-invoke"),a=t("./util/core/format"),c=l.push,h=l.forEach,d=l.slice,p=Object.freeze([]),f={toString:i,named:function(t){this.displayName=t;var e=Object.getOwnPropertyDescriptor(this,"name");return e&&e.configurable&&(e.value=t,Object.defineProperty(this,"name",e)),this},invoke:s,matchingFakes:function(){return p},getCall:function(t){var e=t;return e<0&&(e+=this.callCount),e<0||e>=this.callCount?null:o(this,this.thisValues[e],this.args[e],this.returnValues[e],this.exceptions[e],this.callIds[e],this.errorsWithCallStack[e])},getCalls:function(){var t,e=[];for(t=0;t<this.callCount;t++)c(e,this.getCall(t));return e},calledBefore:function(t){return!!this.called&&(!t.called||this.callIds[0]<t.callIds[t.callIds.length-1])},calledAfter:function(t){return!(!this.called||!t.called)&&this.callIds[this.callCount-1]>t.callIds[0]},calledImmediatelyBefore:function(t){return!(!this.called||!t.called)&&this.callIds[this.callCount-1]===t.callIds[t.callCount-1]-1},calledImmediatelyAfter:function(t){return!(!this.called||!t.called)&&this.callIds[this.callCount-1]===t.callIds[t.callCount-1]+1},formatters:t("./spy-formatters"),printf:function(t){var e,n=this,l=d(arguments,1);return(t||"").replace(/%(.)/g,(function(t,r){return"function"==typeof(e=f.formatters[r])?String(e(n,l)):isNaN(parseInt(r,10))?`%${r}`:a(l[r-1])}))},resetHistory:function(){if(this.invoking){var t=new Error("Cannot reset Sinon function while invoking it. Move the call to .resetHistory outside of the callback.");throw t.name="InvalidResetException",t}return this.called=!1,this.notCalled=!0,this.calledOnce=!1,this.calledTwice=!1,this.calledThrice=!1,this.callCount=0,this.firstCall=null,this.secondCall=null,this.thirdCall=null,this.lastCall=null,this.args=[],this.firstArg=null,this.lastArg=null,this.returnValues=[],this.thisValues=[],this.exceptions=[],this.callIds=[],this.errorsWithCallStack=[],this.fakes&&h(this.fakes,(function(t){t.resetHistory()})),this}},m=u.delegateToCalls;m(f,"calledOn",!0),m(f,"alwaysCalledOn",!1,"calledOn"),m(f,"calledWith",!0),m(f,"calledOnceWith",!0,"calledWith",!1,void 0,1),m(f,"calledWithMatch",!0),m(f,"alwaysCalledWith",!1,"calledWith"),m(f,"alwaysCalledWithMatch",!1,"calledWithMatch"),m(f,"calledWithExactly",!0),m(f,"calledOnceWithExactly",!0,"calledWithExactly",!1,void 0,1),m(f,"calledOnceWithMatch",!0,"calledWithMatch",!1,void 0,1),m(f,"alwaysCalledWithExactly",!1,"calledWithExactly"),m(f,"neverCalledWith",!1,"notCalledWith",!1,(function(){return!0})),m(f,"neverCalledWithMatch",!1,"notCalledWithMatch",!1,(function(){return!0})),m(f,"threw",!0),m(f,"alwaysThrew",!1,"threw"),m(f,"returned",!0),m(f,"alwaysReturned",!1,"returned"),m(f,"calledWithNew",!0),m(f,"alwaysCalledWithNew",!1,"calledWithNew"),e.exports=function(t,e){var n=function(t,e){var n;switch(e.length){case 0:n=function(){return n.invoke(t,this,d(arguments))};break;case 1:n=function(e){return n.invoke(t,this,d(arguments))};break;case 2:n=function(e,l){return n.invoke(t,this,d(arguments))};break;case 3:n=function(e,l,r){return n.invoke(t,this,d(arguments))};break;case 4:n=function(e,l,r,i){return n.invoke(t,this,d(arguments))};break;case 5:n=function(e,l,r,i,o){return n.invoke(t,this,d(arguments))};break;case 6:n=function(e,l,r,i,o,u){return n.invoke(t,this,d(arguments))};break;case 7:n=function(e,l,r,i,o,u,s){return n.invoke(t,this,d(arguments))};break;case 8:n=function(e,l,r,i,o,u,s,a){return n.invoke(t,this,d(arguments))};break;case 9:n=function(e,l,r,i,o,u,s,a,c){return n.invoke(t,this,d(arguments))};break;case 10:n=function(e,l,r,i,o,u,s,a,c,h){return n.invoke(t,this,d(arguments))};break;case 11:n=function(e,l,r,i,o,u,s,a,c,h,p){return n.invoke(t,this,d(arguments))};break;case 12:n=function(e,l,r,i,o,u,s,a,c,h,p,f){return n.invoke(t,this,d(arguments))};break;default:n=function(){return n.invoke(t,this,d(arguments))}}var l=Object.getOwnPropertyDescriptor(e,"name");return l&&l.configurable&&Object.defineProperty(n,"name",l),r.nonEnum(n,{isSinonProxy:!0,called:!1,notCalled:!0,calledOnce:!1,calledTwice:!1,calledThrice:!1,callCount:0,firstCall:null,firstArg:null,secondCall:null,thirdCall:null,lastCall:null,lastArg:null,args:[],returnValues:[],thisValues:[],exceptions:[],callIds:[],errorsWithCallStack:[]}),n}(t,e);return r(n,t),n.prototype=t.prototype,r.nonEnum(n,f),n}},{"./proxy-call":14,"./proxy-call-util":13,"./proxy-invoke":15,"./spy-formatters":19,"./util/core/extend":25,"./util/core/format":26,"./util/core/function-to-string":27,"@sinonjs/commons":47}],17:[function(t,e,n){var l=t("./util/core/walk-object");function r(t,e){return t[e].restore&&t[e].restore.sinon}function i(t,e){t[e].restore()}e.exports=function(t){return l(i,t,r)}},{"./util/core/walk-object":37}],18:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array,r=t("@sinonjs/commons").deprecated,i=t("./collect-own-methods"),o=t("./util/core/get-property-descriptor"),u=t("./util/core/is-property-configurable"),s=t("@sinonjs/samsam").createMatcher,a=t("./assert"),c=t("./util/fake-timers"),h=t("./mock"),d=t("./spy"),p=t("./stub"),f=t("./fake"),m=t("@sinonjs/commons").valueToString,g=t("nise").fakeServer,v=t("nise").fakeXhr,y=t("./util/core/use-promise-library"),x=l.filter,b=l.forEach,w=l.push,_=l.reverse;function M(t,e){var n=x(t,(function(t){return"function"==typeof t[e]}));b(n,(function(t){t[e]()}))}function S(){var t,e=this,n=[],l=[],x=!1;function S(t){w(l,t)>e.leakThreshold&&!x&&(r.printWarning("Potential memory leak detected; be sure to call restore() to clean up your sandbox. To suppress this warning, modify the leakThreshold property of your sandbox."),x=!0)}function E(t,e){var n=o(t,e);function l(){n.isOwn?Object.defineProperty(t,e,n):delete t[e]}return l.object=t,l.property=e,l}function T(t,e){b(n,(function(n){if(n.object===t&&n.property===e)throw new TypeError(`Attempted to replace ${e} which is already replaced`)}))}function A(e,n){var l=e[0];if(void 0===e[1]&&"object"==typeof l){var r=i(n);b(r,(function(t){S(t)})),y(t,r)}else S(n),y(t,n);return n}e.leakThreshold=1e4,e.assert=a.createAssertObject(),e.serverPrototype=g,e.getFakes=function(){return l},e.getRestorers=function(){return n},e.createStubInstance=function(){var e=p.createStubInstance.apply(null,arguments),n=i(e);return b(n,(function(t){S(t)})),y(t,n),e},e.inject=function(t){return t.spy=function(){return e.spy.apply(null,arguments)},t.stub=function(){return e.stub.apply(null,arguments)},t.mock=function(){return e.mock.apply(null,arguments)},t.createStubInstance=function(){return e.createStubInstance.apply(e,arguments)},t.fake=function(){return e.fake.apply(null,arguments)},t.replace=function(){return e.replace.apply(null,arguments)},t.replaceSetter=function(){return e.replaceSetter.apply(null,arguments)},t.replaceGetter=function(){return e.replaceGetter.apply(null,arguments)},e.clock&&(t.clock=e.clock),e.server&&(t.server=e.server,t.requests=e.server.requests),t.match=s,t},e.mock=function(){var e=h.apply(null,arguments);return S(e),y(t,e),e},e.reset=function(){M(l,"reset"),M(l,"resetHistory")},e.resetBehavior=function(){M(l,"resetBehavior")},e.resetHistory=function(){function t(t){var e=t.resetHistory||t.reset;e&&e.call(t)}b(l,(function(e){if("function"!=typeof e){var n=[];e.get&&w(n,e.get),e.set&&w(n,e.set),b(n,t)}else t(e)}))},e.restore=function(){if(arguments.length)throw new Error("sandbox.restore() does not take any parameters. Perhaps you meant stub.restore()");_(l),M(l,"restore"),l=[],b(n,(function(t){t()})),n=[],e.restoreContext()},e.restoreContext=function(){var t=e.injectedKeys,n=e.injectInto;t&&(b(t,(function(t){delete n[t]})),t=[])},e.replace=function(t,e,l){var r=o(t,e);if(void 0===r)throw new TypeError(`Cannot replace non-existent property ${m(e)}`);if(void 0===l)throw new TypeError("Expected replacement argument to be defined");if("function"==typeof r.get)throw new Error("Use sandbox.replaceGetter for replacing getters");if("function"==typeof r.set)throw new Error("Use sandbox.replaceSetter for replacing setters");if(typeof t[e]!=typeof l)throw new TypeError(`Cannot replace ${typeof t[e]} with ${typeof l}`);return T(t,e),w(n,E(t,e)),t[e]=l,l},e.replaceGetter=function(t,e,l){var r=o(t,e);if(void 0===r)throw new TypeError(`Cannot replace non-existent property ${m(e)}`);if("function"!=typeof l)throw new TypeError("Expected replacement argument to be a function");if("function"!=typeof r.get)throw new Error("`object.property` is not a getter");return T(t,e),w(n,E(t,e)),Object.defineProperty(t,e,{get:l,configurable:u(t,e)}),l},e.replaceSetter=function(t,e,l){var r=o(t,e);if(void 0===r)throw new TypeError(`Cannot replace non-existent property ${m(e)}`);if("function"!=typeof l)throw new TypeError("Expected replacement argument to be a function");if("function"!=typeof r.set)throw new Error("`object.property` is not a setter");return T(t,e),w(n,E(t,e)),Object.defineProperty(t,e,{set:l,configurable:u(t,e)}),l},e.spy=function(){var t=d.apply(d,arguments);return A(arguments,t)},e.stub=function(){var t=p.apply(p,arguments);return A(arguments,t)},e.fake=function(t){var e=f.apply(f,arguments);return S(e),e},b(Object.keys(f),(function(t){var n=f[t];"function"==typeof n&&(e.fake[t]=function(){var t=n.apply(n,arguments);return S(t),t})})),e.useFakeTimers=function(t){var n=c.useFakeTimers.call(null,t);return e.clock=n,S(n),n},e.verify=function(){M(l,"verify")},e.verifyAndRestore=function(){var t;try{e.verify()}catch(e){t=e}if(e.restore(),t)throw t},e.useFakeServer=function(){var t=e.serverPrototype||g;return t&&t.create?(e.server=t.create(),S(e.server),e.server):null},e.useFakeXMLHttpRequest=function(){var t=v.useFakeXMLHttpRequest();return S(t),t},e.usingPromise=function(n){return t=n,l.promiseLibrary=n,e}}S.prototype.match=s,e.exports=S},{"./assert":3,"./collect-own-methods":5,"./fake":9,"./mock":11,"./spy":20,"./stub":21,"./util/core/get-property-descriptor":29,"./util/core/is-property-configurable":32,"./util/core/use-promise-library":36,"./util/fake-timers":40,"@sinonjs/commons":47,"@sinonjs/samsam":85,nise:107}],19:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array,r=t("./color"),i=t("@sinonjs/samsam").createMatcher,o=t("./util/core/times-in-words"),u=t("./util/core/format"),s=t("diff"),a=l.join,c=l.map,h=l.push,d=l.slice;function p(t,e,n){var l=n;return t.test(e)||(t.message=r.red(t.message),l&&(l=r.green(l))),`${l} ${t.message}`}function f(t){var e=c(t,(function(e){var n=e.value;return e.added?n=r.green(n):e.removed&&(n=r.red(n)),2===t.length&&(n+=" "),n}));return a(e,"")}function m(t){return"string"==typeof t?JSON.stringify(t):t}e.exports={c:function(t){return o(t.callCount)},n:function(t){return t.toString()},D:function(t,e){for(var n="",l=0,r=t.callCount;l<r;++l){r>1&&(n+=`\nCall ${l+1}:`);for(var o=t.getCall(l).args,a=d(e),c=0;c<o.length||c<a.length;++c){o[c]&&(o[c]=m(o[c])),a[c]&&(a[c]=m(a[c])),n+="\n";var h=c<o.length?u(o[c]):"";if(i.isMatcher(a[c]))n+=p(a[c],o[c],h);else{var g=c<a.length?u(a[c]):"";n+=f(s.diffJson(h,g))}}}return n},C:function(t){for(var e=[],n=0,l=t.callCount;n<l;++n){var r=`    ${t.getCall(n).toString()}`;/\n/.test(e[n-1])&&(r=`\n${r}`),h(e,r)}return e.length>0?`\n${a(e,"\n")}`:""},t:function(t){for(var e=[],n=0,l=t.callCount;n<l;++n)h(e,u(t.thisValues[n]));return a(e,", ")},"*":function(t,e){return a(c(e,(function(t){return u(t)})),", ")}}},{"./color":6,"./util/core/format":26,"./util/core/times-in-words":35,"@sinonjs/commons":47,"@sinonjs/samsam":85,diff:92}],20:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array,r=t("./proxy"),i=t("./util/core/extend"),o=t("@sinonjs/commons").functionName,u=t("./util/core/get-property-descriptor"),s=t("@sinonjs/samsam").deepEqual,a=t("./util/core/is-es-module"),c=t("./proxy-call-util"),h=t("./util/core/walk-object"),d=t("./util/core/wrap-method"),p=t("@sinonjs/commons").valueToString,f=l.forEach,m=l.pop,g=l.push,v=l.slice,y=Array.prototype.filter,x=0;function b(t,e,n){var l=t.matchingArguments;return!(!(l.length<=e.length&&s(v(e,0,l.length),l))||n&&l.length!==e.length)}var w={withArgs:function(){var t=v(arguments),e=m(this.matchingFakes(t,!0));if(e)return e;var n=this,l=this.instantiateFake();return l.matchingArguments=t,l.parent=this,g(this.fakes,l),l.withArgs=function(){return n.withArgs.apply(n,arguments)},f(n.args,(function(t,e){b(l,t)&&(c.incrementCallCount(l),g(l.thisValues,n.thisValues[e]),g(l.args,t),g(l.returnValues,n.returnValues[e]),g(l.exceptions,n.exceptions[e]),g(l.callIds,n.callIds[e]))})),c.createCallProperties(l),l},matchingFakes:function(t,e){return y.call(this.fakes,(function(n){return b(n,t,e)}))}},_=c.delegateToCalls;function M(t){var e,n=t;"function"!=typeof n?n=function(){}:e=o(n);var l=r(n,n);return i.nonEnum(l,w),i.nonEnum(l,{displayName:e||"spy",fakes:[],instantiateFake:M,id:"spy#"+x++}),l}function S(t,e,n){var l,r;if(a(t))throw new TypeError("ES Modules cannot be spied");return e||"function"!=typeof t?e||"object"!=typeof t?t||e?n?(l={},r=u(t,e),f(n,(function(t){l[t]=M(r[t])})),d(t,e,l)):d(t,e,M(t[e])):M((function(){})):h(S,t):M(t)}_(w,"callArg",!1,"callArgWith",!0,(function(){throw new Error(`${this.toString()} cannot call arg since it was not yet invoked.`)})),w.callArgWith=w.callArg,_(w,"callArgOn",!1,"callArgOnWith",!0,(function(){throw new Error(`${this.toString()} cannot call arg since it was not yet invoked.`)})),w.callArgOnWith=w.callArgOn,_(w,"throwArg",!1,"throwArg",!1,(function(){throw new Error(`${this.toString()} cannot throw arg since it was not yet invoked.`)})),_(w,"yield",!1,"yield",!0,(function(){throw new Error(`${this.toString()} cannot yield since it was not yet invoked.`)})),w.invokeCallback=w.yield,_(w,"yieldOn",!1,"yieldOn",!0,(function(){throw new Error(`${this.toString()} cannot yield since it was not yet invoked.`)})),_(w,"yieldTo",!1,"yieldTo",!0,(function(t){throw new Error(`${this.toString()} cannot yield to '${p(t)}' since it was not yet invoked.`)})),_(w,"yieldToOn",!1,"yieldToOn",!0,(function(t){throw new Error(`${this.toString()} cannot yield to '${p(t)}' since it was not yet invoked.`)})),i(S,w),e.exports=S},{"./proxy":16,"./proxy-call-util":13,"./util/core/extend":25,"./util/core/get-property-descriptor":29,"./util/core/is-es-module":30,"./util/core/walk-object":37,"./util/core/wrap-method":39,"@sinonjs/commons":47,"@sinonjs/samsam":85}],21:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array,r=t("./behavior"),i=t("./default-behaviors"),o=t("./proxy"),u=t("@sinonjs/commons").functionName,s=t("@sinonjs/commons").prototypes.object.hasOwnProperty,a=t("./util/core/is-non-existent-property"),c=t("./spy"),h=t("./util/core/extend"),d=t("./util/core/get-property-descriptor"),p=t("./util/core/is-es-module"),f=t("./util/core/wrap-method"),m=t("./throw-on-falsy-object"),g=t("@sinonjs/commons").valueToString,v=t("./util/core/walk-object"),y=l.forEach,x=l.pop,b=l.slice,w=l.sort,_=0;function M(t){var e;function n(){var t=b(arguments),n=e.matchingFakes(t),l=x(w(n,(function(t,e){return t.matchingArguments.length-e.matchingArguments.length})))||e;return E(l).invoke(this,arguments)}e=o(n,t||n),h.nonEnum(e,c),h.nonEnum(e,S);var l=t?u(t):null;return h.nonEnum(e,{fakes:[],instantiateFake:M,displayName:l||"stub",defaultBehavior:null,behaviors:[],id:"stub#"+_++}),e}function S(t,e){if(arguments.length>2)throw new TypeError("stub(obj, 'meth', fn) has been removed, see documentation");if(p(t))throw new TypeError("ES Modules cannot be stubbed");if(m.apply(null,arguments),a(t,e))throw new TypeError(`Cannot stub non-existent property ${g(e)}`);var n=d(t,e),l="object"==typeof t||"function"==typeof t,r=void 0===e&&l,i=!t&&void 0===e,o=l&&void 0!==e&&(void 0===n||"function"!=typeof n.value);if(r)return v(S,t);if(i)return M();var u="function"==typeof n.value?n.value:null,s=M(u);return h.nonEnum(s,{rootObj:t,propName:e,shadowsPropOnPrototype:!n.isOwn,restore:function(){void 0!==n&&n.isOwn?Object.defineProperty(t,e,n):delete t[e]}}),o?s:f(t,e,s)}function E(t){var e=t.behaviors[t.callCount-1];return e&&e.isPresent()?e:function(t){return t.defaultBehavior||function(t){return t.parent&&E(t.parent)}(t)||r.create(t)}(t)}S.createStubInstance=function(t,e){if("function"!=typeof t)throw new TypeError("The constructor should be a function.");var n=S(Object.create(t.prototype));return y(Object.keys(e||{}),(function(t){if(!(t in n))throw new Error(`Cannot stub ${t}. Property does not exist!`);var l=e[t];l&&l.createStubInstance?n[t]=l:n[t].returns(l)})),n};var T={resetBehavior:function(){this.defaultBehavior=null,this.behaviors=[],delete this.returnValue,delete this.returnArgAt,delete this.throwArgAt,delete this.resolveArgAt,delete this.fakeFn,this.returnThis=!1,this.resolveThis=!1,y(this.fakes,(function(t){t.resetBehavior()}))},reset:function(){this.resetHistory(),this.resetBehavior()},onCall:function(t){return this.behaviors[t]||(this.behaviors[t]=r.create(this)),this.behaviors[t]},onFirstCall:function(){return this.onCall(0)},onSecondCall:function(){return this.onCall(1)},onThirdCall:function(){return this.onCall(2)},withArgs:function(){var t=c.withArgs.apply(this,arguments);return this.defaultBehavior&&this.defaultBehavior.promiseLibrary&&(t.defaultBehavior=t.defaultBehavior||r.create(t),t.defaultBehavior.promiseLibrary=this.defaultBehavior.promiseLibrary),t}};y(Object.keys(r),(function(t){s(r,t)&&!s(T,t)&&"create"!==t&&"invoke"!==t&&(T[t]=r.createBehavior(t))})),y(Object.keys(i),(function(t){s(i,t)&&!s(T,t)&&r.addBehavior(S,t,i[t])})),h(S,T),e.exports=S},{"./behavior":4,"./default-behaviors":8,"./proxy":16,"./spy":20,"./throw-on-falsy-object":22,"./util/core/extend":25,"./util/core/get-property-descriptor":29,"./util/core/is-es-module":30,"./util/core/is-non-existent-property":31,"./util/core/walk-object":37,"./util/core/wrap-method":39,"@sinonjs/commons":47}],22:[function(t,e,n){var l=t("@sinonjs/commons").valueToString;e.exports=function(t,e){if(e&&!t){var n=null===t?"null":"undefined";throw new Error(`Trying to stub property '${l(e)}' of ${n}`)}}},{"@sinonjs/commons":47}],23:[function(t,e,n){e.exports={injectInto:null,properties:["spy","stub","mock","clock","server","requests","fake","replace","replaceSetter","replaceGetter","createStubInstance"],useFakeTimers:!0,useFakeServer:!0}},{}],24:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array.reduce;e.exports=function(t){return l(Object.keys(t),(function(e,n){return n.match(/^(callsArg|yields)/)&&!n.match(/Async/)&&(e[`${n}Async`]=function(){var e=t[n].apply(this,arguments);return this.callbackAsync=!0,e}),e}),{})}},{"@sinonjs/commons":47}],25:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array,r=t("@sinonjs/commons").prototypes.object.hasOwnProperty,i=l.join,o=l.push,u=function(){var t={constructor:function(){return"0"},toString:function(){return"1"},valueOf:function(){return"2"},toLocaleString:function(){return"3"},prototype:function(){return"4"},isPrototypeOf:function(){return"5"},propertyIsEnumerable:function(){return"6"},hasOwnProperty:function(){return"7"},length:function(){return"8"},unique:function(){return"9"}},e=[];for(var n in t)r(t,n)&&o(e,t[n]());return"0123456789"!==i(e,"")}();function s(t,e,n){var l,i,o;for(i=0;i<e.length;i++){for(o in l=e[i])r(l,o)&&n(t,l,o);u&&r(l,"toString")&&l.toString!==t.toString&&(t.toString=l.toString)}return t}e.exports=function(t,...e){return s(t,e,(function(t,e,n){var l=Object.getOwnPropertyDescriptor(t,n),i=Object.getOwnPropertyDescriptor(e,n);if("name"===n&&!l.writable)return;const o={configurable:i.configurable,enumerable:i.enumerable};r(i,"writable")?(o.writable=i.writable,o.value=i.value):(i.get&&(o.get=i.get.bind(t)),i.set&&(o.set=i.set.bind(t))),Object.defineProperty(t,n,o)}))},e.exports.nonEnum=function(t,...e){return s(t,e,(function(t,e,n){Object.defineProperty(t,n,{value:e[n],enumerable:!1,configurable:!0,writable:!0})}))}},{"@sinonjs/commons":47}],26:[function(t,e,n){var l,r=t("util").inspect;function i(){return l?l.apply(null,arguments):r.apply(r,arguments)}i.setFormatter=function(t){if("function"!=typeof t)throw new Error("format.setFormatter must be called with a function");l=t},e.exports=i},{util:91}],27:[function(t,e,n){e.exports=function(){var t,e,n;if(this.getCall&&this.callCount)for(t=this.callCount;t--;)for(e in n=this.getCall(t).thisValue)try{if(n[e]===this)return e}catch(t){}return this.displayName||"sinon fake"}},{}],28:[function(t,e,n){function l(t){setTimeout(t,0)}e.exports=function(t,e){return"object"==typeof t&&"function"==typeof t.nextTick?t.nextTick:"function"==typeof e?e:l}},{}],29:[function(t,e,n){e.exports=function(t,e){for(var n,l=t,r=Boolean(t&&Object.getOwnPropertyDescriptor(t,e));l&&!(n=Object.getOwnPropertyDescriptor(l,e));)l=Object.getPrototypeOf(l);return n&&(n.isOwn=r),n}},{}],30:[function(t,e,n){e.exports=function(t){return t&&"undefined"!=typeof Symbol&&"Module"===t[Symbol.toStringTag]&&Object.isSealed(t)}},{}],31:[function(t,e,n){e.exports=function(t,e){return Boolean(t&&void 0!==e&&!(e in t))}},{}],32:[function(t,e,n){var l=t("./get-property-descriptor");e.exports=function(t,e){var n=l(t,e);return!n||n.configurable}},{"./get-property-descriptor":29}],33:[function(t,e,n){e.exports=function(t){return"function"==typeof t&&"function"==typeof t.restore&&t.restore.sinon}},{}],34:[function(t,e,n){var l=t("@sinonjs/commons").global,r=t("./get-next-tick");e.exports=r(l.process,l.setImmediate)},{"./get-next-tick":28,"@sinonjs/commons":47}],35:[function(t,e,n){var l=[null,"once","twice","thrice"];e.exports=function(t){return l[t]||`${t||0} times`}},{}],36:[function(t,e,n){var l=Array.prototype.forEach;e.exports=function t(e,n){void 0!==e&&(Array.isArray(n)?l.call(n,t.bind(null,e)):"function"==typeof n.usingPromise&&n.usingPromise(e))}},{}],37:[function(t,e,n){var l=t("@sinonjs/commons").functionName,r=t("./get-property-descriptor"),i=t("./walk");e.exports=function(t,e,n){var o=!1,u=l(t);if(!e)throw new Error(`Trying to ${u} object but received ${String(e)}`);if(i(e,(function(l,i){i!==Object.prototype&&"constructor"!==l&&"function"==typeof r(i,l).value&&(n?n(e,l)&&(o=!0,t(e,l)):(o=!0,t(e,l)))})),!o)throw new Error(`Expected to ${u} methods on object but found none`);return e}},{"./get-property-descriptor":29,"./walk":38,"@sinonjs/commons":47}],38:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array.forEach;function r(t,e,n,i,o){var u,s;if("function"==typeof Object.getOwnPropertyNames)l(Object.getOwnPropertyNames(t),(function(l){if(!0!==o[l]){o[l]=!0;var r="function"==typeof Object.getOwnPropertyDescriptor(t,l).get?i:t;e.call(n,l,r)}})),(u=Object.getPrototypeOf(t))&&r(u,e,n,i,o);else for(s in t)e.call(n,t[s],s,t)}e.exports=function(t,e,n){return r(t,e,n,t,{})}},{"@sinonjs/commons":47}],39:[function(t,e,n){var l=t("./get-property-descriptor"),r=t("./extend"),i=t("@sinonjs/commons").prototypes.object.hasOwnProperty,o=t("@sinonjs/commons").valueToString,u=t("@sinonjs/commons").prototypes.array.push;function s(t,e){for(var n in e)i(t,n)||(t[n]=e[n])}function a(t,e,n){for(var r=["get","set"],i=l(t,e),o=0;o<r.length;o++)if(i[r[o]]&&i[r[o]].name===n.name)return r[o];return null}var c="keys"in Object;e.exports=function(t,e,n){if(!t)throw new TypeError("Should wrap property of object");if("function"!=typeof n&&"object"!=typeof n)throw new TypeError("Method wrapper should be a function or a property descriptor");function h(t){var n,l;if("function"==typeof(l=t)||Boolean(l&&l.constructor&&l.call&&l.apply)){if(t.restore&&t.restore.sinon)n=new TypeError(`Attempted to wrap ${o(e)} which is already wrapped`);else if(t.calledBefore){var r=t.returns?"stubbed":"spied on";n=new TypeError(`Attempted to wrap ${o(e)} which is already ${r}`)}}else n=new TypeError(`Attempted to wrap ${typeof t} property ${o(e)} as function`);if(n)throw t&&t.stackTraceError&&(n.stack+=`\n--------------\n${t.stackTraceError.stack}`),n}var d,p,f,m,g,v,y;function x(){h(f=t[e]),t[e]=n,n.displayName=e}p=[];var b=t.hasOwnProperty?t.hasOwnProperty(e):i(t,e);if(c){var w="function"==typeof n?{value:n}:n;if((g=l(t,e))?g.restore&&g.restore.sinon&&(d=new TypeError(`Attempted to wrap ${e} which is already wrapped`)):d=new TypeError(`Attempted to wrap ${typeof f} property ${e} as function`),d)throw g&&g.stackTraceError&&(d.stack+=`\n--------------\n${g.stackTraceError.stack}`),d;var _=Object.keys(w);for(m=0;m<_.length;m++)h(f=g[_[m]]),u(p,f);for(s(w,g),m=0;m<_.length;m++)s(w[_[m]],g[_[m]]);Object.defineProperty(t,e,w),"function"==typeof n&&t[e]!==n&&(delete t[e],x())}else x();function M(){var n;if(y=a(t,e,this.wrappedMethod)){if(b)c&&((n=l(t,e))[y]=g[y],Object.defineProperty(t,e,n));else try{delete t[e][y]}catch(t){}c?(n=l(t,e))&&n.value===v&&(t[e][y]=this.wrappedMethod):t[e][y]===v&&(t[e][y]=this.wrappedMethod)}else{if(b)c&&Object.defineProperty(t,e,g);else try{delete t[e]}catch(t){}c?(n=l(t,e))&&n.value===v&&(t[e]=this.wrappedMethod):t[e]===v&&(t[e]=this.wrappedMethod)}}return function(){for(m=0;m<p.length;m++)y=a(t,e,p[m]),v=y?n[y]:n,r.nonEnum(v,{displayName:e,wrappedMethod:p[m],stackTraceError:new Error("Stack Trace for original"),restore:M}),v.restore.sinon=!0,c||s(v,f)}(),n}},{"./extend":25,"./get-property-descriptor":29,"@sinonjs/commons":47}],40:[function(t,e,n){var l=t("./core/extend"),r=t("@sinonjs/fake-timers"),i=t("@sinonjs/commons").global;function o(t,e){var n=r;null!==e&&"object"==typeof e&&(n=r.withGlobal(e));var l=n.install(t);return l.restore=l.uninstall,l}function u(t,e){var n=i[e];void 0!==n&&(t[e]=n)}n.useFakeTimers=function(t){var e=void 0!==t,n=("number"==typeof t||t instanceof Date)&&1===arguments.length,r=null!==t&&"object"==typeof t&&1===arguments.length;if(!e)return o({now:0});if(n)return o({now:t});if(r){var i=l.nonEnum({},t),u=i.global;return delete i.global,o(i,u)}throw new TypeError("useFakeTimers expected epoch or config object. See https://github.com/sinonjs/sinon")},n.clock={create:function(t){return r.createClock(t)}};var s={setTimeout:setTimeout,clearTimeout:clearTimeout,setInterval:setInterval,clearInterval:clearInterval,Date:Date};u(s,"setImmediate"),u(s,"clearImmediate"),n.timers=s},{"./core/extend":25,"@sinonjs/commons":47,"@sinonjs/fake-timers":59}],41:[function(t,e,n){var l=t("./prototypes/array").every;function r(t,e,n,l){var r=!0;return n!==l.length-1&&(r=e.calledBefore(l[n+1])),!(!function(t,e){return void 0===t[e.id]&&(t[e.id]=0),t[e.id]<e.callCount}(t,e)||!r||(t[e.id]+=1,0))}e.exports=function(t){var e={},n=arguments.length>1?arguments:t;return l(n,r.bind(null,e))}},{"./prototypes/array":49}],42:[function(t,e,n){var l=t("./function-name");e.exports=function(t){return t.constructor&&t.constructor.name||"function"==typeof t.constructor&&l(t.constructor)||null}},{"./function-name":45}],43:[function(t,e,n){n.wrap=function(t,e){var l=function(){return n.printWarning(e),t.apply(this,arguments)};return t.prototype&&(l.prototype=t.prototype),l},n.defaultMsg=function(t,e){return t+"."+e+" is deprecated and will be removed from the public API in a future version of "+t+"."},n.printWarning=function(t){"object"==typeof process&&process.emitWarning?process.emitWarning(t):console.info?console.info(t):console.log(t)}},{}],44:[function(t,e,n){e.exports=function(t,e){var n=!0;try{t.forEach((function(){if(!e.apply(this,arguments))throw new Error}))}catch(t){n=!1}return n}},{}],45:[function(t,e,n){e.exports=function(t){if(!t)return"";try{return t.displayName||t.name||(String(t).match(/function ([^\s(]+)/)||[])[1]}catch(t){return""}}},{}],46:[function(t,e,l){var r;r=void 0!==n.g?n.g:"undefined"!=typeof window?window:self,e.exports=r},{}],47:[function(t,e,n){e.exports={global:t("./global"),calledInOrder:t("./called-in-order"),className:t("./class-name"),deprecated:t("./deprecated"),every:t("./every"),functionName:t("./function-name"),orderByFirstCall:t("./order-by-first-call"),prototypes:t("./prototypes"),typeOf:t("./type-of"),valueToString:t("./value-to-string")}},{"./called-in-order":41,"./class-name":42,"./deprecated":43,"./every":44,"./function-name":45,"./global":46,"./order-by-first-call":48,"./prototypes":52,"./type-of":57,"./value-to-string":58}],48:[function(t,e,n){var l=t("./prototypes/array").sort,r=t("./prototypes/array").slice;function i(t,e){var n=t.getCall(0),l=e.getCall(0);return(n&&n.callId||-1)<(l&&l.callId||-1)?-1:1}e.exports=function(t){return l(r(t),i)}},{"./prototypes/array":49}],49:[function(t,e,n){var l=t("./copy-prototype");e.exports=l(Array.prototype)},{"./copy-prototype":50}],50:[function(t,e,n){var l=Function.call;e.exports=function(t){return Object.getOwnPropertyNames(t).reduce((function(e,n){return"size"!==n&&"caller"!==n&&"callee"!==n&&"arguments"!==n&&"function"==typeof t[n]&&(e[n]=l.bind(t[n])),e}),Object.create(null))}},{}],51:[function(t,e,n){var l=t("./copy-prototype");e.exports=l(Function.prototype)},{"./copy-prototype":50}],52:[function(t,e,n){e.exports={array:t("./array"),function:t("./function"),map:t("./map"),object:t("./object"),set:t("./set"),string:t("./string")}},{"./array":49,"./function":51,"./map":53,"./object":54,"./set":55,"./string":56}],53:[function(t,e,n){var l=t("./copy-prototype");e.exports=l(Map.prototype)},{"./copy-prototype":50}],54:[function(t,e,n){var l=t("./copy-prototype");e.exports=l(Object.prototype)},{"./copy-prototype":50}],55:[function(t,e,n){var l=t("./copy-prototype");e.exports=l(Set.prototype)},{"./copy-prototype":50}],56:[function(t,e,n){var l=t("./copy-prototype");e.exports=l(String.prototype)},{"./copy-prototype":50}],57:[function(t,e,n){var l=t("type-detect");e.exports=function(t){return l(t).toLowerCase()}},{"type-detect":110}],58:[function(t,e,n){e.exports=function(t){return t&&t.toString?t.toString():String(t)}},{}],59:[function(t,e,n){function l(e){var n=e.navigator&&e.navigator.userAgent,r=n&&n.indexOf("MSIE ")>-1,i=Math.pow(2,31)-1,o=function(){},u=function(){return[]},s=e.setTimeout(o,0),a="object"==typeof s,c=e.process&&"function"==typeof e.process.hrtime,h=c&&"function"==typeof e.process.hrtime.bigint,d=e.process&&"function"==typeof e.process.nextTick,p=e.process&&t("util").promisify,f=e.performance&&"function"==typeof e.performance.now,m=e.Performance&&(typeof e.Performance).match(/^(function|object)$/),g=e.hasOwnProperty("queueMicrotask"),v=e.requestAnimationFrame&&"function"==typeof e.requestAnimationFrame,y=e.cancelAnimationFrame&&"function"==typeof e.cancelAnimationFrame,x=e.requestIdleCallback&&"function"==typeof e.requestIdleCallback,b=e.cancelIdleCallback&&"function"==typeof e.cancelIdleCallback,w=e.setImmediate&&"function"==typeof e.setImmediate;r&&(e.setTimeout=e.setTimeout,e.clearTimeout=e.clearTimeout,e.setInterval=e.setInterval,e.clearInterval=e.clearInterval,e.Date=e.Date),w&&(e.setImmediate=e.setImmediate,e.clearImmediate=e.clearImmediate),e.clearTimeout(s);var _=e.Date,M=1;function S(t){if(!t)return 0;if("function"==typeof t.getTime)return t.getTime();if("number"==typeof t)return t;throw new TypeError("now should be milliseconds since UNIX epoch")}function E(t,e,n){return n&&n.callAt>=t&&n.callAt<=e}function T(t,e){var n;for(n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return e.now?t.now=function(){return t.clock.now}:delete t.now,e.toSource?t.toSource=function(){return e.toSource()}:delete t.toSource,t.toString=function(){return e.toString()},t.prototype=e.prototype,t.parse=e.parse,t.UTC=e.UTC,t.prototype.toUTCString=e.prototype.toUTCString,t}function A(t,e){t.jobs||(t.jobs=[]),t.jobs.push(e)}function L(t){if(t.jobs){for(var e=0;e<t.jobs.length;e++){var n=t.jobs[e];if(n.func.apply(null,n.args),t.loopLimit&&e>t.loopLimit)throw new Error("Aborting after running "+t.loopLimit+" timers, assuming an infinite loop!")}t.jobs=[]}}function C(t,e){if(void 0===e.func)throw new Error("Callback must be provided to timer calls");if(a&&"function"!=typeof e.func)throw new TypeError("[ERR_INVALID_CALLBACK]: Callback must be a function. Received "+e.func+" of type "+typeof e.func);var n;if(e.type=e.immediate?"Immediate":"Timeout",e.hasOwnProperty("delay")&&("number"!=typeof e.delay&&(e.delay=parseInt(e.delay,10)),n=e.delay,(Number.isFinite?Number.isFinite(n):isFinite(n))||(e.delay=0),e.delay=e.delay>i?1:e.delay,e.delay=Math.max(0,e.delay)),e.hasOwnProperty("interval")&&(e.type="Interval",e.interval=e.interval>i?1:e.interval),e.hasOwnProperty("animation")&&(e.type="AnimationFrame",e.animation=!0),t.timers||(t.timers={}),e.id=M++,e.createdAt=t.now,e.callAt=t.now+(parseInt(e.delay)||(t.duringTick?1:0)),t.timers[e.id]=e,a){var l={id:e.id,ref:function(){return l},unref:function(){return l},refresh:function(){clearTimeout(e.id);var t=[e.func,e.delay].concat(e.args);return setTimeout.apply(null,t)}};return l}return e.id}function P(t,e){return t.callAt<e.callAt?-1:t.callAt>e.callAt?1:t.immediate&&!e.immediate?-1:!t.immediate&&e.immediate?1:t.createdAt<e.createdAt?-1:t.createdAt>e.createdAt?1:t.id<e.id?-1:t.id>e.id?1:void 0}function R(t,e,n){var l,r=t.timers,i=null;for(l in r)r.hasOwnProperty(l)&&(!E(e,n,r[l])||i&&1!==P(i,r[l])||(i=r[l]));return i}function O(t){var e,n=t.timers,l=null;for(e in n)n.hasOwnProperty(e)&&(l&&1!==P(l,n[e])||(l=n[e]));return l}function I(t){var e,n=t.timers,l=null;for(e in n)n.hasOwnProperty(e)&&(l&&-1!==P(l,n[e])||(l=n[e]));return l}function D(t,e){"number"==typeof e.interval?t.timers[e.id].callAt+=e.interval:delete t.timers[e.id],"function"==typeof e.func?e.func.apply(null,e.args):(0,eval)(e.func)}function k(t,e,n){if(e){t.timers||(t.timers={});var l="object"==typeof e?e.id:e;if(t.timers.hasOwnProperty(l)){var r=t.timers[l];if(!(r.type===n||"Timeout"===r.type&&"Interval"===n||"Interval"===r.type&&"Timeout"===n)){var i="AnimationFrame"===n?"cancelAnimationFrame":"clear"+n,o="AnimationFrame"===r.type?"requestAnimationFrame":"set"+r.type;throw new Error("Cannot clear timer: timer created with "+o+"() but cleared with "+i+"()")}delete t.timers[l]}}}function N(t,n){var l,r,i;for(r=0,i=t.methods.length;r<i;r++)if("hrtime"===(l=t.methods[r])&&e.process)e.process.hrtime=t._hrtime;else if("nextTick"===l&&e.process)e.process.nextTick=t._nextTick;else if("performance"===l){var o=Object.getOwnPropertyDescriptor(t,"_"+l);o&&o.get&&!o.set?Object.defineProperty(e,l,o):o.configurable&&(e[l]=t["_"+l])}else if(e[l]&&e[l].hadOwnProperty)e[l]=t["_"+l],"clearInterval"===l&&!0===n.shouldAdvanceTime&&e[l](t.attachedInterval);else try{delete e[l]}catch(t){}return t.methods=[],t.timers?Object.keys(t.timers).map((function(e){return t.timers[e]})):[]}function B(t,e,n){if(n[e].hadOwnProperty=Object.prototype.hasOwnProperty.call(t,e),n["_"+e]=t[e],"Date"===e){var l=T(n[e],t[e]);t[e]=l}else if("performance"===e){var r=Object.getOwnPropertyDescriptor(t,e);if(r&&r.get&&!r.set){Object.defineProperty(n,"_"+e,r);var i=Object.getOwnPropertyDescriptor(n,e);Object.defineProperty(t,e,i)}else t[e]=n[e]}else t[e]=function(){return n[e].apply(n,arguments)},Object.defineProperties(t[e],Object.getOwnPropertyDescriptors(n[e]));t[e].clock=n}function F(t,e){t.tick(e)}var z={setTimeout:e.setTimeout,clearTimeout:e.clearTimeout,setInterval:e.setInterval,clearInterval:e.clearInterval,Date:e.Date};w&&(z.setImmediate=e.setImmediate,z.clearImmediate=e.clearImmediate),c&&(z.hrtime=e.process.hrtime),d&&(z.nextTick=e.process.nextTick),f&&(z.performance=e.performance),v&&(z.requestAnimationFrame=e.requestAnimationFrame),g&&(z.queueMicrotask=!0),y&&(z.cancelAnimationFrame=e.cancelAnimationFrame),x&&(z.requestIdleCallback=e.requestIdleCallback),b&&(z.cancelIdleCallback=e.cancelIdleCallback);var H=e.setImmediate||e.setTimeout;function j(t,n){t=Math.floor(S(t)),n=n||1e3;var l=0,r=[0,0];if(void 0===_)throw new Error("The global scope doesn't have a `Date` object (see https://github.com/sinonjs/sinon/issues/1852#issuecomment-419622780)");var i={now:t,timeouts:{},Date:T((function t(e,n,l,r,i,o,u){if(!(this instanceof t))return new _(t.clock.now).toString();switch(arguments.length){case 0:return new _(t.clock.now);case 1:return new _(e);case 2:return new _(e,n);case 3:return new _(e,n,l);case 4:return new _(e,n,l,r);case 5:return new _(e,n,l,r,i);case 6:return new _(e,n,l,r,i,o);default:return new _(e,n,l,r,i,o,u)}}),_),loopLimit:n};function s(){return 16-(i.now-t)%16}function a(e){var n=i.now-r[0]-t,o=Math.floor(n/1e3),u=1e6*(n-1e3*o)+l-r[1];if(Array.isArray(e)){if(e[1]>1e9)throw new TypeError("Number of nanoseconds can't exceed a billion");var s=e[0],a=u-e[1],c=o-s;return a<0&&(a+=1e9,c-=1),[c,a]}return[o,u]}function d(t,e,n,r){var o="number"==typeof t?t:function(t){if(!t)return 0;var e,n=t.split(":"),l=n.length,r=l,i=0;if(l>3||!/^(\d\d:){0,2}\d\d?$/.test(t))throw new Error("tick only understands numbers, 'm:s' and 'h:m:s'. Each part must be two digits");for(;r--;){if((e=parseInt(n[r],10))>=60)throw new Error("Invalid time "+t);i+=e*Math.pow(60,l-r-1)}return 1e3*i}(t),u=Math.floor(o),s=function(t){var e=1e6,n=1e6*t%e,l=n<0?n+e:n;return Math.floor(l)}(o),a=l+s,c=i.now+u;if(o<0)throw new TypeError("Negative ticks are not supported");a>=1e6&&(c+=1,a-=1e6),l=a;var h,d,p,f,m,g,v=i.now,y=i.now;function x(){for(h=R(i,v,c);h&&v<=c;){if(i.timers[h.id]){v=h.callAt,i.now=h.callAt,p=i.now;try{L(i),D(i,h)}catch(t){d=d||t}if(e)return void H(f);m()}g()}if(p=i.now,L(i),p!==i.now&&(v+=i.now-p,c+=i.now-p),i.duringTick=!1,h=R(i,v,c))try{i.tick(c-i.now)}catch(t){d=d||t}else i.now=c,l=a;if(d)throw d;if(!e)return i.now;n(i.now)}return i.duringTick=!0,p=i.now,L(i),p!==i.now&&(v+=i.now-p,c+=i.now-p),f=e&&function(){try{m(),g(),x()}catch(t){r(t)}},m=function(){p!==i.now&&(v+=i.now-p,c+=i.now-p,y+=i.now-p)},g=function(){h=R(i,y,c),y=v},x()}if(i.Date.clock=i,h&&(a.bigint=function(){var t=a();return BigInt(t[0])*BigInt(1e9)+BigInt(t[1])}),i.requestIdleCallback=function(t,e){var n=0;i.countTimers()>0&&(n=50);var l=C(i,{func:t,args:Array.prototype.slice.call(arguments,2),delay:void 0===e?n:Math.min(e,n)});return l.id||l},i.cancelIdleCallback=function(t){return k(i,t,"Timeout")},i.setTimeout=function(t,e){return C(i,{func:t,args:Array.prototype.slice.call(arguments,2),delay:e})},void 0!==e.Promise&&p&&(i.setTimeout[p.custom]=function(t,n){return new e.Promise((function(e){C(i,{func:e,args:[n],delay:t})}))}),i.clearTimeout=function(t){return k(i,t,"Timeout")},i.nextTick=function(t){return A(i,{func:t,args:Array.prototype.slice.call(arguments,1)})},i.queueMicrotask=function(t){return i.nextTick(t)},i.setInterval=function(t,e){return e=parseInt(e,10),C(i,{func:t,args:Array.prototype.slice.call(arguments,2),delay:e,interval:e})},i.clearInterval=function(t){return k(i,t,"Interval")},w&&(i.setImmediate=function(t){return C(i,{func:t,args:Array.prototype.slice.call(arguments,1),immediate:!0})},void 0!==e.Promise&&p&&(i.setImmediate[p.custom]=function(t){return new e.Promise((function(e){C(i,{func:e,args:[t],immediate:!0})}))}),i.clearImmediate=function(t){return k(i,t,"Immediate")}),i.countTimers=function(){return Object.keys(i.timers||{}).length+(i.jobs||[]).length},i.requestAnimationFrame=function(t){var e=C(i,{func:t,delay:s(),args:[i.now+s()],animation:!0});return e.id||e},i.cancelAnimationFrame=function(t){return k(i,t,"AnimationFrame")},i.runMicrotasks=function(){L(i)},i.tick=function(t){return d(t,!1)},void 0!==e.Promise&&(i.tickAsync=function(t){return new e.Promise((function(e,n){H((function(){try{d(t,!0,e,n)}catch(t){n(t)}}))}))}),i.next=function(){L(i);var t=O(i);if(!t)return i.now;i.duringTick=!0;try{return i.now=t.callAt,D(i,t),L(i),i.now}finally{i.duringTick=!1}},void 0!==e.Promise&&(i.nextAsync=function(){return new e.Promise((function(t,e){H((function(){try{var n,l=O(i);if(!l)return void t(i.now);i.duringTick=!0,i.now=l.callAt;try{D(i,l)}catch(t){n=t}i.duringTick=!1,H((function(){n?e(n):t(i.now)}))}catch(t){e(t)}}))}))}),i.runAll=function(){var t;for(L(i),t=0;t<i.loopLimit;t++){if(!i.timers)return i.now;if(0===Object.keys(i.timers).length)return i.now;i.next()}throw new Error("Aborting after running "+i.loopLimit+" timers, assuming an infinite loop!")},i.runToFrame=function(){return i.tick(s())},void 0!==e.Promise&&(i.runAllAsync=function(){return new e.Promise((function(t,e){var n=0;!function l(){H((function(){try{if(n<i.loopLimit)return i.timers?0===Object.keys(i.timers).length?void t(i.now):(i.next(),n++,void l()):void t(i.now);e(new Error("Aborting after running "+i.loopLimit+" timers, assuming an infinite loop!"))}catch(t){e(t)}}))}()}))}),i.runToLast=function(){var t=I(i);return t?i.tick(t.callAt-i.now):(L(i),i.now)},void 0!==e.Promise&&(i.runToLastAsync=function(){return new e.Promise((function(t,e){H((function(){try{var n=I(i);n||t(i.now),t(i.tickAsync(n.callAt))}catch(t){e(t)}}))}))}),i.reset=function(){l=0,i.timers={},i.jobs=[],i.now=t},i.setSystemTime=function(t){var e,n,o=S(t),u=o-i.now;for(e in r[0]=r[0]+u,r[1]=r[1]+l,i.now=o,l=0,i.timers)i.timers.hasOwnProperty(e)&&((n=i.timers[e]).createdAt+=u,n.callAt+=u)},f){if(i.performance=Object.create(null),m){var g=e.Performance.prototype;Object.getOwnPropertyNames(g).forEach((function(t){0===t.indexOf("getEntries")?i.performance[t]=u:i.performance[t]=o}))}i.performance.now=function(){var t=a();return 1e3*t[0]+t[1]/1e6}}return c&&(i.hrtime=a),i}return{timers:z,createClock:j,install:function(t){if(arguments.length>1||t instanceof Date||Array.isArray(t)||"number"==typeof t)throw new TypeError("FakeTimers.install called with "+String(t)+" install requires an object parameter");if((t=void 0!==t?t:{}).shouldAdvanceTime=t.shouldAdvanceTime||!1,t.advanceTimeDelta=t.advanceTimeDelta||20,t.target)throw new TypeError("config.target is no longer supported. Use `withGlobal(target)` instead.");var n,l,r=j(t.now,t.loopLimit);for(r.uninstall=function(){return N(r,t)},r.methods=t.toFake||[],0===r.methods.length&&(r.methods=Object.keys(z).filter((function(t){return"nextTick"!==t&&"queueMicrotask"!==t}))),n=0,l=r.methods.length;n<l;n++)if("hrtime"===r.methods[n])e.process&&"function"==typeof e.process.hrtime&&B(e.process,r.methods[n],r);else if("nextTick"===r.methods[n])e.process&&"function"==typeof e.process.nextTick&&B(e.process,r.methods[n],r);else{if("setInterval"===r.methods[n]&&!0===t.shouldAdvanceTime){var i=F.bind(null,r,t.advanceTimeDelta),o=e[r.methods[n]](i,t.advanceTimeDelta);r.attachedInterval=o}B(e,r.methods[n],r)}return r},withGlobal:l}}var r=l(t("@sinonjs/commons").global);n.timers=r.timers,n.createClock=r.createClock,n.install=r.install,n.withGlobal=l},{"@sinonjs/commons":47,util:91}],60:[function(t,e,n){var l=[Array,Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];e.exports=l},{}],61:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array,r=t("./deep-equal").use(M),i=t("@sinonjs/commons").every,o=t("@sinonjs/commons").functionName,u=t("lodash.get"),s=t("./iterable-to-string"),a=t("@sinonjs/commons").prototypes.object,c=t("@sinonjs/commons").typeOf,h=t("@sinonjs/commons").valueToString,d=t("./create-matcher/assert-matcher"),p=t("./create-matcher/assert-method-exists"),f=t("./create-matcher/assert-type"),m=t("./create-matcher/is-iterable"),g=t("./create-matcher/is-matcher"),v=t("./create-matcher/matcher-prototype"),y=l.indexOf,x=l.some,b=a.hasOwnProperty,w=a.toString,_=t("./create-matcher/type-map")(M);function M(t,e){var n=Object.create(v),l=c(t);if(void 0!==e&&"string"!=typeof e)throw new TypeError("Message should be a string");if(arguments.length>2)throw new TypeError(`Expected 1 or 2 arguments, received ${arguments.length}`);return l in _?_[l](n,t,e):n.test=function(e){return r(e,t)},n.message||(n.message=`match(${h(t)})`),n}function S(t,e){return function(n,l){f(n,"string","property");var i=1===arguments.length,o=`${e}("${n}"`;return i||(o+=`, ${h(l)}`),M((function(e){return!(null==e||!t(e,n))&&(i||r(e[n],l))}),o+=")")}}M.isMatcher=g,M.any=M((function(){return!0}),"any"),M.defined=M((function(t){return null!=t}),"defined"),M.truthy=M((function(t){return Boolean(t)}),"truthy"),M.falsy=M((function(t){return!t}),"falsy"),M.same=function(t){return M((function(e){return t===e}),`same(${h(t)})`)},M.in=function(t){if("array"!==c(t))throw new TypeError("array expected");return M((function(e){return x(t,(function(t){return t===e}))}),`in(${h(t)})`)},M.typeOf=function(t){return f(t,"string","type"),M((function(e){return c(e)===t}),`typeOf("${t}")`)},M.instanceOf=function(t){return"undefined"==typeof Symbol||void 0===Symbol.hasInstance?f(t,"function","type"):p(t,Symbol.hasInstance,"type","[Symbol.hasInstance]"),M((function(e){return e instanceof t}),`instanceOf(${o(t)||w(t)})`)},M.has=S((function(t,e){return"object"==typeof t?e in t:void 0!==t[e]}),"has"),M.hasOwn=S((function(t,e){return b(t,e)}),"hasOwn"),M.hasNested=function(t,e){f(t,"string","property");var n=1===arguments.length,l=`hasNested("${t}"`;return n||(l+=`, ${h(e)}`),M((function(l){return null!=l&&void 0!==u(l,t)&&(n||r(u(l,t),e))}),l+=")")};var E={null:!0,boolean:!0,number:!0,string:!0,object:!0,array:!0};M.json=function(t){if(!E[c(t)])throw new TypeError("Value cannot be the result of JSON.parse");return M((function(e){var n;try{n=JSON.parse(e)}catch(t){return!1}return r(n,t)}),`json(${JSON.stringify(t,null,"  ")})`)},M.every=function(t){return d(t),M((function(e){return"object"===c(e)?i(Object.keys(e),(function(n){return t.test(e[n])})):m(e)&&i(e,(function(e){return t.test(e)}))}),`every(${t.message})`)},M.some=function(t){return d(t),M((function(e){return"object"===c(e)?!i(Object.keys(e),(function(n){return!t.test(e[n])})):m(e)&&!i(e,(function(e){return!t.test(e)}))}),`some(${t.message})`)},M.array=M.typeOf("array"),M.array.deepEquals=function(t){return M((function(e){var n=e.length===t.length;return"array"===c(e)&&n&&i(e,(function(e,n){var l=t[n];return"array"===c(l)&&"array"===c(e)?M.array.deepEquals(l).test(e):r(l,e)}))}),`deepEquals([${s(t)}])`)},M.array.startsWith=function(t){return M((function(e){return"array"===c(e)&&i(t,(function(t,n){return e[n]===t}))}),`startsWith([${s(t)}])`)},M.array.endsWith=function(t){return M((function(e){var n=e.length-t.length;return"array"===c(e)&&i(t,(function(t,l){return e[n+l]===t}))}),`endsWith([${s(t)}])`)},M.array.contains=function(t){return M((function(e){return"array"===c(e)&&i(t,(function(t){return-1!==y(e,t)}))}),`contains([${s(t)}])`)},M.map=M.typeOf("map"),M.map.deepEquals=function(t){return M((function(e){var n=e.size===t.size;return"map"===c(e)&&n&&i(e,(function(e,n){return t.has(n)&&t.get(n)===e}))}),`deepEquals(Map[${s(t)}])`)},M.map.contains=function(t){return M((function(e){return"map"===c(e)&&i(t,(function(t,n){return e.has(n)&&e.get(n)===t}))}),`contains(Map[${s(t)}])`)},M.set=M.typeOf("set"),M.set.deepEquals=function(t){return M((function(e){var n=e.size===t.size;return"set"===c(e)&&n&&i(e,(function(e){return t.has(e)}))}),`deepEquals(Set[${s(t)}])`)},M.set.contains=function(t){return M((function(e){return"set"===c(e)&&i(t,(function(t){return e.has(t)}))}),`contains(Set[${s(t)}])`)},M.bool=M.typeOf("boolean"),M.number=M.typeOf("number"),M.string=M.typeOf("string"),M.object=M.typeOf("object"),M.func=M.typeOf("function"),M.regexp=M.typeOf("regexp"),M.date=M.typeOf("date"),M.symbol=M.typeOf("symbol"),e.exports=M},{"./create-matcher/assert-matcher":62,"./create-matcher/assert-method-exists":63,"./create-matcher/assert-type":64,"./create-matcher/is-iterable":65,"./create-matcher/is-matcher":66,"./create-matcher/matcher-prototype":68,"./create-matcher/type-map":69,"./deep-equal":70,"./iterable-to-string":83,"@sinonjs/commons":47,"lodash.get":95}],62:[function(t,e,n){var l=t("./is-matcher");e.exports=function(t){if(!l(t))throw new TypeError("Matcher expected")}},{"./is-matcher":66}],63:[function(t,e,n){e.exports=function(t,e,n,l){if(null===t[e]||void 0===t[e])throw new TypeError(`Expected ${n} to have method ${l}`)}},{}],64:[function(t,e,n){var l=t("@sinonjs/commons").typeOf;e.exports=function(t,e,n){var r=l(t);if(r!==e)throw new TypeError(`Expected type of ${n} to be ${e}, but was ${r}`)}},{"@sinonjs/commons":47}],65:[function(t,e,n){var l=t("@sinonjs/commons").typeOf;e.exports=function(t){return Boolean(t)&&"function"===l(t.forEach)}},{"@sinonjs/commons":47}],66:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.object.isPrototypeOf,r=t("./matcher-prototype");e.exports=function(t){return l(r,t)}},{"./matcher-prototype":68,"@sinonjs/commons":47}],67:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.array.every,r=t("@sinonjs/commons").prototypes.array.concat,i=t("@sinonjs/commons").typeOf,o=t("../deep-equal").use,u=t("./is-matcher"),s=Object.keys,a=Object.getOwnPropertySymbols;e.exports=function t(e,n,c){var h=o(c);if(null==e)return!1;var d=s(n);return"function"===i(a)&&(d=r(d,a(n))),l(d,(function(l){var r=n[l],o=e[l];if(u(r)){if(!r.test(o))return!1}else if("object"===i(r)){if(!t(o,r,c))return!1}else if(!h(o,r))return!1;return!0}))}},{"../deep-equal":70,"./is-matcher":66,"@sinonjs/commons":47}],68:[function(t,e,n){var l={toString:function(){return this.message},or:function(e){var n=t("../create-matcher"),r=n.isMatcher;if(!arguments.length)throw new TypeError("Matcher expected");var i=r(e)?e:n(e),o=this,u=Object.create(l);return u.test=function(t){return o.test(t)||i.test(t)},u.message=`${o.message}.or(${i.message})`,u},and:function(e){var n=t("../create-matcher"),r=n.isMatcher;if(!arguments.length)throw new TypeError("Matcher expected");var i=r(e)?e:n(e),o=this,u=Object.create(l);return u.test=function(t){return o.test(t)&&i.test(t)},u.message=`${o.message}.and(${i.message})`,u}};e.exports=l},{"../create-matcher":61}],69:[function(t,e,n){var l=t("@sinonjs/commons").functionName,r=t("@sinonjs/commons").prototypes.array.join,i=t("@sinonjs/commons").prototypes.array.map,o=t("@sinonjs/commons").prototypes.string.indexOf,u=t("@sinonjs/commons").valueToString,s=t("./match-object");e.exports=function(t){return{function:function(t,e,n){t.test=e,t.message=n||`match(${l(e)})`},number:function(t,e){t.test=function(t){return e==t}},object:function(e,n){var o;return"function"==typeof n.test?(e.test=function(t){return!0===n.test(t)},e.message=`match(${l(n.test)})`,e):(o=i(Object.keys(n),(function(t){return`${t}: ${u(n[t])}`})),e.test=function(e){return s(e,n,t)},e.message=`match(${r(o,", ")})`,e)},regexp:function(t,e){t.test=function(t){return"string"==typeof t&&e.test(t)}},string:function(t,e){t.test=function(t){return"string"==typeof t&&-1!==o(t,e)},t.message=`match("${e}")`}}}},{"./match-object":67,"@sinonjs/commons":47}],70:[function(t,e,n){var l=t("@sinonjs/commons").valueToString,r=t("@sinonjs/commons").className,i=t("@sinonjs/commons").typeOf,o=t("@sinonjs/commons").prototypes.array,u=t("@sinonjs/commons").prototypes.object,s=t("@sinonjs/commons").prototypes.map.forEach,a=t("./get-class"),c=t("./identical"),h=t("./is-arguments"),d=t("./is-date"),p=t("./is-element"),f=t("./is-map"),m=t("./is-nan"),g=t("./is-object"),v=t("./is-set"),y=t("./is-subset"),x=o.concat,b=o.every,w=o.push,_=Date.prototype.getTime,M=u.hasOwnProperty,S=o.indexOf,E=Object.keys,T=Object.getOwnPropertySymbols;function A(t,e,n){var o=[],u=[],L=[],C=[],P={};return function t(e,R,O,I){if(n&&n.isMatcher(R))return n.isMatcher(e)?e===R:R.test(e);var D=typeof e,k=typeof R;if(e===R||m(e)||m(R)||null===e||null===R||void 0===e||void 0===R||"object"!==D||"object"!==k)return c(e,R);if(p(e)||p(R))return!1;var N=d(e),B=d(R);if((N||B)&&(!N||!B||_.call(e)!==_.call(R)))return!1;if(e instanceof RegExp&&R instanceof RegExp&&l(e)!==l(R))return!1;if(e instanceof Promise&&R instanceof Promise)return e===R;if(e instanceof Error&&R instanceof Error)return e===R;var F=a(e),z=a(R),H=E(e),j=E(R),U=r(e),G=r(R),V="function"===i(T)?T(R):[],W=x(j,V);if(h(e)||h(R)){if(e.length!==R.length)return!1}else if(D!==k||F!==z||H.length!==j.length||U&&G&&U!==G)return!1;if(v(e)||v(R))return!(!v(e)||!v(R)||e.size!==R.size)&&y(e,R,t);if(f(e)||f(R)){if(!f(e)||!f(R)||e.size!==R.size)return!1;var q=!0;return s(e,(function(t,e){q=q&&A(t,R.get(e))})),q}return b(W,(function(n){if(!M(e,n))return!1;var l=e[n],r=R[n],i=g(l),s=g(r),a=i?S(o,l):-1,c=s?S(u,r):-1,h=-1!==a?L[a]:`${O}[${JSON.stringify(n)}]`,d=-1!==c?C[c]:`${I}[${JSON.stringify(n)}]`,p=h+d;return!!P[p]||(-1===a&&i&&(w(o,l),w(L,h)),-1===c&&s&&(w(u,r),w(C,d)),i&&s&&(P[p]=!0),t(l,r,h,d))}))}(t,e,"$1","$2")}A.use=function(t){return function(e,n){return A(e,n,t)}},e.exports=A},{"./get-class":71,"./identical":72,"./is-arguments":73,"./is-date":75,"./is-element":76,"./is-map":77,"./is-nan":78,"./is-object":80,"./is-set":81,"./is-subset":82,"@sinonjs/commons":47}],71:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.object.toString;e.exports=function(t){return l(t).split(/[ \]]/)[1]}},{"@sinonjs/commons":47}],72:[function(t,e,n){var l=t("./is-nan"),r=t("./is-neg-zero");e.exports=function(t,e){return!!(t===e||l(t)&&l(e))&&(0!==t||r(t)===r(e))}},{"./is-nan":78,"./is-neg-zero":79}],73:[function(t,e,n){var l=t("./get-class");e.exports=function(t){return"Arguments"===l(t)}},{"./get-class":71}],74:[function(t,e,n){var l=t("@sinonjs/commons").functionName,r=t("@sinonjs/commons").prototypes.array.indexOf,i=t("@sinonjs/commons").prototypes.array.map,o=t("./array-types"),u=t("type-detect");e.exports=function(t){return-1!==r(i(o,l),u(t))}},{"./array-types":60,"@sinonjs/commons":47,"type-detect":110}],75:[function(t,e,n){e.exports=function(t){return t instanceof Date}},{}],76:[function(t,e,n){var l="undefined"!=typeof document&&document.createElement("div");e.exports=function(t){if(!t||1!==t.nodeType||!l)return!1;try{t.appendChild(l),t.removeChild(l)}catch(t){return!1}return!0}},{}],77:[function(t,e,n){e.exports=function(t){return"undefined"!=typeof Map&&t instanceof Map}},{}],78:[function(t,e,n){e.exports=function(t){return"number"==typeof t&&t!=t}},{}],79:[function(t,e,n){e.exports=function(t){return 0===t&&1/t==-1/0}},{}],80:[function(t,e,n){e.exports=function(t){return!("object"!=typeof t||null===t||t instanceof Boolean||t instanceof Date||t instanceof Error||t instanceof Number||t instanceof RegExp||t instanceof String)}},{}],81:[function(t,e,n){e.exports=function(t){return"undefined"!=typeof Set&&t instanceof Set||!1}},{}],82:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.set.forEach;e.exports=function(t,e,n){var r=!0;return l(t,(function(t){var i=!1;l(e,(function(e){n(e,t)&&(i=!0)})),r=r&&i})),r}},{"@sinonjs/commons":47}],83:[function(t,e,n){var l=t("@sinonjs/commons").prototypes.string.slice,r=t("@sinonjs/commons").typeOf,i=t("@sinonjs/commons").valueToString;function o(t){return"string"==typeof t?`'${t}'`:i(t)}e.exports=function(t){return"map"===r(t)?(e="",t.forEach((function(t,n){e+=`[${o(n)},${o(t)}],`})),e=l(e,0,-1)):function(t){var e="";return t.forEach((function(t){e+=`${o(t)},`})),e=l(e,0,-1)}(t);var e}},{"@sinonjs/commons":47}],84:[function(t,e,n){var l=t("@sinonjs/commons").valueToString,r=t("@sinonjs/commons").prototypes.string.indexOf,i=t("@sinonjs/commons").prototypes.array.forEach,o=t("type-detect"),u="function"==typeof Array.from,s=t("./deep-equal").use(p),a=t("./is-array-type"),c=t("./is-subset"),h=t("./create-matcher");function d(t,e,n){if(0===e.length)return!0;var l,r,i,o;for(l=0,r=t.length;l<r;++l)if(n(t[l],e[0])){for(i=0,o=e.length;i<o;++i){if(l+i>=r)return!1;if(!n(t[l+i],e[i]))return!1}return!0}return!1}function p(t,e){if(e&&"function"==typeof e.test)return e.test(t);switch(o(e)){case"bigint":case"boolean":case"number":case"symbol":return e===t;case"function":return!0===e(t);case"string":return("string"==typeof t||Boolean(t))&&r(l(t).toLowerCase(),e.toLowerCase())>=0;case"null":return null===t;case"undefined":return void 0===t;case"Date":if("Date"===o(t))return t.getTime()===e.getTime();break;case"Array":case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":return a(e)&&d(t,e,p);case"Map":if(!u)throw new Error("The JavaScript engine does not support Array.from and cannot reliably do value comparison of Map instances");return"Map"===o(t)&&d(Array.from(t),Array.from(e),p)}switch(o(t)){case"null":return!1;case"Set":return c(e,t,p)}if(e&&"object"==typeof e){if(e===t)return!0;if("object"!=typeof t)return!1;var n;for(n in e){var i=t[n];if(void 0===i&&"function"==typeof t.getAttribute&&(i=t.getAttribute(n)),null===e[n]||void 0===e[n]){if(i!==e[n])return!1}else if(void 0===i||!s(i,e[n]))return!1}return!0}throw new Error("Matcher was an unknown or unsupported type")}i(Object.keys(h),(function(t){p[t]=h[t]})),e.exports=p},{"./create-matcher":61,"./deep-equal":70,"./is-array-type":74,"./is-subset":82,"@sinonjs/commons":47,"type-detect":110}],85:[function(t,e,n){var l=t("./identical"),r=t("./is-arguments"),i=t("./is-element"),o=t("./is-neg-zero"),u=t("./is-set"),s=t("./is-map"),a=t("./match"),c=t("./deep-equal").use(a),h=t("./create-matcher");e.exports={createMatcher:h,deepEqual:c,identical:l,isArguments:r,isElement:i,isMap:s,isNegZero:o,isSet:u,match:a}},{"./create-matcher":61,"./deep-equal":70,"./identical":72,"./is-arguments":73,"./is-element":76,"./is-map":77,"./is-neg-zero":79,"./is-set":81,"./match":84}],86:[function(t,e,n){var l=t("./lib/encoding.js");e.exports={TextEncoder:l.TextEncoder,TextDecoder:l.TextDecoder}},{"./lib/encoding.js":88}],87:[function(t,e,n){var l;l=this||{},void 0!==e&&e.exports&&(e.exports=l),l["encoding-indexes"]={big5:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,17392,19506,17923,17830,17784,160359,19831,17843,162993,19682,163013,15253,18230,18244,19527,19520,148159,144919,160594,159371,159954,19543,172881,18255,17882,19589,162924,19719,19108,18081,158499,29221,154196,137827,146950,147297,26189,22267,null,32149,22813,166841,15860,38708,162799,23515,138590,23204,13861,171696,23249,23479,23804,26478,34195,170309,29793,29853,14453,138579,145054,155681,16108,153822,15093,31484,40855,147809,166157,143850,133770,143966,17162,33924,40854,37935,18736,34323,22678,38730,37400,31184,31282,26208,27177,34973,29772,31685,26498,31276,21071,36934,13542,29636,155065,29894,40903,22451,18735,21580,16689,145038,22552,31346,162661,35727,18094,159368,16769,155033,31662,140476,40904,140481,140489,140492,40905,34052,144827,16564,40906,17633,175615,25281,28782,40907,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,12736,12737,12738,12739,12740,131340,12741,131281,131277,12742,12743,131275,139240,12744,131274,12745,12746,12747,12748,131342,12749,12750,256,193,461,192,274,201,282,200,332,211,465,210,null,7870,null,7872,202,257,225,462,224,593,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,null,7871,null,7873,234,609,9178,9179,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,172969,135493,null,25866,null,null,20029,28381,40270,37343,null,null,161589,25745,20250,20264,20392,20822,20852,20892,20964,21153,21160,21307,21326,21457,21464,22242,22768,22788,22791,22834,22836,23398,23454,23455,23706,24198,24635,25993,26622,26628,26725,27982,28860,30005,32420,32428,32442,32455,32463,32479,32518,32567,33402,33487,33647,35270,35774,35810,36710,36711,36718,29713,31996,32205,26950,31433,21031,null,null,null,null,37260,30904,37214,32956,null,36107,33014,133607,null,null,32927,40647,19661,40393,40460,19518,171510,159758,40458,172339,13761,null,28314,33342,29977,null,18705,39532,39567,40857,31111,164972,138698,132560,142054,20004,20097,20096,20103,20159,20203,20279,13388,20413,15944,20483,20616,13437,13459,13477,20870,22789,20955,20988,20997,20105,21113,21136,21287,13767,21417,13649,21424,13651,21442,21539,13677,13682,13953,21651,21667,21684,21689,21712,21743,21784,21795,21800,13720,21823,13733,13759,21975,13765,163204,21797,null,134210,134421,151851,21904,142534,14828,131905,36422,150968,169189,16467,164030,30586,142392,14900,18389,164189,158194,151018,25821,134524,135092,134357,135412,25741,36478,134806,134155,135012,142505,164438,148691,null,134470,170573,164073,18420,151207,142530,39602,14951,169460,16365,13574,152263,169940,161992,142660,40302,38933,null,17369,155813,25780,21731,142668,142282,135287,14843,135279,157402,157462,162208,25834,151634,134211,36456,139681,166732,132913,null,18443,131497,16378,22643,142733,null,148936,132348,155799,134988,134550,21881,16571,17338,null,19124,141926,135325,33194,39157,134556,25465,14846,141173,36288,22177,25724,15939,null,173569,134665,142031,142537,null,135368,145858,14738,14854,164507,13688,155209,139463,22098,134961,142514,169760,13500,27709,151099,null,null,161140,142987,139784,173659,167117,134778,134196,157724,32659,135375,141315,141625,13819,152035,134796,135053,134826,16275,134960,134471,135503,134732,null,134827,134057,134472,135360,135485,16377,140950,25650,135085,144372,161337,142286,134526,134527,142417,142421,14872,134808,135367,134958,173618,158544,167122,167321,167114,38314,21708,33476,21945,null,171715,39974,39606,161630,142830,28992,33133,33004,23580,157042,33076,14231,21343,164029,37302,134906,134671,134775,134907,13789,151019,13833,134358,22191,141237,135369,134672,134776,135288,135496,164359,136277,134777,151120,142756,23124,135197,135198,135413,135414,22428,134673,161428,164557,135093,134779,151934,14083,135094,135552,152280,172733,149978,137274,147831,164476,22681,21096,13850,153405,31666,23400,18432,19244,40743,18919,39967,39821,154484,143677,22011,13810,22153,20008,22786,138177,194680,38737,131206,20059,20155,13630,23587,24401,24516,14586,25164,25909,27514,27701,27706,28780,29227,20012,29357,149737,32594,31035,31993,32595,156266,13505,null,156491,32770,32896,157202,158033,21341,34916,35265,161970,35744,36125,38021,38264,38271,38376,167439,38886,39029,39118,39134,39267,17e4,40060,40479,40644,27503,63751,20023,131207,38429,25143,38050,null,20539,28158,171123,40870,15817,34959,147790,28791,23797,19232,152013,13657,154928,24866,166450,36775,37366,29073,26393,29626,144001,172295,15499,137600,19216,30948,29698,20910,165647,16393,27235,172730,16931,34319,133743,31274,170311,166634,38741,28749,21284,139390,37876,30425,166371,40871,30685,20131,20464,20668,20015,20247,40872,21556,32139,22674,22736,138678,24210,24217,24514,141074,25995,144377,26905,27203,146531,27903,null,29184,148741,29580,16091,150035,23317,29881,35715,154788,153237,31379,31724,31939,32364,33528,34199,40873,34960,40874,36537,40875,36815,34143,39392,37409,40876,167353,136255,16497,17058,23066,null,null,null,39016,26475,17014,22333,null,34262,149883,33471,160013,19585,159092,23931,158485,159678,40877,40878,23446,40879,26343,32347,28247,31178,15752,17603,143958,141206,17306,17718,null,23765,146202,35577,23672,15634,144721,23928,40882,29015,17752,147692,138787,19575,14712,13386,131492,158785,35532,20404,131641,22975,33132,38998,170234,24379,134047,null,139713,166253,16642,18107,168057,16135,40883,172469,16632,14294,18167,158790,16764,165554,160767,17773,14548,152730,17761,17691,19849,19579,19830,17898,16328,150287,13921,17630,17597,16877,23870,23880,23894,15868,14351,23972,23993,14368,14392,24130,24253,24357,24451,14600,14612,14655,14669,24791,24893,23781,14729,25015,25017,25039,14776,25132,25232,25317,25368,14840,22193,14851,25570,25595,25607,25690,14923,25792,23829,22049,40863,14999,25990,15037,26111,26195,15090,26258,15138,26390,15170,26532,26624,15192,26698,26756,15218,15217,15227,26889,26947,29276,26980,27039,27013,15292,27094,15325,27237,27252,27249,27266,15340,27289,15346,27307,27317,27348,27382,27521,27585,27626,27765,27818,15563,27906,27910,27942,28033,15599,28068,28081,28181,28184,28201,28294,166336,28347,28386,28378,40831,28392,28393,28452,28468,15686,147265,28545,28606,15722,15733,29111,23705,15754,28716,15761,28752,28756,28783,28799,28809,131877,17345,13809,134872,147159,22462,159443,28990,153568,13902,27042,166889,23412,31305,153825,169177,31333,31357,154028,31419,31408,31426,31427,29137,156813,16842,31450,31453,31466,16879,21682,154625,31499,31573,31529,152334,154878,31650,31599,33692,154548,158847,31696,33825,31634,31672,154912,15789,154725,33938,31738,31750,31797,154817,31812,31875,149634,31910,26237,148856,31945,31943,31974,31860,31987,31989,31950,32359,17693,159300,32093,159446,29837,32137,32171,28981,32179,32210,147543,155689,32228,15635,32245,137209,32229,164717,32285,155937,155994,32366,32402,17195,37996,32295,32576,32577,32583,31030,156368,39393,32663,156497,32675,136801,131176,17756,145254,17667,164666,32762,156809,32773,32776,32797,32808,32815,172167,158915,32827,32828,32865,141076,18825,157222,146915,157416,26405,32935,166472,33031,33050,22704,141046,27775,156824,151480,25831,136330,33304,137310,27219,150117,150165,17530,33321,133901,158290,146814,20473,136445,34018,33634,158474,149927,144688,137075,146936,33450,26907,194964,16859,34123,33488,33562,134678,137140,14017,143741,144730,33403,33506,33560,147083,159139,158469,158615,144846,15807,33565,21996,33669,17675,159141,33708,33729,33747,13438,159444,27223,34138,13462,159298,143087,33880,154596,33905,15827,17636,27303,33866,146613,31064,33960,158614,159351,159299,34014,33807,33681,17568,33939,34020,154769,16960,154816,17731,34100,23282,159385,17703,34163,17686,26559,34326,165413,165435,34241,159880,34306,136578,159949,194994,17770,34344,13896,137378,21495,160666,34430,34673,172280,34798,142375,34737,34778,34831,22113,34412,26710,17935,34885,34886,161248,146873,161252,34910,34972,18011,34996,34997,25537,35013,30583,161551,35207,35210,35238,35241,35239,35260,166437,35303,162084,162493,35484,30611,37374,35472,162393,31465,162618,147343,18195,162616,29052,35596,35615,152624,152933,35647,35660,35661,35497,150138,35728,35739,35503,136927,17941,34895,35995,163156,163215,195028,14117,163155,36054,163224,163261,36114,36099,137488,36059,28764,36113,150729,16080,36215,36265,163842,135188,149898,15228,164284,160012,31463,36525,36534,36547,37588,36633,36653,164709,164882,36773,37635,172703,133712,36787,18730,166366,165181,146875,24312,143970,36857,172052,165564,165121,140069,14720,159447,36919,165180,162494,36961,165228,165387,37032,165651,37060,165606,37038,37117,37223,15088,37289,37316,31916,166195,138889,37390,27807,37441,37474,153017,37561,166598,146587,166668,153051,134449,37676,37739,166625,166891,28815,23235,166626,166629,18789,37444,166892,166969,166911,37747,37979,36540,38277,38310,37926,38304,28662,17081,140922,165592,135804,146990,18911,27676,38523,38550,16748,38563,159445,25050,38582,30965,166624,38589,21452,18849,158904,131700,156688,168111,168165,150225,137493,144138,38705,34370,38710,18959,17725,17797,150249,28789,23361,38683,38748,168405,38743,23370,168427,38751,37925,20688,143543,143548,38793,38815,38833,38846,38848,38866,38880,152684,38894,29724,169011,38911,38901,168989,162170,19153,38964,38963,38987,39014,15118,160117,15697,132656,147804,153350,39114,39095,39112,39111,19199,159015,136915,21936,39137,39142,39148,37752,39225,150057,19314,170071,170245,39413,39436,39483,39440,39512,153381,14020,168113,170965,39648,39650,170757,39668,19470,39700,39725,165376,20532,39732,158120,14531,143485,39760,39744,171326,23109,137315,39822,148043,39938,39935,39948,171624,40404,171959,172434,172459,172257,172323,172511,40318,40323,172340,40462,26760,40388,139611,172435,172576,137531,172595,40249,172217,172724,40592,40597,40606,40610,19764,40618,40623,148324,40641,15200,14821,15645,20274,14270,166955,40706,40712,19350,37924,159138,40727,40726,40761,22175,22154,40773,39352,168075,38898,33919,40802,40809,31452,40846,29206,19390,149877,149947,29047,150008,148296,150097,29598,166874,137466,31135,166270,167478,37737,37875,166468,37612,37761,37835,166252,148665,29207,16107,30578,31299,28880,148595,148472,29054,137199,28835,137406,144793,16071,137349,152623,137208,14114,136955,137273,14049,137076,137425,155467,14115,136896,22363,150053,136190,135848,136134,136374,34051,145062,34051,33877,149908,160101,146993,152924,147195,159826,17652,145134,170397,159526,26617,14131,15381,15847,22636,137506,26640,16471,145215,147681,147595,147727,158753,21707,22174,157361,22162,135135,134056,134669,37830,166675,37788,20216,20779,14361,148534,20156,132197,131967,20299,20362,153169,23144,131499,132043,14745,131850,132116,13365,20265,131776,167603,131701,35546,131596,20120,20685,20749,20386,20227,150030,147082,20290,20526,20588,20609,20428,20453,20568,20732,20825,20827,20829,20830,28278,144789,147001,147135,28018,137348,147081,20904,20931,132576,17629,132259,132242,132241,36218,166556,132878,21081,21156,133235,21217,37742,18042,29068,148364,134176,149932,135396,27089,134685,29817,16094,29849,29716,29782,29592,19342,150204,147597,21456,13700,29199,147657,21940,131909,21709,134086,22301,37469,38644,37734,22493,22413,22399,13886,22731,23193,166470,136954,137071,136976,23084,22968,37519,23166,23247,23058,153926,137715,137313,148117,14069,27909,29763,23073,155267,23169,166871,132115,37856,29836,135939,28933,18802,37896,166395,37821,14240,23582,23710,24158,24136,137622,137596,146158,24269,23375,137475,137476,14081,137376,14045,136958,14035,33066,166471,138682,144498,166312,24332,24334,137511,137131,23147,137019,23364,34324,161277,34912,24702,141408,140843,24539,16056,140719,140734,168072,159603,25024,131134,131142,140827,24985,24984,24693,142491,142599,149204,168269,25713,149093,142186,14889,142114,144464,170218,142968,25399,173147,25782,25393,25553,149987,142695,25252,142497,25659,25963,26994,15348,143502,144045,149897,144043,21773,144096,137433,169023,26318,144009,143795,15072,16784,152964,166690,152975,136956,152923,152613,30958,143619,137258,143924,13412,143887,143746,148169,26254,159012,26219,19347,26160,161904,138731,26211,144082,144097,26142,153714,14545,145466,145340,15257,145314,144382,29904,15254,26511,149034,26806,26654,15300,27326,14435,145365,148615,27187,27218,27337,27397,137490,25873,26776,27212,15319,27258,27479,147392,146586,37792,37618,166890,166603,37513,163870,166364,37991,28069,28427,149996,28007,147327,15759,28164,147516,23101,28170,22599,27940,30786,28987,148250,148086,28913,29264,29319,29332,149391,149285,20857,150180,132587,29818,147192,144991,150090,149783,155617,16134,16049,150239,166947,147253,24743,16115,29900,29756,37767,29751,17567,159210,17745,30083,16227,150745,150790,16216,30037,30323,173510,15129,29800,166604,149931,149902,15099,15821,150094,16127,149957,149747,37370,22322,37698,166627,137316,20703,152097,152039,30584,143922,30478,30479,30587,149143,145281,14942,149744,29752,29851,16063,150202,150215,16584,150166,156078,37639,152961,30750,30861,30856,30930,29648,31065,161601,153315,16654,31131,33942,31141,27181,147194,31290,31220,16750,136934,16690,37429,31217,134476,149900,131737,146874,137070,13719,21867,13680,13994,131540,134157,31458,23129,141045,154287,154268,23053,131675,30960,23082,154566,31486,16889,31837,31853,16913,154547,155324,155302,31949,150009,137136,31886,31868,31918,27314,32220,32263,32211,32590,156257,155996,162632,32151,155266,17002,158581,133398,26582,131150,144847,22468,156690,156664,149858,32733,31527,133164,154345,154947,31500,155150,39398,34373,39523,27164,144447,14818,150007,157101,39455,157088,33920,160039,158929,17642,33079,17410,32966,33033,33090,157620,39107,158274,33378,33381,158289,33875,159143,34320,160283,23174,16767,137280,23339,137377,23268,137432,34464,195004,146831,34861,160802,23042,34926,20293,34951,35007,35046,35173,35149,153219,35156,161669,161668,166901,166873,166812,166393,16045,33955,18165,18127,14322,35389,35356,169032,24397,37419,148100,26068,28969,28868,137285,40301,35999,36073,163292,22938,30659,23024,17262,14036,36394,36519,150537,36656,36682,17140,27736,28603,140065,18587,28537,28299,137178,39913,14005,149807,37051,37015,21873,18694,37307,37892,166475,16482,166652,37927,166941,166971,34021,35371,38297,38311,38295,38294,167220,29765,16066,149759,150082,148458,16103,143909,38543,167655,167526,167525,16076,149997,150136,147438,29714,29803,16124,38721,168112,26695,18973,168083,153567,38749,37736,166281,166950,166703,156606,37562,23313,35689,18748,29689,147995,38811,38769,39224,134950,24001,166853,150194,38943,169178,37622,169431,37349,17600,166736,150119,166756,39132,166469,16128,37418,18725,33812,39227,39245,162566,15869,39323,19311,39338,39516,166757,153800,27279,39457,23294,39471,170225,19344,170312,39356,19389,19351,37757,22642,135938,22562,149944,136424,30788,141087,146872,26821,15741,37976,14631,24912,141185,141675,24839,40015,40019,40059,39989,39952,39807,39887,171565,39839,172533,172286,40225,19630,147716,40472,19632,40204,172468,172269,172275,170287,40357,33981,159250,159711,158594,34300,17715,159140,159364,159216,33824,34286,159232,145367,155748,31202,144796,144960,18733,149982,15714,37851,37566,37704,131775,30905,37495,37965,20452,13376,36964,152925,30781,30804,30902,30795,137047,143817,149825,13978,20338,28634,28633,28702,28702,21524,147893,22459,22771,22410,40214,22487,28980,13487,147884,29163,158784,151447,23336,137141,166473,24844,23246,23051,17084,148616,14124,19323,166396,37819,37816,137430,134941,33906,158912,136211,148218,142374,148417,22932,146871,157505,32168,155995,155812,149945,149899,166394,37605,29666,16105,29876,166755,137375,16097,150195,27352,29683,29691,16086,150078,150164,137177,150118,132007,136228,149989,29768,149782,28837,149878,37508,29670,37727,132350,37681,166606,166422,37766,166887,153045,18741,166530,29035,149827,134399,22180,132634,134123,134328,21762,31172,137210,32254,136898,150096,137298,17710,37889,14090,166592,149933,22960,137407,137347,160900,23201,14050,146779,14e3,37471,23161,166529,137314,37748,15565,133812,19094,14730,20724,15721,15692,136092,29045,17147,164376,28175,168164,17643,27991,163407,28775,27823,15574,147437,146989,28162,28428,15727,132085,30033,14012,13512,18048,16090,18545,22980,37486,18750,36673,166940,158656,22546,22472,14038,136274,28926,148322,150129,143331,135856,140221,26809,26983,136088,144613,162804,145119,166531,145366,144378,150687,27162,145069,158903,33854,17631,17614,159014,159057,158850,159710,28439,160009,33597,137018,33773,158848,159827,137179,22921,23170,137139,23137,23153,137477,147964,14125,23023,137020,14023,29070,37776,26266,148133,23150,23083,148115,27179,147193,161590,148571,148170,28957,148057,166369,20400,159016,23746,148686,163405,148413,27148,148054,135940,28838,28979,148457,15781,27871,194597,150095,32357,23019,23855,15859,24412,150109,137183,32164,33830,21637,146170,144128,131604,22398,133333,132633,16357,139166,172726,28675,168283,23920,29583,31955,166489,168992,20424,32743,29389,29456,162548,29496,29497,153334,29505,29512,16041,162584,36972,29173,149746,29665,33270,16074,30476,16081,27810,22269,29721,29726,29727,16098,16112,16116,16122,29907,16142,16211,30018,30061,30066,30093,16252,30152,30172,16320,30285,16343,30324,16348,30330,151388,29064,22051,35200,22633,16413,30531,16441,26465,16453,13787,30616,16490,16495,23646,30654,30667,22770,30744,28857,30748,16552,30777,30791,30801,30822,33864,152885,31027,26627,31026,16643,16649,31121,31129,36795,31238,36796,16743,31377,16818,31420,33401,16836,31439,31451,16847,20001,31586,31596,31611,31762,31771,16992,17018,31867,31900,17036,31928,17044,31981,36755,28864,134351,32207,32212,32208,32253,32686,32692,29343,17303,32800,32805,31545,32814,32817,32852,15820,22452,28832,32951,33001,17389,33036,29482,33038,33042,30048,33044,17409,15161,33110,33113,33114,17427,22586,33148,33156,17445,33171,17453,33189,22511,33217,33252,33364,17551,33446,33398,33482,33496,33535,17584,33623,38505,27018,33797,28917,33892,24803,33928,17668,33982,34017,34040,34064,34104,34130,17723,34159,34160,34272,17783,34418,34450,34482,34543,38469,34699,17926,17943,34990,35071,35108,35143,35217,162151,35369,35384,35476,35508,35921,36052,36082,36124,18328,22623,36291,18413,20206,36410,21976,22356,36465,22005,36528,18487,36558,36578,36580,36589,36594,36791,36801,36810,36812,36915,39364,18605,39136,37395,18718,37416,37464,37483,37553,37550,37567,37603,37611,37619,37620,37629,37699,37764,37805,18757,18769,40639,37911,21249,37917,37933,37950,18794,37972,38009,38189,38306,18855,38388,38451,18917,26528,18980,38720,18997,38834,38850,22100,19172,24808,39097,19225,39153,22596,39182,39193,20916,39196,39223,39234,39261,39266,19312,39365,19357,39484,39695,31363,39785,39809,39901,39921,39924,19565,39968,14191,138178,40265,39994,40702,22096,40339,40381,40384,40444,38134,36790,40571,40620,40625,40637,40646,38108,40674,40689,40696,31432,40772,131220,131767,132e3,26906,38083,22956,132311,22592,38081,14265,132565,132629,132726,136890,22359,29043,133826,133837,134079,21610,194619,134091,21662,134139,134203,134227,134245,134268,24807,134285,22138,134325,134365,134381,134511,134578,134600,26965,39983,34725,134660,134670,134871,135056,134957,134771,23584,135100,24075,135260,135247,135286,26398,135291,135304,135318,13895,135359,135379,135471,135483,21348,33965,135907,136053,135990,35713,136567,136729,137155,137159,20088,28859,137261,137578,137773,137797,138282,138352,138412,138952,25283,138965,139029,29080,26709,139333,27113,14024,139900,140247,140282,141098,141425,141647,33533,141671,141715,142037,35237,142056,36768,142094,38840,142143,38983,39613,142412,null,142472,142519,154600,142600,142610,142775,142741,142914,143220,143308,143411,143462,144159,144350,24497,26184,26303,162425,144743,144883,29185,149946,30679,144922,145174,32391,131910,22709,26382,26904,146087,161367,155618,146961,147129,161278,139418,18640,19128,147737,166554,148206,148237,147515,148276,148374,150085,132554,20946,132625,22943,138920,15294,146687,148484,148694,22408,149108,14747,149295,165352,170441,14178,139715,35678,166734,39382,149522,149755,150037,29193,150208,134264,22885,151205,151430,132985,36570,151596,21135,22335,29041,152217,152601,147274,150183,21948,152646,152686,158546,37332,13427,152895,161330,152926,18200,152930,152934,153543,149823,153693,20582,13563,144332,24798,153859,18300,166216,154286,154505,154630,138640,22433,29009,28598,155906,162834,36950,156082,151450,35682,156674,156746,23899,158711,36662,156804,137500,35562,150006,156808,147439,156946,19392,157119,157365,141083,37989,153569,24981,23079,194765,20411,22201,148769,157436,20074,149812,38486,28047,158909,13848,35191,157593,157806,156689,157790,29151,157895,31554,168128,133649,157990,37124,158009,31301,40432,158202,39462,158253,13919,156777,131105,31107,158260,158555,23852,144665,33743,158621,18128,158884,30011,34917,159150,22710,14108,140685,159819,160205,15444,160384,160389,37505,139642,160395,37680,160486,149968,27705,38047,160848,134904,34855,35061,141606,164979,137137,28344,150058,137248,14756,14009,23568,31203,17727,26294,171181,170148,35139,161740,161880,22230,16607,136714,14753,145199,164072,136133,29101,33638,162269,168360,23143,19639,159919,166315,162301,162314,162571,163174,147834,31555,31102,163849,28597,172767,27139,164632,21410,159239,37823,26678,38749,164207,163875,158133,136173,143919,163912,23941,166960,163971,22293,38947,166217,23979,149896,26046,27093,21458,150181,147329,15377,26422,163984,164084,164142,139169,164175,164233,164271,164378,164614,164655,164746,13770,164968,165546,18682,25574,166230,30728,37461,166328,17394,166375,17375,166376,166726,166868,23032,166921,36619,167877,168172,31569,168208,168252,15863,168286,150218,36816,29327,22155,169191,169449,169392,169400,169778,170193,170313,170346,170435,170536,170766,171354,171419,32415,171768,171811,19620,38215,172691,29090,172799,19857,36882,173515,19868,134300,36798,21953,36794,140464,36793,150163,17673,32383,28502,27313,20202,13540,166700,161949,14138,36480,137205,163876,166764,166809,162366,157359,15851,161365,146615,153141,153942,20122,155265,156248,22207,134765,36366,23405,147080,150686,25566,25296,137206,137339,25904,22061,154698,21530,152337,15814,171416,19581,22050,22046,32585,155352,22901,146752,34672,19996,135146,134473,145082,33047,40286,36120,30267,40005,30286,30649,37701,21554,33096,33527,22053,33074,33816,32957,21994,31074,22083,21526,134813,13774,22021,22001,26353,164578,13869,30004,22e3,21946,21655,21874,134209,134294,24272,151880,134774,142434,134818,40619,32090,21982,135285,25245,38765,21652,36045,29174,37238,25596,25529,25598,21865,142147,40050,143027,20890,13535,134567,20903,21581,21790,21779,30310,36397,157834,30129,32950,34820,34694,35015,33206,33820,135361,17644,29444,149254,23440,33547,157843,22139,141044,163119,147875,163187,159440,160438,37232,135641,37384,146684,173737,134828,134905,29286,138402,18254,151490,163833,135147,16634,40029,25887,142752,18675,149472,171388,135148,134666,24674,161187,135149,null,155720,135559,29091,32398,40272,19994,19972,13687,23309,27826,21351,13996,14812,21373,13989,149016,22682,150382,33325,21579,22442,154261,133497,null,14930,140389,29556,171692,19721,39917,146686,171824,19547,151465,169374,171998,33884,146870,160434,157619,145184,25390,32037,147191,146988,14890,36872,21196,15988,13946,17897,132238,30272,23280,134838,30842,163630,22695,16575,22140,39819,23924,30292,173108,40581,19681,30201,14331,24857,143578,148466,null,22109,135849,22439,149859,171526,21044,159918,13741,27722,40316,31830,39737,22494,137068,23635,25811,169168,156469,160100,34477,134440,159010,150242,134513,null,20990,139023,23950,38659,138705,40577,36940,31519,39682,23761,31651,25192,25397,39679,31695,39722,31870,39726,31810,31878,39957,31740,39689,40727,39963,149822,40794,21875,23491,20477,40600,20466,21088,15878,21201,22375,20566,22967,24082,38856,40363,36700,21609,38836,39232,38842,21292,24880,26924,21466,39946,40194,19515,38465,27008,20646,30022,137069,39386,21107,null,37209,38529,37212,null,37201,167575,25471,159011,27338,22033,37262,30074,25221,132092,29519,31856,154657,146685,null,149785,30422,39837,20010,134356,33726,34882,null,23626,27072,20717,22394,21023,24053,20174,27697,131570,20281,21660,21722,21146,36226,13822,24332,13811,null,27474,37244,40869,39831,38958,39092,39610,40616,40580,29050,31508,null,27642,34840,32632,null,22048,173642,36471,40787,null,36308,36431,40476,36353,25218,164733,36392,36469,31443,150135,31294,30936,27882,35431,30215,166490,40742,27854,34774,30147,172722,30803,194624,36108,29410,29553,35629,29442,29937,36075,150203,34351,24506,34976,17591,null,137275,159237,null,35454,140571,null,24829,30311,39639,40260,37742,39823,34805,null,34831,36087,29484,38689,39856,13782,29362,19463,31825,39242,155993,24921,19460,40598,24957,null,22367,24943,25254,25145,25294,14940,25058,21418,144373,25444,26626,13778,23895,166850,36826,167481,null,20697,138566,30982,21298,38456,134971,16485,null,30718,null,31938,155418,31962,31277,32870,32867,32077,29957,29938,35220,33306,26380,32866,160902,32859,29936,33027,30500,35209,157644,30035,159441,34729,34766,33224,34700,35401,36013,35651,30507,29944,34010,13877,27058,36262,null,35241,29800,28089,34753,147473,29927,15835,29046,24740,24988,15569,29026,24695,null,32625,166701,29264,24809,19326,21024,15384,146631,155351,161366,152881,137540,135934,170243,159196,159917,23745,156077,166415,145015,131310,157766,151310,17762,23327,156492,40784,40614,156267,12288,65292,12289,12290,65294,8231,65307,65306,65311,65281,65072,8230,8229,65104,65105,65106,183,65108,65109,65110,65111,65372,8211,65073,8212,65075,9588,65076,65103,65288,65289,65077,65078,65371,65373,65079,65080,12308,12309,65081,65082,12304,12305,65083,65084,12298,12299,65085,65086,12296,12297,65087,65088,12300,12301,65089,65090,12302,12303,65091,65092,65113,65114,65115,65116,65117,65118,8216,8217,8220,8221,12317,12318,8245,8242,65283,65286,65290,8251,167,12291,9675,9679,9651,9650,9678,9734,9733,9671,9670,9633,9632,9661,9660,12963,8453,175,65507,65343,717,65097,65098,65101,65102,65099,65100,65119,65120,65121,65291,65293,215,247,177,8730,65308,65310,65309,8806,8807,8800,8734,8786,8801,65122,65123,65124,65125,65126,65374,8745,8746,8869,8736,8735,8895,13266,13265,8747,8750,8757,8756,9792,9794,8853,8857,8593,8595,8592,8594,8598,8599,8601,8600,8741,8739,65295,65340,8725,65128,65284,65509,12306,65504,65505,65285,65312,8451,8457,65129,65130,65131,13269,13212,13213,13214,13262,13217,13198,13199,13252,176,20825,20827,20830,20829,20833,20835,21991,29929,31950,9601,9602,9603,9604,9605,9606,9607,9608,9615,9614,9613,9612,9611,9610,9609,9532,9524,9516,9508,9500,9620,9472,9474,9621,9484,9488,9492,9496,9581,9582,9584,9583,9552,9566,9578,9569,9698,9699,9701,9700,9585,9586,9587,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,12321,12322,12323,12324,12325,12326,12327,12328,12329,21313,21316,21317,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,729,713,714,711,715,9216,9217,9218,9219,9220,9221,9222,9223,9224,9225,9226,9227,9228,9229,9230,9231,9232,9233,9234,9235,9236,9237,9238,9239,9240,9241,9242,9243,9244,9245,9246,9247,9249,8364,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19968,20057,19969,19971,20035,20061,20102,20108,20154,20799,20837,20843,20960,20992,20993,21147,21269,21313,21340,21448,19977,19979,19976,19978,20011,20024,20961,20037,20040,20063,20062,20110,20129,20800,20995,21242,21315,21449,21475,22303,22763,22805,22823,22899,23376,23377,23379,23544,23567,23586,23608,23665,24029,24037,24049,24050,24051,24062,24178,24318,24331,24339,25165,19985,19984,19981,20013,20016,20025,20043,23609,20104,20113,20117,20114,20116,20130,20161,20160,20163,20166,20167,20173,20170,20171,20164,20803,20801,20839,20845,20846,20844,20887,20982,20998,20999,21e3,21243,21246,21247,21270,21305,21320,21319,21317,21342,21380,21451,21450,21453,22764,22825,22827,22826,22829,23380,23569,23588,23610,23663,24052,24187,24319,24340,24341,24515,25096,25142,25163,25166,25903,25991,26007,26020,26041,26085,26352,26376,26408,27424,27490,27513,27595,27604,27611,27663,27700,28779,29226,29238,29243,29255,29273,29275,29356,29579,19993,19990,19989,19988,19992,20027,20045,20047,20046,20197,20184,20180,20181,20182,20183,20195,20196,20185,20190,20805,20804,20873,20874,20908,20985,20986,20984,21002,21152,21151,21253,21254,21271,21277,20191,21322,21321,21345,21344,21359,21358,21435,21487,21476,21491,21484,21486,21481,21480,21500,21496,21493,21483,21478,21482,21490,21489,21488,21477,21485,21499,22235,22234,22806,22830,22833,22900,22902,23381,23427,23612,24040,24039,24038,24066,24067,24179,24188,24321,24344,24343,24517,25098,25171,25172,25170,25169,26021,26086,26414,26412,26410,26411,26413,27491,27597,27665,27664,27704,27713,27712,27710,29359,29572,29577,29916,29926,29976,29983,29992,29993,3e4,30001,30002,30003,30091,30333,30382,30399,30446,30683,30690,30707,31034,31166,31348,31435,19998,19999,20050,20051,20073,20121,20132,20134,20133,20223,20233,20249,20234,20245,20237,20240,20241,20239,20210,20214,20219,20208,20211,20221,20225,20235,20809,20807,20806,20808,20840,20849,20877,20912,21015,21009,21010,21006,21014,21155,21256,21281,21280,21360,21361,21513,21519,21516,21514,21520,21505,21515,21508,21521,21517,21512,21507,21518,21510,21522,22240,22238,22237,22323,22320,22312,22317,22316,22319,22313,22809,22810,22839,22840,22916,22904,22915,22909,22905,22914,22913,23383,23384,23431,23432,23429,23433,23546,23574,23673,24030,24070,24182,24180,24335,24347,24537,24534,25102,25100,25101,25104,25187,25179,25176,25910,26089,26088,26092,26093,26354,26355,26377,26429,26420,26417,26421,27425,27492,27515,27670,27741,27735,27737,27743,27744,27728,27733,27745,27739,27725,27726,28784,29279,29277,30334,31481,31859,31992,32566,32650,32701,32769,32771,32780,32786,32819,32895,32905,32907,32908,33251,33258,33267,33276,33292,33307,33311,33390,33394,33406,34411,34880,34892,34915,35199,38433,20018,20136,20301,20303,20295,20311,20318,20276,20315,20309,20272,20304,20305,20285,20282,20280,20291,20308,20284,20294,20323,20316,20320,20271,20302,20278,20313,20317,20296,20314,20812,20811,20813,20853,20918,20919,21029,21028,21033,21034,21032,21163,21161,21162,21164,21283,21363,21365,21533,21549,21534,21566,21542,21582,21543,21574,21571,21555,21576,21570,21531,21545,21578,21561,21563,21560,21550,21557,21558,21536,21564,21568,21553,21547,21535,21548,22250,22256,22244,22251,22346,22353,22336,22349,22343,22350,22334,22352,22351,22331,22767,22846,22941,22930,22952,22942,22947,22937,22934,22925,22948,22931,22922,22949,23389,23388,23386,23387,23436,23435,23439,23596,23616,23617,23615,23614,23696,23697,23700,23692,24043,24076,24207,24199,24202,24311,24324,24351,24420,24418,24439,24441,24536,24524,24535,24525,24561,24555,24568,24554,25106,25105,25220,25239,25238,25216,25206,25225,25197,25226,25212,25214,25209,25203,25234,25199,25240,25198,25237,25235,25233,25222,25913,25915,25912,26097,26356,26463,26446,26447,26448,26449,26460,26454,26462,26441,26438,26464,26451,26455,27493,27599,27714,27742,27801,27777,27784,27785,27781,27803,27754,27770,27792,27760,27788,27752,27798,27794,27773,27779,27762,27774,27764,27782,27766,27789,27796,27800,27778,28790,28796,28797,28792,29282,29281,29280,29380,29378,29590,29996,29995,30007,30008,30338,30447,30691,31169,31168,31167,31350,31995,32597,32918,32915,32925,32920,32923,32922,32946,33391,33426,33419,33421,35211,35282,35328,35895,35910,35925,35997,36196,36208,36275,36523,36554,36763,36784,36802,36806,36805,36804,24033,37009,37026,37034,37030,37027,37193,37318,37324,38450,38446,38449,38442,38444,20006,20054,20083,20107,20123,20126,20139,20140,20335,20381,20365,20339,20351,20332,20379,20363,20358,20355,20336,20341,20360,20329,20347,20374,20350,20367,20369,20346,20820,20818,20821,20841,20855,20854,20856,20925,20989,21051,21048,21047,21050,21040,21038,21046,21057,21182,21179,21330,21332,21331,21329,21350,21367,21368,21369,21462,21460,21463,21619,21621,21654,21624,21653,21632,21627,21623,21636,21650,21638,21628,21648,21617,21622,21644,21658,21602,21608,21643,21629,21646,22266,22403,22391,22378,22377,22369,22374,22372,22396,22812,22857,22855,22856,22852,22868,22974,22971,22996,22969,22958,22993,22982,22992,22989,22987,22995,22986,22959,22963,22994,22981,23391,23396,23395,23447,23450,23448,23452,23449,23451,23578,23624,23621,23622,23735,23713,23736,23721,23723,23729,23731,24088,24090,24086,24085,24091,24081,24184,24218,24215,24220,24213,24214,24310,24358,24359,24361,24448,24449,24447,24444,24541,24544,24573,24565,24575,24591,24596,24623,24629,24598,24618,24597,24609,24615,24617,24619,24603,25110,25109,25151,25150,25152,25215,25289,25292,25284,25279,25282,25273,25298,25307,25259,25299,25300,25291,25288,25256,25277,25276,25296,25305,25287,25293,25269,25306,25265,25304,25302,25303,25286,25260,25294,25918,26023,26044,26106,26132,26131,26124,26118,26114,26126,26112,26127,26133,26122,26119,26381,26379,26477,26507,26517,26481,26524,26483,26487,26503,26525,26519,26479,26480,26495,26505,26494,26512,26485,26522,26515,26492,26474,26482,27427,27494,27495,27519,27667,27675,27875,27880,27891,27825,27852,27877,27827,27837,27838,27836,27874,27819,27861,27859,27832,27844,27833,27841,27822,27863,27845,27889,27839,27835,27873,27867,27850,27820,27887,27868,27862,27872,28821,28814,28818,28810,28825,29228,29229,29240,29256,29287,29289,29376,29390,29401,29399,29392,29609,29608,29599,29611,29605,30013,30109,30105,30106,30340,30402,30450,30452,30693,30717,31038,31040,31041,31177,31176,31354,31353,31482,31998,32596,32652,32651,32773,32954,32933,32930,32945,32929,32939,32937,32948,32938,32943,33253,33278,33293,33459,33437,33433,33453,33469,33439,33465,33457,33452,33445,33455,33464,33443,33456,33470,33463,34382,34417,21021,34920,36555,36814,36820,36817,37045,37048,37041,37046,37319,37329,38263,38272,38428,38464,38463,38459,38468,38466,38585,38632,38738,38750,20127,20141,20142,20449,20405,20399,20415,20448,20433,20431,20445,20419,20406,20440,20447,20426,20439,20398,20432,20420,20418,20442,20430,20446,20407,20823,20882,20881,20896,21070,21059,21066,21069,21068,21067,21063,21191,21193,21187,21185,21261,21335,21371,21402,21467,21676,21696,21672,21710,21705,21688,21670,21683,21703,21698,21693,21674,21697,21700,21704,21679,21675,21681,21691,21673,21671,21695,22271,22402,22411,22432,22435,22434,22478,22446,22419,22869,22865,22863,22862,22864,23004,23e3,23039,23011,23016,23043,23013,23018,23002,23014,23041,23035,23401,23459,23462,23460,23458,23461,23553,23630,23631,23629,23627,23769,23762,24055,24093,24101,24095,24189,24224,24230,24314,24328,24365,24421,24456,24453,24458,24459,24455,24460,24457,24594,24605,24608,24613,24590,24616,24653,24688,24680,24674,24646,24643,24684,24683,24682,24676,25153,25308,25366,25353,25340,25325,25345,25326,25341,25351,25329,25335,25327,25324,25342,25332,25361,25346,25919,25925,26027,26045,26082,26149,26157,26144,26151,26159,26143,26152,26161,26148,26359,26623,26579,26609,26580,26576,26604,26550,26543,26613,26601,26607,26564,26577,26548,26586,26597,26552,26575,26590,26611,26544,26585,26594,26589,26578,27498,27523,27526,27573,27602,27607,27679,27849,27915,27954,27946,27969,27941,27916,27953,27934,27927,27963,27965,27966,27958,27931,27893,27961,27943,27960,27945,27950,27957,27918,27947,28843,28858,28851,28844,28847,28845,28856,28846,28836,29232,29298,29295,29300,29417,29408,29409,29623,29642,29627,29618,29645,29632,29619,29978,29997,30031,30028,30030,30027,30123,30116,30117,30114,30115,30328,30342,30343,30344,30408,30406,30403,30405,30465,30457,30456,30473,30475,30462,30460,30471,30684,30722,30740,30732,30733,31046,31049,31048,31047,31161,31162,31185,31186,31179,31359,31361,31487,31485,31869,32002,32005,32e3,32009,32007,32004,32006,32568,32654,32703,32772,32784,32781,32785,32822,32982,32997,32986,32963,32964,32972,32993,32987,32974,32990,32996,32989,33268,33314,33511,33539,33541,33507,33499,33510,33540,33509,33538,33545,33490,33495,33521,33537,33500,33492,33489,33502,33491,33503,33519,33542,34384,34425,34427,34426,34893,34923,35201,35284,35336,35330,35331,35998,36e3,36212,36211,36276,36557,36556,36848,36838,36834,36842,36837,36845,36843,36836,36840,37066,37070,37057,37059,37195,37194,37325,38274,38480,38475,38476,38477,38754,38761,38859,38893,38899,38913,39080,39131,39135,39318,39321,20056,20147,20492,20493,20515,20463,20518,20517,20472,20521,20502,20486,20540,20511,20506,20498,20497,20474,20480,20500,20520,20465,20513,20491,20505,20504,20467,20462,20525,20522,20478,20523,20489,20860,20900,20901,20898,20941,20940,20934,20939,21078,21084,21076,21083,21085,21290,21375,21407,21405,21471,21736,21776,21761,21815,21756,21733,21746,21766,21754,21780,21737,21741,21729,21769,21742,21738,21734,21799,21767,21757,21775,22275,22276,22466,22484,22475,22467,22537,22799,22871,22872,22874,23057,23064,23068,23071,23067,23059,23020,23072,23075,23081,23077,23052,23049,23403,23640,23472,23475,23478,23476,23470,23477,23481,23480,23556,23633,23637,23632,23789,23805,23803,23786,23784,23792,23798,23809,23796,24046,24109,24107,24235,24237,24231,24369,24466,24465,24464,24665,24675,24677,24656,24661,24685,24681,24687,24708,24735,24730,24717,24724,24716,24709,24726,25159,25331,25352,25343,25422,25406,25391,25429,25410,25414,25423,25417,25402,25424,25405,25386,25387,25384,25421,25420,25928,25929,26009,26049,26053,26178,26185,26191,26179,26194,26188,26181,26177,26360,26388,26389,26391,26657,26680,26696,26694,26707,26681,26690,26708,26665,26803,26647,26700,26705,26685,26612,26704,26688,26684,26691,26666,26693,26643,26648,26689,27530,27529,27575,27683,27687,27688,27686,27684,27888,28010,28053,28040,28039,28006,28024,28023,27993,28051,28012,28041,28014,27994,28020,28009,28044,28042,28025,28037,28005,28052,28874,28888,28900,28889,28872,28879,29241,29305,29436,29433,29437,29432,29431,29574,29677,29705,29678,29664,29674,29662,30036,30045,30044,30042,30041,30142,30149,30151,30130,30131,30141,30140,30137,30146,30136,30347,30384,30410,30413,30414,30505,30495,30496,30504,30697,30768,30759,30776,30749,30772,30775,30757,30765,30752,30751,30770,31061,31056,31072,31071,31062,31070,31069,31063,31066,31204,31203,31207,31199,31206,31209,31192,31364,31368,31449,31494,31505,31881,32033,32023,32011,32010,32032,32034,32020,32016,32021,32026,32028,32013,32025,32027,32570,32607,32660,32709,32705,32774,32792,32789,32793,32791,32829,32831,33009,33026,33008,33029,33005,33012,33030,33016,33011,33032,33021,33034,33020,33007,33261,33260,33280,33296,33322,33323,33320,33324,33467,33579,33618,33620,33610,33592,33616,33609,33589,33588,33615,33586,33593,33590,33559,33600,33585,33576,33603,34388,34442,34474,34451,34468,34473,34444,34467,34460,34928,34935,34945,34946,34941,34937,35352,35344,35342,35340,35349,35338,35351,35347,35350,35343,35345,35912,35962,35961,36001,36002,36215,36524,36562,36564,36559,36785,36865,36870,36855,36864,36858,36852,36867,36861,36869,36856,37013,37089,37085,37090,37202,37197,37196,37336,37341,37335,37340,37337,38275,38498,38499,38497,38491,38493,38500,38488,38494,38587,39138,39340,39592,39640,39717,39730,39740,20094,20602,20605,20572,20551,20547,20556,20570,20553,20581,20598,20558,20565,20597,20596,20599,20559,20495,20591,20589,20828,20885,20976,21098,21103,21202,21209,21208,21205,21264,21263,21273,21311,21312,21310,21443,26364,21830,21866,21862,21828,21854,21857,21827,21834,21809,21846,21839,21845,21807,21860,21816,21806,21852,21804,21859,21811,21825,21847,22280,22283,22281,22495,22533,22538,22534,22496,22500,22522,22530,22581,22519,22521,22816,22882,23094,23105,23113,23142,23146,23104,23100,23138,23130,23110,23114,23408,23495,23493,23492,23490,23487,23494,23561,23560,23559,23648,23644,23645,23815,23814,23822,23835,23830,23842,23825,23849,23828,23833,23844,23847,23831,24034,24120,24118,24115,24119,24247,24248,24246,24245,24254,24373,24375,24407,24428,24425,24427,24471,24473,24478,24472,24481,24480,24476,24703,24739,24713,24736,24744,24779,24756,24806,24765,24773,24763,24757,24796,24764,24792,24789,24774,24799,24760,24794,24775,25114,25115,25160,25504,25511,25458,25494,25506,25509,25463,25447,25496,25514,25457,25513,25481,25475,25499,25451,25512,25476,25480,25497,25505,25516,25490,25487,25472,25467,25449,25448,25466,25949,25942,25937,25945,25943,21855,25935,25944,25941,25940,26012,26011,26028,26063,26059,26060,26062,26205,26202,26212,26216,26214,26206,26361,21207,26395,26753,26799,26786,26771,26805,26751,26742,26801,26791,26775,26800,26755,26820,26797,26758,26757,26772,26781,26792,26783,26785,26754,27442,27578,27627,27628,27691,28046,28092,28147,28121,28082,28129,28108,28132,28155,28154,28165,28103,28107,28079,28113,28078,28126,28153,28088,28151,28149,28101,28114,28186,28085,28122,28139,28120,28138,28145,28142,28136,28102,28100,28074,28140,28095,28134,28921,28937,28938,28925,28911,29245,29309,29313,29468,29467,29462,29459,29465,29575,29701,29706,29699,29702,29694,29709,29920,29942,29943,29980,29986,30053,30054,30050,30064,30095,30164,30165,30133,30154,30157,30350,30420,30418,30427,30519,30526,30524,30518,30520,30522,30827,30787,30798,31077,31080,31085,31227,31378,31381,31520,31528,31515,31532,31526,31513,31518,31534,31890,31895,31893,32070,32067,32113,32046,32057,32060,32064,32048,32051,32068,32047,32066,32050,32049,32573,32670,32666,32716,32718,32722,32796,32842,32838,33071,33046,33059,33067,33065,33072,33060,33282,33333,33335,33334,33337,33678,33694,33688,33656,33698,33686,33725,33707,33682,33674,33683,33673,33696,33655,33659,33660,33670,33703,34389,24426,34503,34496,34486,34500,34485,34502,34507,34481,34479,34505,34899,34974,34952,34987,34962,34966,34957,34955,35219,35215,35370,35357,35363,35365,35377,35373,35359,35355,35362,35913,35930,36009,36012,36011,36008,36010,36007,36199,36198,36286,36282,36571,36575,36889,36877,36890,36887,36899,36895,36893,36880,36885,36894,36896,36879,36898,36886,36891,36884,37096,37101,37117,37207,37326,37365,37350,37347,37351,37357,37353,38281,38506,38517,38515,38520,38512,38516,38518,38519,38508,38592,38634,38633,31456,31455,38914,38915,39770,40165,40565,40575,40613,40635,20642,20621,20613,20633,20625,20608,20630,20632,20634,26368,20977,21106,21108,21109,21097,21214,21213,21211,21338,21413,21883,21888,21927,21884,21898,21917,21912,21890,21916,21930,21908,21895,21899,21891,21939,21934,21919,21822,21938,21914,21947,21932,21937,21886,21897,21931,21913,22285,22575,22570,22580,22564,22576,22577,22561,22557,22560,22777,22778,22880,23159,23194,23167,23186,23195,23207,23411,23409,23506,23500,23507,23504,23562,23563,23601,23884,23888,23860,23879,24061,24133,24125,24128,24131,24190,24266,24257,24258,24260,24380,24429,24489,24490,24488,24785,24801,24754,24758,24800,24860,24867,24826,24853,24816,24827,24820,24936,24817,24846,24822,24841,24832,24850,25119,25161,25507,25484,25551,25536,25577,25545,25542,25549,25554,25571,25552,25569,25558,25581,25582,25462,25588,25578,25563,25682,25562,25593,25950,25958,25954,25955,26001,26e3,26031,26222,26224,26228,26230,26223,26257,26234,26238,26231,26366,26367,26399,26397,26874,26837,26848,26840,26839,26885,26847,26869,26862,26855,26873,26834,26866,26851,26827,26829,26893,26898,26894,26825,26842,26990,26875,27454,27450,27453,27544,27542,27580,27631,27694,27695,27692,28207,28216,28244,28193,28210,28263,28234,28192,28197,28195,28187,28251,28248,28196,28246,28270,28205,28198,28271,28212,28237,28218,28204,28227,28189,28222,28363,28297,28185,28238,28259,28228,28274,28265,28255,28953,28954,28966,28976,28961,28982,29038,28956,29260,29316,29312,29494,29477,29492,29481,29754,29738,29747,29730,29733,29749,29750,29748,29743,29723,29734,29736,29989,29990,30059,30058,30178,30171,30179,30169,30168,30174,30176,30331,30332,30358,30355,30388,30428,30543,30701,30813,30828,30831,31245,31240,31243,31237,31232,31384,31383,31382,31461,31459,31561,31574,31558,31568,31570,31572,31565,31563,31567,31569,31903,31909,32094,32080,32104,32085,32043,32110,32114,32097,32102,32098,32112,32115,21892,32724,32725,32779,32850,32901,33109,33108,33099,33105,33102,33081,33094,33086,33100,33107,33140,33298,33308,33769,33795,33784,33805,33760,33733,33803,33729,33775,33777,33780,33879,33802,33776,33804,33740,33789,33778,33738,33848,33806,33796,33756,33799,33748,33759,34395,34527,34521,34541,34516,34523,34532,34512,34526,34903,35009,35010,34993,35203,35222,35387,35424,35413,35422,35388,35393,35412,35419,35408,35398,35380,35386,35382,35414,35937,35970,36015,36028,36019,36029,36033,36027,36032,36020,36023,36022,36031,36024,36234,36229,36225,36302,36317,36299,36314,36305,36300,36315,36294,36603,36600,36604,36764,36910,36917,36913,36920,36914,36918,37122,37109,37129,37118,37219,37221,37327,37396,37397,37411,37385,37406,37389,37392,37383,37393,38292,38287,38283,38289,38291,38290,38286,38538,38542,38539,38525,38533,38534,38541,38514,38532,38593,38597,38596,38598,38599,38639,38642,38860,38917,38918,38920,39143,39146,39151,39145,39154,39149,39342,39341,40643,40653,40657,20098,20653,20661,20658,20659,20677,20670,20652,20663,20667,20655,20679,21119,21111,21117,21215,21222,21220,21218,21219,21295,21983,21992,21971,21990,21966,21980,21959,21969,21987,21988,21999,21978,21985,21957,21958,21989,21961,22290,22291,22622,22609,22616,22615,22618,22612,22635,22604,22637,22602,22626,22610,22603,22887,23233,23241,23244,23230,23229,23228,23219,23234,23218,23913,23919,24140,24185,24265,24264,24338,24409,24492,24494,24858,24847,24904,24863,24819,24859,24825,24833,24840,24910,24908,24900,24909,24894,24884,24871,24845,24838,24887,25121,25122,25619,25662,25630,25642,25645,25661,25644,25615,25628,25620,25613,25654,25622,25623,25606,25964,26015,26032,26263,26249,26247,26248,26262,26244,26264,26253,26371,27028,26989,26970,26999,26976,26964,26997,26928,27010,26954,26984,26987,26974,26963,27001,27014,26973,26979,26971,27463,27506,27584,27583,27603,27645,28322,28335,28371,28342,28354,28304,28317,28359,28357,28325,28312,28348,28346,28331,28369,28310,28316,28356,28372,28330,28327,28340,29006,29017,29033,29028,29001,29031,29020,29036,29030,29004,29029,29022,28998,29032,29014,29242,29266,29495,29509,29503,29502,29807,29786,29781,29791,29790,29761,29759,29785,29787,29788,30070,30072,30208,30192,30209,30194,30193,30202,30207,30196,30195,30430,30431,30555,30571,30566,30558,30563,30585,30570,30572,30556,30565,30568,30562,30702,30862,30896,30871,30872,30860,30857,30844,30865,30867,30847,31098,31103,31105,33836,31165,31260,31258,31264,31252,31263,31262,31391,31392,31607,31680,31584,31598,31591,31921,31923,31925,32147,32121,32145,32129,32143,32091,32622,32617,32618,32626,32681,32680,32676,32854,32856,32902,32900,33137,33136,33144,33125,33134,33139,33131,33145,33146,33126,33285,33351,33922,33911,33853,33841,33909,33894,33899,33865,33900,33883,33852,33845,33889,33891,33897,33901,33862,34398,34396,34399,34553,34579,34568,34567,34560,34558,34555,34562,34563,34566,34570,34905,35039,35028,35033,35036,35032,35037,35041,35018,35029,35026,35228,35299,35435,35442,35443,35430,35433,35440,35463,35452,35427,35488,35441,35461,35437,35426,35438,35436,35449,35451,35390,35432,35938,35978,35977,36042,36039,36040,36036,36018,36035,36034,36037,36321,36319,36328,36335,36339,36346,36330,36324,36326,36530,36611,36617,36606,36618,36767,36786,36939,36938,36947,36930,36948,36924,36949,36944,36935,36943,36942,36941,36945,36926,36929,37138,37143,37228,37226,37225,37321,37431,37463,37432,37437,37440,37438,37467,37451,37476,37457,37428,37449,37453,37445,37433,37439,37466,38296,38552,38548,38549,38605,38603,38601,38602,38647,38651,38649,38646,38742,38772,38774,38928,38929,38931,38922,38930,38924,39164,39156,39165,39166,39347,39345,39348,39649,40169,40578,40718,40723,40736,20711,20718,20709,20694,20717,20698,20693,20687,20689,20721,20686,20713,20834,20979,21123,21122,21297,21421,22014,22016,22043,22039,22013,22036,22022,22025,22029,22030,22007,22038,22047,22024,22032,22006,22296,22294,22645,22654,22659,22675,22666,22649,22661,22653,22781,22821,22818,22820,22890,22889,23265,23270,23273,23255,23254,23256,23267,23413,23518,23527,23521,23525,23526,23528,23522,23524,23519,23565,23650,23940,23943,24155,24163,24149,24151,24148,24275,24278,24330,24390,24432,24505,24903,24895,24907,24951,24930,24931,24927,24922,24920,24949,25130,25735,25688,25684,25764,25720,25695,25722,25681,25703,25652,25709,25723,25970,26017,26071,26070,26274,26280,26269,27036,27048,27029,27073,27054,27091,27083,27035,27063,27067,27051,27060,27088,27085,27053,27084,27046,27075,27043,27465,27468,27699,28467,28436,28414,28435,28404,28457,28478,28448,28460,28431,28418,28450,28415,28399,28422,28465,28472,28466,28451,28437,28459,28463,28552,28458,28396,28417,28402,28364,28407,29076,29081,29053,29066,29060,29074,29246,29330,29334,29508,29520,29796,29795,29802,29808,29805,29956,30097,30247,30221,30219,30217,30227,30433,30435,30596,30589,30591,30561,30913,30879,30887,30899,30889,30883,31118,31119,31117,31278,31281,31402,31401,31469,31471,31649,31637,31627,31605,31639,31645,31636,31631,31672,31623,31620,31929,31933,31934,32187,32176,32156,32189,32190,32160,32202,32180,32178,32177,32186,32162,32191,32181,32184,32173,32210,32199,32172,32624,32736,32737,32735,32862,32858,32903,33104,33152,33167,33160,33162,33151,33154,33255,33274,33287,33300,33310,33355,33993,33983,33990,33988,33945,33950,33970,33948,33995,33976,33984,34003,33936,33980,34001,33994,34623,34588,34619,34594,34597,34612,34584,34645,34615,34601,35059,35074,35060,35065,35064,35069,35048,35098,35055,35494,35468,35486,35491,35469,35489,35475,35492,35498,35493,35496,35480,35473,35482,35495,35946,35981,35980,36051,36049,36050,36203,36249,36245,36348,36628,36626,36629,36627,36771,36960,36952,36956,36963,36953,36958,36962,36957,36955,37145,37144,37150,37237,37240,37239,37236,37496,37504,37509,37528,37526,37499,37523,37532,37544,37500,37521,38305,38312,38313,38307,38309,38308,38553,38556,38555,38604,38610,38656,38780,38789,38902,38935,38936,39087,39089,39171,39173,39180,39177,39361,39599,39600,39654,39745,39746,40180,40182,40179,40636,40763,40778,20740,20736,20731,20725,20729,20738,20744,20745,20741,20956,21127,21128,21129,21133,21130,21232,21426,22062,22075,22073,22066,22079,22068,22057,22099,22094,22103,22132,22070,22063,22064,22656,22687,22686,22707,22684,22702,22697,22694,22893,23305,23291,23307,23285,23308,23304,23534,23532,23529,23531,23652,23653,23965,23956,24162,24159,24161,24290,24282,24287,24285,24291,24288,24392,24433,24503,24501,24950,24935,24942,24925,24917,24962,24956,24944,24939,24958,24999,24976,25003,24974,25004,24986,24996,24980,25006,25134,25705,25711,25721,25758,25778,25736,25744,25776,25765,25747,25749,25769,25746,25774,25773,25771,25754,25772,25753,25762,25779,25973,25975,25976,26286,26283,26292,26289,27171,27167,27112,27137,27166,27161,27133,27169,27155,27146,27123,27138,27141,27117,27153,27472,27470,27556,27589,27590,28479,28540,28548,28497,28518,28500,28550,28525,28507,28536,28526,28558,28538,28528,28516,28567,28504,28373,28527,28512,28511,29087,29100,29105,29096,29270,29339,29518,29527,29801,29835,29827,29822,29824,30079,30240,30249,30239,30244,30246,30241,30242,30362,30394,30436,30606,30599,30604,30609,30603,30923,30917,30906,30922,30910,30933,30908,30928,31295,31292,31296,31293,31287,31291,31407,31406,31661,31665,31684,31668,31686,31687,31681,31648,31692,31946,32224,32244,32239,32251,32216,32236,32221,32232,32227,32218,32222,32233,32158,32217,32242,32249,32629,32631,32687,32745,32806,33179,33180,33181,33184,33178,33176,34071,34109,34074,34030,34092,34093,34067,34065,34083,34081,34068,34028,34085,34047,34054,34690,34676,34678,34656,34662,34680,34664,34649,34647,34636,34643,34907,34909,35088,35079,35090,35091,35093,35082,35516,35538,35527,35524,35477,35531,35576,35506,35529,35522,35519,35504,35542,35533,35510,35513,35547,35916,35918,35948,36064,36062,36070,36068,36076,36077,36066,36067,36060,36074,36065,36205,36255,36259,36395,36368,36381,36386,36367,36393,36383,36385,36382,36538,36637,36635,36639,36649,36646,36650,36636,36638,36645,36969,36974,36968,36973,36983,37168,37165,37159,37169,37255,37257,37259,37251,37573,37563,37559,37610,37548,37604,37569,37555,37564,37586,37575,37616,37554,38317,38321,38660,38662,38663,38665,38752,38797,38795,38799,38945,38955,38940,39091,39178,39187,39186,39192,39389,39376,39391,39387,39377,39381,39378,39385,39607,39662,39663,39719,39749,39748,39799,39791,40198,40201,40195,40617,40638,40654,22696,40786,20754,20760,20756,20752,20757,20864,20906,20957,21137,21139,21235,22105,22123,22137,22121,22116,22136,22122,22120,22117,22129,22127,22124,22114,22134,22721,22718,22727,22725,22894,23325,23348,23416,23536,23566,24394,25010,24977,25001,24970,25037,25014,25022,25034,25032,25136,25797,25793,25803,25787,25788,25818,25796,25799,25794,25805,25791,25810,25812,25790,25972,26310,26313,26297,26308,26311,26296,27197,27192,27194,27225,27243,27224,27193,27204,27234,27233,27211,27207,27189,27231,27208,27481,27511,27653,28610,28593,28577,28611,28580,28609,28583,28595,28608,28601,28598,28582,28576,28596,29118,29129,29136,29138,29128,29141,29113,29134,29145,29148,29123,29124,29544,29852,29859,29848,29855,29854,29922,29964,29965,30260,30264,30266,30439,30437,30624,30622,30623,30629,30952,30938,30956,30951,31142,31309,31310,31302,31308,31307,31418,31705,31761,31689,31716,31707,31713,31721,31718,31957,31958,32266,32273,32264,32283,32291,32286,32285,32265,32272,32633,32690,32752,32753,32750,32808,33203,33193,33192,33275,33288,33368,33369,34122,34137,34120,34152,34153,34115,34121,34157,34154,34142,34691,34719,34718,34722,34701,34913,35114,35122,35109,35115,35105,35242,35238,35558,35578,35563,35569,35584,35548,35559,35566,35582,35585,35586,35575,35565,35571,35574,35580,35947,35949,35987,36084,36420,36401,36404,36418,36409,36405,36667,36655,36664,36659,36776,36774,36981,36980,36984,36978,36988,36986,37172,37266,37664,37686,37624,37683,37679,37666,37628,37675,37636,37658,37648,37670,37665,37653,37678,37657,38331,38567,38568,38570,38613,38670,38673,38678,38669,38675,38671,38747,38748,38758,38808,38960,38968,38971,38967,38957,38969,38948,39184,39208,39198,39195,39201,39194,39405,39394,39409,39608,39612,39675,39661,39720,39825,40213,40227,40230,40232,40210,40219,40664,40660,40845,40860,20778,20767,20769,20786,21237,22158,22144,22160,22149,22151,22159,22741,22739,22737,22734,23344,23338,23332,23418,23607,23656,23996,23994,23997,23992,24171,24396,24509,25033,25026,25031,25062,25035,25138,25140,25806,25802,25816,25824,25840,25830,25836,25841,25826,25837,25986,25987,26329,26326,27264,27284,27268,27298,27292,27355,27299,27262,27287,27280,27296,27484,27566,27610,27656,28632,28657,28639,28640,28635,28644,28651,28655,28544,28652,28641,28649,28629,28654,28656,29159,29151,29166,29158,29157,29165,29164,29172,29152,29237,29254,29552,29554,29865,29872,29862,29864,30278,30274,30284,30442,30643,30634,30640,30636,30631,30637,30703,30967,30970,30964,30959,30977,31143,31146,31319,31423,31751,31757,31742,31735,31756,31712,31968,31964,31966,31970,31967,31961,31965,32302,32318,32326,32311,32306,32323,32299,32317,32305,32325,32321,32308,32313,32328,32309,32319,32303,32580,32755,32764,32881,32882,32880,32879,32883,33222,33219,33210,33218,33216,33215,33213,33225,33214,33256,33289,33393,34218,34180,34174,34204,34193,34196,34223,34203,34183,34216,34186,34407,34752,34769,34739,34770,34758,34731,34747,34746,34760,34763,35131,35126,35140,35128,35133,35244,35598,35607,35609,35611,35594,35616,35613,35588,35600,35905,35903,35955,36090,36093,36092,36088,36091,36264,36425,36427,36424,36426,36676,36670,36674,36677,36671,36991,36989,36996,36993,36994,36992,37177,37283,37278,37276,37709,37762,37672,37749,37706,37733,37707,37656,37758,37740,37723,37744,37722,37716,38346,38347,38348,38344,38342,38577,38584,38614,38684,38686,38816,38867,38982,39094,39221,39425,39423,39854,39851,39850,39853,40251,40255,40587,40655,40670,40668,40669,40667,40766,40779,21474,22165,22190,22745,22744,23352,24413,25059,25139,25844,25842,25854,25862,25850,25851,25847,26039,26332,26406,27315,27308,27331,27323,27320,27330,27310,27311,27487,27512,27567,28681,28683,28670,28678,28666,28689,28687,29179,29180,29182,29176,29559,29557,29863,29887,29973,30294,30296,30290,30653,30655,30651,30652,30990,31150,31329,31330,31328,31428,31429,31787,31783,31786,31774,31779,31777,31975,32340,32341,32350,32346,32353,32338,32345,32584,32761,32763,32887,32886,33229,33231,33290,34255,34217,34253,34256,34249,34224,34234,34233,34214,34799,34796,34802,34784,35206,35250,35316,35624,35641,35628,35627,35920,36101,36441,36451,36454,36452,36447,36437,36544,36681,36685,36999,36995,37e3,37291,37292,37328,37780,37770,37782,37794,37811,37806,37804,37808,37784,37786,37783,38356,38358,38352,38357,38626,38620,38617,38619,38622,38692,38819,38822,38829,38905,38989,38991,38988,38990,38995,39098,39230,39231,39229,39214,39333,39438,39617,39683,39686,39759,39758,39757,39882,39881,39933,39880,39872,40273,40285,40288,40672,40725,40748,20787,22181,22750,22751,22754,23541,40848,24300,25074,25079,25078,25077,25856,25871,26336,26333,27365,27357,27354,27347,28699,28703,28712,28698,28701,28693,28696,29190,29197,29272,29346,29560,29562,29885,29898,29923,30087,30086,30303,30305,30663,31001,31153,31339,31337,31806,31807,31800,31805,31799,31808,32363,32365,32377,32361,32362,32645,32371,32694,32697,32696,33240,34281,34269,34282,34261,34276,34277,34295,34811,34821,34829,34809,34814,35168,35167,35158,35166,35649,35676,35672,35657,35674,35662,35663,35654,35673,36104,36106,36476,36466,36487,36470,36460,36474,36468,36692,36686,36781,37002,37003,37297,37294,37857,37841,37855,37827,37832,37852,37853,37846,37858,37837,37848,37860,37847,37864,38364,38580,38627,38698,38695,38753,38876,38907,39006,39e3,39003,39100,39237,39241,39446,39449,39693,39912,39911,39894,39899,40329,40289,40306,40298,40300,40594,40599,40595,40628,21240,22184,22199,22198,22196,22204,22756,23360,23363,23421,23542,24009,25080,25082,25880,25876,25881,26342,26407,27372,28734,28720,28722,29200,29563,29903,30306,30309,31014,31018,31020,31019,31431,31478,31820,31811,31821,31983,31984,36782,32381,32380,32386,32588,32768,33242,33382,34299,34297,34321,34298,34310,34315,34311,34314,34836,34837,35172,35258,35320,35696,35692,35686,35695,35679,35691,36111,36109,36489,36481,36485,36482,37300,37323,37912,37891,37885,38369,38704,39108,39250,39249,39336,39467,39472,39479,39477,39955,39949,40569,40629,40680,40751,40799,40803,40801,20791,20792,22209,22208,22210,22804,23660,24013,25084,25086,25885,25884,26005,26345,27387,27396,27386,27570,28748,29211,29351,29910,29908,30313,30675,31824,32399,32396,32700,34327,34349,34330,34851,34850,34849,34847,35178,35180,35261,35700,35703,35709,36115,36490,36493,36491,36703,36783,37306,37934,37939,37941,37946,37944,37938,37931,38370,38712,38713,38706,38911,39015,39013,39255,39493,39491,39488,39486,39631,39764,39761,39981,39973,40367,40372,40386,40376,40605,40687,40729,40796,40806,40807,20796,20795,22216,22218,22217,23423,24020,24018,24398,25087,25892,27402,27489,28753,28760,29568,29924,30090,30318,30316,31155,31840,31839,32894,32893,33247,35186,35183,35324,35712,36118,36119,36497,36499,36705,37192,37956,37969,37970,38717,38718,38851,38849,39019,39253,39509,39501,39634,39706,40009,39985,39998,39995,40403,40407,40756,40812,40810,40852,22220,24022,25088,25891,25899,25898,26348,27408,29914,31434,31844,31843,31845,32403,32406,32404,33250,34360,34367,34865,35722,37008,37007,37987,37984,37988,38760,39023,39260,39514,39515,39511,39635,39636,39633,40020,40023,40022,40421,40607,40692,22225,22761,25900,28766,30321,30322,30679,32592,32648,34870,34873,34914,35731,35730,35734,33399,36123,37312,37994,38722,38728,38724,38854,39024,39519,39714,39768,40031,40441,40442,40572,40573,40711,40823,40818,24307,27414,28771,31852,31854,34875,35264,36513,37313,38002,38e3,39025,39262,39638,39715,40652,28772,30682,35738,38007,38857,39522,39525,32412,35740,36522,37317,38013,38014,38012,40055,40056,40695,35924,38015,40474,29224,39530,39729,40475,40478,31858,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,20022,20031,20101,20128,20866,20886,20907,21241,21304,21353,21430,22794,23424,24027,12083,24191,24308,24400,24417,25908,26080,30098,30326,36789,38582,168,710,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,65339,65341,10045,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8679,8632,8633,12751,131276,20058,131210,20994,17553,40880,20872,40881,161287,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65506,65508,65287,65282,12849,8470,8481,12443,12444,11904,11908,11910,11911,11912,11914,11916,11917,11925,11932,11933,11941,11943,11946,11948,11950,11958,11964,11966,11974,11978,11980,11981,11983,11990,11991,11998,12003,null,null,null,643,592,603,596,629,339,248,331,650,618,20034,20060,20981,21274,21378,19975,19980,20039,20109,22231,64012,23662,24435,19983,20871,19982,20014,20115,20162,20169,20168,20888,21244,21356,21433,22304,22787,22828,23568,24063,26081,27571,27596,27668,29247,20017,20028,20200,20188,20201,20193,20189,20186,21004,21276,21324,22306,22307,22807,22831,23425,23428,23570,23611,23668,23667,24068,24192,24194,24521,25097,25168,27669,27702,27715,27711,27707,29358,29360,29578,31160,32906,38430,20238,20248,20268,20213,20244,20209,20224,20215,20232,20253,20226,20229,20258,20243,20228,20212,20242,20913,21011,21001,21008,21158,21282,21279,21325,21386,21511,22241,22239,22318,22314,22324,22844,22912,22908,22917,22907,22910,22903,22911,23382,23573,23589,23676,23674,23675,23678,24031,24181,24196,24322,24346,24436,24533,24532,24527,25180,25182,25188,25185,25190,25186,25177,25184,25178,25189,26095,26094,26430,26425,26424,26427,26426,26431,26428,26419,27672,27718,27730,27740,27727,27722,27732,27723,27724,28785,29278,29364,29365,29582,29994,30335,31349,32593,33400,33404,33408,33405,33407,34381,35198,37017,37015,37016,37019,37012,38434,38436,38432,38435,20310,20283,20322,20297,20307,20324,20286,20327,20306,20319,20289,20312,20269,20275,20287,20321,20879,20921,21020,21022,21025,21165,21166,21257,21347,21362,21390,21391,21552,21559,21546,21588,21573,21529,21532,21541,21528,21565,21583,21569,21544,21540,21575,22254,22247,22245,22337,22341,22348,22345,22347,22354,22790,22848,22950,22936,22944,22935,22926,22946,22928,22927,22951,22945,23438,23442,23592,23594,23693,23695,23688,23691,23689,23698,23690,23686,23699,23701,24032,24074,24078,24203,24201,24204,24200,24205,24325,24349,24440,24438,24530,24529,24528,24557,24552,24558,24563,24545,24548,24547,24570,24559,24567,24571,24576,24564,25146,25219,25228,25230,25231,25236,25223,25201,25211,25210,25200,25217,25224,25207,25213,25202,25204,25911,26096,26100,26099,26098,26101,26437,26439,26457,26453,26444,26440,26461,26445,26458,26443,27600,27673,27674,27768,27751,27755,27780,27787,27791,27761,27759,27753,27802,27757,27783,27797,27804,27750,27763,27749,27771,27790,28788,28794,29283,29375,29373,29379,29382,29377,29370,29381,29589,29591,29587,29588,29586,30010,30009,30100,30101,30337,31037,32820,32917,32921,32912,32914,32924,33424,33423,33413,33422,33425,33427,33418,33411,33412,35960,36809,36799,37023,37025,37029,37022,37031,37024,38448,38440,38447,38445,20019,20376,20348,20357,20349,20352,20359,20342,20340,20361,20356,20343,20300,20375,20330,20378,20345,20353,20344,20368,20380,20372,20382,20370,20354,20373,20331,20334,20894,20924,20926,21045,21042,21043,21062,21041,21180,21258,21259,21308,21394,21396,21639,21631,21633,21649,21634,21640,21611,21626,21630,21605,21612,21620,21606,21645,21615,21601,21600,21656,21603,21607,21604,22263,22265,22383,22386,22381,22379,22385,22384,22390,22400,22389,22395,22387,22388,22370,22376,22397,22796,22853,22965,22970,22991,22990,22962,22988,22977,22966,22972,22979,22998,22961,22973,22976,22984,22964,22983,23394,23397,23443,23445,23620,23623,23726,23716,23712,23733,23727,23720,23724,23711,23715,23725,23714,23722,23719,23709,23717,23734,23728,23718,24087,24084,24089,24360,24354,24355,24356,24404,24450,24446,24445,24542,24549,24621,24614,24601,24626,24587,24628,24586,24599,24627,24602,24606,24620,24610,24589,24592,24622,24595,24593,24588,24585,24604,25108,25149,25261,25268,25297,25278,25258,25270,25290,25262,25267,25263,25275,25257,25264,25272,25917,26024,26043,26121,26108,26116,26130,26120,26107,26115,26123,26125,26117,26109,26129,26128,26358,26378,26501,26476,26510,26514,26486,26491,26520,26502,26500,26484,26509,26508,26490,26527,26513,26521,26499,26493,26497,26488,26489,26516,27429,27520,27518,27614,27677,27795,27884,27883,27886,27865,27830,27860,27821,27879,27831,27856,27842,27834,27843,27846,27885,27890,27858,27869,27828,27786,27805,27776,27870,27840,27952,27853,27847,27824,27897,27855,27881,27857,28820,28824,28805,28819,28806,28804,28817,28822,28802,28826,28803,29290,29398,29387,29400,29385,29404,29394,29396,29402,29388,29393,29604,29601,29613,29606,29602,29600,29612,29597,29917,29928,30015,30016,30014,30092,30104,30383,30451,30449,30448,30453,30712,30716,30713,30715,30714,30711,31042,31039,31173,31352,31355,31483,31861,31997,32821,32911,32942,32931,32952,32949,32941,33312,33440,33472,33451,33434,33432,33435,33461,33447,33454,33468,33438,33466,33460,33448,33441,33449,33474,33444,33475,33462,33442,34416,34415,34413,34414,35926,36818,36811,36819,36813,36822,36821,36823,37042,37044,37039,37043,37040,38457,38461,38460,38458,38467,20429,20421,20435,20402,20425,20427,20417,20436,20444,20441,20411,20403,20443,20423,20438,20410,20416,20409,20460,21060,21065,21184,21186,21309,21372,21399,21398,21401,21400,21690,21665,21677,21669,21711,21699,33549,21687,21678,21718,21686,21701,21702,21664,21616,21692,21666,21694,21618,21726,21680,22453,22430,22431,22436,22412,22423,22429,22427,22420,22424,22415,22425,22437,22426,22421,22772,22797,22867,23009,23006,23022,23040,23025,23005,23034,23037,23036,23030,23012,23026,23031,23003,23017,23027,23029,23008,23038,23028,23021,23464,23628,23760,23768,23756,23767,23755,23771,23774,23770,23753,23751,23754,23766,23763,23764,23759,23752,23750,23758,23775,23800,24057,24097,24098,24099,24096,24100,24240,24228,24226,24219,24227,24229,24327,24366,24406,24454,24631,24633,24660,24690,24670,24645,24659,24647,24649,24667,24652,24640,24642,24671,24612,24644,24664,24678,24686,25154,25155,25295,25357,25355,25333,25358,25347,25323,25337,25359,25356,25336,25334,25344,25363,25364,25338,25365,25339,25328,25921,25923,26026,26047,26166,26145,26162,26165,26140,26150,26146,26163,26155,26170,26141,26164,26169,26158,26383,26384,26561,26610,26568,26554,26588,26555,26616,26584,26560,26551,26565,26603,26596,26591,26549,26573,26547,26615,26614,26606,26595,26562,26553,26574,26599,26608,26546,26620,26566,26605,26572,26542,26598,26587,26618,26569,26570,26563,26602,26571,27432,27522,27524,27574,27606,27608,27616,27680,27681,27944,27956,27949,27935,27964,27967,27922,27914,27866,27955,27908,27929,27962,27930,27921,27904,27933,27970,27905,27928,27959,27907,27919,27968,27911,27936,27948,27912,27938,27913,27920,28855,28831,28862,28849,28848,28833,28852,28853,28841,29249,29257,29258,29292,29296,29299,29294,29386,29412,29416,29419,29407,29418,29414,29411,29573,29644,29634,29640,29637,29625,29622,29621,29620,29675,29631,29639,29630,29635,29638,29624,29643,29932,29934,29998,30023,30024,30119,30122,30329,30404,30472,30467,30468,30469,30474,30455,30459,30458,30695,30696,30726,30737,30738,30725,30736,30735,30734,30729,30723,30739,31050,31052,31051,31045,31044,31189,31181,31183,31190,31182,31360,31358,31441,31488,31489,31866,31864,31865,31871,31872,31873,32003,32008,32001,32600,32657,32653,32702,32775,32782,32783,32788,32823,32984,32967,32992,32977,32968,32962,32976,32965,32995,32985,32988,32970,32981,32969,32975,32983,32998,32973,33279,33313,33428,33497,33534,33529,33543,33512,33536,33493,33594,33515,33494,33524,33516,33505,33522,33525,33548,33531,33526,33520,33514,33508,33504,33530,33523,33517,34423,34420,34428,34419,34881,34894,34919,34922,34921,35283,35332,35335,36210,36835,36833,36846,36832,37105,37053,37055,37077,37061,37054,37063,37067,37064,37332,37331,38484,38479,38481,38483,38474,38478,20510,20485,20487,20499,20514,20528,20507,20469,20468,20531,20535,20524,20470,20471,20503,20508,20512,20519,20533,20527,20529,20494,20826,20884,20883,20938,20932,20933,20936,20942,21089,21082,21074,21086,21087,21077,21090,21197,21262,21406,21798,21730,21783,21778,21735,21747,21732,21786,21759,21764,21768,21739,21777,21765,21745,21770,21755,21751,21752,21728,21774,21763,21771,22273,22274,22476,22578,22485,22482,22458,22470,22461,22460,22456,22454,22463,22471,22480,22457,22465,22798,22858,23065,23062,23085,23086,23061,23055,23063,23050,23070,23091,23404,23463,23469,23468,23555,23638,23636,23788,23807,23790,23793,23799,23808,23801,24105,24104,24232,24238,24234,24236,24371,24368,24423,24669,24666,24679,24641,24738,24712,24704,24722,24705,24733,24707,24725,24731,24727,24711,24732,24718,25113,25158,25330,25360,25430,25388,25412,25413,25398,25411,25572,25401,25419,25418,25404,25385,25409,25396,25432,25428,25433,25389,25415,25395,25434,25425,25400,25431,25408,25416,25930,25926,26054,26051,26052,26050,26186,26207,26183,26193,26386,26387,26655,26650,26697,26674,26675,26683,26699,26703,26646,26673,26652,26677,26667,26669,26671,26702,26692,26676,26653,26642,26644,26662,26664,26670,26701,26682,26661,26656,27436,27439,27437,27441,27444,27501,32898,27528,27622,27620,27624,27619,27618,27623,27685,28026,28003,28004,28022,27917,28001,28050,27992,28002,28013,28015,28049,28045,28143,28031,28038,27998,28007,28e3,28055,28016,28028,27999,28034,28056,27951,28008,28043,28030,28032,28036,27926,28035,28027,28029,28021,28048,28892,28883,28881,28893,28875,32569,28898,28887,28882,28894,28896,28884,28877,28869,28870,28871,28890,28878,28897,29250,29304,29303,29302,29440,29434,29428,29438,29430,29427,29435,29441,29651,29657,29669,29654,29628,29671,29667,29673,29660,29650,29659,29652,29661,29658,29655,29656,29672,29918,29919,29940,29941,29985,30043,30047,30128,30145,30139,30148,30144,30143,30134,30138,30346,30409,30493,30491,30480,30483,30482,30499,30481,30485,30489,30490,30498,30503,30755,30764,30754,30773,30767,30760,30766,30763,30753,30761,30771,30762,30769,31060,31067,31055,31068,31059,31058,31057,31211,31212,31200,31214,31213,31210,31196,31198,31197,31366,31369,31365,31371,31372,31370,31367,31448,31504,31492,31507,31493,31503,31496,31498,31502,31497,31506,31876,31889,31882,31884,31880,31885,31877,32030,32029,32017,32014,32024,32022,32019,32031,32018,32015,32012,32604,32609,32606,32608,32605,32603,32662,32658,32707,32706,32704,32790,32830,32825,33018,33010,33017,33013,33025,33019,33024,33281,33327,33317,33587,33581,33604,33561,33617,33573,33622,33599,33601,33574,33564,33570,33602,33614,33563,33578,33544,33596,33613,33558,33572,33568,33591,33583,33577,33607,33605,33612,33619,33566,33580,33611,33575,33608,34387,34386,34466,34472,34454,34445,34449,34462,34439,34455,34438,34443,34458,34437,34469,34457,34465,34471,34453,34456,34446,34461,34448,34452,34883,34884,34925,34933,34934,34930,34944,34929,34943,34927,34947,34942,34932,34940,35346,35911,35927,35963,36004,36003,36214,36216,36277,36279,36278,36561,36563,36862,36853,36866,36863,36859,36868,36860,36854,37078,37088,37081,37082,37091,37087,37093,37080,37083,37079,37084,37092,37200,37198,37199,37333,37346,37338,38492,38495,38588,39139,39647,39727,20095,20592,20586,20577,20574,20576,20563,20555,20573,20594,20552,20557,20545,20571,20554,20578,20501,20549,20575,20585,20587,20579,20580,20550,20544,20590,20595,20567,20561,20944,21099,21101,21100,21102,21206,21203,21293,21404,21877,21878,21820,21837,21840,21812,21802,21841,21858,21814,21813,21808,21842,21829,21772,21810,21861,21838,21817,21832,21805,21819,21824,21835,22282,22279,22523,22548,22498,22518,22492,22516,22528,22509,22525,22536,22520,22539,22515,22479,22535,22510,22499,22514,22501,22508,22497,22542,22524,22544,22503,22529,22540,22513,22505,22512,22541,22532,22876,23136,23128,23125,23143,23134,23096,23093,23149,23120,23135,23141,23148,23123,23140,23127,23107,23133,23122,23108,23131,23112,23182,23102,23117,23097,23116,23152,23145,23111,23121,23126,23106,23132,23410,23406,23489,23488,23641,23838,23819,23837,23834,23840,23820,23848,23821,23846,23845,23823,23856,23826,23843,23839,23854,24126,24116,24241,24244,24249,24242,24243,24374,24376,24475,24470,24479,24714,24720,24710,24766,24752,24762,24787,24788,24783,24804,24793,24797,24776,24753,24795,24759,24778,24767,24771,24781,24768,25394,25445,25482,25474,25469,25533,25502,25517,25501,25495,25515,25486,25455,25479,25488,25454,25519,25461,25500,25453,25518,25468,25508,25403,25503,25464,25477,25473,25489,25485,25456,25939,26061,26213,26209,26203,26201,26204,26210,26392,26745,26759,26768,26780,26733,26734,26798,26795,26966,26735,26787,26796,26793,26741,26740,26802,26767,26743,26770,26748,26731,26738,26794,26752,26737,26750,26779,26774,26763,26784,26761,26788,26744,26747,26769,26764,26762,26749,27446,27443,27447,27448,27537,27535,27533,27534,27532,27690,28096,28075,28084,28083,28276,28076,28137,28130,28087,28150,28116,28160,28104,28128,28127,28118,28094,28133,28124,28125,28123,28148,28106,28093,28141,28144,28090,28117,28098,28111,28105,28112,28146,28115,28157,28119,28109,28131,28091,28922,28941,28919,28951,28916,28940,28912,28932,28915,28944,28924,28927,28934,28947,28928,28920,28918,28939,28930,28942,29310,29307,29308,29311,29469,29463,29447,29457,29464,29450,29448,29439,29455,29470,29576,29686,29688,29685,29700,29697,29693,29703,29696,29690,29692,29695,29708,29707,29684,29704,30052,30051,30158,30162,30159,30155,30156,30161,30160,30351,30345,30419,30521,30511,30509,30513,30514,30516,30515,30525,30501,30523,30517,30792,30802,30793,30797,30794,30796,30758,30789,30800,31076,31079,31081,31082,31075,31083,31073,31163,31226,31224,31222,31223,31375,31380,31376,31541,31559,31540,31525,31536,31522,31524,31539,31512,31530,31517,31537,31531,31533,31535,31538,31544,31514,31523,31892,31896,31894,31907,32053,32061,32056,32054,32058,32069,32044,32041,32065,32071,32062,32063,32074,32059,32040,32611,32661,32668,32669,32667,32714,32715,32717,32720,32721,32711,32719,32713,32799,32798,32795,32839,32835,32840,33048,33061,33049,33051,33069,33055,33068,33054,33057,33045,33063,33053,33058,33297,33336,33331,33338,33332,33330,33396,33680,33699,33704,33677,33658,33651,33700,33652,33679,33665,33685,33689,33653,33684,33705,33661,33667,33676,33693,33691,33706,33675,33662,33701,33711,33672,33687,33712,33663,33702,33671,33710,33654,33690,34393,34390,34495,34487,34498,34497,34501,34490,34480,34504,34489,34483,34488,34508,34484,34491,34492,34499,34493,34494,34898,34953,34965,34984,34978,34986,34970,34961,34977,34975,34968,34983,34969,34971,34967,34980,34988,34956,34963,34958,35202,35286,35289,35285,35376,35367,35372,35358,35897,35899,35932,35933,35965,36005,36221,36219,36217,36284,36290,36281,36287,36289,36568,36574,36573,36572,36567,36576,36577,36900,36875,36881,36892,36876,36897,37103,37098,37104,37108,37106,37107,37076,37099,37100,37097,37206,37208,37210,37203,37205,37356,37364,37361,37363,37368,37348,37369,37354,37355,37367,37352,37358,38266,38278,38280,38524,38509,38507,38513,38511,38591,38762,38916,39141,39319,20635,20629,20628,20638,20619,20643,20611,20620,20622,20637,20584,20636,20626,20610,20615,20831,20948,21266,21265,21412,21415,21905,21928,21925,21933,21879,22085,21922,21907,21896,21903,21941,21889,21923,21906,21924,21885,21900,21926,21887,21909,21921,21902,22284,22569,22583,22553,22558,22567,22563,22568,22517,22600,22565,22556,22555,22579,22591,22582,22574,22585,22584,22573,22572,22587,22881,23215,23188,23199,23162,23202,23198,23160,23206,23164,23205,23212,23189,23214,23095,23172,23178,23191,23171,23179,23209,23163,23165,23180,23196,23183,23187,23197,23530,23501,23499,23508,23505,23498,23502,23564,23600,23863,23875,23915,23873,23883,23871,23861,23889,23886,23893,23859,23866,23890,23869,23857,23897,23874,23865,23881,23864,23868,23858,23862,23872,23877,24132,24129,24408,24486,24485,24491,24777,24761,24780,24802,24782,24772,24852,24818,24842,24854,24837,24821,24851,24824,24828,24830,24769,24835,24856,24861,24848,24831,24836,24843,25162,25492,25521,25520,25550,25573,25576,25583,25539,25757,25587,25546,25568,25590,25557,25586,25589,25697,25567,25534,25565,25564,25540,25560,25555,25538,25543,25548,25547,25544,25584,25559,25561,25906,25959,25962,25956,25948,25960,25957,25996,26013,26014,26030,26064,26066,26236,26220,26235,26240,26225,26233,26218,26226,26369,26892,26835,26884,26844,26922,26860,26858,26865,26895,26838,26871,26859,26852,26870,26899,26896,26867,26849,26887,26828,26888,26992,26804,26897,26863,26822,26900,26872,26832,26877,26876,26856,26891,26890,26903,26830,26824,26845,26846,26854,26868,26833,26886,26836,26857,26901,26917,26823,27449,27451,27455,27452,27540,27543,27545,27541,27581,27632,27634,27635,27696,28156,28230,28231,28191,28233,28296,28220,28221,28229,28258,28203,28223,28225,28253,28275,28188,28211,28235,28224,28241,28219,28163,28206,28254,28264,28252,28257,28209,28200,28256,28273,28267,28217,28194,28208,28243,28261,28199,28280,28260,28279,28245,28281,28242,28262,28213,28214,28250,28960,28958,28975,28923,28974,28977,28963,28965,28962,28978,28959,28968,28986,28955,29259,29274,29320,29321,29318,29317,29323,29458,29451,29488,29474,29489,29491,29479,29490,29485,29478,29475,29493,29452,29742,29740,29744,29739,29718,29722,29729,29741,29745,29732,29731,29725,29737,29728,29746,29947,29999,30063,30060,30183,30170,30177,30182,30173,30175,30180,30167,30357,30354,30426,30534,30535,30532,30541,30533,30538,30542,30539,30540,30686,30700,30816,30820,30821,30812,30829,30833,30826,30830,30832,30825,30824,30814,30818,31092,31091,31090,31088,31234,31242,31235,31244,31236,31385,31462,31460,31562,31547,31556,31560,31564,31566,31552,31576,31557,31906,31902,31912,31905,32088,32111,32099,32083,32086,32103,32106,32079,32109,32092,32107,32082,32084,32105,32081,32095,32078,32574,32575,32613,32614,32674,32672,32673,32727,32849,32847,32848,33022,32980,33091,33098,33106,33103,33095,33085,33101,33082,33254,33262,33271,33272,33273,33284,33340,33341,33343,33397,33595,33743,33785,33827,33728,33768,33810,33767,33764,33788,33782,33808,33734,33736,33771,33763,33727,33793,33757,33765,33752,33791,33761,33739,33742,33750,33781,33737,33801,33807,33758,33809,33798,33730,33779,33749,33786,33735,33745,33770,33811,33731,33772,33774,33732,33787,33751,33762,33819,33755,33790,34520,34530,34534,34515,34531,34522,34538,34525,34539,34524,34540,34537,34519,34536,34513,34888,34902,34901,35002,35031,35001,35e3,35008,35006,34998,35004,34999,35005,34994,35073,35017,35221,35224,35223,35293,35290,35291,35406,35405,35385,35417,35392,35415,35416,35396,35397,35410,35400,35409,35402,35404,35407,35935,35969,35968,36026,36030,36016,36025,36021,36228,36224,36233,36312,36307,36301,36295,36310,36316,36303,36309,36313,36296,36311,36293,36591,36599,36602,36601,36582,36590,36581,36597,36583,36584,36598,36587,36593,36588,36596,36585,36909,36916,36911,37126,37164,37124,37119,37116,37128,37113,37115,37121,37120,37127,37125,37123,37217,37220,37215,37218,37216,37377,37386,37413,37379,37402,37414,37391,37388,37376,37394,37375,37373,37382,37380,37415,37378,37404,37412,37401,37399,37381,37398,38267,38285,38284,38288,38535,38526,38536,38537,38531,38528,38594,38600,38595,38641,38640,38764,38768,38766,38919,39081,39147,40166,40697,20099,20100,20150,20669,20671,20678,20654,20676,20682,20660,20680,20674,20656,20673,20666,20657,20683,20681,20662,20664,20951,21114,21112,21115,21116,21955,21979,21964,21968,21963,21962,21981,21952,21972,21956,21993,21951,21970,21901,21967,21973,21986,21974,21960,22002,21965,21977,21954,22292,22611,22632,22628,22607,22605,22601,22639,22613,22606,22621,22617,22629,22619,22589,22627,22641,22780,23239,23236,23243,23226,23224,23217,23221,23216,23231,23240,23227,23238,23223,23232,23242,23220,23222,23245,23225,23184,23510,23512,23513,23583,23603,23921,23907,23882,23909,23922,23916,23902,23912,23911,23906,24048,24143,24142,24138,24141,24139,24261,24268,24262,24267,24263,24384,24495,24493,24823,24905,24906,24875,24901,24886,24882,24878,24902,24879,24911,24873,24896,25120,37224,25123,25125,25124,25541,25585,25579,25616,25618,25609,25632,25636,25651,25667,25631,25621,25624,25657,25655,25634,25635,25612,25638,25648,25640,25665,25653,25647,25610,25626,25664,25637,25639,25611,25575,25627,25646,25633,25614,25967,26002,26067,26246,26252,26261,26256,26251,26250,26265,26260,26232,26400,26982,26975,26936,26958,26978,26993,26943,26949,26986,26937,26946,26967,26969,27002,26952,26953,26933,26988,26931,26941,26981,26864,27e3,26932,26985,26944,26991,26948,26998,26968,26945,26996,26956,26939,26955,26935,26972,26959,26961,26930,26962,26927,27003,26940,27462,27461,27459,27458,27464,27457,27547,64013,27643,27644,27641,27639,27640,28315,28374,28360,28303,28352,28319,28307,28308,28320,28337,28345,28358,28370,28349,28353,28318,28361,28343,28336,28365,28326,28367,28338,28350,28355,28380,28376,28313,28306,28302,28301,28324,28321,28351,28339,28368,28362,28311,28334,28323,28999,29012,29010,29027,29024,28993,29021,29026,29042,29048,29034,29025,28994,29016,28995,29003,29040,29023,29008,29011,28996,29005,29018,29263,29325,29324,29329,29328,29326,29500,29506,29499,29498,29504,29514,29513,29764,29770,29771,29778,29777,29783,29760,29775,29776,29774,29762,29766,29773,29780,29921,29951,29950,29949,29981,30073,30071,27011,30191,30223,30211,30199,30206,30204,30201,30200,30224,30203,30198,30189,30197,30205,30361,30389,30429,30549,30559,30560,30546,30550,30554,30569,30567,30548,30553,30573,30688,30855,30874,30868,30863,30852,30869,30853,30854,30881,30851,30841,30873,30848,30870,30843,31100,31106,31101,31097,31249,31256,31257,31250,31255,31253,31266,31251,31259,31248,31395,31394,31390,31467,31590,31588,31597,31604,31593,31602,31589,31603,31601,31600,31585,31608,31606,31587,31922,31924,31919,32136,32134,32128,32141,32127,32133,32122,32142,32123,32131,32124,32140,32148,32132,32125,32146,32621,32619,32615,32616,32620,32678,32677,32679,32731,32732,32801,33124,33120,33143,33116,33129,33115,33122,33138,26401,33118,33142,33127,33135,33092,33121,33309,33353,33348,33344,33346,33349,34033,33855,33878,33910,33913,33935,33933,33893,33873,33856,33926,33895,33840,33869,33917,33882,33881,33908,33907,33885,34055,33886,33847,33850,33844,33914,33859,33912,33842,33861,33833,33753,33867,33839,33858,33837,33887,33904,33849,33870,33868,33874,33903,33989,33934,33851,33863,33846,33843,33896,33918,33860,33835,33888,33876,33902,33872,34571,34564,34551,34572,34554,34518,34549,34637,34552,34574,34569,34561,34550,34573,34565,35030,35019,35021,35022,35038,35035,35034,35020,35024,35205,35227,35295,35301,35300,35297,35296,35298,35292,35302,35446,35462,35455,35425,35391,35447,35458,35460,35445,35459,35457,35444,35450,35900,35915,35914,35941,35940,35942,35974,35972,35973,36044,36200,36201,36241,36236,36238,36239,36237,36243,36244,36240,36242,36336,36320,36332,36337,36334,36304,36329,36323,36322,36327,36338,36331,36340,36614,36607,36609,36608,36613,36615,36616,36610,36619,36946,36927,36932,36937,36925,37136,37133,37135,37137,37142,37140,37131,37134,37230,37231,37448,37458,37424,37434,37478,37427,37477,37470,37507,37422,37450,37446,37485,37484,37455,37472,37479,37487,37430,37473,37488,37425,37460,37475,37456,37490,37454,37459,37452,37462,37426,38303,38300,38302,38299,38546,38547,38545,38551,38606,38650,38653,38648,38645,38771,38775,38776,38770,38927,38925,38926,39084,39158,39161,39343,39346,39344,39349,39597,39595,39771,40170,40173,40167,40576,40701,20710,20692,20695,20712,20723,20699,20714,20701,20708,20691,20716,20720,20719,20707,20704,20952,21120,21121,21225,21227,21296,21420,22055,22037,22028,22034,22012,22031,22044,22017,22035,22018,22010,22045,22020,22015,22009,22665,22652,22672,22680,22662,22657,22655,22644,22667,22650,22663,22673,22670,22646,22658,22664,22651,22676,22671,22782,22891,23260,23278,23269,23253,23274,23258,23277,23275,23283,23266,23264,23259,23276,23262,23261,23257,23272,23263,23415,23520,23523,23651,23938,23936,23933,23942,23930,23937,23927,23946,23945,23944,23934,23932,23949,23929,23935,24152,24153,24147,24280,24273,24279,24270,24284,24277,24281,24274,24276,24388,24387,24431,24502,24876,24872,24897,24926,24945,24947,24914,24915,24946,24940,24960,24948,24916,24954,24923,24933,24891,24938,24929,24918,25129,25127,25131,25643,25677,25691,25693,25716,25718,25714,25715,25725,25717,25702,25766,25678,25730,25694,25692,25675,25683,25696,25680,25727,25663,25708,25707,25689,25701,25719,25971,26016,26273,26272,26271,26373,26372,26402,27057,27062,27081,27040,27086,27030,27056,27052,27068,27025,27033,27022,27047,27021,27049,27070,27055,27071,27076,27069,27044,27092,27065,27082,27034,27087,27059,27027,27050,27041,27038,27097,27031,27024,27074,27061,27045,27078,27466,27469,27467,27550,27551,27552,27587,27588,27646,28366,28405,28401,28419,28453,28408,28471,28411,28462,28425,28494,28441,28442,28455,28440,28475,28434,28397,28426,28470,28531,28409,28398,28461,28480,28464,28476,28469,28395,28423,28430,28483,28421,28413,28406,28473,28444,28412,28474,28447,28429,28446,28424,28449,29063,29072,29065,29056,29061,29058,29071,29051,29062,29057,29079,29252,29267,29335,29333,29331,29507,29517,29521,29516,29794,29811,29809,29813,29810,29799,29806,29952,29954,29955,30077,30096,30230,30216,30220,30229,30225,30218,30228,30392,30593,30588,30597,30594,30574,30592,30575,30590,30595,30898,30890,30900,30893,30888,30846,30891,30878,30885,30880,30892,30882,30884,31128,31114,31115,31126,31125,31124,31123,31127,31112,31122,31120,31275,31306,31280,31279,31272,31270,31400,31403,31404,31470,31624,31644,31626,31633,31632,31638,31629,31628,31643,31630,31621,31640,21124,31641,31652,31618,31931,31935,31932,31930,32167,32183,32194,32163,32170,32193,32192,32197,32157,32206,32196,32198,32203,32204,32175,32185,32150,32188,32159,32166,32174,32169,32161,32201,32627,32738,32739,32741,32734,32804,32861,32860,33161,33158,33155,33159,33165,33164,33163,33301,33943,33956,33953,33951,33978,33998,33986,33964,33966,33963,33977,33972,33985,33997,33962,33946,33969,34e3,33949,33959,33979,33954,33940,33991,33996,33947,33961,33967,33960,34006,33944,33974,33999,33952,34007,34004,34002,34011,33968,33937,34401,34611,34595,34600,34667,34624,34606,34590,34593,34585,34587,34627,34604,34625,34622,34630,34592,34610,34602,34605,34620,34578,34618,34609,34613,34626,34598,34599,34616,34596,34586,34608,34577,35063,35047,35057,35058,35066,35070,35054,35068,35062,35067,35056,35052,35051,35229,35233,35231,35230,35305,35307,35304,35499,35481,35467,35474,35471,35478,35901,35944,35945,36053,36047,36055,36246,36361,36354,36351,36365,36349,36362,36355,36359,36358,36357,36350,36352,36356,36624,36625,36622,36621,37155,37148,37152,37154,37151,37149,37146,37156,37153,37147,37242,37234,37241,37235,37541,37540,37494,37531,37498,37536,37524,37546,37517,37542,37530,37547,37497,37527,37503,37539,37614,37518,37506,37525,37538,37501,37512,37537,37514,37510,37516,37529,37543,37502,37511,37545,37533,37515,37421,38558,38561,38655,38744,38781,38778,38782,38787,38784,38786,38779,38788,38785,38783,38862,38861,38934,39085,39086,39170,39168,39175,39325,39324,39363,39353,39355,39354,39362,39357,39367,39601,39651,39655,39742,39743,39776,39777,39775,40177,40178,40181,40615,20735,20739,20784,20728,20742,20743,20726,20734,20747,20748,20733,20746,21131,21132,21233,21231,22088,22082,22092,22069,22081,22090,22089,22086,22104,22106,22080,22067,22077,22060,22078,22072,22058,22074,22298,22699,22685,22705,22688,22691,22703,22700,22693,22689,22783,23295,23284,23293,23287,23286,23299,23288,23298,23289,23297,23303,23301,23311,23655,23961,23959,23967,23954,23970,23955,23957,23968,23964,23969,23962,23966,24169,24157,24160,24156,32243,24283,24286,24289,24393,24498,24971,24963,24953,25009,25008,24994,24969,24987,24979,25007,25005,24991,24978,25002,24993,24973,24934,25011,25133,25710,25712,25750,25760,25733,25751,25756,25743,25739,25738,25740,25763,25759,25704,25777,25752,25974,25978,25977,25979,26034,26035,26293,26288,26281,26290,26295,26282,26287,27136,27142,27159,27109,27128,27157,27121,27108,27168,27135,27116,27106,27163,27165,27134,27175,27122,27118,27156,27127,27111,27200,27144,27110,27131,27149,27132,27115,27145,27140,27160,27173,27151,27126,27174,27143,27124,27158,27473,27557,27555,27554,27558,27649,27648,27647,27650,28481,28454,28542,28551,28614,28562,28557,28553,28556,28514,28495,28549,28506,28566,28534,28524,28546,28501,28530,28498,28496,28503,28564,28563,28509,28416,28513,28523,28541,28519,28560,28499,28555,28521,28543,28565,28515,28535,28522,28539,29106,29103,29083,29104,29088,29082,29097,29109,29085,29093,29086,29092,29089,29098,29084,29095,29107,29336,29338,29528,29522,29534,29535,29536,29533,29531,29537,29530,29529,29538,29831,29833,29834,29830,29825,29821,29829,29832,29820,29817,29960,29959,30078,30245,30238,30233,30237,30236,30243,30234,30248,30235,30364,30365,30366,30363,30605,30607,30601,30600,30925,30907,30927,30924,30929,30926,30932,30920,30915,30916,30921,31130,31137,31136,31132,31138,31131,27510,31289,31410,31412,31411,31671,31691,31678,31660,31694,31663,31673,31690,31669,31941,31944,31948,31947,32247,32219,32234,32231,32215,32225,32259,32250,32230,32246,32241,32240,32238,32223,32630,32684,32688,32685,32749,32747,32746,32748,32742,32744,32868,32871,33187,33183,33182,33173,33186,33177,33175,33302,33359,33363,33362,33360,33358,33361,34084,34107,34063,34048,34089,34062,34057,34061,34079,34058,34087,34076,34043,34091,34042,34056,34060,34036,34090,34034,34069,34039,34027,34035,34044,34066,34026,34025,34070,34046,34088,34077,34094,34050,34045,34078,34038,34097,34086,34023,34024,34032,34031,34041,34072,34080,34096,34059,34073,34095,34402,34646,34659,34660,34679,34785,34675,34648,34644,34651,34642,34657,34650,34641,34654,34669,34666,34640,34638,34655,34653,34671,34668,34682,34670,34652,34661,34639,34683,34677,34658,34663,34665,34906,35077,35084,35092,35083,35095,35096,35097,35078,35094,35089,35086,35081,35234,35236,35235,35309,35312,35308,35535,35526,35512,35539,35537,35540,35541,35515,35543,35518,35520,35525,35544,35523,35514,35517,35545,35902,35917,35983,36069,36063,36057,36072,36058,36061,36071,36256,36252,36257,36251,36384,36387,36389,36388,36398,36373,36379,36374,36369,36377,36390,36391,36372,36370,36376,36371,36380,36375,36378,36652,36644,36632,36634,36640,36643,36630,36631,36979,36976,36975,36967,36971,37167,37163,37161,37162,37170,37158,37166,37253,37254,37258,37249,37250,37252,37248,37584,37571,37572,37568,37593,37558,37583,37617,37599,37592,37609,37591,37597,37580,37615,37570,37608,37578,37576,37582,37606,37581,37589,37577,37600,37598,37607,37585,37587,37557,37601,37574,37556,38268,38316,38315,38318,38320,38564,38562,38611,38661,38664,38658,38746,38794,38798,38792,38864,38863,38942,38941,38950,38953,38952,38944,38939,38951,39090,39176,39162,39185,39188,39190,39191,39189,39388,39373,39375,39379,39380,39374,39369,39382,39384,39371,39383,39372,39603,39660,39659,39667,39666,39665,39750,39747,39783,39796,39793,39782,39798,39797,39792,39784,39780,39788,40188,40186,40189,40191,40183,40199,40192,40185,40187,40200,40197,40196,40579,40659,40719,40720,20764,20755,20759,20762,20753,20958,21300,21473,22128,22112,22126,22131,22118,22115,22125,22130,22110,22135,22300,22299,22728,22717,22729,22719,22714,22722,22716,22726,23319,23321,23323,23329,23316,23315,23312,23318,23336,23322,23328,23326,23535,23980,23985,23977,23975,23989,23984,23982,23978,23976,23986,23981,23983,23988,24167,24168,24166,24175,24297,24295,24294,24296,24293,24395,24508,24989,25e3,24982,25029,25012,25030,25025,25036,25018,25023,25016,24972,25815,25814,25808,25807,25801,25789,25737,25795,25819,25843,25817,25907,25983,25980,26018,26312,26302,26304,26314,26315,26319,26301,26299,26298,26316,26403,27188,27238,27209,27239,27186,27240,27198,27229,27245,27254,27227,27217,27176,27226,27195,27199,27201,27242,27236,27216,27215,27220,27247,27241,27232,27196,27230,27222,27221,27213,27214,27206,27477,27476,27478,27559,27562,27563,27592,27591,27652,27651,27654,28589,28619,28579,28615,28604,28622,28616,28510,28612,28605,28574,28618,28584,28676,28581,28590,28602,28588,28586,28623,28607,28600,28578,28617,28587,28621,28591,28594,28592,29125,29122,29119,29112,29142,29120,29121,29131,29140,29130,29127,29135,29117,29144,29116,29126,29146,29147,29341,29342,29545,29542,29543,29548,29541,29547,29546,29823,29850,29856,29844,29842,29845,29857,29963,30080,30255,30253,30257,30269,30259,30268,30261,30258,30256,30395,30438,30618,30621,30625,30620,30619,30626,30627,30613,30617,30615,30941,30953,30949,30954,30942,30947,30939,30945,30946,30957,30943,30944,31140,31300,31304,31303,31414,31416,31413,31409,31415,31710,31715,31719,31709,31701,31717,31706,31720,31737,31700,31722,31714,31708,31723,31704,31711,31954,31956,31959,31952,31953,32274,32289,32279,32268,32287,32288,32275,32270,32284,32277,32282,32290,32267,32271,32278,32269,32276,32293,32292,32579,32635,32636,32634,32689,32751,32810,32809,32876,33201,33190,33198,33209,33205,33195,33200,33196,33204,33202,33207,33191,33266,33365,33366,33367,34134,34117,34155,34125,34131,34145,34136,34112,34118,34148,34113,34146,34116,34129,34119,34147,34110,34139,34161,34126,34158,34165,34133,34151,34144,34188,34150,34141,34132,34149,34156,34403,34405,34404,34715,34703,34711,34707,34706,34696,34689,34710,34712,34681,34695,34723,34693,34704,34705,34717,34692,34708,34716,34714,34697,35102,35110,35120,35117,35118,35111,35121,35106,35113,35107,35119,35116,35103,35313,35552,35554,35570,35572,35573,35549,35604,35556,35551,35568,35528,35550,35553,35560,35583,35567,35579,35985,35986,35984,36085,36078,36081,36080,36083,36204,36206,36261,36263,36403,36414,36408,36416,36421,36406,36412,36413,36417,36400,36415,36541,36662,36654,36661,36658,36665,36663,36660,36982,36985,36987,36998,37114,37171,37173,37174,37267,37264,37265,37261,37263,37671,37662,37640,37663,37638,37647,37754,37688,37692,37659,37667,37650,37633,37702,37677,37646,37645,37579,37661,37626,37669,37651,37625,37623,37684,37634,37668,37631,37673,37689,37685,37674,37652,37644,37643,37630,37641,37632,37627,37654,38332,38349,38334,38329,38330,38326,38335,38325,38333,38569,38612,38667,38674,38672,38809,38807,38804,38896,38904,38965,38959,38962,39204,39199,39207,39209,39326,39406,39404,39397,39396,39408,39395,39402,39401,39399,39609,39615,39604,39611,39670,39674,39673,39671,39731,39808,39813,39815,39804,39806,39803,39810,39827,39826,39824,39802,39829,39805,39816,40229,40215,40224,40222,40212,40233,40221,40216,40226,40208,40217,40223,40584,40582,40583,40622,40621,40661,40662,40698,40722,40765,20774,20773,20770,20772,20768,20777,21236,22163,22156,22157,22150,22148,22147,22142,22146,22143,22145,22742,22740,22735,22738,23341,23333,23346,23331,23340,23335,23334,23343,23342,23419,23537,23538,23991,24172,24170,24510,24507,25027,25013,25020,25063,25056,25061,25060,25064,25054,25839,25833,25827,25835,25828,25832,25985,25984,26038,26074,26322,27277,27286,27265,27301,27273,27295,27291,27297,27294,27271,27283,27278,27285,27267,27304,27300,27281,27263,27302,27290,27269,27276,27282,27483,27565,27657,28620,28585,28660,28628,28643,28636,28653,28647,28646,28638,28658,28637,28642,28648,29153,29169,29160,29170,29156,29168,29154,29555,29550,29551,29847,29874,29867,29840,29866,29869,29873,29861,29871,29968,29969,29970,29967,30084,30275,30280,30281,30279,30372,30441,30645,30635,30642,30647,30646,30644,30641,30632,30704,30963,30973,30978,30971,30972,30962,30981,30969,30974,30980,31147,31144,31324,31323,31318,31320,31316,31322,31422,31424,31425,31749,31759,31730,31744,31743,31739,31758,31732,31755,31731,31746,31753,31747,31745,31736,31741,31750,31728,31729,31760,31754,31976,32301,32316,32322,32307,38984,32312,32298,32329,32320,32327,32297,32332,32304,32315,32310,32324,32314,32581,32639,32638,32637,32756,32754,32812,33211,33220,33228,33226,33221,33223,33212,33257,33371,33370,33372,34179,34176,34191,34215,34197,34208,34187,34211,34171,34212,34202,34206,34167,34172,34185,34209,34170,34168,34135,34190,34198,34182,34189,34201,34205,34177,34210,34178,34184,34181,34169,34166,34200,34192,34207,34408,34750,34730,34733,34757,34736,34732,34745,34741,34748,34734,34761,34755,34754,34764,34743,34735,34756,34762,34740,34742,34751,34744,34749,34782,34738,35125,35123,35132,35134,35137,35154,35127,35138,35245,35247,35246,35314,35315,35614,35608,35606,35601,35589,35595,35618,35599,35602,35605,35591,35597,35592,35590,35612,35603,35610,35919,35952,35954,35953,35951,35989,35988,36089,36207,36430,36429,36435,36432,36428,36423,36675,36672,36997,36990,37176,37274,37282,37275,37273,37279,37281,37277,37280,37793,37763,37807,37732,37718,37703,37756,37720,37724,37750,37705,37712,37713,37728,37741,37775,37708,37738,37753,37719,37717,37714,37711,37745,37751,37755,37729,37726,37731,37735,37760,37710,37721,38343,38336,38345,38339,38341,38327,38574,38576,38572,38688,38687,38680,38685,38681,38810,38817,38812,38814,38813,38869,38868,38897,38977,38980,38986,38985,38981,38979,39205,39211,39212,39210,39219,39218,39215,39213,39217,39216,39320,39331,39329,39426,39418,39412,39415,39417,39416,39414,39419,39421,39422,39420,39427,39614,39678,39677,39681,39676,39752,39834,39848,39838,39835,39846,39841,39845,39844,39814,39842,39840,39855,40243,40257,40295,40246,40238,40239,40241,40248,40240,40261,40258,40259,40254,40247,40256,40253,32757,40237,40586,40585,40589,40624,40648,40666,40699,40703,40740,40739,40738,40788,40864,20785,20781,20782,22168,22172,22167,22170,22173,22169,22896,23356,23657,23658,24e3,24173,24174,25048,25055,25069,25070,25073,25066,25072,25067,25046,25065,25855,25860,25853,25848,25857,25859,25852,26004,26075,26330,26331,26328,27333,27321,27325,27361,27334,27322,27318,27319,27335,27316,27309,27486,27593,27659,28679,28684,28685,28673,28677,28692,28686,28671,28672,28667,28710,28668,28663,28682,29185,29183,29177,29187,29181,29558,29880,29888,29877,29889,29886,29878,29883,29890,29972,29971,30300,30308,30297,30288,30291,30295,30298,30374,30397,30444,30658,30650,30975,30988,30995,30996,30985,30992,30994,30993,31149,31148,31327,31772,31785,31769,31776,31775,31789,31773,31782,31784,31778,31781,31792,32348,32336,32342,32355,32344,32354,32351,32337,32352,32343,32339,32693,32691,32759,32760,32885,33233,33234,33232,33375,33374,34228,34246,34240,34243,34242,34227,34229,34237,34247,34244,34239,34251,34254,34248,34245,34225,34230,34258,34340,34232,34231,34238,34409,34791,34790,34786,34779,34795,34794,34789,34783,34803,34788,34772,34780,34771,34797,34776,34787,34724,34775,34777,34817,34804,34792,34781,35155,35147,35151,35148,35142,35152,35153,35145,35626,35623,35619,35635,35632,35637,35655,35631,35644,35646,35633,35621,35639,35622,35638,35630,35620,35643,35645,35642,35906,35957,35993,35992,35991,36094,36100,36098,36096,36444,36450,36448,36439,36438,36446,36453,36455,36443,36442,36449,36445,36457,36436,36678,36679,36680,36683,37160,37178,37179,37182,37288,37285,37287,37295,37290,37813,37772,37778,37815,37787,37789,37769,37799,37774,37802,37790,37798,37781,37768,37785,37791,37773,37809,37777,37810,37796,37800,37812,37795,37797,38354,38355,38353,38579,38615,38618,24002,38623,38616,38621,38691,38690,38693,38828,38830,38824,38827,38820,38826,38818,38821,38871,38873,38870,38872,38906,38992,38993,38994,39096,39233,39228,39226,39439,39435,39433,39437,39428,39441,39434,39429,39431,39430,39616,39644,39688,39684,39685,39721,39733,39754,39756,39755,39879,39878,39875,39871,39873,39861,39864,39891,39862,39876,39865,39869,40284,40275,40271,40266,40283,40267,40281,40278,40268,40279,40274,40276,40287,40280,40282,40590,40588,40671,40705,40704,40726,40741,40747,40746,40745,40744,40780,40789,20788,20789,21142,21239,21428,22187,22189,22182,22183,22186,22188,22746,22749,22747,22802,23357,23358,23359,24003,24176,24511,25083,25863,25872,25869,25865,25868,25870,25988,26078,26077,26334,27367,27360,27340,27345,27353,27339,27359,27356,27344,27371,27343,27341,27358,27488,27568,27660,28697,28711,28704,28694,28715,28705,28706,28707,28713,28695,28708,28700,28714,29196,29194,29191,29186,29189,29349,29350,29348,29347,29345,29899,29893,29879,29891,29974,30304,30665,30666,30660,30705,31005,31003,31009,31004,30999,31006,31152,31335,31336,31795,31804,31801,31788,31803,31980,31978,32374,32373,32376,32368,32375,32367,32378,32370,32372,32360,32587,32586,32643,32646,32695,32765,32766,32888,33239,33237,33380,33377,33379,34283,34289,34285,34265,34273,34280,34266,34263,34284,34290,34296,34264,34271,34275,34268,34257,34288,34278,34287,34270,34274,34816,34810,34819,34806,34807,34825,34828,34827,34822,34812,34824,34815,34826,34818,35170,35162,35163,35159,35169,35164,35160,35165,35161,35208,35255,35254,35318,35664,35656,35658,35648,35667,35670,35668,35659,35669,35665,35650,35666,35671,35907,35959,35958,35994,36102,36103,36105,36268,36266,36269,36267,36461,36472,36467,36458,36463,36475,36546,36690,36689,36687,36688,36691,36788,37184,37183,37296,37293,37854,37831,37839,37826,37850,37840,37881,37868,37836,37849,37801,37862,37834,37844,37870,37859,37845,37828,37838,37824,37842,37863,38269,38362,38363,38625,38697,38699,38700,38696,38694,38835,38839,38838,38877,38878,38879,39004,39001,39005,38999,39103,39101,39099,39102,39240,39239,39235,39334,39335,39450,39445,39461,39453,39460,39451,39458,39456,39463,39459,39454,39452,39444,39618,39691,39690,39694,39692,39735,39914,39915,39904,39902,39908,39910,39906,39920,39892,39895,39916,39900,39897,39909,39893,39905,39898,40311,40321,40330,40324,40328,40305,40320,40312,40326,40331,40332,40317,40299,40308,40309,40304,40297,40325,40307,40315,40322,40303,40313,40319,40327,40296,40596,40593,40640,40700,40749,40768,40769,40781,40790,40791,40792,21303,22194,22197,22195,22755,23365,24006,24007,24302,24303,24512,24513,25081,25879,25878,25877,25875,26079,26344,26339,26340,27379,27376,27370,27368,27385,27377,27374,27375,28732,28725,28719,28727,28724,28721,28738,28728,28735,28730,28729,28736,28731,28723,28737,29203,29204,29352,29565,29564,29882,30379,30378,30398,30445,30668,30670,30671,30669,30706,31013,31011,31015,31016,31012,31017,31154,31342,31340,31341,31479,31817,31816,31818,31815,31813,31982,32379,32382,32385,32384,32698,32767,32889,33243,33241,33291,33384,33385,34338,34303,34305,34302,34331,34304,34294,34308,34313,34309,34316,34301,34841,34832,34833,34839,34835,34838,35171,35174,35257,35319,35680,35690,35677,35688,35683,35685,35687,35693,36270,36486,36488,36484,36697,36694,36695,36693,36696,36698,37005,37187,37185,37303,37301,37298,37299,37899,37907,37883,37920,37903,37908,37886,37909,37904,37928,37913,37901,37877,37888,37879,37895,37902,37910,37906,37882,37897,37880,37898,37887,37884,37900,37878,37905,37894,38366,38368,38367,38702,38703,38841,38843,38909,38910,39008,39010,39011,39007,39105,39106,39248,39246,39257,39244,39243,39251,39474,39476,39473,39468,39466,39478,39465,39470,39480,39469,39623,39626,39622,39696,39698,39697,39947,39944,39927,39941,39954,39928,4e4,39943,39950,39942,39959,39956,39945,40351,40345,40356,40349,40338,40344,40336,40347,40352,40340,40348,40362,40343,40353,40346,40354,40360,40350,40355,40383,40361,40342,40358,40359,40601,40603,40602,40677,40676,40679,40678,40752,40750,40795,40800,40798,40797,40793,40849,20794,20793,21144,21143,22211,22205,22206,23368,23367,24011,24015,24305,25085,25883,27394,27388,27395,27384,27392,28739,28740,28746,28744,28745,28741,28742,29213,29210,29209,29566,29975,30314,30672,31021,31025,31023,31828,31827,31986,32394,32391,32392,32395,32390,32397,32589,32699,32816,33245,34328,34346,34342,34335,34339,34332,34329,34343,34350,34337,34336,34345,34334,34341,34857,34845,34843,34848,34852,34844,34859,34890,35181,35177,35182,35179,35322,35705,35704,35653,35706,35707,36112,36116,36271,36494,36492,36702,36699,36701,37190,37188,37189,37305,37951,37947,37942,37929,37949,37948,37936,37945,37930,37943,37932,37952,37937,38373,38372,38371,38709,38714,38847,38881,39012,39113,39110,39104,39256,39254,39481,39485,39494,39492,39490,39489,39482,39487,39629,39701,39703,39704,39702,39738,39762,39979,39965,39964,39980,39971,39976,39977,39972,39969,40375,40374,40380,40385,40391,40394,40399,40382,40389,40387,40379,40373,40398,40377,40378,40364,40392,40369,40365,40396,40371,40397,40370,40570,40604,40683,40686,40685,40731,40728,40730,40753,40782,40805,40804,40850,20153,22214,22213,22219,22897,23371,23372,24021,24017,24306,25889,25888,25894,25890,27403,27400,27401,27661,28757,28758,28759,28754,29214,29215,29353,29567,29912,29909,29913,29911,30317,30381,31029,31156,31344,31345,31831,31836,31833,31835,31834,31988,31985,32401,32591,32647,33246,33387,34356,34357,34355,34348,34354,34358,34860,34856,34854,34858,34853,35185,35263,35262,35323,35710,35716,35714,35718,35717,35711,36117,36501,36500,36506,36498,36496,36502,36503,36704,36706,37191,37964,37968,37962,37963,37967,37959,37957,37960,37961,37958,38719,38883,39018,39017,39115,39252,39259,39502,39507,39508,39500,39503,39496,39498,39497,39506,39504,39632,39705,39723,39739,39766,39765,40006,40008,39999,40004,39993,39987,40001,39996,39991,39988,39986,39997,39990,40411,40402,40414,40410,40395,40400,40412,40401,40415,40425,40409,40408,40406,40437,40405,40413,40630,40688,40757,40755,40754,40770,40811,40853,40866,20797,21145,22760,22759,22898,23373,24024,34863,24399,25089,25091,25092,25897,25893,26006,26347,27409,27410,27407,27594,28763,28762,29218,29570,29569,29571,30320,30676,31847,31846,32405,33388,34362,34368,34361,34364,34353,34363,34366,34864,34866,34862,34867,35190,35188,35187,35326,35724,35726,35723,35720,35909,36121,36504,36708,36707,37308,37986,37973,37981,37975,37982,38852,38853,38912,39510,39513,39710,39711,39712,40018,40024,40016,40010,40013,40011,40021,40025,40012,40014,40443,40439,40431,40419,40427,40440,40420,40438,40417,40430,40422,40434,40432,40418,40428,40436,40435,40424,40429,40642,40656,40690,40691,40710,40732,40760,40759,40758,40771,40783,40817,40816,40814,40815,22227,22221,23374,23661,25901,26349,26350,27411,28767,28769,28765,28768,29219,29915,29925,30677,31032,31159,31158,31850,32407,32649,33389,34371,34872,34871,34869,34891,35732,35733,36510,36511,36512,36509,37310,37309,37314,37995,37992,37993,38629,38726,38723,38727,38855,38885,39518,39637,39769,40035,40039,40038,40034,40030,40032,40450,40446,40455,40451,40454,40453,40448,40449,40457,40447,40445,40452,40608,40734,40774,40820,40821,40822,22228,25902,26040,27416,27417,27415,27418,28770,29222,29354,30680,30681,31033,31849,31851,31990,32410,32408,32411,32409,33248,33249,34374,34375,34376,35193,35194,35196,35195,35327,35736,35737,36517,36516,36515,37998,37997,37999,38001,38003,38729,39026,39263,40040,40046,40045,40459,40461,40464,40463,40466,40465,40609,40693,40713,40775,40824,40827,40826,40825,22302,28774,31855,34876,36274,36518,37315,38004,38008,38006,38005,39520,40052,40051,40049,40053,40468,40467,40694,40714,40868,28776,28773,31991,34410,34878,34877,34879,35742,35996,36521,36553,38731,39027,39028,39116,39265,39339,39524,39526,39527,39716,40469,40471,40776,25095,27422,29223,34380,36520,38018,38016,38017,39529,39528,39726,40473,29225,34379,35743,38019,40057,40631,30325,39531,40058,40477,28777,28778,40612,40830,40777,40856,30849,37561,35023,22715,24658,31911,23290,9556,9574,9559,9568,9580,9571,9562,9577,9565,9554,9572,9557,9566,9578,9569,9560,9575,9563,9555,9573,9558,9567,9579,9570,9561,9576,9564,9553,9552,9581,9582,9584,9583,65517,132423,37595,132575,147397,34124,17077,29679,20917,13897,149826,166372,37700,137691,33518,146632,30780,26436,25311,149811,166314,131744,158643,135941,20395,140525,20488,159017,162436,144896,150193,140563,20521,131966,24484,131968,131911,28379,132127,20605,20737,13434,20750,39020,14147,33814,149924,132231,20832,144308,20842,134143,139516,131813,140592,132494,143923,137603,23426,34685,132531,146585,20914,20920,40244,20937,20943,20945,15580,20947,150182,20915,20962,21314,20973,33741,26942,145197,24443,21003,21030,21052,21173,21079,21140,21177,21189,31765,34114,21216,34317,158483,21253,166622,21833,28377,147328,133460,147436,21299,21316,134114,27851,136998,26651,29653,24650,16042,14540,136936,29149,17570,21357,21364,165547,21374,21375,136598,136723,30694,21395,166555,21408,21419,21422,29607,153458,16217,29596,21441,21445,27721,20041,22526,21465,15019,134031,21472,147435,142755,21494,134263,21523,28793,21803,26199,27995,21613,158547,134516,21853,21647,21668,18342,136973,134877,15796,134477,166332,140952,21831,19693,21551,29719,21894,21929,22021,137431,147514,17746,148533,26291,135348,22071,26317,144010,26276,26285,22093,22095,30961,22257,38791,21502,22272,22255,22253,166758,13859,135759,22342,147877,27758,28811,22338,14001,158846,22502,136214,22531,136276,148323,22566,150517,22620,22698,13665,22752,22748,135740,22779,23551,22339,172368,148088,37843,13729,22815,26790,14019,28249,136766,23076,21843,136850,34053,22985,134478,158849,159018,137180,23001,137211,137138,159142,28017,137256,136917,23033,159301,23211,23139,14054,149929,23159,14088,23190,29797,23251,159649,140628,15749,137489,14130,136888,24195,21200,23414,25992,23420,162318,16388,18525,131588,23509,24928,137780,154060,132517,23539,23453,19728,23557,138052,23571,29646,23572,138405,158504,23625,18653,23685,23785,23791,23947,138745,138807,23824,23832,23878,138916,23738,24023,33532,14381,149761,139337,139635,33415,14390,15298,24110,27274,24181,24186,148668,134355,21414,20151,24272,21416,137073,24073,24308,164994,24313,24315,14496,24316,26686,37915,24333,131521,194708,15070,18606,135994,24378,157832,140240,24408,140401,24419,38845,159342,24434,37696,166454,24487,23990,15711,152144,139114,159992,140904,37334,131742,166441,24625,26245,137335,14691,15815,13881,22416,141236,31089,15936,24734,24740,24755,149890,149903,162387,29860,20705,23200,24932,33828,24898,194726,159442,24961,20980,132694,24967,23466,147383,141407,25043,166813,170333,25040,14642,141696,141505,24611,24924,25886,25483,131352,25285,137072,25301,142861,25452,149983,14871,25656,25592,136078,137212,25744,28554,142902,38932,147596,153373,25825,25829,38011,14950,25658,14935,25933,28438,150056,150051,25989,25965,25951,143486,26037,149824,19255,26065,16600,137257,26080,26083,24543,144384,26136,143863,143864,26180,143780,143781,26187,134773,26215,152038,26227,26228,138813,143921,165364,143816,152339,30661,141559,39332,26370,148380,150049,15147,27130,145346,26462,26471,26466,147917,168173,26583,17641,26658,28240,37436,26625,144358,159136,26717,144495,27105,27147,166623,26995,26819,144845,26881,26880,15666,14849,144956,15232,26540,26977,166474,17148,26934,27032,15265,132041,33635,20624,27129,144985,139562,27205,145155,27293,15347,26545,27336,168348,15373,27421,133411,24798,27445,27508,141261,28341,146139,132021,137560,14144,21537,146266,27617,147196,27612,27703,140427,149745,158545,27738,33318,27769,146876,17605,146877,147876,149772,149760,146633,14053,15595,134450,39811,143865,140433,32655,26679,159013,159137,159211,28054,27996,28284,28420,149887,147589,159346,34099,159604,20935,27804,28189,33838,166689,28207,146991,29779,147330,31180,28239,23185,143435,28664,14093,28573,146992,28410,136343,147517,17749,37872,28484,28508,15694,28532,168304,15675,28575,147780,28627,147601,147797,147513,147440,147380,147775,20959,147798,147799,147776,156125,28747,28798,28839,28801,28876,28885,28886,28895,16644,15848,29108,29078,148087,28971,28997,23176,29002,29038,23708,148325,29007,37730,148161,28972,148570,150055,150050,29114,166888,28861,29198,37954,29205,22801,37955,29220,37697,153093,29230,29248,149876,26813,29269,29271,15957,143428,26637,28477,29314,29482,29483,149539,165931,18669,165892,29480,29486,29647,29610,134202,158254,29641,29769,147938,136935,150052,26147,14021,149943,149901,150011,29687,29717,26883,150054,29753,132547,16087,29788,141485,29792,167602,29767,29668,29814,33721,29804,14128,29812,37873,27180,29826,18771,150156,147807,150137,166799,23366,166915,137374,29896,137608,29966,29929,29982,167641,137803,23511,167596,37765,30029,30026,30055,30062,151426,16132,150803,30094,29789,30110,30132,30210,30252,30289,30287,30319,30326,156661,30352,33263,14328,157969,157966,30369,30373,30391,30412,159647,33890,151709,151933,138780,30494,30502,30528,25775,152096,30552,144044,30639,166244,166248,136897,30708,30729,136054,150034,26826,30895,30919,30931,38565,31022,153056,30935,31028,30897,161292,36792,34948,166699,155779,140828,31110,35072,26882,31104,153687,31133,162617,31036,31145,28202,160038,16040,31174,168205,31188],"euc-kr":[44034,44035,44037,44038,44043,44044,44045,44046,44047,44056,44062,44063,44065,44066,44067,44069,44070,44071,44072,44073,44074,44075,44078,44082,44083,44084,null,null,null,null,null,null,44085,44086,44087,44090,44091,44093,44094,44095,44097,44098,44099,44100,44101,44102,44103,44104,44105,44106,44108,44110,44111,44112,44113,44114,44115,44117,null,null,null,null,null,null,44118,44119,44121,44122,44123,44125,44126,44127,44128,44129,44130,44131,44132,44133,44134,44135,44136,44137,44138,44139,44140,44141,44142,44143,44146,44147,44149,44150,44153,44155,44156,44157,44158,44159,44162,44167,44168,44173,44174,44175,44177,44178,44179,44181,44182,44183,44184,44185,44186,44187,44190,44194,44195,44196,44197,44198,44199,44203,44205,44206,44209,44210,44211,44212,44213,44214,44215,44218,44222,44223,44224,44226,44227,44229,44230,44231,44233,44234,44235,44237,44238,44239,44240,44241,44242,44243,44244,44246,44248,44249,44250,44251,44252,44253,44254,44255,44258,44259,44261,44262,44265,44267,44269,44270,44274,44276,44279,44280,44281,44282,44283,44286,44287,44289,44290,44291,44293,44295,44296,44297,44298,44299,44302,44304,44306,44307,44308,44309,44310,44311,44313,44314,44315,44317,44318,44319,44321,44322,44323,44324,44325,44326,44327,44328,44330,44331,44334,44335,44336,44337,44338,44339,null,null,null,null,null,null,44342,44343,44345,44346,44347,44349,44350,44351,44352,44353,44354,44355,44358,44360,44362,44363,44364,44365,44366,44367,44369,44370,44371,44373,44374,44375,null,null,null,null,null,null,44377,44378,44379,44380,44381,44382,44383,44384,44386,44388,44389,44390,44391,44392,44393,44394,44395,44398,44399,44401,44402,44407,44408,44409,44410,44414,44416,44419,44420,44421,44422,44423,44426,44427,44429,44430,44431,44433,44434,44435,44436,44437,44438,44439,44440,44441,44442,44443,44446,44447,44448,44449,44450,44451,44453,44454,44455,44456,44457,44458,44459,44460,44461,44462,44463,44464,44465,44466,44467,44468,44469,44470,44472,44473,44474,44475,44476,44477,44478,44479,44482,44483,44485,44486,44487,44489,44490,44491,44492,44493,44494,44495,44498,44500,44501,44502,44503,44504,44505,44506,44507,44509,44510,44511,44513,44514,44515,44517,44518,44519,44520,44521,44522,44523,44524,44525,44526,44527,44528,44529,44530,44531,44532,44533,44534,44535,44538,44539,44541,44542,44546,44547,44548,44549,44550,44551,44554,44556,44558,44559,44560,44561,44562,44563,44565,44566,44567,44568,44569,44570,44571,44572,null,null,null,null,null,null,44573,44574,44575,44576,44577,44578,44579,44580,44581,44582,44583,44584,44585,44586,44587,44588,44589,44590,44591,44594,44595,44597,44598,44601,44603,44604,null,null,null,null,null,null,44605,44606,44607,44610,44612,44615,44616,44617,44619,44623,44625,44626,44627,44629,44631,44632,44633,44634,44635,44638,44642,44643,44644,44646,44647,44650,44651,44653,44654,44655,44657,44658,44659,44660,44661,44662,44663,44666,44670,44671,44672,44673,44674,44675,44678,44679,44680,44681,44682,44683,44685,44686,44687,44688,44689,44690,44691,44692,44693,44694,44695,44696,44697,44698,44699,44700,44701,44702,44703,44704,44705,44706,44707,44708,44709,44710,44711,44712,44713,44714,44715,44716,44717,44718,44719,44720,44721,44722,44723,44724,44725,44726,44727,44728,44729,44730,44731,44735,44737,44738,44739,44741,44742,44743,44744,44745,44746,44747,44750,44754,44755,44756,44757,44758,44759,44762,44763,44765,44766,44767,44768,44769,44770,44771,44772,44773,44774,44775,44777,44778,44780,44782,44783,44784,44785,44786,44787,44789,44790,44791,44793,44794,44795,44797,44798,44799,44800,44801,44802,44803,44804,44805,null,null,null,null,null,null,44806,44809,44810,44811,44812,44814,44815,44817,44818,44819,44820,44821,44822,44823,44824,44825,44826,44827,44828,44829,44830,44831,44832,44833,44834,44835,null,null,null,null,null,null,44836,44837,44838,44839,44840,44841,44842,44843,44846,44847,44849,44851,44853,44854,44855,44856,44857,44858,44859,44862,44864,44868,44869,44870,44871,44874,44875,44876,44877,44878,44879,44881,44882,44883,44884,44885,44886,44887,44888,44889,44890,44891,44894,44895,44896,44897,44898,44899,44902,44903,44904,44905,44906,44907,44908,44909,44910,44911,44912,44913,44914,44915,44916,44917,44918,44919,44920,44922,44923,44924,44925,44926,44927,44929,44930,44931,44933,44934,44935,44937,44938,44939,44940,44941,44942,44943,44946,44947,44948,44950,44951,44952,44953,44954,44955,44957,44958,44959,44960,44961,44962,44963,44964,44965,44966,44967,44968,44969,44970,44971,44972,44973,44974,44975,44976,44977,44978,44979,44980,44981,44982,44983,44986,44987,44989,44990,44991,44993,44994,44995,44996,44997,44998,45002,45004,45007,45008,45009,45010,45011,45013,45014,45015,45016,45017,45018,45019,45021,45022,45023,45024,45025,null,null,null,null,null,null,45026,45027,45028,45029,45030,45031,45034,45035,45036,45037,45038,45039,45042,45043,45045,45046,45047,45049,45050,45051,45052,45053,45054,45055,45058,45059,null,null,null,null,null,null,45061,45062,45063,45064,45065,45066,45067,45069,45070,45071,45073,45074,45075,45077,45078,45079,45080,45081,45082,45083,45086,45087,45088,45089,45090,45091,45092,45093,45094,45095,45097,45098,45099,45100,45101,45102,45103,45104,45105,45106,45107,45108,45109,45110,45111,45112,45113,45114,45115,45116,45117,45118,45119,45120,45121,45122,45123,45126,45127,45129,45131,45133,45135,45136,45137,45138,45142,45144,45146,45147,45148,45150,45151,45152,45153,45154,45155,45156,45157,45158,45159,45160,45161,45162,45163,45164,45165,45166,45167,45168,45169,45170,45171,45172,45173,45174,45175,45176,45177,45178,45179,45182,45183,45185,45186,45187,45189,45190,45191,45192,45193,45194,45195,45198,45200,45202,45203,45204,45205,45206,45207,45211,45213,45214,45219,45220,45221,45222,45223,45226,45232,45234,45238,45239,45241,45242,45243,45245,45246,45247,45248,45249,45250,45251,45254,45258,45259,45260,45261,45262,45263,45266,null,null,null,null,null,null,45267,45269,45270,45271,45273,45274,45275,45276,45277,45278,45279,45281,45282,45283,45284,45286,45287,45288,45289,45290,45291,45292,45293,45294,45295,45296,null,null,null,null,null,null,45297,45298,45299,45300,45301,45302,45303,45304,45305,45306,45307,45308,45309,45310,45311,45312,45313,45314,45315,45316,45317,45318,45319,45322,45325,45326,45327,45329,45332,45333,45334,45335,45338,45342,45343,45344,45345,45346,45350,45351,45353,45354,45355,45357,45358,45359,45360,45361,45362,45363,45366,45370,45371,45372,45373,45374,45375,45378,45379,45381,45382,45383,45385,45386,45387,45388,45389,45390,45391,45394,45395,45398,45399,45401,45402,45403,45405,45406,45407,45409,45410,45411,45412,45413,45414,45415,45416,45417,45418,45419,45420,45421,45422,45423,45424,45425,45426,45427,45428,45429,45430,45431,45434,45435,45437,45438,45439,45441,45443,45444,45445,45446,45447,45450,45452,45454,45455,45456,45457,45461,45462,45463,45465,45466,45467,45469,45470,45471,45472,45473,45474,45475,45476,45477,45478,45479,45481,45482,45483,45484,45485,45486,45487,45488,45489,45490,45491,45492,45493,45494,45495,45496,null,null,null,null,null,null,45497,45498,45499,45500,45501,45502,45503,45504,45505,45506,45507,45508,45509,45510,45511,45512,45513,45514,45515,45517,45518,45519,45521,45522,45523,45525,null,null,null,null,null,null,45526,45527,45528,45529,45530,45531,45534,45536,45537,45538,45539,45540,45541,45542,45543,45546,45547,45549,45550,45551,45553,45554,45555,45556,45557,45558,45559,45560,45562,45564,45566,45567,45568,45569,45570,45571,45574,45575,45577,45578,45581,45582,45583,45584,45585,45586,45587,45590,45592,45594,45595,45596,45597,45598,45599,45601,45602,45603,45604,45605,45606,45607,45608,45609,45610,45611,45612,45613,45614,45615,45616,45617,45618,45619,45621,45622,45623,45624,45625,45626,45627,45629,45630,45631,45632,45633,45634,45635,45636,45637,45638,45639,45640,45641,45642,45643,45644,45645,45646,45647,45648,45649,45650,45651,45652,45653,45654,45655,45657,45658,45659,45661,45662,45663,45665,45666,45667,45668,45669,45670,45671,45674,45675,45676,45677,45678,45679,45680,45681,45682,45683,45686,45687,45688,45689,45690,45691,45693,45694,45695,45696,45697,45698,45699,45702,45703,45704,45706,45707,45708,45709,45710,null,null,null,null,null,null,45711,45714,45715,45717,45718,45719,45723,45724,45725,45726,45727,45730,45732,45735,45736,45737,45739,45741,45742,45743,45745,45746,45747,45749,45750,45751,null,null,null,null,null,null,45752,45753,45754,45755,45756,45757,45758,45759,45760,45761,45762,45763,45764,45765,45766,45767,45770,45771,45773,45774,45775,45777,45779,45780,45781,45782,45783,45786,45788,45790,45791,45792,45793,45795,45799,45801,45802,45808,45809,45810,45814,45820,45821,45822,45826,45827,45829,45830,45831,45833,45834,45835,45836,45837,45838,45839,45842,45846,45847,45848,45849,45850,45851,45853,45854,45855,45856,45857,45858,45859,45860,45861,45862,45863,45864,45865,45866,45867,45868,45869,45870,45871,45872,45873,45874,45875,45876,45877,45878,45879,45880,45881,45882,45883,45884,45885,45886,45887,45888,45889,45890,45891,45892,45893,45894,45895,45896,45897,45898,45899,45900,45901,45902,45903,45904,45905,45906,45907,45911,45913,45914,45917,45920,45921,45922,45923,45926,45928,45930,45932,45933,45935,45938,45939,45941,45942,45943,45945,45946,45947,45948,45949,45950,45951,45954,45958,45959,45960,45961,45962,45963,45965,null,null,null,null,null,null,45966,45967,45969,45970,45971,45973,45974,45975,45976,45977,45978,45979,45980,45981,45982,45983,45986,45987,45988,45989,45990,45991,45993,45994,45995,45997,null,null,null,null,null,null,45998,45999,46e3,46001,46002,46003,46004,46005,46006,46007,46008,46009,46010,46011,46012,46013,46014,46015,46016,46017,46018,46019,46022,46023,46025,46026,46029,46031,46033,46034,46035,46038,46040,46042,46044,46046,46047,46049,46050,46051,46053,46054,46055,46057,46058,46059,46060,46061,46062,46063,46064,46065,46066,46067,46068,46069,46070,46071,46072,46073,46074,46075,46077,46078,46079,46080,46081,46082,46083,46084,46085,46086,46087,46088,46089,46090,46091,46092,46093,46094,46095,46097,46098,46099,46100,46101,46102,46103,46105,46106,46107,46109,46110,46111,46113,46114,46115,46116,46117,46118,46119,46122,46124,46125,46126,46127,46128,46129,46130,46131,46133,46134,46135,46136,46137,46138,46139,46140,46141,46142,46143,46144,46145,46146,46147,46148,46149,46150,46151,46152,46153,46154,46155,46156,46157,46158,46159,46162,46163,46165,46166,46167,46169,46170,46171,46172,46173,46174,46175,46178,46180,46182,null,null,null,null,null,null,46183,46184,46185,46186,46187,46189,46190,46191,46192,46193,46194,46195,46196,46197,46198,46199,46200,46201,46202,46203,46204,46205,46206,46207,46209,46210,null,null,null,null,null,null,46211,46212,46213,46214,46215,46217,46218,46219,46220,46221,46222,46223,46224,46225,46226,46227,46228,46229,46230,46231,46232,46233,46234,46235,46236,46238,46239,46240,46241,46242,46243,46245,46246,46247,46249,46250,46251,46253,46254,46255,46256,46257,46258,46259,46260,46262,46264,46266,46267,46268,46269,46270,46271,46273,46274,46275,46277,46278,46279,46281,46282,46283,46284,46285,46286,46287,46289,46290,46291,46292,46294,46295,46296,46297,46298,46299,46302,46303,46305,46306,46309,46311,46312,46313,46314,46315,46318,46320,46322,46323,46324,46325,46326,46327,46329,46330,46331,46332,46333,46334,46335,46336,46337,46338,46339,46340,46341,46342,46343,46344,46345,46346,46347,46348,46349,46350,46351,46352,46353,46354,46355,46358,46359,46361,46362,46365,46366,46367,46368,46369,46370,46371,46374,46379,46380,46381,46382,46383,46386,46387,46389,46390,46391,46393,46394,46395,46396,46397,46398,46399,46402,46406,null,null,null,null,null,null,46407,46408,46409,46410,46414,46415,46417,46418,46419,46421,46422,46423,46424,46425,46426,46427,46430,46434,46435,46436,46437,46438,46439,46440,46441,46442,null,null,null,null,null,null,46443,46444,46445,46446,46447,46448,46449,46450,46451,46452,46453,46454,46455,46456,46457,46458,46459,46460,46461,46462,46463,46464,46465,46466,46467,46468,46469,46470,46471,46472,46473,46474,46475,46476,46477,46478,46479,46480,46481,46482,46483,46484,46485,46486,46487,46488,46489,46490,46491,46492,46493,46494,46495,46498,46499,46501,46502,46503,46505,46508,46509,46510,46511,46514,46518,46519,46520,46521,46522,46526,46527,46529,46530,46531,46533,46534,46535,46536,46537,46538,46539,46542,46546,46547,46548,46549,46550,46551,46553,46554,46555,46556,46557,46558,46559,46560,46561,46562,46563,46564,46565,46566,46567,46568,46569,46570,46571,46573,46574,46575,46576,46577,46578,46579,46580,46581,46582,46583,46584,46585,46586,46587,46588,46589,46590,46591,46592,46593,46594,46595,46596,46597,46598,46599,46600,46601,46602,46603,46604,46605,46606,46607,46610,46611,46613,46614,46615,46617,46618,46619,46620,46621,null,null,null,null,null,null,46622,46623,46624,46625,46626,46627,46628,46630,46631,46632,46633,46634,46635,46637,46638,46639,46640,46641,46642,46643,46645,46646,46647,46648,46649,46650,null,null,null,null,null,null,46651,46652,46653,46654,46655,46656,46657,46658,46659,46660,46661,46662,46663,46665,46666,46667,46668,46669,46670,46671,46672,46673,46674,46675,46676,46677,46678,46679,46680,46681,46682,46683,46684,46685,46686,46687,46688,46689,46690,46691,46693,46694,46695,46697,46698,46699,46700,46701,46702,46703,46704,46705,46706,46707,46708,46709,46710,46711,46712,46713,46714,46715,46716,46717,46718,46719,46720,46721,46722,46723,46724,46725,46726,46727,46728,46729,46730,46731,46732,46733,46734,46735,46736,46737,46738,46739,46740,46741,46742,46743,46744,46745,46746,46747,46750,46751,46753,46754,46755,46757,46758,46759,46760,46761,46762,46765,46766,46767,46768,46770,46771,46772,46773,46774,46775,46776,46777,46778,46779,46780,46781,46782,46783,46784,46785,46786,46787,46788,46789,46790,46791,46792,46793,46794,46795,46796,46797,46798,46799,46800,46801,46802,46803,46805,46806,46807,46808,46809,46810,46811,46812,46813,null,null,null,null,null,null,46814,46815,46816,46817,46818,46819,46820,46821,46822,46823,46824,46825,46826,46827,46828,46829,46830,46831,46833,46834,46835,46837,46838,46839,46841,46842,null,null,null,null,null,null,46843,46844,46845,46846,46847,46850,46851,46852,46854,46855,46856,46857,46858,46859,46860,46861,46862,46863,46864,46865,46866,46867,46868,46869,46870,46871,46872,46873,46874,46875,46876,46877,46878,46879,46880,46881,46882,46883,46884,46885,46886,46887,46890,46891,46893,46894,46897,46898,46899,46900,46901,46902,46903,46906,46908,46909,46910,46911,46912,46913,46914,46915,46917,46918,46919,46921,46922,46923,46925,46926,46927,46928,46929,46930,46931,46934,46935,46936,46937,46938,46939,46940,46941,46942,46943,46945,46946,46947,46949,46950,46951,46953,46954,46955,46956,46957,46958,46959,46962,46964,46966,46967,46968,46969,46970,46971,46974,46975,46977,46978,46979,46981,46982,46983,46984,46985,46986,46987,46990,46995,46996,46997,47002,47003,47005,47006,47007,47009,47010,47011,47012,47013,47014,47015,47018,47022,47023,47024,47025,47026,47027,47030,47031,47033,47034,47035,47036,47037,47038,47039,47040,47041,null,null,null,null,null,null,47042,47043,47044,47045,47046,47048,47050,47051,47052,47053,47054,47055,47056,47057,47058,47059,47060,47061,47062,47063,47064,47065,47066,47067,47068,47069,null,null,null,null,null,null,47070,47071,47072,47073,47074,47075,47076,47077,47078,47079,47080,47081,47082,47083,47086,47087,47089,47090,47091,47093,47094,47095,47096,47097,47098,47099,47102,47106,47107,47108,47109,47110,47114,47115,47117,47118,47119,47121,47122,47123,47124,47125,47126,47127,47130,47132,47134,47135,47136,47137,47138,47139,47142,47143,47145,47146,47147,47149,47150,47151,47152,47153,47154,47155,47158,47162,47163,47164,47165,47166,47167,47169,47170,47171,47173,47174,47175,47176,47177,47178,47179,47180,47181,47182,47183,47184,47186,47188,47189,47190,47191,47192,47193,47194,47195,47198,47199,47201,47202,47203,47205,47206,47207,47208,47209,47210,47211,47214,47216,47218,47219,47220,47221,47222,47223,47225,47226,47227,47229,47230,47231,47232,47233,47234,47235,47236,47237,47238,47239,47240,47241,47242,47243,47244,47246,47247,47248,47249,47250,47251,47252,47253,47254,47255,47256,47257,47258,47259,47260,47261,47262,47263,null,null,null,null,null,null,47264,47265,47266,47267,47268,47269,47270,47271,47273,47274,47275,47276,47277,47278,47279,47281,47282,47283,47285,47286,47287,47289,47290,47291,47292,47293,null,null,null,null,null,null,47294,47295,47298,47300,47302,47303,47304,47305,47306,47307,47309,47310,47311,47313,47314,47315,47317,47318,47319,47320,47321,47322,47323,47324,47326,47328,47330,47331,47332,47333,47334,47335,47338,47339,47341,47342,47343,47345,47346,47347,47348,47349,47350,47351,47354,47356,47358,47359,47360,47361,47362,47363,47365,47366,47367,47368,47369,47370,47371,47372,47373,47374,47375,47376,47377,47378,47379,47380,47381,47382,47383,47385,47386,47387,47388,47389,47390,47391,47393,47394,47395,47396,47397,47398,47399,47400,47401,47402,47403,47404,47405,47406,47407,47408,47409,47410,47411,47412,47413,47414,47415,47416,47417,47418,47419,47422,47423,47425,47426,47427,47429,47430,47431,47432,47433,47434,47435,47437,47438,47440,47442,47443,47444,47445,47446,47447,47450,47451,47453,47454,47455,47457,47458,47459,47460,47461,47462,47463,47466,47468,47470,47471,47472,47473,47474,47475,47478,47479,47481,47482,47483,47485,null,null,null,null,null,null,47486,47487,47488,47489,47490,47491,47494,47496,47499,47500,47503,47504,47505,47506,47507,47508,47509,47510,47511,47512,47513,47514,47515,47516,47517,47518,null,null,null,null,null,null,47519,47520,47521,47522,47523,47524,47525,47526,47527,47528,47529,47530,47531,47534,47535,47537,47538,47539,47541,47542,47543,47544,47545,47546,47547,47550,47552,47554,47555,47556,47557,47558,47559,47562,47563,47565,47571,47572,47573,47574,47575,47578,47580,47583,47584,47586,47590,47591,47593,47594,47595,47597,47598,47599,47600,47601,47602,47603,47606,47611,47612,47613,47614,47615,47618,47619,47620,47621,47622,47623,47625,47626,47627,47628,47629,47630,47631,47632,47633,47634,47635,47636,47638,47639,47640,47641,47642,47643,47644,47645,47646,47647,47648,47649,47650,47651,47652,47653,47654,47655,47656,47657,47658,47659,47660,47661,47662,47663,47664,47665,47666,47667,47668,47669,47670,47671,47674,47675,47677,47678,47679,47681,47683,47684,47685,47686,47687,47690,47692,47695,47696,47697,47698,47702,47703,47705,47706,47707,47709,47710,47711,47712,47713,47714,47715,47718,47722,47723,47724,47725,47726,47727,null,null,null,null,null,null,47730,47731,47733,47734,47735,47737,47738,47739,47740,47741,47742,47743,47744,47745,47746,47750,47752,47753,47754,47755,47757,47758,47759,47760,47761,47762,null,null,null,null,null,null,47763,47764,47765,47766,47767,47768,47769,47770,47771,47772,47773,47774,47775,47776,47777,47778,47779,47780,47781,47782,47783,47786,47789,47790,47791,47793,47795,47796,47797,47798,47799,47802,47804,47806,47807,47808,47809,47810,47811,47813,47814,47815,47817,47818,47819,47820,47821,47822,47823,47824,47825,47826,47827,47828,47829,47830,47831,47834,47835,47836,47837,47838,47839,47840,47841,47842,47843,47844,47845,47846,47847,47848,47849,47850,47851,47852,47853,47854,47855,47856,47857,47858,47859,47860,47861,47862,47863,47864,47865,47866,47867,47869,47870,47871,47873,47874,47875,47877,47878,47879,47880,47881,47882,47883,47884,47886,47888,47890,47891,47892,47893,47894,47895,47897,47898,47899,47901,47902,47903,47905,47906,47907,47908,47909,47910,47911,47912,47914,47916,47917,47918,47919,47920,47921,47922,47923,47927,47929,47930,47935,47936,47937,47938,47939,47942,47944,47946,47947,47948,47950,47953,47954,null,null,null,null,null,null,47955,47957,47958,47959,47961,47962,47963,47964,47965,47966,47967,47968,47970,47972,47973,47974,47975,47976,47977,47978,47979,47981,47982,47983,47984,47985,null,null,null,null,null,null,47986,47987,47988,47989,47990,47991,47992,47993,47994,47995,47996,47997,47998,47999,48e3,48001,48002,48003,48004,48005,48006,48007,48009,48010,48011,48013,48014,48015,48017,48018,48019,48020,48021,48022,48023,48024,48025,48026,48027,48028,48029,48030,48031,48032,48033,48034,48035,48037,48038,48039,48041,48042,48043,48045,48046,48047,48048,48049,48050,48051,48053,48054,48056,48057,48058,48059,48060,48061,48062,48063,48065,48066,48067,48069,48070,48071,48073,48074,48075,48076,48077,48078,48079,48081,48082,48084,48085,48086,48087,48088,48089,48090,48091,48092,48093,48094,48095,48096,48097,48098,48099,48100,48101,48102,48103,48104,48105,48106,48107,48108,48109,48110,48111,48112,48113,48114,48115,48116,48117,48118,48119,48122,48123,48125,48126,48129,48131,48132,48133,48134,48135,48138,48142,48144,48146,48147,48153,48154,48160,48161,48162,48163,48166,48168,48170,48171,48172,48174,48175,48178,48179,48181,null,null,null,null,null,null,48182,48183,48185,48186,48187,48188,48189,48190,48191,48194,48198,48199,48200,48202,48203,48206,48207,48209,48210,48211,48212,48213,48214,48215,48216,48217,null,null,null,null,null,null,48218,48219,48220,48222,48223,48224,48225,48226,48227,48228,48229,48230,48231,48232,48233,48234,48235,48236,48237,48238,48239,48240,48241,48242,48243,48244,48245,48246,48247,48248,48249,48250,48251,48252,48253,48254,48255,48256,48257,48258,48259,48262,48263,48265,48266,48269,48271,48272,48273,48274,48275,48278,48280,48283,48284,48285,48286,48287,48290,48291,48293,48294,48297,48298,48299,48300,48301,48302,48303,48306,48310,48311,48312,48313,48314,48315,48318,48319,48321,48322,48323,48325,48326,48327,48328,48329,48330,48331,48332,48334,48338,48339,48340,48342,48343,48345,48346,48347,48349,48350,48351,48352,48353,48354,48355,48356,48357,48358,48359,48360,48361,48362,48363,48364,48365,48366,48367,48368,48369,48370,48371,48375,48377,48378,48379,48381,48382,48383,48384,48385,48386,48387,48390,48392,48394,48395,48396,48397,48398,48399,48401,48402,48403,48405,48406,48407,48408,48409,48410,48411,48412,48413,null,null,null,null,null,null,48414,48415,48416,48417,48418,48419,48421,48422,48423,48424,48425,48426,48427,48429,48430,48431,48432,48433,48434,48435,48436,48437,48438,48439,48440,48441,null,null,null,null,null,null,48442,48443,48444,48445,48446,48447,48449,48450,48451,48452,48453,48454,48455,48458,48459,48461,48462,48463,48465,48466,48467,48468,48469,48470,48471,48474,48475,48476,48477,48478,48479,48480,48481,48482,48483,48485,48486,48487,48489,48490,48491,48492,48493,48494,48495,48496,48497,48498,48499,48500,48501,48502,48503,48504,48505,48506,48507,48508,48509,48510,48511,48514,48515,48517,48518,48523,48524,48525,48526,48527,48530,48532,48534,48535,48536,48539,48541,48542,48543,48544,48545,48546,48547,48549,48550,48551,48552,48553,48554,48555,48556,48557,48558,48559,48561,48562,48563,48564,48565,48566,48567,48569,48570,48571,48572,48573,48574,48575,48576,48577,48578,48579,48580,48581,48582,48583,48584,48585,48586,48587,48588,48589,48590,48591,48592,48593,48594,48595,48598,48599,48601,48602,48603,48605,48606,48607,48608,48609,48610,48611,48612,48613,48614,48615,48616,48618,48619,48620,48621,48622,48623,48625,null,null,null,null,null,null,48626,48627,48629,48630,48631,48633,48634,48635,48636,48637,48638,48639,48641,48642,48644,48646,48647,48648,48649,48650,48651,48654,48655,48657,48658,48659,null,null,null,null,null,null,48661,48662,48663,48664,48665,48666,48667,48670,48672,48673,48674,48675,48676,48677,48678,48679,48680,48681,48682,48683,48684,48685,48686,48687,48688,48689,48690,48691,48692,48693,48694,48695,48696,48697,48698,48699,48700,48701,48702,48703,48704,48705,48706,48707,48710,48711,48713,48714,48715,48717,48719,48720,48721,48722,48723,48726,48728,48732,48733,48734,48735,48738,48739,48741,48742,48743,48745,48747,48748,48749,48750,48751,48754,48758,48759,48760,48761,48762,48766,48767,48769,48770,48771,48773,48774,48775,48776,48777,48778,48779,48782,48786,48787,48788,48789,48790,48791,48794,48795,48796,48797,48798,48799,48800,48801,48802,48803,48804,48805,48806,48807,48809,48810,48811,48812,48813,48814,48815,48816,48817,48818,48819,48820,48821,48822,48823,48824,48825,48826,48827,48828,48829,48830,48831,48832,48833,48834,48835,48836,48837,48838,48839,48840,48841,48842,48843,48844,48845,48846,48847,48850,48851,null,null,null,null,null,null,48853,48854,48857,48858,48859,48860,48861,48862,48863,48865,48866,48870,48871,48872,48873,48874,48875,48877,48878,48879,48880,48881,48882,48883,48884,48885,null,null,null,null,null,null,48886,48887,48888,48889,48890,48891,48892,48893,48894,48895,48896,48898,48899,48900,48901,48902,48903,48906,48907,48908,48909,48910,48911,48912,48913,48914,48915,48916,48917,48918,48919,48922,48926,48927,48928,48929,48930,48931,48932,48933,48934,48935,48936,48937,48938,48939,48940,48941,48942,48943,48944,48945,48946,48947,48948,48949,48950,48951,48952,48953,48954,48955,48956,48957,48958,48959,48962,48963,48965,48966,48967,48969,48970,48971,48972,48973,48974,48975,48978,48979,48980,48982,48983,48984,48985,48986,48987,48988,48989,48990,48991,48992,48993,48994,48995,48996,48997,48998,48999,49e3,49001,49002,49003,49004,49005,49006,49007,49008,49009,49010,49011,49012,49013,49014,49015,49016,49017,49018,49019,49020,49021,49022,49023,49024,49025,49026,49027,49028,49029,49030,49031,49032,49033,49034,49035,49036,49037,49038,49039,49040,49041,49042,49043,49045,49046,49047,49048,49049,49050,49051,49052,49053,null,null,null,null,null,null,49054,49055,49056,49057,49058,49059,49060,49061,49062,49063,49064,49065,49066,49067,49068,49069,49070,49071,49073,49074,49075,49076,49077,49078,49079,49080,null,null,null,null,null,null,49081,49082,49083,49084,49085,49086,49087,49088,49089,49090,49091,49092,49094,49095,49096,49097,49098,49099,49102,49103,49105,49106,49107,49109,49110,49111,49112,49113,49114,49115,49117,49118,49120,49122,49123,49124,49125,49126,49127,49128,49129,49130,49131,49132,49133,49134,49135,49136,49137,49138,49139,49140,49141,49142,49143,49144,49145,49146,49147,49148,49149,49150,49151,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49162,49163,49164,49165,49166,49167,49168,49169,49170,49171,49172,49173,49174,49175,49176,49177,49178,49179,49180,49181,49182,49183,49184,49185,49186,49187,49188,49189,49190,49191,49192,49193,49194,49195,49196,49197,49198,49199,49200,49201,49202,49203,49204,49205,49206,49207,49208,49209,49210,49211,49213,49214,49215,49216,49217,49218,49219,49220,49221,49222,49223,49224,49225,49226,49227,49228,49229,49230,49231,49232,49234,49235,49236,49237,49238,49239,49241,49242,49243,null,null,null,null,null,null,49245,49246,49247,49249,49250,49251,49252,49253,49254,49255,49258,49259,49260,49261,49262,49263,49264,49265,49266,49267,49268,49269,49270,49271,49272,49273,null,null,null,null,null,null,49274,49275,49276,49277,49278,49279,49280,49281,49282,49283,49284,49285,49286,49287,49288,49289,49290,49291,49292,49293,49294,49295,49298,49299,49301,49302,49303,49305,49306,49307,49308,49309,49310,49311,49314,49316,49318,49319,49320,49321,49322,49323,49326,49329,49330,49335,49336,49337,49338,49339,49342,49346,49347,49348,49350,49351,49354,49355,49357,49358,49359,49361,49362,49363,49364,49365,49366,49367,49370,49374,49375,49376,49377,49378,49379,49382,49383,49385,49386,49387,49389,49390,49391,49392,49393,49394,49395,49398,49400,49402,49403,49404,49405,49406,49407,49409,49410,49411,49413,49414,49415,49417,49418,49419,49420,49421,49422,49423,49425,49426,49427,49428,49430,49431,49432,49433,49434,49435,49441,49442,49445,49448,49449,49450,49451,49454,49458,49459,49460,49461,49463,49466,49467,49469,49470,49471,49473,49474,49475,49476,49477,49478,49479,49482,49486,49487,49488,49489,49490,49491,49494,49495,null,null,null,null,null,null,49497,49498,49499,49501,49502,49503,49504,49505,49506,49507,49510,49514,49515,49516,49517,49518,49519,49521,49522,49523,49525,49526,49527,49529,49530,49531,null,null,null,null,null,null,49532,49533,49534,49535,49536,49537,49538,49539,49540,49542,49543,49544,49545,49546,49547,49551,49553,49554,49555,49557,49559,49560,49561,49562,49563,49566,49568,49570,49571,49572,49574,49575,49578,49579,49581,49582,49583,49585,49586,49587,49588,49589,49590,49591,49592,49593,49594,49595,49596,49598,49599,49600,49601,49602,49603,49605,49606,49607,49609,49610,49611,49613,49614,49615,49616,49617,49618,49619,49621,49622,49625,49626,49627,49628,49629,49630,49631,49633,49634,49635,49637,49638,49639,49641,49642,49643,49644,49645,49646,49647,49650,49652,49653,49654,49655,49656,49657,49658,49659,49662,49663,49665,49666,49667,49669,49670,49671,49672,49673,49674,49675,49678,49680,49682,49683,49684,49685,49686,49687,49690,49691,49693,49694,49697,49698,49699,49700,49701,49702,49703,49706,49708,49710,49712,49715,49717,49718,49719,49720,49721,49722,49723,49724,49725,49726,49727,49728,49729,49730,49731,49732,49733,null,null,null,null,null,null,49734,49735,49737,49738,49739,49740,49741,49742,49743,49746,49747,49749,49750,49751,49753,49754,49755,49756,49757,49758,49759,49761,49762,49763,49764,49766,null,null,null,null,null,null,49767,49768,49769,49770,49771,49774,49775,49777,49778,49779,49781,49782,49783,49784,49785,49786,49787,49790,49792,49794,49795,49796,49797,49798,49799,49802,49803,49804,49805,49806,49807,49809,49810,49811,49812,49813,49814,49815,49817,49818,49820,49822,49823,49824,49825,49826,49827,49830,49831,49833,49834,49835,49838,49839,49840,49841,49842,49843,49846,49848,49850,49851,49852,49853,49854,49855,49856,49857,49858,49859,49860,49861,49862,49863,49864,49865,49866,49867,49868,49869,49870,49871,49872,49873,49874,49875,49876,49877,49878,49879,49880,49881,49882,49883,49886,49887,49889,49890,49893,49894,49895,49896,49897,49898,49902,49904,49906,49907,49908,49909,49911,49914,49917,49918,49919,49921,49922,49923,49924,49925,49926,49927,49930,49931,49934,49935,49936,49937,49938,49942,49943,49945,49946,49947,49949,49950,49951,49952,49953,49954,49955,49958,49959,49962,49963,49964,49965,49966,49967,49968,49969,49970,null,null,null,null,null,null,49971,49972,49973,49974,49975,49976,49977,49978,49979,49980,49981,49982,49983,49984,49985,49986,49987,49988,49990,49991,49992,49993,49994,49995,49996,49997,null,null,null,null,null,null,49998,49999,5e4,50001,50002,50003,50004,50005,50006,50007,50008,50009,50010,50011,50012,50013,50014,50015,50016,50017,50018,50019,50020,50021,50022,50023,50026,50027,50029,50030,50031,50033,50035,50036,50037,50038,50039,50042,50043,50046,50047,50048,50049,50050,50051,50053,50054,50055,50057,50058,50059,50061,50062,50063,50064,50065,50066,50067,50068,50069,50070,50071,50072,50073,50074,50075,50076,50077,50078,50079,50080,50081,50082,50083,50084,50085,50086,50087,50088,50089,50090,50091,50092,50093,50094,50095,50096,50097,50098,50099,50100,50101,50102,50103,50104,50105,50106,50107,50108,50109,50110,50111,50113,50114,50115,50116,50117,50118,50119,50120,50121,50122,50123,50124,50125,50126,50127,50128,50129,50130,50131,50132,50133,50134,50135,50138,50139,50141,50142,50145,50147,50148,50149,50150,50151,50154,50155,50156,50158,50159,50160,50161,50162,50163,50166,50167,50169,50170,50171,50172,50173,50174,null,null,null,null,null,null,50175,50176,50177,50178,50179,50180,50181,50182,50183,50185,50186,50187,50188,50189,50190,50191,50193,50194,50195,50196,50197,50198,50199,50200,50201,50202,null,null,null,null,null,null,50203,50204,50205,50206,50207,50208,50209,50210,50211,50213,50214,50215,50216,50217,50218,50219,50221,50222,50223,50225,50226,50227,50229,50230,50231,50232,50233,50234,50235,50238,50239,50240,50241,50242,50243,50244,50245,50246,50247,50249,50250,50251,50252,50253,50254,50255,50256,50257,50258,50259,50260,50261,50262,50263,50264,50265,50266,50267,50268,50269,50270,50271,50272,50273,50274,50275,50278,50279,50281,50282,50283,50285,50286,50287,50288,50289,50290,50291,50294,50295,50296,50298,50299,50300,50301,50302,50303,50305,50306,50307,50308,50309,50310,50311,50312,50313,50314,50315,50316,50317,50318,50319,50320,50321,50322,50323,50325,50326,50327,50328,50329,50330,50331,50333,50334,50335,50336,50337,50338,50339,50340,50341,50342,50343,50344,50345,50346,50347,50348,50349,50350,50351,50352,50353,50354,50355,50356,50357,50358,50359,50361,50362,50363,50365,50366,50367,50368,50369,50370,50371,50372,50373,null,null,null,null,null,null,50374,50375,50376,50377,50378,50379,50380,50381,50382,50383,50384,50385,50386,50387,50388,50389,50390,50391,50392,50393,50394,50395,50396,50397,50398,50399,null,null,null,null,null,null,50400,50401,50402,50403,50404,50405,50406,50407,50408,50410,50411,50412,50413,50414,50415,50418,50419,50421,50422,50423,50425,50427,50428,50429,50430,50434,50435,50436,50437,50438,50439,50440,50441,50442,50443,50445,50446,50447,50449,50450,50451,50453,50454,50455,50456,50457,50458,50459,50461,50462,50463,50464,50465,50466,50467,50468,50469,50470,50471,50474,50475,50477,50478,50479,50481,50482,50483,50484,50485,50486,50487,50490,50492,50494,50495,50496,50497,50498,50499,50502,50503,50507,50511,50512,50513,50514,50518,50522,50523,50524,50527,50530,50531,50533,50534,50535,50537,50538,50539,50540,50541,50542,50543,50546,50550,50551,50552,50553,50554,50555,50558,50559,50561,50562,50563,50565,50566,50568,50569,50570,50571,50574,50576,50578,50579,50580,50582,50585,50586,50587,50589,50590,50591,50593,50594,50595,50596,50597,50598,50599,50600,50602,50603,50604,50605,50606,50607,50608,50609,50610,50611,50614,null,null,null,null,null,null,50615,50618,50623,50624,50625,50626,50627,50635,50637,50639,50642,50643,50645,50646,50647,50649,50650,50651,50652,50653,50654,50655,50658,50660,50662,50663,null,null,null,null,null,null,50664,50665,50666,50667,50671,50673,50674,50675,50677,50680,50681,50682,50683,50690,50691,50692,50697,50698,50699,50701,50702,50703,50705,50706,50707,50708,50709,50710,50711,50714,50717,50718,50719,50720,50721,50722,50723,50726,50727,50729,50730,50731,50735,50737,50738,50742,50744,50746,50748,50749,50750,50751,50754,50755,50757,50758,50759,50761,50762,50763,50764,50765,50766,50767,50770,50774,50775,50776,50777,50778,50779,50782,50783,50785,50786,50787,50788,50789,50790,50791,50792,50793,50794,50795,50797,50798,50800,50802,50803,50804,50805,50806,50807,50810,50811,50813,50814,50815,50817,50818,50819,50820,50821,50822,50823,50826,50828,50830,50831,50832,50833,50834,50835,50838,50839,50841,50842,50843,50845,50846,50847,50848,50849,50850,50851,50854,50856,50858,50859,50860,50861,50862,50863,50866,50867,50869,50870,50871,50875,50876,50877,50878,50879,50882,50884,50886,50887,50888,50889,50890,50891,50894,null,null,null,null,null,null,50895,50897,50898,50899,50901,50902,50903,50904,50905,50906,50907,50910,50911,50914,50915,50916,50917,50918,50919,50922,50923,50925,50926,50927,50929,50930,null,null,null,null,null,null,50931,50932,50933,50934,50935,50938,50939,50940,50942,50943,50944,50945,50946,50947,50950,50951,50953,50954,50955,50957,50958,50959,50960,50961,50962,50963,50966,50968,50970,50971,50972,50973,50974,50975,50978,50979,50981,50982,50983,50985,50986,50987,50988,50989,50990,50991,50994,50996,50998,51e3,51001,51002,51003,51006,51007,51009,51010,51011,51013,51014,51015,51016,51017,51019,51022,51024,51033,51034,51035,51037,51038,51039,51041,51042,51043,51044,51045,51046,51047,51049,51050,51052,51053,51054,51055,51056,51057,51058,51059,51062,51063,51065,51066,51067,51071,51072,51073,51074,51078,51083,51084,51085,51087,51090,51091,51093,51097,51099,51100,51101,51102,51103,51106,51111,51112,51113,51114,51115,51118,51119,51121,51122,51123,51125,51126,51127,51128,51129,51130,51131,51134,51138,51139,51140,51141,51142,51143,51146,51147,51149,51151,51153,51154,51155,51156,51157,51158,51159,51161,51162,51163,51164,null,null,null,null,null,null,51166,51167,51168,51169,51170,51171,51173,51174,51175,51177,51178,51179,51181,51182,51183,51184,51185,51186,51187,51188,51189,51190,51191,51192,51193,51194,null,null,null,null,null,null,51195,51196,51197,51198,51199,51202,51203,51205,51206,51207,51209,51211,51212,51213,51214,51215,51218,51220,51223,51224,51225,51226,51227,51230,51231,51233,51234,51235,51237,51238,51239,51240,51241,51242,51243,51246,51248,51250,51251,51252,51253,51254,51255,51257,51258,51259,51261,51262,51263,51265,51266,51267,51268,51269,51270,51271,51274,51275,51278,51279,51280,51281,51282,51283,51285,51286,51287,51288,51289,51290,51291,51292,51293,51294,51295,51296,51297,51298,51299,51300,51301,51302,51303,51304,51305,51306,51307,51308,51309,51310,51311,51314,51315,51317,51318,51319,51321,51323,51324,51325,51326,51327,51330,51332,51336,51337,51338,51342,51343,51344,51345,51346,51347,51349,51350,51351,51352,51353,51354,51355,51356,51358,51360,51362,51363,51364,51365,51366,51367,51369,51370,51371,51372,51373,51374,51375,51376,51377,51378,51379,51380,51381,51382,51383,51384,51385,51386,51387,51390,51391,51392,51393,null,null,null,null,null,null,51394,51395,51397,51398,51399,51401,51402,51403,51405,51406,51407,51408,51409,51410,51411,51414,51416,51418,51419,51420,51421,51422,51423,51426,51427,51429,null,null,null,null,null,null,51430,51431,51432,51433,51434,51435,51436,51437,51438,51439,51440,51441,51442,51443,51444,51446,51447,51448,51449,51450,51451,51454,51455,51457,51458,51459,51463,51464,51465,51466,51467,51470,12288,12289,12290,183,8229,8230,168,12291,173,8213,8741,65340,8764,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,177,215,247,8800,8804,8805,8734,8756,176,8242,8243,8451,8491,65504,65505,65509,9794,9792,8736,8869,8978,8706,8711,8801,8786,167,8251,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8594,8592,8593,8595,8596,12307,8810,8811,8730,8765,8733,8757,8747,8748,8712,8715,8838,8839,8834,8835,8746,8745,8743,8744,65506,51472,51474,51475,51476,51477,51478,51479,51481,51482,51483,51484,51485,51486,51487,51488,51489,51490,51491,51492,51493,51494,51495,51496,51497,51498,51499,null,null,null,null,null,null,51501,51502,51503,51504,51505,51506,51507,51509,51510,51511,51512,51513,51514,51515,51516,51517,51518,51519,51520,51521,51522,51523,51524,51525,51526,51527,null,null,null,null,null,null,51528,51529,51530,51531,51532,51533,51534,51535,51538,51539,51541,51542,51543,51545,51546,51547,51548,51549,51550,51551,51554,51556,51557,51558,51559,51560,51561,51562,51563,51565,51566,51567,8658,8660,8704,8707,180,65374,711,728,733,730,729,184,731,161,191,720,8750,8721,8719,164,8457,8240,9665,9664,9655,9654,9828,9824,9825,9829,9831,9827,8857,9672,9635,9680,9681,9618,9636,9637,9640,9639,9638,9641,9832,9743,9742,9756,9758,182,8224,8225,8597,8599,8601,8598,8600,9837,9833,9834,9836,12927,12828,8470,13255,8482,13250,13272,8481,8364,174,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51569,51570,51571,51573,51574,51575,51576,51577,51578,51579,51581,51582,51583,51584,51585,51586,51587,51588,51589,51590,51591,51594,51595,51597,51598,51599,null,null,null,null,null,null,51601,51602,51603,51604,51605,51606,51607,51610,51612,51614,51615,51616,51617,51618,51619,51620,51621,51622,51623,51624,51625,51626,51627,51628,51629,51630,null,null,null,null,null,null,51631,51632,51633,51634,51635,51636,51637,51638,51639,51640,51641,51642,51643,51644,51645,51646,51647,51650,51651,51653,51654,51657,51659,51660,51661,51662,51663,51666,51668,51671,51672,51675,65281,65282,65283,65284,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65510,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,51678,51679,51681,51683,51685,51686,51688,51689,51690,51691,51694,51698,51699,51700,51701,51702,51703,51706,51707,51709,51710,51711,51713,51714,51715,51716,null,null,null,null,null,null,51717,51718,51719,51722,51726,51727,51728,51729,51730,51731,51733,51734,51735,51737,51738,51739,51740,51741,51742,51743,51744,51745,51746,51747,51748,51749,null,null,null,null,null,null,51750,51751,51752,51754,51755,51756,51757,51758,51759,51760,51761,51762,51763,51764,51765,51766,51767,51768,51769,51770,51771,51772,51773,51774,51775,51776,51777,51778,51779,51780,51781,51782,12593,12594,12595,12596,12597,12598,12599,12600,12601,12602,12603,12604,12605,12606,12607,12608,12609,12610,12611,12612,12613,12614,12615,12616,12617,12618,12619,12620,12621,12622,12623,12624,12625,12626,12627,12628,12629,12630,12631,12632,12633,12634,12635,12636,12637,12638,12639,12640,12641,12642,12643,12644,12645,12646,12647,12648,12649,12650,12651,12652,12653,12654,12655,12656,12657,12658,12659,12660,12661,12662,12663,12664,12665,12666,12667,12668,12669,12670,12671,12672,12673,12674,12675,12676,12677,12678,12679,12680,12681,12682,12683,12684,12685,12686,51783,51784,51785,51786,51787,51790,51791,51793,51794,51795,51797,51798,51799,51800,51801,51802,51803,51806,51810,51811,51812,51813,51814,51815,51817,51818,null,null,null,null,null,null,51819,51820,51821,51822,51823,51824,51825,51826,51827,51828,51829,51830,51831,51832,51833,51834,51835,51836,51838,51839,51840,51841,51842,51843,51845,51846,null,null,null,null,null,null,51847,51848,51849,51850,51851,51852,51853,51854,51855,51856,51857,51858,51859,51860,51861,51862,51863,51865,51866,51867,51868,51869,51870,51871,51872,51873,51874,51875,51876,51877,51878,51879,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,null,null,null,null,null,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,51880,51881,51882,51883,51884,51885,51886,51887,51888,51889,51890,51891,51892,51893,51894,51895,51896,51897,51898,51899,51902,51903,51905,51906,51907,51909,null,null,null,null,null,null,51910,51911,51912,51913,51914,51915,51918,51920,51922,51924,51925,51926,51927,51930,51931,51932,51933,51934,51935,51937,51938,51939,51940,51941,51942,51943,null,null,null,null,null,null,51944,51945,51946,51947,51949,51950,51951,51952,51953,51954,51955,51957,51958,51959,51960,51961,51962,51963,51964,51965,51966,51967,51968,51969,51970,51971,51972,51973,51974,51975,51977,51978,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,9490,9489,9498,9497,9494,9493,9486,9485,9502,9503,9505,9506,9510,9511,9513,9514,9517,9518,9521,9522,9525,9526,9529,9530,9533,9534,9536,9537,9539,9540,9541,9542,9543,9544,9545,9546,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51979,51980,51981,51982,51983,51985,51986,51987,51989,51990,51991,51993,51994,51995,51996,51997,51998,51999,52002,52003,52004,52005,52006,52007,52008,52009,null,null,null,null,null,null,52010,52011,52012,52013,52014,52015,52016,52017,52018,52019,52020,52021,52022,52023,52024,52025,52026,52027,52028,52029,52030,52031,52032,52034,52035,52036,null,null,null,null,null,null,52037,52038,52039,52042,52043,52045,52046,52047,52049,52050,52051,52052,52053,52054,52055,52058,52059,52060,52062,52063,52064,52065,52066,52067,52069,52070,52071,52072,52073,52074,52075,52076,13205,13206,13207,8467,13208,13252,13219,13220,13221,13222,13209,13210,13211,13212,13213,13214,13215,13216,13217,13218,13258,13197,13198,13199,13263,13192,13193,13256,13223,13224,13232,13233,13234,13235,13236,13237,13238,13239,13240,13241,13184,13185,13186,13187,13188,13242,13243,13244,13245,13246,13247,13200,13201,13202,13203,13204,8486,13248,13249,13194,13195,13196,13270,13253,13229,13230,13231,13275,13225,13226,13227,13228,13277,13264,13267,13251,13257,13276,13254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52077,52078,52079,52080,52081,52082,52083,52084,52085,52086,52087,52090,52091,52092,52093,52094,52095,52096,52097,52098,52099,52100,52101,52102,52103,52104,null,null,null,null,null,null,52105,52106,52107,52108,52109,52110,52111,52112,52113,52114,52115,52116,52117,52118,52119,52120,52121,52122,52123,52125,52126,52127,52128,52129,52130,52131,null,null,null,null,null,null,52132,52133,52134,52135,52136,52137,52138,52139,52140,52141,52142,52143,52144,52145,52146,52147,52148,52149,52150,52151,52153,52154,52155,52156,52157,52158,52159,52160,52161,52162,52163,52164,198,208,170,294,null,306,null,319,321,216,338,186,222,358,330,null,12896,12897,12898,12899,12900,12901,12902,12903,12904,12905,12906,12907,12908,12909,12910,12911,12912,12913,12914,12915,12916,12917,12918,12919,12920,12921,12922,12923,9424,9425,9426,9427,9428,9429,9430,9431,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9446,9447,9448,9449,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,189,8531,8532,188,190,8539,8540,8541,8542,52165,52166,52167,52168,52169,52170,52171,52172,52173,52174,52175,52176,52177,52178,52179,52181,52182,52183,52184,52185,52186,52187,52188,52189,52190,52191,null,null,null,null,null,null,52192,52193,52194,52195,52197,52198,52200,52202,52203,52204,52205,52206,52207,52208,52209,52210,52211,52212,52213,52214,52215,52216,52217,52218,52219,52220,null,null,null,null,null,null,52221,52222,52223,52224,52225,52226,52227,52228,52229,52230,52231,52232,52233,52234,52235,52238,52239,52241,52242,52243,52245,52246,52247,52248,52249,52250,52251,52254,52255,52256,52259,52260,230,273,240,295,305,307,312,320,322,248,339,223,254,359,331,329,12800,12801,12802,12803,12804,12805,12806,12807,12808,12809,12810,12811,12812,12813,12814,12815,12816,12817,12818,12819,12820,12821,12822,12823,12824,12825,12826,12827,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,185,178,179,8308,8319,8321,8322,8323,8324,52261,52262,52266,52267,52269,52271,52273,52274,52275,52276,52277,52278,52279,52282,52287,52288,52289,52290,52291,52294,52295,52297,52298,52299,52301,52302,null,null,null,null,null,null,52303,52304,52305,52306,52307,52310,52314,52315,52316,52317,52318,52319,52321,52322,52323,52325,52327,52329,52330,52331,52332,52333,52334,52335,52337,52338,null,null,null,null,null,null,52339,52340,52342,52343,52344,52345,52346,52347,52348,52349,52350,52351,52352,52353,52354,52355,52356,52357,52358,52359,52360,52361,52362,52363,52364,52365,52366,52367,52368,52369,52370,52371,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,52372,52373,52374,52375,52378,52379,52381,52382,52383,52385,52386,52387,52388,52389,52390,52391,52394,52398,52399,52400,52401,52402,52403,52406,52407,52409,null,null,null,null,null,null,52410,52411,52413,52414,52415,52416,52417,52418,52419,52422,52424,52426,52427,52428,52429,52430,52431,52433,52434,52435,52437,52438,52439,52440,52441,52442,null,null,null,null,null,null,52443,52444,52445,52446,52447,52448,52449,52450,52451,52453,52454,52455,52456,52457,52458,52459,52461,52462,52463,52465,52466,52467,52468,52469,52470,52471,52472,52473,52474,52475,52476,52477,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,52478,52479,52480,52482,52483,52484,52485,52486,52487,52490,52491,52493,52494,52495,52497,52498,52499,52500,52501,52502,52503,52506,52508,52510,52511,52512,null,null,null,null,null,null,52513,52514,52515,52517,52518,52519,52521,52522,52523,52525,52526,52527,52528,52529,52530,52531,52532,52533,52534,52535,52536,52538,52539,52540,52541,52542,null,null,null,null,null,null,52543,52544,52545,52546,52547,52548,52549,52550,52551,52552,52553,52554,52555,52556,52557,52558,52559,52560,52561,52562,52563,52564,52565,52566,52567,52568,52569,52570,52571,52573,52574,52575,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,52577,52578,52579,52581,52582,52583,52584,52585,52586,52587,52590,52592,52594,52595,52596,52597,52598,52599,52601,52602,52603,52604,52605,52606,52607,52608,null,null,null,null,null,null,52609,52610,52611,52612,52613,52614,52615,52617,52618,52619,52620,52621,52622,52623,52624,52625,52626,52627,52630,52631,52633,52634,52635,52637,52638,52639,null,null,null,null,null,null,52640,52641,52642,52643,52646,52648,52650,52651,52652,52653,52654,52655,52657,52658,52659,52660,52661,52662,52663,52664,52665,52666,52667,52668,52669,52670,52671,52672,52673,52674,52675,52677,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52678,52679,52680,52681,52682,52683,52685,52686,52687,52689,52690,52691,52692,52693,52694,52695,52696,52697,52698,52699,52700,52701,52702,52703,52704,52705,null,null,null,null,null,null,52706,52707,52708,52709,52710,52711,52713,52714,52715,52717,52718,52719,52721,52722,52723,52724,52725,52726,52727,52730,52732,52734,52735,52736,52737,52738,null,null,null,null,null,null,52739,52741,52742,52743,52745,52746,52747,52749,52750,52751,52752,52753,52754,52755,52757,52758,52759,52760,52762,52763,52764,52765,52766,52767,52770,52771,52773,52774,52775,52777,52778,52779,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52780,52781,52782,52783,52786,52788,52790,52791,52792,52793,52794,52795,52796,52797,52798,52799,52800,52801,52802,52803,52804,52805,52806,52807,52808,52809,null,null,null,null,null,null,52810,52811,52812,52813,52814,52815,52816,52817,52818,52819,52820,52821,52822,52823,52826,52827,52829,52830,52834,52835,52836,52837,52838,52839,52842,52844,null,null,null,null,null,null,52846,52847,52848,52849,52850,52851,52854,52855,52857,52858,52859,52861,52862,52863,52864,52865,52866,52867,52870,52872,52874,52875,52876,52877,52878,52879,52882,52883,52885,52886,52887,52889,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52890,52891,52892,52893,52894,52895,52898,52902,52903,52904,52905,52906,52907,52910,52911,52912,52913,52914,52915,52916,52917,52918,52919,52920,52921,52922,null,null,null,null,null,null,52923,52924,52925,52926,52927,52928,52930,52931,52932,52933,52934,52935,52936,52937,52938,52939,52940,52941,52942,52943,52944,52945,52946,52947,52948,52949,null,null,null,null,null,null,52950,52951,52952,52953,52954,52955,52956,52957,52958,52959,52960,52961,52962,52963,52966,52967,52969,52970,52973,52974,52975,52976,52977,52978,52979,52982,52986,52987,52988,52989,52990,52991,44032,44033,44036,44039,44040,44041,44042,44048,44049,44050,44051,44052,44053,44054,44055,44057,44058,44059,44060,44061,44064,44068,44076,44077,44079,44080,44081,44088,44089,44092,44096,44107,44109,44116,44120,44124,44144,44145,44148,44151,44152,44154,44160,44161,44163,44164,44165,44166,44169,44170,44171,44172,44176,44180,44188,44189,44191,44192,44193,44200,44201,44202,44204,44207,44208,44216,44217,44219,44220,44221,44225,44228,44232,44236,44245,44247,44256,44257,44260,44263,44264,44266,44268,44271,44272,44273,44275,44277,44278,44284,44285,44288,44292,44294,52994,52995,52997,52998,52999,53001,53002,53003,53004,53005,53006,53007,53010,53012,53014,53015,53016,53017,53018,53019,53021,53022,53023,53025,53026,53027,null,null,null,null,null,null,53029,53030,53031,53032,53033,53034,53035,53038,53042,53043,53044,53045,53046,53047,53049,53050,53051,53052,53053,53054,53055,53056,53057,53058,53059,53060,null,null,null,null,null,null,53061,53062,53063,53064,53065,53066,53067,53068,53069,53070,53071,53072,53073,53074,53075,53078,53079,53081,53082,53083,53085,53086,53087,53088,53089,53090,53091,53094,53096,53098,53099,53100,44300,44301,44303,44305,44312,44316,44320,44329,44332,44333,44340,44341,44344,44348,44356,44357,44359,44361,44368,44372,44376,44385,44387,44396,44397,44400,44403,44404,44405,44406,44411,44412,44413,44415,44417,44418,44424,44425,44428,44432,44444,44445,44452,44471,44480,44481,44484,44488,44496,44497,44499,44508,44512,44516,44536,44537,44540,44543,44544,44545,44552,44553,44555,44557,44564,44592,44593,44596,44599,44600,44602,44608,44609,44611,44613,44614,44618,44620,44621,44622,44624,44628,44630,44636,44637,44639,44640,44641,44645,44648,44649,44652,44656,44664,53101,53102,53103,53106,53107,53109,53110,53111,53113,53114,53115,53116,53117,53118,53119,53121,53122,53123,53124,53126,53127,53128,53129,53130,53131,53133,null,null,null,null,null,null,53134,53135,53136,53137,53138,53139,53140,53141,53142,53143,53144,53145,53146,53147,53148,53149,53150,53151,53152,53154,53155,53156,53157,53158,53159,53161,null,null,null,null,null,null,53162,53163,53164,53165,53166,53167,53169,53170,53171,53172,53173,53174,53175,53176,53177,53178,53179,53180,53181,53182,53183,53184,53185,53186,53187,53189,53190,53191,53192,53193,53194,53195,44665,44667,44668,44669,44676,44677,44684,44732,44733,44734,44736,44740,44748,44749,44751,44752,44753,44760,44761,44764,44776,44779,44781,44788,44792,44796,44807,44808,44813,44816,44844,44845,44848,44850,44852,44860,44861,44863,44865,44866,44867,44872,44873,44880,44892,44893,44900,44901,44921,44928,44932,44936,44944,44945,44949,44956,44984,44985,44988,44992,44999,45e3,45001,45003,45005,45006,45012,45020,45032,45033,45040,45041,45044,45048,45056,45057,45060,45068,45072,45076,45084,45085,45096,45124,45125,45128,45130,45132,45134,45139,45140,45141,45143,45145,53196,53197,53198,53199,53200,53201,53202,53203,53204,53205,53206,53207,53208,53209,53210,53211,53212,53213,53214,53215,53218,53219,53221,53222,53223,53225,null,null,null,null,null,null,53226,53227,53228,53229,53230,53231,53234,53236,53238,53239,53240,53241,53242,53243,53245,53246,53247,53249,53250,53251,53253,53254,53255,53256,53257,53258,null,null,null,null,null,null,53259,53260,53261,53262,53263,53264,53266,53267,53268,53269,53270,53271,53273,53274,53275,53276,53277,53278,53279,53280,53281,53282,53283,53284,53285,53286,53287,53288,53289,53290,53291,53292,45149,45180,45181,45184,45188,45196,45197,45199,45201,45208,45209,45210,45212,45215,45216,45217,45218,45224,45225,45227,45228,45229,45230,45231,45233,45235,45236,45237,45240,45244,45252,45253,45255,45256,45257,45264,45265,45268,45272,45280,45285,45320,45321,45323,45324,45328,45330,45331,45336,45337,45339,45340,45341,45347,45348,45349,45352,45356,45364,45365,45367,45368,45369,45376,45377,45380,45384,45392,45393,45396,45397,45400,45404,45408,45432,45433,45436,45440,45442,45448,45449,45451,45453,45458,45459,45460,45464,45468,45480,45516,45520,45524,45532,45533,53294,53295,53296,53297,53298,53299,53302,53303,53305,53306,53307,53309,53310,53311,53312,53313,53314,53315,53318,53320,53322,53323,53324,53325,53326,53327,null,null,null,null,null,null,53329,53330,53331,53333,53334,53335,53337,53338,53339,53340,53341,53342,53343,53345,53346,53347,53348,53349,53350,53351,53352,53353,53354,53355,53358,53359,null,null,null,null,null,null,53361,53362,53363,53365,53366,53367,53368,53369,53370,53371,53374,53375,53376,53378,53379,53380,53381,53382,53383,53384,53385,53386,53387,53388,53389,53390,53391,53392,53393,53394,53395,53396,45535,45544,45545,45548,45552,45561,45563,45565,45572,45573,45576,45579,45580,45588,45589,45591,45593,45600,45620,45628,45656,45660,45664,45672,45673,45684,45685,45692,45700,45701,45705,45712,45713,45716,45720,45721,45722,45728,45729,45731,45733,45734,45738,45740,45744,45748,45768,45769,45772,45776,45778,45784,45785,45787,45789,45794,45796,45797,45798,45800,45803,45804,45805,45806,45807,45811,45812,45813,45815,45816,45817,45818,45819,45823,45824,45825,45828,45832,45840,45841,45843,45844,45845,45852,45908,45909,45910,45912,45915,45916,45918,45919,45924,45925,53397,53398,53399,53400,53401,53402,53403,53404,53405,53406,53407,53408,53409,53410,53411,53414,53415,53417,53418,53419,53421,53422,53423,53424,53425,53426,null,null,null,null,null,null,53427,53430,53432,53434,53435,53436,53437,53438,53439,53442,53443,53445,53446,53447,53450,53451,53452,53453,53454,53455,53458,53462,53463,53464,53465,53466,null,null,null,null,null,null,53467,53470,53471,53473,53474,53475,53477,53478,53479,53480,53481,53482,53483,53486,53490,53491,53492,53493,53494,53495,53497,53498,53499,53500,53501,53502,53503,53504,53505,53506,53507,53508,45927,45929,45931,45934,45936,45937,45940,45944,45952,45953,45955,45956,45957,45964,45968,45972,45984,45985,45992,45996,46020,46021,46024,46027,46028,46030,46032,46036,46037,46039,46041,46043,46045,46048,46052,46056,46076,46096,46104,46108,46112,46120,46121,46123,46132,46160,46161,46164,46168,46176,46177,46179,46181,46188,46208,46216,46237,46244,46248,46252,46261,46263,46265,46272,46276,46280,46288,46293,46300,46301,46304,46307,46308,46310,46316,46317,46319,46321,46328,46356,46357,46360,46363,46364,46372,46373,46375,46376,46377,46378,46384,46385,46388,46392,53509,53510,53511,53512,53513,53514,53515,53516,53518,53519,53520,53521,53522,53523,53524,53525,53526,53527,53528,53529,53530,53531,53532,53533,53534,53535,null,null,null,null,null,null,53536,53537,53538,53539,53540,53541,53542,53543,53544,53545,53546,53547,53548,53549,53550,53551,53554,53555,53557,53558,53559,53561,53563,53564,53565,53566,null,null,null,null,null,null,53567,53570,53574,53575,53576,53577,53578,53579,53582,53583,53585,53586,53587,53589,53590,53591,53592,53593,53594,53595,53598,53600,53602,53603,53604,53605,53606,53607,53609,53610,53611,53613,46400,46401,46403,46404,46405,46411,46412,46413,46416,46420,46428,46429,46431,46432,46433,46496,46497,46500,46504,46506,46507,46512,46513,46515,46516,46517,46523,46524,46525,46528,46532,46540,46541,46543,46544,46545,46552,46572,46608,46609,46612,46616,46629,46636,46644,46664,46692,46696,46748,46749,46752,46756,46763,46764,46769,46804,46832,46836,46840,46848,46849,46853,46888,46889,46892,46895,46896,46904,46905,46907,46916,46920,46924,46932,46933,46944,46948,46952,46960,46961,46963,46965,46972,46973,46976,46980,46988,46989,46991,46992,46993,46994,46998,46999,53614,53615,53616,53617,53618,53619,53620,53621,53622,53623,53624,53625,53626,53627,53629,53630,53631,53632,53633,53634,53635,53637,53638,53639,53641,53642,null,null,null,null,null,null,53643,53644,53645,53646,53647,53648,53649,53650,53651,53652,53653,53654,53655,53656,53657,53658,53659,53660,53661,53662,53663,53666,53667,53669,53670,53671,null,null,null,null,null,null,53673,53674,53675,53676,53677,53678,53679,53682,53684,53686,53687,53688,53689,53691,53693,53694,53695,53697,53698,53699,53700,53701,53702,53703,53704,53705,53706,53707,53708,53709,53710,53711,47e3,47001,47004,47008,47016,47017,47019,47020,47021,47028,47029,47032,47047,47049,47084,47085,47088,47092,47100,47101,47103,47104,47105,47111,47112,47113,47116,47120,47128,47129,47131,47133,47140,47141,47144,47148,47156,47157,47159,47160,47161,47168,47172,47185,47187,47196,47197,47200,47204,47212,47213,47215,47217,47224,47228,47245,47272,47280,47284,47288,47296,47297,47299,47301,47308,47312,47316,47325,47327,47329,47336,47337,47340,47344,47352,47353,47355,47357,47364,47384,47392,47420,47421,47424,47428,47436,47439,47441,47448,47449,47452,47456,47464,47465,53712,53713,53714,53715,53716,53717,53718,53719,53721,53722,53723,53724,53725,53726,53727,53728,53729,53730,53731,53732,53733,53734,53735,53736,53737,53738,null,null,null,null,null,null,53739,53740,53741,53742,53743,53744,53745,53746,53747,53749,53750,53751,53753,53754,53755,53756,53757,53758,53759,53760,53761,53762,53763,53764,53765,53766,null,null,null,null,null,null,53768,53770,53771,53772,53773,53774,53775,53777,53778,53779,53780,53781,53782,53783,53784,53785,53786,53787,53788,53789,53790,53791,53792,53793,53794,53795,53796,53797,53798,53799,53800,53801,47467,47469,47476,47477,47480,47484,47492,47493,47495,47497,47498,47501,47502,47532,47533,47536,47540,47548,47549,47551,47553,47560,47561,47564,47566,47567,47568,47569,47570,47576,47577,47579,47581,47582,47585,47587,47588,47589,47592,47596,47604,47605,47607,47608,47609,47610,47616,47617,47624,47637,47672,47673,47676,47680,47682,47688,47689,47691,47693,47694,47699,47700,47701,47704,47708,47716,47717,47719,47720,47721,47728,47729,47732,47736,47747,47748,47749,47751,47756,47784,47785,47787,47788,47792,47794,47800,47801,47803,47805,47812,47816,47832,47833,47868,53802,53803,53806,53807,53809,53810,53811,53813,53814,53815,53816,53817,53818,53819,53822,53824,53826,53827,53828,53829,53830,53831,53833,53834,53835,53836,null,null,null,null,null,null,53837,53838,53839,53840,53841,53842,53843,53844,53845,53846,53847,53848,53849,53850,53851,53853,53854,53855,53856,53857,53858,53859,53861,53862,53863,53864,null,null,null,null,null,null,53865,53866,53867,53868,53869,53870,53871,53872,53873,53874,53875,53876,53877,53878,53879,53880,53881,53882,53883,53884,53885,53886,53887,53890,53891,53893,53894,53895,53897,53898,53899,53900,47872,47876,47885,47887,47889,47896,47900,47904,47913,47915,47924,47925,47926,47928,47931,47932,47933,47934,47940,47941,47943,47945,47949,47951,47952,47956,47960,47969,47971,47980,48008,48012,48016,48036,48040,48044,48052,48055,48064,48068,48072,48080,48083,48120,48121,48124,48127,48128,48130,48136,48137,48139,48140,48141,48143,48145,48148,48149,48150,48151,48152,48155,48156,48157,48158,48159,48164,48165,48167,48169,48173,48176,48177,48180,48184,48192,48193,48195,48196,48197,48201,48204,48205,48208,48221,48260,48261,48264,48267,48268,48270,48276,48277,48279,53901,53902,53903,53906,53907,53908,53910,53911,53912,53913,53914,53915,53917,53918,53919,53921,53922,53923,53925,53926,53927,53928,53929,53930,53931,53933,null,null,null,null,null,null,53934,53935,53936,53938,53939,53940,53941,53942,53943,53946,53947,53949,53950,53953,53955,53956,53957,53958,53959,53962,53964,53965,53966,53967,53968,53969,null,null,null,null,null,null,53970,53971,53973,53974,53975,53977,53978,53979,53981,53982,53983,53984,53985,53986,53987,53990,53991,53992,53993,53994,53995,53996,53997,53998,53999,54002,54003,54005,54006,54007,54009,54010,48281,48282,48288,48289,48292,48295,48296,48304,48305,48307,48308,48309,48316,48317,48320,48324,48333,48335,48336,48337,48341,48344,48348,48372,48373,48374,48376,48380,48388,48389,48391,48393,48400,48404,48420,48428,48448,48456,48457,48460,48464,48472,48473,48484,48488,48512,48513,48516,48519,48520,48521,48522,48528,48529,48531,48533,48537,48538,48540,48548,48560,48568,48596,48597,48600,48604,48617,48624,48628,48632,48640,48643,48645,48652,48653,48656,48660,48668,48669,48671,48708,48709,48712,48716,48718,48724,48725,48727,48729,48730,48731,48736,48737,48740,54011,54012,54013,54014,54015,54018,54020,54022,54023,54024,54025,54026,54027,54031,54033,54034,54035,54037,54039,54040,54041,54042,54043,54046,54050,54051,null,null,null,null,null,null,54052,54054,54055,54058,54059,54061,54062,54063,54065,54066,54067,54068,54069,54070,54071,54074,54078,54079,54080,54081,54082,54083,54086,54087,54088,54089,null,null,null,null,null,null,54090,54091,54092,54093,54094,54095,54096,54097,54098,54099,54100,54101,54102,54103,54104,54105,54106,54107,54108,54109,54110,54111,54112,54113,54114,54115,54116,54117,54118,54119,54120,54121,48744,48746,48752,48753,48755,48756,48757,48763,48764,48765,48768,48772,48780,48781,48783,48784,48785,48792,48793,48808,48848,48849,48852,48855,48856,48864,48867,48868,48869,48876,48897,48904,48905,48920,48921,48923,48924,48925,48960,48961,48964,48968,48976,48977,48981,49044,49072,49093,49100,49101,49104,49108,49116,49119,49121,49212,49233,49240,49244,49248,49256,49257,49296,49297,49300,49304,49312,49313,49315,49317,49324,49325,49327,49328,49331,49332,49333,49334,49340,49341,49343,49344,49345,49349,49352,49353,49356,49360,49368,49369,49371,49372,49373,49380,54122,54123,54124,54125,54126,54127,54128,54129,54130,54131,54132,54133,54134,54135,54136,54137,54138,54139,54142,54143,54145,54146,54147,54149,54150,54151,null,null,null,null,null,null,54152,54153,54154,54155,54158,54162,54163,54164,54165,54166,54167,54170,54171,54173,54174,54175,54177,54178,54179,54180,54181,54182,54183,54186,54188,54190,null,null,null,null,null,null,54191,54192,54193,54194,54195,54197,54198,54199,54201,54202,54203,54205,54206,54207,54208,54209,54210,54211,54214,54215,54218,54219,54220,54221,54222,54223,54225,54226,54227,54228,54229,54230,49381,49384,49388,49396,49397,49399,49401,49408,49412,49416,49424,49429,49436,49437,49438,49439,49440,49443,49444,49446,49447,49452,49453,49455,49456,49457,49462,49464,49465,49468,49472,49480,49481,49483,49484,49485,49492,49493,49496,49500,49508,49509,49511,49512,49513,49520,49524,49528,49541,49548,49549,49550,49552,49556,49558,49564,49565,49567,49569,49573,49576,49577,49580,49584,49597,49604,49608,49612,49620,49623,49624,49632,49636,49640,49648,49649,49651,49660,49661,49664,49668,49676,49677,49679,49681,49688,49689,49692,49695,49696,49704,49705,49707,49709,54231,54233,54234,54235,54236,54237,54238,54239,54240,54242,54244,54245,54246,54247,54248,54249,54250,54251,54254,54255,54257,54258,54259,54261,54262,54263,null,null,null,null,null,null,54264,54265,54266,54267,54270,54272,54274,54275,54276,54277,54278,54279,54281,54282,54283,54284,54285,54286,54287,54288,54289,54290,54291,54292,54293,54294,null,null,null,null,null,null,54295,54296,54297,54298,54299,54300,54302,54303,54304,54305,54306,54307,54308,54309,54310,54311,54312,54313,54314,54315,54316,54317,54318,54319,54320,54321,54322,54323,54324,54325,54326,54327,49711,49713,49714,49716,49736,49744,49745,49748,49752,49760,49765,49772,49773,49776,49780,49788,49789,49791,49793,49800,49801,49808,49816,49819,49821,49828,49829,49832,49836,49837,49844,49845,49847,49849,49884,49885,49888,49891,49892,49899,49900,49901,49903,49905,49910,49912,49913,49915,49916,49920,49928,49929,49932,49933,49939,49940,49941,49944,49948,49956,49957,49960,49961,49989,50024,50025,50028,50032,50034,50040,50041,50044,50045,50052,50056,50060,50112,50136,50137,50140,50143,50144,50146,50152,50153,50157,50164,50165,50168,50184,50192,50212,50220,50224,54328,54329,54330,54331,54332,54333,54334,54335,54337,54338,54339,54341,54342,54343,54344,54345,54346,54347,54348,54349,54350,54351,54352,54353,54354,54355,null,null,null,null,null,null,54356,54357,54358,54359,54360,54361,54362,54363,54365,54366,54367,54369,54370,54371,54373,54374,54375,54376,54377,54378,54379,54380,54382,54384,54385,54386,null,null,null,null,null,null,54387,54388,54389,54390,54391,54394,54395,54397,54398,54401,54403,54404,54405,54406,54407,54410,54412,54414,54415,54416,54417,54418,54419,54421,54422,54423,54424,54425,54426,54427,54428,54429,50228,50236,50237,50248,50276,50277,50280,50284,50292,50293,50297,50304,50324,50332,50360,50364,50409,50416,50417,50420,50424,50426,50431,50432,50433,50444,50448,50452,50460,50472,50473,50476,50480,50488,50489,50491,50493,50500,50501,50504,50505,50506,50508,50509,50510,50515,50516,50517,50519,50520,50521,50525,50526,50528,50529,50532,50536,50544,50545,50547,50548,50549,50556,50557,50560,50564,50567,50572,50573,50575,50577,50581,50583,50584,50588,50592,50601,50612,50613,50616,50617,50619,50620,50621,50622,50628,50629,50630,50631,50632,50633,50634,50636,50638,54430,54431,54432,54433,54434,54435,54436,54437,54438,54439,54440,54442,54443,54444,54445,54446,54447,54448,54449,54450,54451,54452,54453,54454,54455,54456,null,null,null,null,null,null,54457,54458,54459,54460,54461,54462,54463,54464,54465,54466,54467,54468,54469,54470,54471,54472,54473,54474,54475,54477,54478,54479,54481,54482,54483,54485,null,null,null,null,null,null,54486,54487,54488,54489,54490,54491,54493,54494,54496,54497,54498,54499,54500,54501,54502,54503,54505,54506,54507,54509,54510,54511,54513,54514,54515,54516,54517,54518,54519,54521,54522,54524,50640,50641,50644,50648,50656,50657,50659,50661,50668,50669,50670,50672,50676,50678,50679,50684,50685,50686,50687,50688,50689,50693,50694,50695,50696,50700,50704,50712,50713,50715,50716,50724,50725,50728,50732,50733,50734,50736,50739,50740,50741,50743,50745,50747,50752,50753,50756,50760,50768,50769,50771,50772,50773,50780,50781,50784,50796,50799,50801,50808,50809,50812,50816,50824,50825,50827,50829,50836,50837,50840,50844,50852,50853,50855,50857,50864,50865,50868,50872,50873,50874,50880,50881,50883,50885,50892,50893,50896,50900,50908,50909,50912,50913,50920,54526,54527,54528,54529,54530,54531,54533,54534,54535,54537,54538,54539,54541,54542,54543,54544,54545,54546,54547,54550,54552,54553,54554,54555,54556,54557,null,null,null,null,null,null,54558,54559,54560,54561,54562,54563,54564,54565,54566,54567,54568,54569,54570,54571,54572,54573,54574,54575,54576,54577,54578,54579,54580,54581,54582,54583,null,null,null,null,null,null,54584,54585,54586,54587,54590,54591,54593,54594,54595,54597,54598,54599,54600,54601,54602,54603,54606,54608,54610,54611,54612,54613,54614,54615,54618,54619,54621,54622,54623,54625,54626,54627,50921,50924,50928,50936,50937,50941,50948,50949,50952,50956,50964,50965,50967,50969,50976,50977,50980,50984,50992,50993,50995,50997,50999,51004,51005,51008,51012,51018,51020,51021,51023,51025,51026,51027,51028,51029,51030,51031,51032,51036,51040,51048,51051,51060,51061,51064,51068,51069,51070,51075,51076,51077,51079,51080,51081,51082,51086,51088,51089,51092,51094,51095,51096,51098,51104,51105,51107,51108,51109,51110,51116,51117,51120,51124,51132,51133,51135,51136,51137,51144,51145,51148,51150,51152,51160,51165,51172,51176,51180,51200,51201,51204,51208,51210,54628,54630,54631,54634,54636,54638,54639,54640,54641,54642,54643,54646,54647,54649,54650,54651,54653,54654,54655,54656,54657,54658,54659,54662,54666,54667,null,null,null,null,null,null,54668,54669,54670,54671,54673,54674,54675,54676,54677,54678,54679,54680,54681,54682,54683,54684,54685,54686,54687,54688,54689,54690,54691,54692,54694,54695,null,null,null,null,null,null,54696,54697,54698,54699,54700,54701,54702,54703,54704,54705,54706,54707,54708,54709,54710,54711,54712,54713,54714,54715,54716,54717,54718,54719,54720,54721,54722,54723,54724,54725,54726,54727,51216,51217,51219,51221,51222,51228,51229,51232,51236,51244,51245,51247,51249,51256,51260,51264,51272,51273,51276,51277,51284,51312,51313,51316,51320,51322,51328,51329,51331,51333,51334,51335,51339,51340,51341,51348,51357,51359,51361,51368,51388,51389,51396,51400,51404,51412,51413,51415,51417,51424,51425,51428,51445,51452,51453,51456,51460,51461,51462,51468,51469,51471,51473,51480,51500,51508,51536,51537,51540,51544,51552,51553,51555,51564,51568,51572,51580,51592,51593,51596,51600,51608,51609,51611,51613,51648,51649,51652,51655,51656,51658,51664,51665,51667,54730,54731,54733,54734,54735,54737,54739,54740,54741,54742,54743,54746,54748,54750,54751,54752,54753,54754,54755,54758,54759,54761,54762,54763,54765,54766,null,null,null,null,null,null,54767,54768,54769,54770,54771,54774,54776,54778,54779,54780,54781,54782,54783,54786,54787,54789,54790,54791,54793,54794,54795,54796,54797,54798,54799,54802,null,null,null,null,null,null,54806,54807,54808,54809,54810,54811,54813,54814,54815,54817,54818,54819,54821,54822,54823,54824,54825,54826,54827,54828,54830,54831,54832,54833,54834,54835,54836,54837,54838,54839,54842,54843,51669,51670,51673,51674,51676,51677,51680,51682,51684,51687,51692,51693,51695,51696,51697,51704,51705,51708,51712,51720,51721,51723,51724,51725,51732,51736,51753,51788,51789,51792,51796,51804,51805,51807,51808,51809,51816,51837,51844,51864,51900,51901,51904,51908,51916,51917,51919,51921,51923,51928,51929,51936,51948,51956,51976,51984,51988,51992,52e3,52001,52033,52040,52041,52044,52048,52056,52057,52061,52068,52088,52089,52124,52152,52180,52196,52199,52201,52236,52237,52240,52244,52252,52253,52257,52258,52263,52264,52265,52268,52270,52272,52280,52281,52283,54845,54846,54847,54849,54850,54851,54852,54854,54855,54858,54860,54862,54863,54864,54866,54867,54870,54871,54873,54874,54875,54877,54878,54879,54880,54881,null,null,null,null,null,null,54882,54883,54884,54885,54886,54888,54890,54891,54892,54893,54894,54895,54898,54899,54901,54902,54903,54904,54905,54906,54907,54908,54909,54910,54911,54912,null,null,null,null,null,null,54913,54914,54916,54918,54919,54920,54921,54922,54923,54926,54927,54929,54930,54931,54933,54934,54935,54936,54937,54938,54939,54940,54942,54944,54946,54947,54948,54949,54950,54951,54953,54954,52284,52285,52286,52292,52293,52296,52300,52308,52309,52311,52312,52313,52320,52324,52326,52328,52336,52341,52376,52377,52380,52384,52392,52393,52395,52396,52397,52404,52405,52408,52412,52420,52421,52423,52425,52432,52436,52452,52460,52464,52481,52488,52489,52492,52496,52504,52505,52507,52509,52516,52520,52524,52537,52572,52576,52580,52588,52589,52591,52593,52600,52616,52628,52629,52632,52636,52644,52645,52647,52649,52656,52676,52684,52688,52712,52716,52720,52728,52729,52731,52733,52740,52744,52748,52756,52761,52768,52769,52772,52776,52784,52785,52787,52789,54955,54957,54958,54959,54961,54962,54963,54964,54965,54966,54967,54968,54970,54972,54973,54974,54975,54976,54977,54978,54979,54982,54983,54985,54986,54987,null,null,null,null,null,null,54989,54990,54991,54992,54994,54995,54997,54998,55e3,55002,55003,55004,55005,55006,55007,55009,55010,55011,55013,55014,55015,55017,55018,55019,55020,55021,null,null,null,null,null,null,55022,55023,55025,55026,55027,55028,55030,55031,55032,55033,55034,55035,55038,55039,55041,55042,55043,55045,55046,55047,55048,55049,55050,55051,55052,55053,55054,55055,55056,55058,55059,55060,52824,52825,52828,52831,52832,52833,52840,52841,52843,52845,52852,52853,52856,52860,52868,52869,52871,52873,52880,52881,52884,52888,52896,52897,52899,52900,52901,52908,52909,52929,52964,52965,52968,52971,52972,52980,52981,52983,52984,52985,52992,52993,52996,53e3,53008,53009,53011,53013,53020,53024,53028,53036,53037,53039,53040,53041,53048,53076,53077,53080,53084,53092,53093,53095,53097,53104,53105,53108,53112,53120,53125,53132,53153,53160,53168,53188,53216,53217,53220,53224,53232,53233,53235,53237,53244,53248,53252,53265,53272,53293,53300,53301,53304,53308,55061,55062,55063,55066,55067,55069,55070,55071,55073,55074,55075,55076,55077,55078,55079,55082,55084,55086,55087,55088,55089,55090,55091,55094,55095,55097,null,null,null,null,null,null,55098,55099,55101,55102,55103,55104,55105,55106,55107,55109,55110,55112,55114,55115,55116,55117,55118,55119,55122,55123,55125,55130,55131,55132,55133,55134,null,null,null,null,null,null,55135,55138,55140,55142,55143,55144,55146,55147,55149,55150,55151,55153,55154,55155,55157,55158,55159,55160,55161,55162,55163,55166,55167,55168,55170,55171,55172,55173,55174,55175,55178,55179,53316,53317,53319,53321,53328,53332,53336,53344,53356,53357,53360,53364,53372,53373,53377,53412,53413,53416,53420,53428,53429,53431,53433,53440,53441,53444,53448,53449,53456,53457,53459,53460,53461,53468,53469,53472,53476,53484,53485,53487,53488,53489,53496,53517,53552,53553,53556,53560,53562,53568,53569,53571,53572,53573,53580,53581,53584,53588,53596,53597,53599,53601,53608,53612,53628,53636,53640,53664,53665,53668,53672,53680,53681,53683,53685,53690,53692,53696,53720,53748,53752,53767,53769,53776,53804,53805,53808,53812,53820,53821,53823,53825,53832,53852,55181,55182,55183,55185,55186,55187,55188,55189,55190,55191,55194,55196,55198,55199,55200,55201,55202,55203,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,53860,53888,53889,53892,53896,53904,53905,53909,53916,53920,53924,53932,53937,53944,53945,53948,53951,53952,53954,53960,53961,53963,53972,53976,53980,53988,53989,54e3,54001,54004,54008,54016,54017,54019,54021,54028,54029,54030,54032,54036,54038,54044,54045,54047,54048,54049,54053,54056,54057,54060,54064,54072,54073,54075,54076,54077,54084,54085,54140,54141,54144,54148,54156,54157,54159,54160,54161,54168,54169,54172,54176,54184,54185,54187,54189,54196,54200,54204,54212,54213,54216,54217,54224,54232,54241,54243,54252,54253,54256,54260,54268,54269,54271,54273,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54280,54301,54336,54340,54364,54368,54372,54381,54383,54392,54393,54396,54399,54400,54402,54408,54409,54411,54413,54420,54441,54476,54480,54484,54492,54495,54504,54508,54512,54520,54523,54525,54532,54536,54540,54548,54549,54551,54588,54589,54592,54596,54604,54605,54607,54609,54616,54617,54620,54624,54629,54632,54633,54635,54637,54644,54645,54648,54652,54660,54661,54663,54664,54665,54672,54693,54728,54729,54732,54736,54738,54744,54745,54747,54749,54756,54757,54760,54764,54772,54773,54775,54777,54784,54785,54788,54792,54800,54801,54803,54804,54805,54812,54816,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54820,54829,54840,54841,54844,54848,54853,54856,54857,54859,54861,54865,54868,54869,54872,54876,54887,54889,54896,54897,54900,54915,54917,54924,54925,54928,54932,54941,54943,54945,54952,54956,54960,54969,54971,54980,54981,54984,54988,54993,54996,54999,55001,55008,55012,55016,55024,55029,55036,55037,55040,55044,55057,55064,55065,55068,55072,55080,55081,55083,55085,55092,55093,55096,55100,55108,55111,55113,55120,55121,55124,55126,55127,55128,55129,55136,55137,55139,55141,55145,55148,55152,55156,55164,55165,55169,55176,55177,55180,55184,55192,55193,55195,55197,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20285,20339,20551,20729,21152,21487,21621,21733,22025,23233,23478,26247,26550,26551,26607,27468,29634,30146,31292,33499,33540,34903,34952,35382,36040,36303,36603,36838,39381,21051,21364,21508,24682,24932,27580,29647,33050,35258,35282,38307,20355,21002,22718,22904,23014,24178,24185,25031,25536,26438,26604,26751,28567,30286,30475,30965,31240,31487,31777,32925,33390,33393,35563,38291,20075,21917,26359,28212,30883,31469,33883,35088,34638,38824,21208,22350,22570,23884,24863,25022,25121,25954,26577,27204,28187,29976,30131,30435,30640,32058,37039,37969,37970,40853,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21283,23724,30002,32987,37440,38296,21083,22536,23004,23713,23831,24247,24378,24394,24951,27743,30074,30086,31968,32115,32177,32652,33108,33313,34193,35137,35611,37628,38477,40007,20171,20215,20491,20977,22607,24887,24894,24936,25913,27114,28433,30117,30342,30422,31623,33445,33995,63744,37799,38283,21888,23458,22353,63745,31923,32697,37301,20520,21435,23621,24040,25298,25454,25818,25831,28192,28844,31067,36317,36382,63746,36989,37445,37624,20094,20214,20581,24062,24314,24838,26967,33137,34388,36423,37749,39467,20062,20625,26480,26688,20745,21133,21138,27298,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30652,37392,40660,21163,24623,36850,20552,25001,25581,25802,26684,27268,28608,33160,35233,38548,22533,29309,29356,29956,32121,32365,32937,35211,35700,36963,40273,25225,27770,28500,32080,32570,35363,20860,24906,31645,35609,37463,37772,20140,20435,20510,20670,20742,21185,21197,21375,22384,22659,24218,24465,24950,25004,25806,25964,26223,26299,26356,26775,28039,28805,28913,29855,29861,29898,30169,30828,30956,31455,31478,32069,32147,32789,32831,33051,33686,35686,36629,36885,37857,38915,38968,39514,39912,20418,21843,22586,22865,23395,23622,24760,25106,26690,26800,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26856,28330,30028,30328,30926,31293,31995,32363,32380,35336,35489,35903,38542,40388,21476,21481,21578,21617,22266,22993,23396,23611,24235,25335,25911,25925,25970,26272,26543,27073,27837,30204,30352,30590,31295,32660,32771,32929,33167,33510,33533,33776,34241,34865,34996,35493,63747,36764,37678,38599,39015,39640,40723,21741,26011,26354,26767,31296,35895,40288,22256,22372,23825,26118,26801,26829,28414,29736,34974,39908,27752,63748,39592,20379,20844,20849,21151,23380,24037,24656,24685,25329,25511,25915,29657,31354,34467,36002,38799,20018,23521,25096,26524,29916,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31185,33747,35463,35506,36328,36942,37707,38982,24275,27112,34303,37101,63749,20896,23448,23532,24931,26874,27454,28748,29743,29912,31649,32592,33733,35264,36011,38364,39208,21038,24669,25324,36866,20362,20809,21281,22745,24291,26336,27960,28826,29378,29654,31568,33009,37979,21350,25499,32619,20054,20608,22602,22750,24618,24871,25296,27088,39745,23439,32024,32945,36703,20132,20689,21676,21932,23308,23968,24039,25898,25934,26657,27211,29409,30350,30703,32094,32761,33184,34126,34527,36611,36686,37066,39171,39509,39851,19992,20037,20061,20167,20465,20855,21246,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21312,21475,21477,21646,22036,22389,22434,23495,23943,24272,25084,25304,25937,26552,26601,27083,27472,27590,27628,27714,28317,28792,29399,29590,29699,30655,30697,31350,32127,32777,33276,33285,33290,33503,34914,35635,36092,36544,36881,37041,37476,37558,39378,39493,40169,40407,40860,22283,23616,33738,38816,38827,40628,21531,31384,32676,35033,36557,37089,22528,23624,25496,31391,23470,24339,31353,31406,33422,36524,20518,21048,21240,21367,22280,25331,25458,27402,28099,30519,21413,29527,34152,36470,38357,26426,27331,28528,35437,36556,39243,63750,26231,27512,36020,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,39740,63751,21483,22317,22862,25542,27131,29674,30789,31418,31429,31998,33909,35215,36211,36917,38312,21243,22343,30023,31584,33740,37406,63752,27224,20811,21067,21127,25119,26840,26997,38553,20677,21156,21220,25027,26020,26681,27135,29822,31563,33465,33771,35250,35641,36817,39241,63753,20170,22935,25810,26129,27278,29748,31105,31165,33449,34942,34943,35167,63754,37670,20235,21450,24613,25201,27762,32026,32102,20120,20834,30684,32943,20225,20238,20854,20864,21980,22120,22331,22522,22524,22804,22855,22931,23492,23696,23822,24049,24190,24524,25216,26071,26083,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26398,26399,26462,26827,26820,27231,27450,27683,27773,27778,28103,29592,29734,29738,29826,29859,30072,30079,30849,30959,31041,31047,31048,31098,31637,32e3,32186,32648,32774,32813,32908,35352,35663,35912,36215,37665,37668,39138,39249,39438,39439,39525,40594,32202,20342,21513,25326,26708,37329,21931,20794,63755,63756,23068,25062,63757,25295,25343,63758,63759,63760,63761,63762,63763,37027,63764,63765,63766,63767,63768,35582,63769,63770,63771,63772,26262,63773,29014,63774,63775,38627,63776,25423,25466,21335,63777,26511,26976,28275,63778,30007,63779,63780,63781,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32013,63782,63783,34930,22218,23064,63784,63785,63786,63787,63788,20035,63789,20839,22856,26608,32784,63790,22899,24180,25754,31178,24565,24684,25288,25467,23527,23511,21162,63791,22900,24361,24594,63792,63793,63794,29785,63795,63796,63797,63798,63799,63800,39377,63801,63802,63803,63804,63805,63806,63807,63808,63809,63810,63811,28611,63812,63813,33215,36786,24817,63814,63815,33126,63816,63817,23615,63818,63819,63820,63821,63822,63823,63824,63825,23273,35365,26491,32016,63826,63827,63828,63829,63830,63831,33021,63832,63833,23612,27877,21311,28346,22810,33590,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20025,20150,20294,21934,22296,22727,24406,26039,26086,27264,27573,28237,30701,31471,31774,32222,34507,34962,37170,37723,25787,28606,29562,30136,36948,21846,22349,25018,25812,26311,28129,28251,28525,28601,30192,32835,33213,34113,35203,35527,35674,37663,27795,30035,31572,36367,36957,21776,22530,22616,24162,25095,25758,26848,30070,31958,34739,40680,20195,22408,22382,22823,23565,23729,24118,24453,25140,25825,29619,33274,34955,36024,38538,40667,23429,24503,24755,20498,20992,21040,22294,22581,22615,23566,23648,23798,23947,24230,24466,24764,25361,25481,25623,26691,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26873,27330,28120,28193,28372,28644,29182,30428,30585,31153,31291,33796,35241,36077,36339,36424,36867,36884,36947,37117,37709,38518,38876,27602,28678,29272,29346,29544,30563,31167,31716,32411,35712,22697,24775,25958,26109,26302,27788,28958,29129,35930,38931,20077,31361,20189,20908,20941,21205,21516,24999,26481,26704,26847,27934,28540,30140,30643,31461,33012,33891,37509,20828,26007,26460,26515,30168,31431,33651,63834,35910,36887,38957,23663,33216,33434,36929,36975,37389,24471,23965,27225,29128,30331,31561,34276,35588,37159,39472,21895,25078,63835,30313,32645,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34367,34746,35064,37007,63836,27931,28889,29662,32097,33853,63837,37226,39409,63838,20098,21365,27396,27410,28734,29211,34349,40478,21068,36771,23888,25829,25900,27414,28651,31811,32412,34253,35172,35261,25289,33240,34847,24266,26391,28010,29436,29701,29807,34690,37086,20358,23821,24480,33802,20919,25504,30053,20142,20486,20841,20937,26753,27153,31918,31921,31975,33391,35538,36635,37327,20406,20791,21237,21570,24300,24942,25150,26053,27354,28670,31018,34268,34851,38317,39522,39530,40599,40654,21147,26310,27511,28701,31019,36706,38722,24976,25088,25891,28451,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29001,29833,32244,32879,34030,36646,36899,37706,20925,21015,21155,27916,28872,35010,24265,25986,27566,28610,31806,29557,20196,20278,22265,63839,23738,23994,24604,29618,31533,32666,32718,32838,36894,37428,38646,38728,38936,40801,20363,28583,31150,37300,38583,21214,63840,25736,25796,27347,28510,28696,29200,30439,32769,34310,34396,36335,36613,38706,39791,40442,40565,30860,31103,32160,33737,37636,40575,40595,35542,22751,24324,26407,28711,29903,31840,32894,20769,28712,29282,30922,36034,36058,36084,38647,20102,20698,23534,24278,26009,29134,30274,30637,32842,34044,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36988,39719,40845,22744,23105,23650,27155,28122,28431,30267,32047,32311,34078,35128,37860,38475,21129,26066,26611,27060,27969,28316,28687,29705,29792,30041,30244,30827,35628,39006,20845,25134,38520,20374,20523,23833,28138,32184,36650,24459,24900,26647,63841,38534,21202,32907,20956,20940,26974,31260,32190,33777,38517,20442,21033,21400,21519,21774,23653,24743,26446,26792,28012,29313,29432,29702,29827,63842,30178,31852,32633,32696,33673,35023,35041,37324,37328,38626,39881,21533,28542,29136,29848,34298,36522,38563,40023,40607,26519,28107,29747,33256,38678,30764,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31435,31520,31890,25705,29802,30194,30908,30952,39340,39764,40635,23518,24149,28448,33180,33707,37e3,19975,21325,23081,24018,24398,24930,25405,26217,26364,28415,28459,28771,30622,33836,34067,34875,36627,39237,39995,21788,25273,26411,27819,33545,35178,38778,20129,22916,24536,24537,26395,32178,32596,33426,33579,33725,36638,37017,22475,22969,23186,23504,26151,26522,26757,27599,29028,32629,36023,36067,36993,39749,33032,35978,38476,39488,40613,23391,27667,29467,30450,30431,33804,20906,35219,20813,20885,21193,26825,27796,30468,30496,32191,32236,38754,40629,28357,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34065,20901,21517,21629,26126,26269,26919,28319,30399,30609,33559,33986,34719,37225,37528,40180,34946,20398,20882,21215,22982,24125,24917,25720,25721,26286,26576,27169,27597,27611,29279,29281,29761,30520,30683,32791,33468,33541,35584,35624,35980,26408,27792,29287,30446,30566,31302,40361,27519,27794,22818,26406,33945,21359,22675,22937,24287,25551,26164,26483,28218,29483,31447,33495,37672,21209,24043,25006,25035,25098,25287,25771,26080,26969,27494,27595,28961,29687,30045,32326,33310,33538,34154,35491,36031,38695,40289,22696,40664,20497,21006,21563,21839,25991,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27766,32010,32011,32862,34442,38272,38639,21247,27797,29289,21619,23194,23614,23883,24396,24494,26410,26806,26979,28220,28228,30473,31859,32654,34183,35598,36855,38753,40692,23735,24758,24845,25003,25935,26107,26108,27665,27887,29599,29641,32225,38292,23494,34588,35600,21085,21338,25293,25615,25778,26420,27192,27850,29632,29854,31636,31893,32283,33162,33334,34180,36843,38649,39361,20276,21322,21453,21467,25292,25644,25856,26001,27075,27886,28504,29677,30036,30242,30436,30460,30928,30971,31020,32070,33324,34784,36820,38930,39151,21187,25300,25765,28196,28497,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30332,36299,37297,37474,39662,39747,20515,20621,22346,22952,23592,24135,24439,25151,25918,26041,26049,26121,26507,27036,28354,30917,32033,32938,33152,33323,33459,33953,34444,35370,35607,37030,38450,40848,20493,20467,63843,22521,24472,25308,25490,26479,28227,28953,30403,32972,32986,35060,35061,35097,36064,36649,37197,38506,20271,20336,24091,26575,26658,30333,30334,39748,24161,27146,29033,29140,30058,63844,32321,34115,34281,39132,20240,31567,32624,38309,20961,24070,26805,27710,27726,27867,29359,31684,33539,27861,29754,20731,21128,22721,25816,27287,29863,30294,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30887,34327,38370,38713,63845,21342,24321,35722,36776,36783,37002,21029,30629,40009,40712,19993,20482,20853,23643,24183,26142,26170,26564,26821,28851,29953,30149,31177,31453,36647,39200,39432,20445,22561,22577,23542,26222,27493,27921,28282,28541,29668,29995,33769,35036,35091,35676,36628,20239,20693,21264,21340,23443,24489,26381,31119,33145,33583,34068,35079,35206,36665,36667,39333,39954,26412,20086,20472,22857,23553,23791,23792,25447,26834,28925,29090,29739,32299,34028,34562,36898,37586,40179,19981,20184,20463,20613,21078,21103,21542,21648,22496,22827,23142,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23386,23413,23500,24220,63846,25206,25975,26023,28014,28325,29238,31526,31807,32566,33104,33105,33178,33344,33433,33705,35331,36e3,36070,36091,36212,36282,37096,37340,38428,38468,39385,40167,21271,20998,21545,22132,22707,22868,22894,24575,24996,25198,26128,27774,28954,30406,31881,31966,32027,33452,36033,38640,63847,20315,24343,24447,25282,23849,26379,26842,30844,32323,40300,19989,20633,21269,21290,21329,22915,23138,24199,24754,24970,25161,25209,26e3,26503,27047,27604,27606,27607,27608,27832,63848,29749,30202,30738,30865,31189,31192,31875,32203,32737,32933,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,33086,33218,33778,34586,35048,35513,35692,36027,37145,38750,39131,40763,22188,23338,24428,25996,27315,27567,27996,28657,28693,29277,29613,36007,36051,38971,24977,27703,32856,39425,20045,20107,20123,20181,20282,20284,20351,20447,20735,21490,21496,21766,21987,22235,22763,22882,23057,23531,23546,23556,24051,24107,24473,24605,25448,26012,26031,26614,26619,26797,27515,27801,27863,28195,28681,29509,30722,31038,31040,31072,31169,31721,32023,32114,32902,33293,33678,34001,34503,35039,35408,35422,35613,36060,36198,36781,37034,39164,39391,40605,21066,63849,26388,63850,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20632,21034,23665,25955,27733,29642,29987,30109,31639,33948,37240,38704,20087,25746,27578,29022,34217,19977,63851,26441,26862,28183,33439,34072,34923,25591,28545,37394,39087,19978,20663,20687,20767,21830,21930,22039,23360,23577,23776,24120,24202,24224,24258,24819,26705,27233,28248,29245,29248,29376,30456,31077,31665,32724,35059,35316,35443,35937,36062,38684,22622,29885,36093,21959,63852,31329,32034,33394,29298,29983,29989,63853,31513,22661,22779,23996,24207,24246,24464,24661,25234,25471,25933,26257,26329,26360,26646,26866,29312,29790,31598,32110,32214,32626,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32997,33298,34223,35199,35475,36893,37604,40653,40736,22805,22893,24109,24796,26132,26227,26512,27728,28101,28511,30707,30889,33990,37323,37675,20185,20682,20808,21892,23307,23459,25159,25982,26059,28210,29053,29697,29764,29831,29887,30316,31146,32218,32341,32680,33146,33203,33337,34330,34796,35445,36323,36984,37521,37925,39245,39854,21352,23633,26964,27844,27945,28203,33292,34203,35131,35373,35498,38634,40807,21089,26297,27570,32406,34814,36109,38275,38493,25885,28041,29166,63854,22478,22995,23468,24615,24826,25104,26143,26207,29481,29689,30427,30465,31596,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32854,32882,33125,35488,37266,19990,21218,27506,27927,31237,31545,32048,63855,36016,21484,22063,22609,23477,23567,23569,24034,25152,25475,25620,26157,26803,27836,28040,28335,28703,28836,29138,29990,30095,30094,30233,31505,31712,31787,32032,32057,34092,34157,34311,35380,36877,36961,37045,37559,38902,39479,20439,23660,26463,28049,31903,32396,35606,36118,36895,23403,24061,25613,33984,36956,39137,29575,23435,24730,26494,28126,35359,35494,36865,38924,21047,63856,28753,30862,37782,34928,37335,20462,21463,22013,22234,22402,22781,23234,23432,23723,23744,24101,24833,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,25101,25163,25480,25628,25910,25976,27193,27530,27700,27929,28465,29159,29417,29560,29703,29874,30246,30561,31168,31319,31466,31929,32143,32172,32353,32670,33065,33585,33936,34010,34282,34966,35504,35728,36664,36930,36995,37228,37526,37561,38539,38567,38568,38614,38656,38920,39318,39635,39706,21460,22654,22809,23408,23487,28113,28506,29087,29729,29881,32901,33789,24033,24455,24490,24642,26092,26642,26991,27219,27529,27957,28147,29667,30462,30636,31565,32020,33059,33308,33600,34036,34147,35426,35524,37255,37662,38918,39348,25100,34899,36848,37477,23815,23847,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23913,29791,33181,34664,28629,25342,32722,35126,35186,19998,20056,20711,21213,21319,25215,26119,32361,34821,38494,20365,21273,22070,22987,23204,23608,23630,23629,24066,24337,24643,26045,26159,26178,26558,26612,29468,30690,31034,32709,33940,33997,35222,35430,35433,35553,35925,35962,22516,23508,24335,24687,25325,26893,27542,28252,29060,31698,34645,35672,36606,39135,39166,20280,20353,20449,21627,23072,23480,24892,26032,26216,29180,30003,31070,32051,33102,33251,33688,34218,34254,34563,35338,36523,36763,63857,36805,22833,23460,23526,24713,23529,23563,24515,27777,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63858,28145,28683,29978,33455,35574,20160,21313,63859,38617,27663,20126,20420,20818,21854,23077,23784,25105,29273,33469,33706,34558,34905,35357,38463,38597,39187,40201,40285,22538,23731,23997,24132,24801,24853,25569,27138,28197,37122,37716,38990,39952,40823,23433,23736,25353,26191,26696,30524,38593,38797,38996,39839,26017,35585,36555,38332,21813,23721,24022,24245,26263,30284,33780,38343,22739,25276,29390,40232,20208,22830,24591,26171,27523,31207,40230,21395,21696,22467,23830,24859,26326,28079,30861,33406,38552,38724,21380,25212,25494,28082,32266,33099,38989,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27387,32588,40367,40474,20063,20539,20918,22812,24825,25590,26928,29242,32822,63860,37326,24369,63861,63862,32004,33509,33903,33979,34277,36493,63863,20335,63864,63865,22756,23363,24665,25562,25880,25965,26264,63866,26954,27171,27915,28673,29036,30162,30221,31155,31344,63867,32650,63868,35140,63869,35731,37312,38525,63870,39178,22276,24481,26044,28417,30208,31142,35486,39341,39770,40812,20740,25014,25233,27277,33222,20547,22576,24422,28937,35328,35578,23420,34326,20474,20796,22196,22852,25513,28153,23978,26989,20870,20104,20313,63871,63872,63873,22914,63874,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63875,27487,27741,63876,29877,30998,63877,33287,33349,33593,36671,36701,63878,39192,63879,63880,63881,20134,63882,22495,24441,26131,63883,63884,30123,32377,35695,63885,36870,39515,22181,22567,23032,23071,23476,63886,24310,63887,63888,25424,25403,63889,26941,27783,27839,28046,28051,28149,28436,63890,28895,28982,29017,63891,29123,29141,63892,30799,30831,63893,31605,32227,63894,32303,63895,34893,36575,63896,63897,63898,37467,63899,40182,63900,63901,63902,24709,28037,63903,29105,63904,63905,38321,21421,63906,63907,63908,26579,63909,28814,28976,29744,33398,33490,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63910,38331,39653,40573,26308,63911,29121,33865,63912,63913,22603,63914,63915,23992,24433,63916,26144,26254,27001,27054,27704,27891,28214,28481,28634,28699,28719,29008,29151,29552,63917,29787,63918,29908,30408,31310,32403,63919,63920,33521,35424,36814,63921,37704,63922,38681,63923,63924,20034,20522,63925,21e3,21473,26355,27757,28618,29450,30591,31330,33454,34269,34306,63926,35028,35427,35709,35947,63927,37555,63928,38675,38928,20116,20237,20425,20658,21320,21566,21555,21978,22626,22714,22887,23067,23524,24735,63929,25034,25942,26111,26212,26791,27738,28595,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28879,29100,29522,31613,34568,35492,39986,40711,23627,27779,29508,29577,37434,28331,29797,30239,31337,32277,34314,20800,22725,25793,29934,29973,30320,32705,37013,38605,39252,28198,29926,31401,31402,33253,34521,34680,35355,23113,23436,23451,26785,26880,28003,29609,29715,29740,30871,32233,32747,33048,33109,33694,35916,38446,38929,26352,24448,26106,26505,27754,29579,20525,23043,27498,30702,22806,23916,24013,29477,30031,63930,63931,20709,20985,22575,22829,22934,23002,23525,63932,63933,23970,25303,25622,25747,25854,63934,26332,63935,27208,63936,29183,29796,63937,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31368,31407,32327,32350,32768,33136,63938,34799,35201,35616,36953,63939,36992,39250,24958,27442,28020,32287,35109,36785,20433,20653,20887,21191,22471,22665,23481,24248,24898,27029,28044,28263,28342,29076,29794,29992,29996,32883,33592,33993,36362,37780,37854,63940,20110,20305,20598,20778,21448,21451,21491,23431,23507,23588,24858,24962,26100,29275,29591,29760,30402,31056,31121,31161,32006,32701,33419,34261,34398,36802,36935,37109,37354,38533,38632,38633,21206,24423,26093,26161,26671,29020,31286,37057,38922,20113,63941,27218,27550,28560,29065,32792,33464,34131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36939,38549,38642,38907,34074,39729,20112,29066,38596,20803,21407,21729,22291,22290,22435,23195,23236,23491,24616,24895,25588,27781,27961,28274,28304,29232,29503,29783,33489,34945,36677,36960,63942,38498,39e3,40219,26376,36234,37470,20301,20553,20702,21361,22285,22996,23041,23561,24944,26256,28205,29234,29771,32239,32963,33806,33894,34111,34655,34907,35096,35586,36949,38859,39759,20083,20369,20754,20842,63943,21807,21929,23418,23461,24188,24189,24254,24736,24799,24840,24841,25540,25912,26377,63944,26580,26586,63945,26977,26978,27833,27943,63946,28216,63947,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28641,29494,29495,63948,29788,30001,63949,30290,63950,63951,32173,33278,33848,35029,35480,35547,35565,36400,36418,36938,36926,36986,37193,37321,37742,63952,63953,22537,63954,27603,32905,32946,63955,63956,20801,22891,23609,63957,63958,28516,29607,32996,36103,63959,37399,38287,63960,63961,63962,63963,32895,25102,28700,32104,34701,63964,22432,24681,24903,27575,35518,37504,38577,20057,21535,28139,34093,38512,38899,39150,25558,27875,37009,20957,25033,33210,40441,20381,20506,20736,23452,24847,25087,25836,26885,27589,30097,30691,32681,33380,34191,34811,34915,35516,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,35696,37291,20108,20197,20234,63965,63966,22839,23016,63967,24050,24347,24411,24609,63968,63969,63970,63971,29246,29669,63972,30064,30157,63973,31227,63974,32780,32819,32900,33505,33617,63975,63976,36029,36019,36999,63977,63978,39156,39180,63979,63980,28727,30410,32714,32716,32764,35610,20154,20161,20995,21360,63981,21693,22240,23035,23493,24341,24525,28270,63982,63983,32106,33589,63984,34451,35469,63985,38765,38775,63986,63987,19968,20314,20350,22777,26085,28322,36920,37808,39353,20219,22764,22922,23001,24641,63988,63989,31252,63990,33615,36035,20837,21316,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63991,63992,63993,20173,21097,23381,33471,20180,21050,21672,22985,23039,23376,23383,23388,24675,24904,28363,28825,29038,29574,29943,30133,30913,32043,32773,33258,33576,34071,34249,35566,36039,38604,20316,21242,22204,26027,26152,28796,28856,29237,32189,33421,37196,38592,40306,23409,26855,27544,28538,30430,23697,26283,28507,31668,31786,34870,38620,19976,20183,21280,22580,22715,22767,22892,23559,24115,24196,24373,25484,26290,26454,27167,27299,27404,28479,29254,63994,29520,29835,31456,31911,33144,33247,33255,33674,33900,34083,34196,34255,35037,36115,37292,38263,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38556,20877,21705,22312,23472,25165,26448,26685,26771,28221,28371,28797,32289,35009,36001,36617,40779,40782,29229,31631,35533,37658,20295,20302,20786,21632,22992,24213,25269,26485,26990,27159,27822,28186,29401,29482,30141,31672,32053,33511,33785,33879,34295,35419,36015,36487,36889,37048,38606,40799,21219,21514,23265,23490,25688,25973,28404,29380,63995,30340,31309,31515,31821,32318,32735,33659,35627,36042,36196,36321,36447,36842,36857,36969,37841,20291,20346,20659,20840,20856,21069,21098,22625,22652,22880,23560,23637,24283,24731,25136,26643,27583,27656,28593,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29006,29728,3e4,30008,30033,30322,31564,31627,31661,31686,32399,35438,36670,36681,37439,37523,37666,37931,38651,39002,39019,39198,20999,25130,25240,27993,30308,31434,31680,32118,21344,23742,24215,28472,28857,31896,38673,39822,40670,25509,25722,34678,19969,20117,20141,20572,20597,21576,22979,23450,24128,24237,24311,24449,24773,25402,25919,25972,26060,26230,26232,26622,26984,27273,27491,27712,28096,28136,28191,28254,28702,28833,29582,29693,30010,30555,30855,31118,31243,31357,31934,32142,33351,35330,35562,35998,37165,37194,37336,37478,37580,37664,38662,38742,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38748,38914,40718,21046,21137,21884,22564,24093,24351,24716,25552,26799,28639,31085,31532,33229,34234,35069,35576,36420,37261,38500,38555,38717,38988,40778,20430,20806,20939,21161,22066,24340,24427,25514,25805,26089,26177,26362,26361,26397,26781,26839,27133,28437,28526,29031,29157,29226,29866,30522,31062,31066,31199,31264,31381,31895,31967,32068,32368,32903,34299,34468,35412,35519,36249,36481,36896,36973,37347,38459,38613,40165,26063,31751,36275,37827,23384,23562,21330,25305,29469,20519,23447,24478,24752,24939,26837,28121,29742,31278,32066,32156,32305,33131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36394,36405,37758,37912,20304,22352,24038,24231,25387,32618,20027,20303,20367,20570,23005,32964,21610,21608,22014,22863,23449,24030,24282,26205,26417,26609,26666,27880,27954,28234,28557,28855,29664,30087,31820,32002,32044,32162,33311,34523,35387,35461,36208,36490,36659,36913,37198,37202,37956,39376,31481,31909,20426,20737,20934,22472,23535,23803,26201,27197,27994,28310,28652,28940,30063,31459,34850,36897,36981,38603,39423,33537,20013,20210,34886,37325,21373,27355,26987,27713,33914,22686,24974,26366,25327,28893,29969,30151,32338,33976,35657,36104,20043,21482,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21675,22320,22336,24535,25345,25351,25711,25903,26088,26234,26525,26547,27490,27744,27802,28460,30693,30757,31049,31063,32025,32930,33026,33267,33437,33463,34584,35468,63996,36100,36286,36978,30452,31257,31287,32340,32887,21767,21972,22645,25391,25634,26185,26187,26733,27035,27524,27941,28337,29645,29800,29857,30043,30137,30433,30494,30603,31206,32265,32285,33275,34095,34967,35386,36049,36587,36784,36914,37805,38499,38515,38663,20356,21489,23018,23241,24089,26702,29894,30142,31209,31378,33187,34541,36074,36300,36845,26015,26389,63997,22519,28503,32221,36655,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37878,38598,24501,25074,28548,19988,20376,20511,21449,21983,23919,24046,27425,27492,30923,31642,63998,36425,36554,36974,25417,25662,30528,31364,37679,38015,40810,25776,28591,29158,29864,29914,31428,31762,32386,31922,32408,35738,36106,38013,39184,39244,21049,23519,25830,26413,32046,20717,21443,22649,24920,24921,25082,26028,31449,35730,35734,20489,20513,21109,21809,23100,24288,24432,24884,25950,26124,26166,26274,27085,28356,28466,29462,30241,31379,33081,33369,33750,33980,20661,22512,23488,23528,24425,25505,30758,32181,33756,34081,37319,37365,20874,26613,31574,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36012,20932,22971,24765,34389,20508,63999,21076,23610,24957,25114,25299,25842,26021,28364,30240,33034,36448,38495,38587,20191,21315,21912,22825,24029,25797,27849,28154,29588,31359,33307,34214,36068,36368,36983,37351,38369,38433,38854,20984,21746,21894,24505,25764,28552,32180,36639,36685,37941,20681,23574,27838,28155,29979,30651,31805,31844,35449,35522,22558,22974,24086,25463,29266,30090,30571,35548,36028,36626,24307,26228,28152,32893,33729,35531,38737,39894,64e3,21059,26367,28053,28399,32224,35558,36910,36958,39636,21021,21119,21736,24980,25220,25307,26786,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26898,26970,27189,28818,28966,30813,30977,30990,31186,31245,32918,33400,33493,33609,34121,35970,36229,37218,37259,37294,20419,22225,29165,30679,34560,35320,23544,24534,26449,37032,21474,22618,23541,24740,24961,25696,32317,32880,34085,37507,25774,20652,23828,26368,22684,25277,25512,26894,27e3,27166,28267,30394,31179,33467,33833,35535,36264,36861,37138,37195,37276,37648,37656,37786,38619,39478,39949,19985,30044,31069,31482,31569,31689,32302,33988,36441,36468,36600,36880,26149,26943,29763,20986,26414,40668,20805,24544,27798,34802,34909,34935,24756,33205,33795,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36101,21462,21561,22068,23094,23601,28810,32736,32858,33030,33261,36259,37257,39519,40434,20596,20164,21408,24827,28204,23652,20360,20516,21988,23769,24159,24677,26772,27835,28100,29118,30164,30196,30305,31258,31305,32199,32251,32622,33268,34473,36636,38601,39347,40786,21063,21189,39149,35242,19971,26578,28422,20405,23522,26517,27784,28024,29723,30759,37341,37756,34756,31204,31281,24555,20182,21668,21822,22702,22949,24816,25171,25302,26422,26965,33333,38464,39345,39389,20524,21331,21828,22396,64001,25176,64002,25826,26219,26589,28609,28655,29730,29752,35351,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37944,21585,22022,22374,24392,24986,27470,28760,28845,32187,35477,22890,33067,25506,30472,32829,36010,22612,25645,27067,23445,24081,28271,64003,34153,20812,21488,22826,24608,24907,27526,27760,27888,31518,32974,33492,36294,37040,39089,64004,25799,28580,25745,25860,20814,21520,22303,35342,24927,26742,64005,30171,31570,32113,36890,22534,27084,33151,35114,36864,38969,20600,22871,22956,25237,36879,39722,24925,29305,38358,22369,23110,24052,25226,25773,25850,26487,27874,27966,29228,29750,30772,32631,33453,36315,38935,21028,22338,26495,29256,29923,36009,36774,37393,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38442,20843,21485,25420,20329,21764,24726,25943,27803,28031,29260,29437,31255,35207,35997,24429,28558,28921,33192,24846,20415,20559,25153,29255,31687,32232,32745,36941,38829,39449,36022,22378,24179,26544,33805,35413,21536,23318,24163,24290,24330,25987,32954,34109,38281,38491,20296,21253,21261,21263,21638,21754,22275,24067,24598,25243,25265,25429,64006,27873,28006,30129,30770,32990,33071,33502,33889,33970,34957,35090,36875,37610,39165,39825,24133,26292,26333,28689,29190,64007,20469,21117,24426,24915,26451,27161,28418,29922,31080,34920,35961,39111,39108,39491,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21697,31263,26963,35575,35914,39080,39342,24444,25259,30130,30382,34987,36991,38466,21305,24380,24517,27852,29644,30050,30091,31558,33534,39325,20047,36924,19979,20309,21414,22799,24264,26160,27827,29781,33655,34662,36032,36944,38686,39957,22737,23416,34384,35604,40372,23506,24680,24717,26097,27735,28450,28579,28698,32597,32752,38289,38290,38480,38867,21106,36676,20989,21547,21688,21859,21898,27323,28085,32216,33382,37532,38519,40569,21512,21704,30418,34532,38308,38356,38492,20130,20233,23022,23270,24055,24658,25239,26477,26689,27782,28207,32568,32923,33322,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,64008,64009,38917,20133,20565,21683,22419,22874,23401,23475,25032,26999,28023,28707,34809,35299,35442,35559,36994,39405,39608,21182,26680,20502,24184,26447,33607,34892,20139,21521,22190,29670,37141,38911,39177,39255,39321,22099,22687,34395,35377,25010,27382,29563,36562,27463,38570,39511,22869,29184,36203,38761,20436,23796,24358,25080,26203,27883,28843,29572,29625,29694,30505,30541,32067,32098,32291,33335,34898,64010,36066,37449,39023,23377,31348,34880,38913,23244,20448,21332,22846,23805,25406,28025,29433,33029,33031,33698,37583,38960,20136,20804,21009,22411,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24418,27842,28366,28677,28752,28847,29074,29673,29801,33610,34722,34913,36872,37026,37795,39336,20846,24407,24800,24935,26291,34137,36426,37295,38795,20046,20114,21628,22741,22778,22909,23733,24359,25142,25160,26122,26215,27627,28009,28111,28246,28408,28564,28640,28649,28765,29392,29733,29786,29920,30355,31068,31946,32286,32993,33446,33899,33983,34382,34399,34676,35703,35946,37804,38912,39013,24785,25110,37239,23130,26127,28151,28222,29759,39746,24573,24794,31503,21700,24344,27742,27859,27946,28888,32005,34425,35340,40251,21270,21644,23301,27194,28779,30069,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31117,31166,33457,33775,35441,35649,36008,38772,64011,25844,25899,30906,30907,31339,20024,21914,22864,23462,24187,24739,25563,27489,26213,26707,28185,29029,29872,32008,36996,39529,39973,27963,28369,29502,35905,38346,20976,24140,24488,24653,24822,24880,24908,26179,26180,27045,27841,28255,28361,28514,29004,29852,30343,31681,31783,33618,34647,36945,38541,40643,21295,22238,24315,24458,24674,24724,25079,26214,26371,27292,28142,28590,28784,29546,32362,33214,33588,34516,35496,36036,21123,29554,23446,27243,37892,21742,22150,23389,25928,25989,26313,26783,28045,28102,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29243,32948,37237,39501,20399,20505,21402,21518,21564,21897,21957,24127,24460,26429,29030,29661,36869,21211,21235,22628,22734,28932,29071,29179,34224,35347,26248,34216,21927,26244,29002,33841,21321,21913,27585,24409,24509,25582,26249,28999,35569,36637,40638,20241,25658,28875,30054,34407,24676,35662,40440,20807,20982,21256,27958,33016,40657,26133,27427,28824,30165,21507,23673,32007,35350,27424,27453,27462,21560,24688,27965,32725,33288,20694,20958,21916,22123,22221,23020,23305,24076,24985,24984,25137,26206,26342,29081,29113,29114,29351,31143,31232,32690,35440,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],gb18030:[19970,19972,19973,19974,19983,19986,19991,19999,2e4,20001,20003,20006,20009,20014,20015,20017,20019,20021,20023,20028,20032,20033,20034,20036,20038,20042,20049,20053,20055,20058,20059,20066,20067,20068,20069,20071,20072,20074,20075,20076,20077,20078,20079,20082,20084,20085,20086,20087,20088,20089,20090,20091,20092,20093,20095,20096,20097,20098,20099,20100,20101,20103,20106,20112,20118,20119,20121,20124,20125,20126,20131,20138,20143,20144,20145,20148,20150,20151,20152,20153,20156,20157,20158,20168,20172,20175,20176,20178,20186,20187,20188,20192,20194,20198,20199,20201,20205,20206,20207,20209,20212,20216,20217,20218,20220,20222,20224,20226,20227,20228,20229,20230,20231,20232,20235,20236,20242,20243,20244,20245,20246,20252,20253,20257,20259,20264,20265,20268,20269,20270,20273,20275,20277,20279,20281,20283,20286,20287,20288,20289,20290,20292,20293,20295,20296,20297,20298,20299,20300,20306,20308,20310,20321,20322,20326,20328,20330,20331,20333,20334,20337,20338,20341,20343,20344,20345,20346,20349,20352,20353,20354,20357,20358,20359,20362,20364,20366,20368,20370,20371,20373,20374,20376,20377,20378,20380,20382,20383,20385,20386,20388,20395,20397,20400,20401,20402,20403,20404,20406,20407,20408,20409,20410,20411,20412,20413,20414,20416,20417,20418,20422,20423,20424,20425,20427,20428,20429,20434,20435,20436,20437,20438,20441,20443,20448,20450,20452,20453,20455,20459,20460,20464,20466,20468,20469,20470,20471,20473,20475,20476,20477,20479,20480,20481,20482,20483,20484,20485,20486,20487,20488,20489,20490,20491,20494,20496,20497,20499,20501,20502,20503,20507,20509,20510,20512,20514,20515,20516,20519,20523,20527,20528,20529,20530,20531,20532,20533,20534,20535,20536,20537,20539,20541,20543,20544,20545,20546,20548,20549,20550,20553,20554,20555,20557,20560,20561,20562,20563,20564,20566,20567,20568,20569,20571,20573,20574,20575,20576,20577,20578,20579,20580,20582,20583,20584,20585,20586,20587,20589,20590,20591,20592,20593,20594,20595,20596,20597,20600,20601,20602,20604,20605,20609,20610,20611,20612,20614,20615,20617,20618,20619,20620,20622,20623,20624,20625,20626,20627,20628,20629,20630,20631,20632,20633,20634,20635,20636,20637,20638,20639,20640,20641,20642,20644,20646,20650,20651,20653,20654,20655,20656,20657,20659,20660,20661,20662,20663,20664,20665,20668,20669,20670,20671,20672,20673,20674,20675,20676,20677,20678,20679,20680,20681,20682,20683,20684,20685,20686,20688,20689,20690,20691,20692,20693,20695,20696,20697,20699,20700,20701,20702,20703,20704,20705,20706,20707,20708,20709,20712,20713,20714,20715,20719,20720,20721,20722,20724,20726,20727,20728,20729,20730,20732,20733,20734,20735,20736,20737,20738,20739,20740,20741,20744,20745,20746,20748,20749,20750,20751,20752,20753,20755,20756,20757,20758,20759,20760,20761,20762,20763,20764,20765,20766,20767,20768,20770,20771,20772,20773,20774,20775,20776,20777,20778,20779,20780,20781,20782,20783,20784,20785,20786,20787,20788,20789,20790,20791,20792,20793,20794,20795,20796,20797,20798,20802,20807,20810,20812,20814,20815,20816,20818,20819,20823,20824,20825,20827,20829,20830,20831,20832,20833,20835,20836,20838,20839,20841,20842,20847,20850,20858,20862,20863,20867,20868,20870,20871,20874,20875,20878,20879,20880,20881,20883,20884,20888,20890,20893,20894,20895,20897,20899,20902,20903,20904,20905,20906,20909,20910,20916,20920,20921,20922,20926,20927,20929,20930,20931,20933,20936,20938,20941,20942,20944,20946,20947,20948,20949,20950,20951,20952,20953,20954,20956,20958,20959,20962,20963,20965,20966,20967,20968,20969,20970,20972,20974,20977,20978,20980,20983,20990,20996,20997,21001,21003,21004,21007,21008,21011,21012,21013,21020,21022,21023,21025,21026,21027,21029,21030,21031,21034,21036,21039,21041,21042,21044,21045,21052,21054,21060,21061,21062,21063,21064,21065,21067,21070,21071,21074,21075,21077,21079,21080,21081,21082,21083,21085,21087,21088,21090,21091,21092,21094,21096,21099,21100,21101,21102,21104,21105,21107,21108,21109,21110,21111,21112,21113,21114,21115,21116,21118,21120,21123,21124,21125,21126,21127,21129,21130,21131,21132,21133,21134,21135,21137,21138,21140,21141,21142,21143,21144,21145,21146,21148,21156,21157,21158,21159,21166,21167,21168,21172,21173,21174,21175,21176,21177,21178,21179,21180,21181,21184,21185,21186,21188,21189,21190,21192,21194,21196,21197,21198,21199,21201,21203,21204,21205,21207,21209,21210,21211,21212,21213,21214,21216,21217,21218,21219,21221,21222,21223,21224,21225,21226,21227,21228,21229,21230,21231,21233,21234,21235,21236,21237,21238,21239,21240,21243,21244,21245,21249,21250,21251,21252,21255,21257,21258,21259,21260,21262,21265,21266,21267,21268,21272,21275,21276,21278,21279,21282,21284,21285,21287,21288,21289,21291,21292,21293,21295,21296,21297,21298,21299,21300,21301,21302,21303,21304,21308,21309,21312,21314,21316,21318,21323,21324,21325,21328,21332,21336,21337,21339,21341,21349,21352,21354,21356,21357,21362,21366,21369,21371,21372,21373,21374,21376,21377,21379,21383,21384,21386,21390,21391,21392,21393,21394,21395,21396,21398,21399,21401,21403,21404,21406,21408,21409,21412,21415,21418,21419,21420,21421,21423,21424,21425,21426,21427,21428,21429,21431,21432,21433,21434,21436,21437,21438,21440,21443,21444,21445,21446,21447,21454,21455,21456,21458,21459,21461,21466,21468,21469,21470,21473,21474,21479,21492,21498,21502,21503,21504,21506,21509,21511,21515,21524,21528,21529,21530,21532,21538,21540,21541,21546,21552,21555,21558,21559,21562,21565,21567,21569,21570,21572,21573,21575,21577,21580,21581,21582,21583,21585,21594,21597,21598,21599,21600,21601,21603,21605,21607,21609,21610,21611,21612,21613,21614,21615,21616,21620,21625,21626,21630,21631,21633,21635,21637,21639,21640,21641,21642,21645,21649,21651,21655,21656,21660,21662,21663,21664,21665,21666,21669,21678,21680,21682,21685,21686,21687,21689,21690,21692,21694,21699,21701,21706,21707,21718,21720,21723,21728,21729,21730,21731,21732,21739,21740,21743,21744,21745,21748,21749,21750,21751,21752,21753,21755,21758,21760,21762,21763,21764,21765,21768,21770,21771,21772,21773,21774,21778,21779,21781,21782,21783,21784,21785,21786,21788,21789,21790,21791,21793,21797,21798,21800,21801,21803,21805,21810,21812,21813,21814,21816,21817,21818,21819,21821,21824,21826,21829,21831,21832,21835,21836,21837,21838,21839,21841,21842,21843,21844,21847,21848,21849,21850,21851,21853,21854,21855,21856,21858,21859,21864,21865,21867,21871,21872,21873,21874,21875,21876,21881,21882,21885,21887,21893,21894,21900,21901,21902,21904,21906,21907,21909,21910,21911,21914,21915,21918,21920,21921,21922,21923,21924,21925,21926,21928,21929,21930,21931,21932,21933,21934,21935,21936,21938,21940,21942,21944,21946,21948,21951,21952,21953,21954,21955,21958,21959,21960,21962,21963,21966,21967,21968,21973,21975,21976,21977,21978,21979,21982,21984,21986,21991,21993,21997,21998,22e3,22001,22004,22006,22008,22009,22010,22011,22012,22015,22018,22019,22020,22021,22022,22023,22026,22027,22029,22032,22033,22034,22035,22036,22037,22038,22039,22041,22042,22044,22045,22048,22049,22050,22053,22054,22056,22057,22058,22059,22062,22063,22064,22067,22069,22071,22072,22074,22076,22077,22078,22080,22081,22082,22083,22084,22085,22086,22087,22088,22089,22090,22091,22095,22096,22097,22098,22099,22101,22102,22106,22107,22109,22110,22111,22112,22113,22115,22117,22118,22119,22125,22126,22127,22128,22130,22131,22132,22133,22135,22136,22137,22138,22141,22142,22143,22144,22145,22146,22147,22148,22151,22152,22153,22154,22155,22156,22157,22160,22161,22162,22164,22165,22166,22167,22168,22169,22170,22171,22172,22173,22174,22175,22176,22177,22178,22180,22181,22182,22183,22184,22185,22186,22187,22188,22189,22190,22192,22193,22194,22195,22196,22197,22198,22200,22201,22202,22203,22205,22206,22207,22208,22209,22210,22211,22212,22213,22214,22215,22216,22217,22219,22220,22221,22222,22223,22224,22225,22226,22227,22229,22230,22232,22233,22236,22243,22245,22246,22247,22248,22249,22250,22252,22254,22255,22258,22259,22262,22263,22264,22267,22268,22272,22273,22274,22277,22279,22283,22284,22285,22286,22287,22288,22289,22290,22291,22292,22293,22294,22295,22296,22297,22298,22299,22301,22302,22304,22305,22306,22308,22309,22310,22311,22315,22321,22322,22324,22325,22326,22327,22328,22332,22333,22335,22337,22339,22340,22341,22342,22344,22345,22347,22354,22355,22356,22357,22358,22360,22361,22370,22371,22373,22375,22380,22382,22384,22385,22386,22388,22389,22392,22393,22394,22397,22398,22399,22400,22401,22407,22408,22409,22410,22413,22414,22415,22416,22417,22420,22421,22422,22423,22424,22425,22426,22428,22429,22430,22431,22437,22440,22442,22444,22447,22448,22449,22451,22453,22454,22455,22457,22458,22459,22460,22461,22462,22463,22464,22465,22468,22469,22470,22471,22472,22473,22474,22476,22477,22480,22481,22483,22486,22487,22491,22492,22494,22497,22498,22499,22501,22502,22503,22504,22505,22506,22507,22508,22510,22512,22513,22514,22515,22517,22518,22519,22523,22524,22526,22527,22529,22531,22532,22533,22536,22537,22538,22540,22542,22543,22544,22546,22547,22548,22550,22551,22552,22554,22555,22556,22557,22559,22562,22563,22565,22566,22567,22568,22569,22571,22572,22573,22574,22575,22577,22578,22579,22580,22582,22583,22584,22585,22586,22587,22588,22589,22590,22591,22592,22593,22594,22595,22597,22598,22599,22600,22601,22602,22603,22606,22607,22608,22610,22611,22613,22614,22615,22617,22618,22619,22620,22621,22623,22624,22625,22626,22627,22628,22630,22631,22632,22633,22634,22637,22638,22639,22640,22641,22642,22643,22644,22645,22646,22647,22648,22649,22650,22651,22652,22653,22655,22658,22660,22662,22663,22664,22666,22667,22668,22669,22670,22671,22672,22673,22676,22677,22678,22679,22680,22683,22684,22685,22688,22689,22690,22691,22692,22693,22694,22695,22698,22699,22700,22701,22702,22703,22704,22705,22706,22707,22708,22709,22710,22711,22712,22713,22714,22715,22717,22718,22719,22720,22722,22723,22724,22726,22727,22728,22729,22730,22731,22732,22733,22734,22735,22736,22738,22739,22740,22742,22743,22744,22745,22746,22747,22748,22749,22750,22751,22752,22753,22754,22755,22757,22758,22759,22760,22761,22762,22765,22767,22769,22770,22772,22773,22775,22776,22778,22779,22780,22781,22782,22783,22784,22785,22787,22789,22790,22792,22793,22794,22795,22796,22798,22800,22801,22802,22803,22807,22808,22811,22813,22814,22816,22817,22818,22819,22822,22824,22828,22832,22834,22835,22837,22838,22843,22845,22846,22847,22848,22851,22853,22854,22858,22860,22861,22864,22866,22867,22873,22875,22876,22877,22878,22879,22881,22883,22884,22886,22887,22888,22889,22890,22891,22892,22893,22894,22895,22896,22897,22898,22901,22903,22906,22907,22908,22910,22911,22912,22917,22921,22923,22924,22926,22927,22928,22929,22932,22933,22936,22938,22939,22940,22941,22943,22944,22945,22946,22950,22951,22956,22957,22960,22961,22963,22964,22965,22966,22967,22968,22970,22972,22973,22975,22976,22977,22978,22979,22980,22981,22983,22984,22985,22988,22989,22990,22991,22997,22998,23001,23003,23006,23007,23008,23009,23010,23012,23014,23015,23017,23018,23019,23021,23022,23023,23024,23025,23026,23027,23028,23029,23030,23031,23032,23034,23036,23037,23038,23040,23042,23050,23051,23053,23054,23055,23056,23058,23060,23061,23062,23063,23065,23066,23067,23069,23070,23073,23074,23076,23078,23079,23080,23082,23083,23084,23085,23086,23087,23088,23091,23093,23095,23096,23097,23098,23099,23101,23102,23103,23105,23106,23107,23108,23109,23111,23112,23115,23116,23117,23118,23119,23120,23121,23122,23123,23124,23126,23127,23128,23129,23131,23132,23133,23134,23135,23136,23137,23139,23140,23141,23142,23144,23145,23147,23148,23149,23150,23151,23152,23153,23154,23155,23160,23161,23163,23164,23165,23166,23168,23169,23170,23171,23172,23173,23174,23175,23176,23177,23178,23179,23180,23181,23182,23183,23184,23185,23187,23188,23189,23190,23191,23192,23193,23196,23197,23198,23199,23200,23201,23202,23203,23204,23205,23206,23207,23208,23209,23211,23212,23213,23214,23215,23216,23217,23220,23222,23223,23225,23226,23227,23228,23229,23231,23232,23235,23236,23237,23238,23239,23240,23242,23243,23245,23246,23247,23248,23249,23251,23253,23255,23257,23258,23259,23261,23262,23263,23266,23268,23269,23271,23272,23274,23276,23277,23278,23279,23280,23282,23283,23284,23285,23286,23287,23288,23289,23290,23291,23292,23293,23294,23295,23296,23297,23298,23299,23300,23301,23302,23303,23304,23306,23307,23308,23309,23310,23311,23312,23313,23314,23315,23316,23317,23320,23321,23322,23323,23324,23325,23326,23327,23328,23329,23330,23331,23332,23333,23334,23335,23336,23337,23338,23339,23340,23341,23342,23343,23344,23345,23347,23349,23350,23352,23353,23354,23355,23356,23357,23358,23359,23361,23362,23363,23364,23365,23366,23367,23368,23369,23370,23371,23372,23373,23374,23375,23378,23382,23390,23392,23393,23399,23400,23403,23405,23406,23407,23410,23412,23414,23415,23416,23417,23419,23420,23422,23423,23426,23430,23434,23437,23438,23440,23441,23442,23444,23446,23455,23463,23464,23465,23468,23469,23470,23471,23473,23474,23479,23482,23483,23484,23488,23489,23491,23496,23497,23498,23499,23501,23502,23503,23505,23508,23509,23510,23511,23512,23513,23514,23515,23516,23520,23522,23523,23526,23527,23529,23530,23531,23532,23533,23535,23537,23538,23539,23540,23541,23542,23543,23549,23550,23552,23554,23555,23557,23559,23560,23563,23564,23565,23566,23568,23570,23571,23575,23577,23579,23582,23583,23584,23585,23587,23590,23592,23593,23594,23595,23597,23598,23599,23600,23602,23603,23605,23606,23607,23619,23620,23622,23623,23628,23629,23634,23635,23636,23638,23639,23640,23642,23643,23644,23645,23647,23650,23652,23655,23656,23657,23658,23659,23660,23661,23664,23666,23667,23668,23669,23670,23671,23672,23675,23676,23677,23678,23680,23683,23684,23685,23686,23687,23689,23690,23691,23694,23695,23698,23699,23701,23709,23710,23711,23712,23713,23716,23717,23718,23719,23720,23722,23726,23727,23728,23730,23732,23734,23737,23738,23739,23740,23742,23744,23746,23747,23749,23750,23751,23752,23753,23754,23756,23757,23758,23759,23760,23761,23763,23764,23765,23766,23767,23768,23770,23771,23772,23773,23774,23775,23776,23778,23779,23783,23785,23787,23788,23790,23791,23793,23794,23795,23796,23797,23798,23799,23800,23801,23802,23804,23805,23806,23807,23808,23809,23812,23813,23816,23817,23818,23819,23820,23821,23823,23824,23825,23826,23827,23829,23831,23832,23833,23834,23836,23837,23839,23840,23841,23842,23843,23845,23848,23850,23851,23852,23855,23856,23857,23858,23859,23861,23862,23863,23864,23865,23866,23867,23868,23871,23872,23873,23874,23875,23876,23877,23878,23880,23881,23885,23886,23887,23888,23889,23890,23891,23892,23893,23894,23895,23897,23898,23900,23902,23903,23904,23905,23906,23907,23908,23909,23910,23911,23912,23914,23917,23918,23920,23921,23922,23923,23925,23926,23927,23928,23929,23930,23931,23932,23933,23934,23935,23936,23937,23939,23940,23941,23942,23943,23944,23945,23946,23947,23948,23949,23950,23951,23952,23953,23954,23955,23956,23957,23958,23959,23960,23962,23963,23964,23966,23967,23968,23969,23970,23971,23972,23973,23974,23975,23976,23977,23978,23979,23980,23981,23982,23983,23984,23985,23986,23987,23988,23989,23990,23992,23993,23994,23995,23996,23997,23998,23999,24e3,24001,24002,24003,24004,24006,24007,24008,24009,24010,24011,24012,24014,24015,24016,24017,24018,24019,24020,24021,24022,24023,24024,24025,24026,24028,24031,24032,24035,24036,24042,24044,24045,24048,24053,24054,24056,24057,24058,24059,24060,24063,24064,24068,24071,24073,24074,24075,24077,24078,24082,24083,24087,24094,24095,24096,24097,24098,24099,24100,24101,24104,24105,24106,24107,24108,24111,24112,24114,24115,24116,24117,24118,24121,24122,24126,24127,24128,24129,24131,24134,24135,24136,24137,24138,24139,24141,24142,24143,24144,24145,24146,24147,24150,24151,24152,24153,24154,24156,24157,24159,24160,24163,24164,24165,24166,24167,24168,24169,24170,24171,24172,24173,24174,24175,24176,24177,24181,24183,24185,24190,24193,24194,24195,24197,24200,24201,24204,24205,24206,24210,24216,24219,24221,24225,24226,24227,24228,24232,24233,24234,24235,24236,24238,24239,24240,24241,24242,24244,24250,24251,24252,24253,24255,24256,24257,24258,24259,24260,24261,24262,24263,24264,24267,24268,24269,24270,24271,24272,24276,24277,24279,24280,24281,24282,24284,24285,24286,24287,24288,24289,24290,24291,24292,24293,24294,24295,24297,24299,24300,24301,24302,24303,24304,24305,24306,24307,24309,24312,24313,24315,24316,24317,24325,24326,24327,24329,24332,24333,24334,24336,24338,24340,24342,24345,24346,24348,24349,24350,24353,24354,24355,24356,24360,24363,24364,24366,24368,24370,24371,24372,24373,24374,24375,24376,24379,24381,24382,24383,24385,24386,24387,24388,24389,24390,24391,24392,24393,24394,24395,24396,24397,24398,24399,24401,24404,24409,24410,24411,24412,24414,24415,24416,24419,24421,24423,24424,24427,24430,24431,24434,24436,24437,24438,24440,24442,24445,24446,24447,24451,24454,24461,24462,24463,24465,24467,24468,24470,24474,24475,24477,24478,24479,24480,24482,24483,24484,24485,24486,24487,24489,24491,24492,24495,24496,24497,24498,24499,24500,24502,24504,24505,24506,24507,24510,24511,24512,24513,24514,24519,24520,24522,24523,24526,24531,24532,24533,24538,24539,24540,24542,24543,24546,24547,24549,24550,24552,24553,24556,24559,24560,24562,24563,24564,24566,24567,24569,24570,24572,24583,24584,24585,24587,24588,24592,24593,24595,24599,24600,24602,24606,24607,24610,24611,24612,24620,24621,24622,24624,24625,24626,24627,24628,24630,24631,24632,24633,24634,24637,24638,24640,24644,24645,24646,24647,24648,24649,24650,24652,24654,24655,24657,24659,24660,24662,24663,24664,24667,24668,24670,24671,24672,24673,24677,24678,24686,24689,24690,24692,24693,24695,24702,24704,24705,24706,24709,24710,24711,24712,24714,24715,24718,24719,24720,24721,24723,24725,24727,24728,24729,24732,24734,24737,24738,24740,24741,24743,24745,24746,24750,24752,24755,24757,24758,24759,24761,24762,24765,24766,24767,24768,24769,24770,24771,24772,24775,24776,24777,24780,24781,24782,24783,24784,24786,24787,24788,24790,24791,24793,24795,24798,24801,24802,24803,24804,24805,24810,24817,24818,24821,24823,24824,24827,24828,24829,24830,24831,24834,24835,24836,24837,24839,24842,24843,24844,24848,24849,24850,24851,24852,24854,24855,24856,24857,24859,24860,24861,24862,24865,24866,24869,24872,24873,24874,24876,24877,24878,24879,24880,24881,24882,24883,24884,24885,24886,24887,24888,24889,24890,24891,24892,24893,24894,24896,24897,24898,24899,24900,24901,24902,24903,24905,24907,24909,24911,24912,24914,24915,24916,24918,24919,24920,24921,24922,24923,24924,24926,24927,24928,24929,24931,24932,24933,24934,24937,24938,24939,24940,24941,24942,24943,24945,24946,24947,24948,24950,24952,24953,24954,24955,24956,24957,24958,24959,24960,24961,24962,24963,24964,24965,24966,24967,24968,24969,24970,24972,24973,24975,24976,24977,24978,24979,24981,24982,24983,24984,24985,24986,24987,24988,24990,24991,24992,24993,24994,24995,24996,24997,24998,25002,25003,25005,25006,25007,25008,25009,25010,25011,25012,25013,25014,25016,25017,25018,25019,25020,25021,25023,25024,25025,25027,25028,25029,25030,25031,25033,25036,25037,25038,25039,25040,25043,25045,25046,25047,25048,25049,25050,25051,25052,25053,25054,25055,25056,25057,25058,25059,25060,25061,25063,25064,25065,25066,25067,25068,25069,25070,25071,25072,25073,25074,25075,25076,25078,25079,25080,25081,25082,25083,25084,25085,25086,25088,25089,25090,25091,25092,25093,25095,25097,25107,25108,25113,25116,25117,25118,25120,25123,25126,25127,25128,25129,25131,25133,25135,25136,25137,25138,25141,25142,25144,25145,25146,25147,25148,25154,25156,25157,25158,25162,25167,25168,25173,25174,25175,25177,25178,25180,25181,25182,25183,25184,25185,25186,25188,25189,25192,25201,25202,25204,25205,25207,25208,25210,25211,25213,25217,25218,25219,25221,25222,25223,25224,25227,25228,25229,25230,25231,25232,25236,25241,25244,25245,25246,25251,25254,25255,25257,25258,25261,25262,25263,25264,25266,25267,25268,25270,25271,25272,25274,25278,25280,25281,25283,25291,25295,25297,25301,25309,25310,25312,25313,25316,25322,25323,25328,25330,25333,25336,25337,25338,25339,25344,25347,25348,25349,25350,25354,25355,25356,25357,25359,25360,25362,25363,25364,25365,25367,25368,25369,25372,25382,25383,25385,25388,25389,25390,25392,25393,25395,25396,25397,25398,25399,25400,25403,25404,25406,25407,25408,25409,25412,25415,25416,25418,25425,25426,25427,25428,25430,25431,25432,25433,25434,25435,25436,25437,25440,25444,25445,25446,25448,25450,25451,25452,25455,25456,25458,25459,25460,25461,25464,25465,25468,25469,25470,25471,25473,25475,25476,25477,25478,25483,25485,25489,25491,25492,25493,25495,25497,25498,25499,25500,25501,25502,25503,25505,25508,25510,25515,25519,25521,25522,25525,25526,25529,25531,25533,25535,25536,25537,25538,25539,25541,25543,25544,25546,25547,25548,25553,25555,25556,25557,25559,25560,25561,25562,25563,25564,25565,25567,25570,25572,25573,25574,25575,25576,25579,25580,25582,25583,25584,25585,25587,25589,25591,25593,25594,25595,25596,25598,25603,25604,25606,25607,25608,25609,25610,25613,25614,25617,25618,25621,25622,25623,25624,25625,25626,25629,25631,25634,25635,25636,25637,25639,25640,25641,25643,25646,25647,25648,25649,25650,25651,25653,25654,25655,25656,25657,25659,25660,25662,25664,25666,25667,25673,25675,25676,25677,25678,25679,25680,25681,25683,25685,25686,25687,25689,25690,25691,25692,25693,25695,25696,25697,25698,25699,25700,25701,25702,25704,25706,25707,25708,25710,25711,25712,25713,25714,25715,25716,25717,25718,25719,25723,25724,25725,25726,25727,25728,25729,25731,25734,25736,25737,25738,25739,25740,25741,25742,25743,25744,25747,25748,25751,25752,25754,25755,25756,25757,25759,25760,25761,25762,25763,25765,25766,25767,25768,25770,25771,25775,25777,25778,25779,25780,25782,25785,25787,25789,25790,25791,25793,25795,25796,25798,25799,25800,25801,25802,25803,25804,25807,25809,25811,25812,25813,25814,25817,25818,25819,25820,25821,25823,25824,25825,25827,25829,25831,25832,25833,25834,25835,25836,25837,25838,25839,25840,25841,25842,25843,25844,25845,25846,25847,25848,25849,25850,25851,25852,25853,25854,25855,25857,25858,25859,25860,25861,25862,25863,25864,25866,25867,25868,25869,25870,25871,25872,25873,25875,25876,25877,25878,25879,25881,25882,25883,25884,25885,25886,25887,25888,25889,25890,25891,25892,25894,25895,25896,25897,25898,25900,25901,25904,25905,25906,25907,25911,25914,25916,25917,25920,25921,25922,25923,25924,25926,25927,25930,25931,25933,25934,25936,25938,25939,25940,25943,25944,25946,25948,25951,25952,25953,25956,25957,25959,25960,25961,25962,25965,25966,25967,25969,25971,25973,25974,25976,25977,25978,25979,25980,25981,25982,25983,25984,25985,25986,25987,25988,25989,25990,25992,25993,25994,25997,25998,25999,26002,26004,26005,26006,26008,26010,26013,26014,26016,26018,26019,26022,26024,26026,26028,26030,26033,26034,26035,26036,26037,26038,26039,26040,26042,26043,26046,26047,26048,26050,26055,26056,26057,26058,26061,26064,26065,26067,26068,26069,26072,26073,26074,26075,26076,26077,26078,26079,26081,26083,26084,26090,26091,26098,26099,26100,26101,26104,26105,26107,26108,26109,26110,26111,26113,26116,26117,26119,26120,26121,26123,26125,26128,26129,26130,26134,26135,26136,26138,26139,26140,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26162,26163,26167,26168,26169,26170,26171,26173,26175,26176,26178,26180,26181,26182,26183,26184,26185,26186,26189,26190,26192,26193,26200,26201,26203,26204,26205,26206,26208,26210,26211,26213,26215,26217,26218,26219,26220,26221,26225,26226,26227,26229,26232,26233,26235,26236,26237,26239,26240,26241,26243,26245,26246,26248,26249,26250,26251,26253,26254,26255,26256,26258,26259,26260,26261,26264,26265,26266,26267,26268,26270,26271,26272,26273,26274,26275,26276,26277,26278,26281,26282,26283,26284,26285,26287,26288,26289,26290,26291,26293,26294,26295,26296,26298,26299,26300,26301,26303,26304,26305,26306,26307,26308,26309,26310,26311,26312,26313,26314,26315,26316,26317,26318,26319,26320,26321,26322,26323,26324,26325,26326,26327,26328,26330,26334,26335,26336,26337,26338,26339,26340,26341,26343,26344,26346,26347,26348,26349,26350,26351,26353,26357,26358,26360,26362,26363,26365,26369,26370,26371,26372,26373,26374,26375,26380,26382,26383,26385,26386,26387,26390,26392,26393,26394,26396,26398,26400,26401,26402,26403,26404,26405,26407,26409,26414,26416,26418,26419,26422,26423,26424,26425,26427,26428,26430,26431,26433,26436,26437,26439,26442,26443,26445,26450,26452,26453,26455,26456,26457,26458,26459,26461,26466,26467,26468,26470,26471,26475,26476,26478,26481,26484,26486,26488,26489,26490,26491,26493,26496,26498,26499,26501,26502,26504,26506,26508,26509,26510,26511,26513,26514,26515,26516,26518,26521,26523,26527,26528,26529,26532,26534,26537,26540,26542,26545,26546,26548,26553,26554,26555,26556,26557,26558,26559,26560,26562,26565,26566,26567,26568,26569,26570,26571,26572,26573,26574,26581,26582,26583,26587,26591,26593,26595,26596,26598,26599,26600,26602,26603,26605,26606,26610,26613,26614,26615,26616,26617,26618,26619,26620,26622,26625,26626,26627,26628,26630,26637,26640,26642,26644,26645,26648,26649,26650,26651,26652,26654,26655,26656,26658,26659,26660,26661,26662,26663,26664,26667,26668,26669,26670,26671,26672,26673,26676,26677,26678,26682,26683,26687,26695,26699,26701,26703,26706,26710,26711,26712,26713,26714,26715,26716,26717,26718,26719,26730,26732,26733,26734,26735,26736,26737,26738,26739,26741,26744,26745,26746,26747,26748,26749,26750,26751,26752,26754,26756,26759,26760,26761,26762,26763,26764,26765,26766,26768,26769,26770,26772,26773,26774,26776,26777,26778,26779,26780,26781,26782,26783,26784,26785,26787,26788,26789,26793,26794,26795,26796,26798,26801,26802,26804,26806,26807,26808,26809,26810,26811,26812,26813,26814,26815,26817,26819,26820,26821,26822,26823,26824,26826,26828,26830,26831,26832,26833,26835,26836,26838,26839,26841,26843,26844,26845,26846,26847,26849,26850,26852,26853,26854,26855,26856,26857,26858,26859,26860,26861,26863,26866,26867,26868,26870,26871,26872,26875,26877,26878,26879,26880,26882,26883,26884,26886,26887,26888,26889,26890,26892,26895,26897,26899,26900,26901,26902,26903,26904,26905,26906,26907,26908,26909,26910,26913,26914,26915,26917,26918,26919,26920,26921,26922,26923,26924,26926,26927,26929,26930,26931,26933,26934,26935,26936,26938,26939,26940,26942,26944,26945,26947,26948,26949,26950,26951,26952,26953,26954,26955,26956,26957,26958,26959,26960,26961,26962,26963,26965,26966,26968,26969,26971,26972,26975,26977,26978,26980,26981,26983,26984,26985,26986,26988,26989,26991,26992,26994,26995,26996,26997,26998,27002,27003,27005,27006,27007,27009,27011,27013,27018,27019,27020,27022,27023,27024,27025,27026,27027,27030,27031,27033,27034,27037,27038,27039,27040,27041,27042,27043,27044,27045,27046,27049,27050,27052,27054,27055,27056,27058,27059,27061,27062,27064,27065,27066,27068,27069,27070,27071,27072,27074,27075,27076,27077,27078,27079,27080,27081,27083,27085,27087,27089,27090,27091,27093,27094,27095,27096,27097,27098,27100,27101,27102,27105,27106,27107,27108,27109,27110,27111,27112,27113,27114,27115,27116,27118,27119,27120,27121,27123,27124,27125,27126,27127,27128,27129,27130,27131,27132,27134,27136,27137,27138,27139,27140,27141,27142,27143,27144,27145,27147,27148,27149,27150,27151,27152,27153,27154,27155,27156,27157,27158,27161,27162,27163,27164,27165,27166,27168,27170,27171,27172,27173,27174,27175,27177,27179,27180,27181,27182,27184,27186,27187,27188,27190,27191,27192,27193,27194,27195,27196,27199,27200,27201,27202,27203,27205,27206,27208,27209,27210,27211,27212,27213,27214,27215,27217,27218,27219,27220,27221,27222,27223,27226,27228,27229,27230,27231,27232,27234,27235,27236,27238,27239,27240,27241,27242,27243,27244,27245,27246,27247,27248,27250,27251,27252,27253,27254,27255,27256,27258,27259,27261,27262,27263,27265,27266,27267,27269,27270,27271,27272,27273,27274,27275,27276,27277,27279,27282,27283,27284,27285,27286,27288,27289,27290,27291,27292,27293,27294,27295,27297,27298,27299,27300,27301,27302,27303,27304,27306,27309,27310,27311,27312,27313,27314,27315,27316,27317,27318,27319,27320,27321,27322,27323,27324,27325,27326,27327,27328,27329,27330,27331,27332,27333,27334,27335,27336,27337,27338,27339,27340,27341,27342,27343,27344,27345,27346,27347,27348,27349,27350,27351,27352,27353,27354,27355,27356,27357,27358,27359,27360,27361,27362,27363,27364,27365,27366,27367,27368,27369,27370,27371,27372,27373,27374,27375,27376,27377,27378,27379,27380,27381,27382,27383,27384,27385,27386,27387,27388,27389,27390,27391,27392,27393,27394,27395,27396,27397,27398,27399,27400,27401,27402,27403,27404,27405,27406,27407,27408,27409,27410,27411,27412,27413,27414,27415,27416,27417,27418,27419,27420,27421,27422,27423,27429,27430,27432,27433,27434,27435,27436,27437,27438,27439,27440,27441,27443,27444,27445,27446,27448,27451,27452,27453,27455,27456,27457,27458,27460,27461,27464,27466,27467,27469,27470,27471,27472,27473,27474,27475,27476,27477,27478,27479,27480,27482,27483,27484,27485,27486,27487,27488,27489,27496,27497,27499,27500,27501,27502,27503,27504,27505,27506,27507,27508,27509,27510,27511,27512,27514,27517,27518,27519,27520,27525,27528,27532,27534,27535,27536,27537,27540,27541,27543,27544,27545,27548,27549,27550,27551,27552,27554,27555,27556,27557,27558,27559,27560,27561,27563,27564,27565,27566,27567,27568,27569,27570,27574,27576,27577,27578,27579,27580,27581,27582,27584,27587,27588,27590,27591,27592,27593,27594,27596,27598,27600,27601,27608,27610,27612,27613,27614,27615,27616,27618,27619,27620,27621,27622,27623,27624,27625,27628,27629,27630,27632,27633,27634,27636,27638,27639,27640,27642,27643,27644,27646,27647,27648,27649,27650,27651,27652,27656,27657,27658,27659,27660,27662,27666,27671,27676,27677,27678,27680,27683,27685,27691,27692,27693,27697,27699,27702,27703,27705,27706,27707,27708,27710,27711,27715,27716,27717,27720,27723,27724,27725,27726,27727,27729,27730,27731,27734,27736,27737,27738,27746,27747,27749,27750,27751,27755,27756,27757,27758,27759,27761,27763,27765,27767,27768,27770,27771,27772,27775,27776,27780,27783,27786,27787,27789,27790,27793,27794,27797,27798,27799,27800,27802,27804,27805,27806,27808,27810,27816,27820,27823,27824,27828,27829,27830,27831,27834,27840,27841,27842,27843,27846,27847,27848,27851,27853,27854,27855,27857,27858,27864,27865,27866,27868,27869,27871,27876,27878,27879,27881,27884,27885,27890,27892,27897,27903,27904,27906,27907,27909,27910,27912,27913,27914,27917,27919,27920,27921,27923,27924,27925,27926,27928,27932,27933,27935,27936,27937,27938,27939,27940,27942,27944,27945,27948,27949,27951,27952,27956,27958,27959,27960,27962,27967,27968,27970,27972,27977,27980,27984,27989,27990,27991,27992,27995,27997,27999,28001,28002,28004,28005,28007,28008,28011,28012,28013,28016,28017,28018,28019,28021,28022,28025,28026,28027,28029,28030,28031,28032,28033,28035,28036,28038,28039,28042,28043,28045,28047,28048,28050,28054,28055,28056,28057,28058,28060,28066,28069,28076,28077,28080,28081,28083,28084,28086,28087,28089,28090,28091,28092,28093,28094,28097,28098,28099,28104,28105,28106,28109,28110,28111,28112,28114,28115,28116,28117,28119,28122,28123,28124,28127,28130,28131,28133,28135,28136,28137,28138,28141,28143,28144,28146,28148,28149,28150,28152,28154,28157,28158,28159,28160,28161,28162,28163,28164,28166,28167,28168,28169,28171,28175,28178,28179,28181,28184,28185,28187,28188,28190,28191,28194,28198,28199,28200,28202,28204,28206,28208,28209,28211,28213,28214,28215,28217,28219,28220,28221,28222,28223,28224,28225,28226,28229,28230,28231,28232,28233,28234,28235,28236,28239,28240,28241,28242,28245,28247,28249,28250,28252,28253,28254,28256,28257,28258,28259,28260,28261,28262,28263,28264,28265,28266,28268,28269,28271,28272,28273,28274,28275,28276,28277,28278,28279,28280,28281,28282,28283,28284,28285,28288,28289,28290,28292,28295,28296,28298,28299,28300,28301,28302,28305,28306,28307,28308,28309,28310,28311,28313,28314,28315,28317,28318,28320,28321,28323,28324,28326,28328,28329,28331,28332,28333,28334,28336,28339,28341,28344,28345,28348,28350,28351,28352,28355,28356,28357,28358,28360,28361,28362,28364,28365,28366,28368,28370,28374,28376,28377,28379,28380,28381,28387,28391,28394,28395,28396,28397,28398,28399,28400,28401,28402,28403,28405,28406,28407,28408,28410,28411,28412,28413,28414,28415,28416,28417,28419,28420,28421,28423,28424,28426,28427,28428,28429,28430,28432,28433,28434,28438,28439,28440,28441,28442,28443,28444,28445,28446,28447,28449,28450,28451,28453,28454,28455,28456,28460,28462,28464,28466,28468,28469,28471,28472,28473,28474,28475,28476,28477,28479,28480,28481,28482,28483,28484,28485,28488,28489,28490,28492,28494,28495,28496,28497,28498,28499,28500,28501,28502,28503,28505,28506,28507,28509,28511,28512,28513,28515,28516,28517,28519,28520,28521,28522,28523,28524,28527,28528,28529,28531,28533,28534,28535,28537,28539,28541,28542,28543,28544,28545,28546,28547,28549,28550,28551,28554,28555,28559,28560,28561,28562,28563,28564,28565,28566,28567,28568,28569,28570,28571,28573,28574,28575,28576,28578,28579,28580,28581,28582,28584,28585,28586,28587,28588,28589,28590,28591,28592,28593,28594,28596,28597,28599,28600,28602,28603,28604,28605,28606,28607,28609,28611,28612,28613,28614,28615,28616,28618,28619,28620,28621,28622,28623,28624,28627,28628,28629,28630,28631,28632,28633,28634,28635,28636,28637,28639,28642,28643,28644,28645,28646,28647,28648,28649,28650,28651,28652,28653,28656,28657,28658,28659,28660,28661,28662,28663,28664,28665,28666,28667,28668,28669,28670,28671,28672,28673,28674,28675,28676,28677,28678,28679,28680,28681,28682,28683,28684,28685,28686,28687,28688,28690,28691,28692,28693,28694,28695,28696,28697,28700,28701,28702,28703,28704,28705,28706,28708,28709,28710,28711,28712,28713,28714,28715,28716,28717,28718,28719,28720,28721,28722,28723,28724,28726,28727,28728,28730,28731,28732,28733,28734,28735,28736,28737,28738,28739,28740,28741,28742,28743,28744,28745,28746,28747,28749,28750,28752,28753,28754,28755,28756,28757,28758,28759,28760,28761,28762,28763,28764,28765,28767,28768,28769,28770,28771,28772,28773,28774,28775,28776,28777,28778,28782,28785,28786,28787,28788,28791,28793,28794,28795,28797,28801,28802,28803,28804,28806,28807,28808,28811,28812,28813,28815,28816,28817,28819,28823,28824,28826,28827,28830,28831,28832,28833,28834,28835,28836,28837,28838,28839,28840,28841,28842,28848,28850,28852,28853,28854,28858,28862,28863,28868,28869,28870,28871,28873,28875,28876,28877,28878,28879,28880,28881,28882,28883,28884,28885,28886,28887,28890,28892,28893,28894,28896,28897,28898,28899,28901,28906,28910,28912,28913,28914,28915,28916,28917,28918,28920,28922,28923,28924,28926,28927,28928,28929,28930,28931,28932,28933,28934,28935,28936,28939,28940,28941,28942,28943,28945,28946,28948,28951,28955,28956,28957,28958,28959,28960,28961,28962,28963,28964,28965,28967,28968,28969,28970,28971,28972,28973,28974,28978,28979,28980,28981,28983,28984,28985,28986,28987,28988,28989,28990,28991,28992,28993,28994,28995,28996,28998,28999,29e3,29001,29003,29005,29007,29008,29009,29010,29011,29012,29013,29014,29015,29016,29017,29018,29019,29021,29023,29024,29025,29026,29027,29029,29033,29034,29035,29036,29037,29039,29040,29041,29044,29045,29046,29047,29049,29051,29052,29054,29055,29056,29057,29058,29059,29061,29062,29063,29064,29065,29067,29068,29069,29070,29072,29073,29074,29075,29077,29078,29079,29082,29083,29084,29085,29086,29089,29090,29091,29092,29093,29094,29095,29097,29098,29099,29101,29102,29103,29104,29105,29106,29108,29110,29111,29112,29114,29115,29116,29117,29118,29119,29120,29121,29122,29124,29125,29126,29127,29128,29129,29130,29131,29132,29133,29135,29136,29137,29138,29139,29142,29143,29144,29145,29146,29147,29148,29149,29150,29151,29153,29154,29155,29156,29158,29160,29161,29162,29163,29164,29165,29167,29168,29169,29170,29171,29172,29173,29174,29175,29176,29178,29179,29180,29181,29182,29183,29184,29185,29186,29187,29188,29189,29191,29192,29193,29194,29195,29196,29197,29198,29199,29200,29201,29202,29203,29204,29205,29206,29207,29208,29209,29210,29211,29212,29214,29215,29216,29217,29218,29219,29220,29221,29222,29223,29225,29227,29229,29230,29231,29234,29235,29236,29242,29244,29246,29248,29249,29250,29251,29252,29253,29254,29257,29258,29259,29262,29263,29264,29265,29267,29268,29269,29271,29272,29274,29276,29278,29280,29283,29284,29285,29288,29290,29291,29292,29293,29296,29297,29299,29300,29302,29303,29304,29307,29308,29309,29314,29315,29317,29318,29319,29320,29321,29324,29326,29328,29329,29331,29332,29333,29334,29335,29336,29337,29338,29339,29340,29341,29342,29344,29345,29346,29347,29348,29349,29350,29351,29352,29353,29354,29355,29358,29361,29362,29363,29365,29370,29371,29372,29373,29374,29375,29376,29381,29382,29383,29385,29386,29387,29388,29391,29393,29395,29396,29397,29398,29400,29402,29403,58566,58567,58568,58569,58570,58571,58572,58573,58574,58575,58576,58577,58578,58579,58580,58581,58582,58583,58584,58585,58586,58587,58588,58589,58590,58591,58592,58593,58594,58595,58596,58597,58598,58599,58600,58601,58602,58603,58604,58605,58606,58607,58608,58609,58610,58611,58612,58613,58614,58615,58616,58617,58618,58619,58620,58621,58622,58623,58624,58625,58626,58627,58628,58629,58630,58631,58632,58633,58634,58635,58636,58637,58638,58639,58640,58641,58642,58643,58644,58645,58646,58647,58648,58649,58650,58651,58652,58653,58654,58655,58656,58657,58658,58659,58660,58661,12288,12289,12290,183,713,711,168,12291,12293,8212,65374,8214,8230,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12310,12311,12304,12305,177,215,247,8758,8743,8744,8721,8719,8746,8745,8712,8759,8730,8869,8741,8736,8978,8857,8747,8750,8801,8780,8776,8765,8733,8800,8814,8815,8804,8805,8734,8757,8756,9794,9792,176,8242,8243,8451,65284,164,65504,65505,8240,167,8470,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,8251,8594,8592,8593,8595,12307,58662,58663,58664,58665,58666,58667,58668,58669,58670,58671,58672,58673,58674,58675,58676,58677,58678,58679,58680,58681,58682,58683,58684,58685,58686,58687,58688,58689,58690,58691,58692,58693,58694,58695,58696,58697,58698,58699,58700,58701,58702,58703,58704,58705,58706,58707,58708,58709,58710,58711,58712,58713,58714,58715,58716,58717,58718,58719,58720,58721,58722,58723,58724,58725,58726,58727,58728,58729,58730,58731,58732,58733,58734,58735,58736,58737,58738,58739,58740,58741,58742,58743,58744,58745,58746,58747,58748,58749,58750,58751,58752,58753,58754,58755,58756,58757,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,59238,59239,59240,59241,59242,59243,9352,9353,9354,9355,9356,9357,9358,9359,9360,9361,9362,9363,9364,9365,9366,9367,9368,9369,9370,9371,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,9347,9348,9349,9350,9351,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,8364,59245,12832,12833,12834,12835,12836,12837,12838,12839,12840,12841,59246,59247,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,59248,59249,58758,58759,58760,58761,58762,58763,58764,58765,58766,58767,58768,58769,58770,58771,58772,58773,58774,58775,58776,58777,58778,58779,58780,58781,58782,58783,58784,58785,58786,58787,58788,58789,58790,58791,58792,58793,58794,58795,58796,58797,58798,58799,58800,58801,58802,58803,58804,58805,58806,58807,58808,58809,58810,58811,58812,58813,58814,58815,58816,58817,58818,58819,58820,58821,58822,58823,58824,58825,58826,58827,58828,58829,58830,58831,58832,58833,58834,58835,58836,58837,58838,58839,58840,58841,58842,58843,58844,58845,58846,58847,58848,58849,58850,58851,58852,12288,65281,65282,65283,65509,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65340,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,58854,58855,58856,58857,58858,58859,58860,58861,58862,58863,58864,58865,58866,58867,58868,58869,58870,58871,58872,58873,58874,58875,58876,58877,58878,58879,58880,58881,58882,58883,58884,58885,58886,58887,58888,58889,58890,58891,58892,58893,58894,58895,58896,58897,58898,58899,58900,58901,58902,58903,58904,58905,58906,58907,58908,58909,58910,58911,58912,58913,58914,58915,58916,58917,58918,58919,58920,58921,58922,58923,58924,58925,58926,58927,58928,58929,58930,58931,58932,58933,58934,58935,58936,58937,58938,58939,58940,58941,58942,58943,58944,58945,58946,58947,58948,58949,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,59250,59251,59252,59253,59254,59255,59256,59257,59258,59259,59260,58950,58951,58952,58953,58954,58955,58956,58957,58958,58959,58960,58961,58962,58963,58964,58965,58966,58967,58968,58969,58970,58971,58972,58973,58974,58975,58976,58977,58978,58979,58980,58981,58982,58983,58984,58985,58986,58987,58988,58989,58990,58991,58992,58993,58994,58995,58996,58997,58998,58999,59e3,59001,59002,59003,59004,59005,59006,59007,59008,59009,59010,59011,59012,59013,59014,59015,59016,59017,59018,59019,59020,59021,59022,59023,59024,59025,59026,59027,59028,59029,59030,59031,59032,59033,59034,59035,59036,59037,59038,59039,59040,59041,59042,59043,59044,59045,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,59261,59262,59263,59264,59265,59266,59267,59268,59046,59047,59048,59049,59050,59051,59052,59053,59054,59055,59056,59057,59058,59059,59060,59061,59062,59063,59064,59065,59066,59067,59068,59069,59070,59071,59072,59073,59074,59075,59076,59077,59078,59079,59080,59081,59082,59083,59084,59085,59086,59087,59088,59089,59090,59091,59092,59093,59094,59095,59096,59097,59098,59099,59100,59101,59102,59103,59104,59105,59106,59107,59108,59109,59110,59111,59112,59113,59114,59115,59116,59117,59118,59119,59120,59121,59122,59123,59124,59125,59126,59127,59128,59129,59130,59131,59132,59133,59134,59135,59136,59137,59138,59139,59140,59141,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,59269,59270,59271,59272,59273,59274,59275,59276,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,59277,59278,59279,59280,59281,59282,59283,65077,65078,65081,65082,65087,65088,65085,65086,65089,65090,65091,65092,59284,59285,65083,65084,65079,65080,65073,59286,65075,65076,59287,59288,59289,59290,59291,59292,59293,59294,59295,59142,59143,59144,59145,59146,59147,59148,59149,59150,59151,59152,59153,59154,59155,59156,59157,59158,59159,59160,59161,59162,59163,59164,59165,59166,59167,59168,59169,59170,59171,59172,59173,59174,59175,59176,59177,59178,59179,59180,59181,59182,59183,59184,59185,59186,59187,59188,59189,59190,59191,59192,59193,59194,59195,59196,59197,59198,59199,59200,59201,59202,59203,59204,59205,59206,59207,59208,59209,59210,59211,59212,59213,59214,59215,59216,59217,59218,59219,59220,59221,59222,59223,59224,59225,59226,59227,59228,59229,59230,59231,59232,59233,59234,59235,59236,59237,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,59296,59297,59298,59299,59300,59301,59302,59303,59304,59305,59306,59307,59308,59309,59310,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,59311,59312,59313,59314,59315,59316,59317,59318,59319,59320,59321,59322,59323,714,715,729,8211,8213,8229,8245,8453,8457,8598,8599,8600,8601,8725,8735,8739,8786,8806,8807,8895,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9581,9582,9583,9584,9585,9586,9587,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9619,9620,9621,9660,9661,9698,9699,9700,9701,9737,8853,12306,12317,12318,59324,59325,59326,59327,59328,59329,59330,59331,59332,59333,59334,257,225,462,224,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,234,593,7743,324,328,505,609,59337,59338,59339,59340,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,59341,59342,59343,59344,59345,59346,59347,59348,59349,59350,59351,59352,59353,59354,59355,59356,59357,59358,59359,59360,59361,12321,12322,12323,12324,12325,12326,12327,12328,12329,12963,13198,13199,13212,13213,13214,13217,13252,13262,13265,13266,13269,65072,65506,65508,59362,8481,12849,59363,8208,59364,59365,59366,12540,12443,12444,12541,12542,12294,12445,12446,65097,65098,65099,65100,65101,65102,65103,65104,65105,65106,65108,65109,65110,65111,65113,65114,65115,65116,65117,65118,65119,65120,65121,65122,65123,65124,65125,65126,65128,65129,65130,65131,12350,12272,12273,12274,12275,12276,12277,12278,12279,12280,12281,12282,12283,12295,59380,59381,59382,59383,59384,59385,59386,59387,59388,59389,59390,59391,59392,9472,9473,9474,9475,9476,9477,9478,9479,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513,9514,9515,9516,9517,9518,9519,9520,9521,9522,9523,9524,9525,9526,9527,9528,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9543,9544,9545,9546,9547,59393,59394,59395,59396,59397,59398,59399,59400,59401,59402,59403,59404,59405,59406,59407,29404,29405,29407,29410,29411,29412,29413,29414,29415,29418,29419,29429,29430,29433,29437,29438,29439,29440,29442,29444,29445,29446,29447,29448,29449,29451,29452,29453,29455,29456,29457,29458,29460,29464,29465,29466,29471,29472,29475,29476,29478,29479,29480,29485,29487,29488,29490,29491,29493,29494,29498,29499,29500,29501,29504,29505,29506,29507,29508,29509,29510,29511,29512,29513,29514,29515,29516,29518,29519,29521,29523,29524,29525,29526,29528,29529,29530,29531,29532,29533,29534,29535,29537,29538,29539,29540,29541,29542,29543,29544,29545,29546,29547,29550,29552,29553,57344,57345,57346,57347,57348,57349,57350,57351,57352,57353,57354,57355,57356,57357,57358,57359,57360,57361,57362,57363,57364,57365,57366,57367,57368,57369,57370,57371,57372,57373,57374,57375,57376,57377,57378,57379,57380,57381,57382,57383,57384,57385,57386,57387,57388,57389,57390,57391,57392,57393,57394,57395,57396,57397,57398,57399,57400,57401,57402,57403,57404,57405,57406,57407,57408,57409,57410,57411,57412,57413,57414,57415,57416,57417,57418,57419,57420,57421,57422,57423,57424,57425,57426,57427,57428,57429,57430,57431,57432,57433,57434,57435,57436,57437,29554,29555,29556,29557,29558,29559,29560,29561,29562,29563,29564,29565,29567,29568,29569,29570,29571,29573,29574,29576,29578,29580,29581,29583,29584,29586,29587,29588,29589,29591,29592,29593,29594,29596,29597,29598,29600,29601,29603,29604,29605,29606,29607,29608,29610,29612,29613,29617,29620,29621,29622,29624,29625,29628,29629,29630,29631,29633,29635,29636,29637,29638,29639,29643,29644,29646,29650,29651,29652,29653,29654,29655,29656,29658,29659,29660,29661,29663,29665,29666,29667,29668,29670,29672,29674,29675,29676,29678,29679,29680,29681,29683,29684,29685,29686,29687,57438,57439,57440,57441,57442,57443,57444,57445,57446,57447,57448,57449,57450,57451,57452,57453,57454,57455,57456,57457,57458,57459,57460,57461,57462,57463,57464,57465,57466,57467,57468,57469,57470,57471,57472,57473,57474,57475,57476,57477,57478,57479,57480,57481,57482,57483,57484,57485,57486,57487,57488,57489,57490,57491,57492,57493,57494,57495,57496,57497,57498,57499,57500,57501,57502,57503,57504,57505,57506,57507,57508,57509,57510,57511,57512,57513,57514,57515,57516,57517,57518,57519,57520,57521,57522,57523,57524,57525,57526,57527,57528,57529,57530,57531,29688,29689,29690,29691,29692,29693,29694,29695,29696,29697,29698,29700,29703,29704,29707,29708,29709,29710,29713,29714,29715,29716,29717,29718,29719,29720,29721,29724,29725,29726,29727,29728,29729,29731,29732,29735,29737,29739,29741,29743,29745,29746,29751,29752,29753,29754,29755,29757,29758,29759,29760,29762,29763,29764,29765,29766,29767,29768,29769,29770,29771,29772,29773,29774,29775,29776,29777,29778,29779,29780,29782,29784,29789,29792,29793,29794,29795,29796,29797,29798,29799,29800,29801,29802,29803,29804,29806,29807,29809,29810,29811,29812,29813,29816,29817,29818,57532,57533,57534,57535,57536,57537,57538,57539,57540,57541,57542,57543,57544,57545,57546,57547,57548,57549,57550,57551,57552,57553,57554,57555,57556,57557,57558,57559,57560,57561,57562,57563,57564,57565,57566,57567,57568,57569,57570,57571,57572,57573,57574,57575,57576,57577,57578,57579,57580,57581,57582,57583,57584,57585,57586,57587,57588,57589,57590,57591,57592,57593,57594,57595,57596,57597,57598,57599,57600,57601,57602,57603,57604,57605,57606,57607,57608,57609,57610,57611,57612,57613,57614,57615,57616,57617,57618,57619,57620,57621,57622,57623,57624,57625,29819,29820,29821,29823,29826,29828,29829,29830,29832,29833,29834,29836,29837,29839,29841,29842,29843,29844,29845,29846,29847,29848,29849,29850,29851,29853,29855,29856,29857,29858,29859,29860,29861,29862,29866,29867,29868,29869,29870,29871,29872,29873,29874,29875,29876,29877,29878,29879,29880,29881,29883,29884,29885,29886,29887,29888,29889,29890,29891,29892,29893,29894,29895,29896,29897,29898,29899,29900,29901,29902,29903,29904,29905,29907,29908,29909,29910,29911,29912,29913,29914,29915,29917,29919,29921,29925,29927,29928,29929,29930,29931,29932,29933,29936,29937,29938,57626,57627,57628,57629,57630,57631,57632,57633,57634,57635,57636,57637,57638,57639,57640,57641,57642,57643,57644,57645,57646,57647,57648,57649,57650,57651,57652,57653,57654,57655,57656,57657,57658,57659,57660,57661,57662,57663,57664,57665,57666,57667,57668,57669,57670,57671,57672,57673,57674,57675,57676,57677,57678,57679,57680,57681,57682,57683,57684,57685,57686,57687,57688,57689,57690,57691,57692,57693,57694,57695,57696,57697,57698,57699,57700,57701,57702,57703,57704,57705,57706,57707,57708,57709,57710,57711,57712,57713,57714,57715,57716,57717,57718,57719,29939,29941,29944,29945,29946,29947,29948,29949,29950,29952,29953,29954,29955,29957,29958,29959,29960,29961,29962,29963,29964,29966,29968,29970,29972,29973,29974,29975,29979,29981,29982,29984,29985,29986,29987,29988,29990,29991,29994,29998,30004,30006,30009,30012,30013,30015,30017,30018,30019,30020,30022,30023,30025,30026,30029,30032,30033,30034,30035,30037,30038,30039,30040,30045,30046,30047,30048,30049,30050,30051,30052,30055,30056,30057,30059,30060,30061,30062,30063,30064,30065,30067,30069,30070,30071,30074,30075,30076,30077,30078,30080,30081,30082,30084,30085,30087,57720,57721,57722,57723,57724,57725,57726,57727,57728,57729,57730,57731,57732,57733,57734,57735,57736,57737,57738,57739,57740,57741,57742,57743,57744,57745,57746,57747,57748,57749,57750,57751,57752,57753,57754,57755,57756,57757,57758,57759,57760,57761,57762,57763,57764,57765,57766,57767,57768,57769,57770,57771,57772,57773,57774,57775,57776,57777,57778,57779,57780,57781,57782,57783,57784,57785,57786,57787,57788,57789,57790,57791,57792,57793,57794,57795,57796,57797,57798,57799,57800,57801,57802,57803,57804,57805,57806,57807,57808,57809,57810,57811,57812,57813,30088,30089,30090,30092,30093,30094,30096,30099,30101,30104,30107,30108,30110,30114,30118,30119,30120,30121,30122,30125,30134,30135,30138,30139,30143,30144,30145,30150,30155,30156,30158,30159,30160,30161,30163,30167,30169,30170,30172,30173,30175,30176,30177,30181,30185,30188,30189,30190,30191,30194,30195,30197,30198,30199,30200,30202,30203,30205,30206,30210,30212,30214,30215,30216,30217,30219,30221,30222,30223,30225,30226,30227,30228,30230,30234,30236,30237,30238,30241,30243,30247,30248,30252,30254,30255,30257,30258,30262,30263,30265,30266,30267,30269,30273,30274,30276,57814,57815,57816,57817,57818,57819,57820,57821,57822,57823,57824,57825,57826,57827,57828,57829,57830,57831,57832,57833,57834,57835,57836,57837,57838,57839,57840,57841,57842,57843,57844,57845,57846,57847,57848,57849,57850,57851,57852,57853,57854,57855,57856,57857,57858,57859,57860,57861,57862,57863,57864,57865,57866,57867,57868,57869,57870,57871,57872,57873,57874,57875,57876,57877,57878,57879,57880,57881,57882,57883,57884,57885,57886,57887,57888,57889,57890,57891,57892,57893,57894,57895,57896,57897,57898,57899,57900,57901,57902,57903,57904,57905,57906,57907,30277,30278,30279,30280,30281,30282,30283,30286,30287,30288,30289,30290,30291,30293,30295,30296,30297,30298,30299,30301,30303,30304,30305,30306,30308,30309,30310,30311,30312,30313,30314,30316,30317,30318,30320,30321,30322,30323,30324,30325,30326,30327,30329,30330,30332,30335,30336,30337,30339,30341,30345,30346,30348,30349,30351,30352,30354,30356,30357,30359,30360,30362,30363,30364,30365,30366,30367,30368,30369,30370,30371,30373,30374,30375,30376,30377,30378,30379,30380,30381,30383,30384,30387,30389,30390,30391,30392,30393,30394,30395,30396,30397,30398,30400,30401,30403,21834,38463,22467,25384,21710,21769,21696,30353,30284,34108,30702,33406,30861,29233,38552,38797,27688,23433,20474,25353,26263,23736,33018,26696,32942,26114,30414,20985,25942,29100,32753,34948,20658,22885,25034,28595,33453,25420,25170,21485,21543,31494,20843,30116,24052,25300,36299,38774,25226,32793,22365,38712,32610,29240,30333,26575,30334,25670,20336,36133,25308,31255,26001,29677,25644,25203,33324,39041,26495,29256,25198,25292,20276,29923,21322,21150,32458,37030,24110,26758,27036,33152,32465,26834,30917,34444,38225,20621,35876,33502,32990,21253,35090,21093,30404,30407,30409,30411,30412,30419,30421,30425,30426,30428,30429,30430,30432,30433,30434,30435,30436,30438,30439,30440,30441,30442,30443,30444,30445,30448,30451,30453,30454,30455,30458,30459,30461,30463,30464,30466,30467,30469,30470,30474,30476,30478,30479,30480,30481,30482,30483,30484,30485,30486,30487,30488,30491,30492,30493,30494,30497,30499,30500,30501,30503,30506,30507,30508,30510,30512,30513,30514,30515,30516,30521,30523,30525,30526,30527,30530,30532,30533,30534,30536,30537,30538,30539,30540,30541,30542,30543,30546,30547,30548,30549,30550,30551,30552,30553,30556,34180,38649,20445,22561,39281,23453,25265,25253,26292,35961,40077,29190,26479,30865,24754,21329,21271,36744,32972,36125,38049,20493,29384,22791,24811,28953,34987,22868,33519,26412,31528,23849,32503,29997,27893,36454,36856,36924,40763,27604,37145,31508,24444,30887,34006,34109,27605,27609,27606,24065,24199,30201,38381,25949,24330,24517,36767,22721,33218,36991,38491,38829,36793,32534,36140,25153,20415,21464,21342,36776,36777,36779,36941,26631,24426,33176,34920,40150,24971,21035,30250,24428,25996,28626,28392,23486,25672,20853,20912,26564,19993,31177,39292,28851,30557,30558,30559,30560,30564,30567,30569,30570,30573,30574,30575,30576,30577,30578,30579,30580,30581,30582,30583,30584,30586,30587,30588,30593,30594,30595,30598,30599,30600,30601,30602,30603,30607,30608,30611,30612,30613,30614,30615,30616,30617,30618,30619,30620,30621,30622,30625,30627,30628,30630,30632,30635,30637,30638,30639,30641,30642,30644,30646,30647,30648,30649,30650,30652,30654,30656,30657,30658,30659,30660,30661,30662,30663,30664,30665,30666,30667,30668,30670,30671,30672,30673,30674,30675,30676,30677,30678,30680,30681,30682,30685,30686,30687,30688,30689,30692,30149,24182,29627,33760,25773,25320,38069,27874,21338,21187,25615,38082,31636,20271,24091,33334,33046,33162,28196,27850,39539,25429,21340,21754,34917,22496,19981,24067,27493,31807,37096,24598,25830,29468,35009,26448,25165,36130,30572,36393,37319,24425,33756,34081,39184,21442,34453,27531,24813,24808,28799,33485,33329,20179,27815,34255,25805,31961,27133,26361,33609,21397,31574,20391,20876,27979,23618,36461,25554,21449,33580,33590,26597,30900,25661,23519,23700,24046,35815,25286,26612,35962,25600,25530,34633,39307,35863,32544,38130,20135,38416,39076,26124,29462,30694,30696,30698,30703,30704,30705,30706,30708,30709,30711,30713,30714,30715,30716,30723,30724,30725,30726,30727,30728,30730,30731,30734,30735,30736,30739,30741,30745,30747,30750,30752,30753,30754,30756,30760,30762,30763,30766,30767,30769,30770,30771,30773,30774,30781,30783,30785,30786,30787,30788,30790,30792,30793,30794,30795,30797,30799,30801,30803,30804,30808,30809,30810,30811,30812,30814,30815,30816,30817,30818,30819,30820,30821,30822,30823,30824,30825,30831,30832,30833,30834,30835,30836,30837,30838,30840,30841,30842,30843,30845,30846,30847,30848,30849,30850,30851,22330,23581,24120,38271,20607,32928,21378,25950,30021,21809,20513,36229,25220,38046,26397,22066,28526,24034,21557,28818,36710,25199,25764,25507,24443,28552,37108,33251,36784,23576,26216,24561,27785,38472,36225,34924,25745,31216,22478,27225,25104,21576,20056,31243,24809,28548,35802,25215,36894,39563,31204,21507,30196,25345,21273,27744,36831,24347,39536,32827,40831,20360,23610,36196,32709,26021,28861,20805,20914,34411,23815,23456,25277,37228,30068,36364,31264,24833,31609,20167,32504,30597,19985,33261,21021,20986,27249,21416,36487,38148,38607,28353,38500,26970,30852,30853,30854,30856,30858,30859,30863,30864,30866,30868,30869,30870,30873,30877,30878,30880,30882,30884,30886,30888,30889,30890,30891,30892,30893,30894,30895,30901,30902,30903,30904,30906,30907,30908,30909,30911,30912,30914,30915,30916,30918,30919,30920,30924,30925,30926,30927,30929,30930,30931,30934,30935,30936,30938,30939,30940,30941,30942,30943,30944,30945,30946,30947,30948,30949,30950,30951,30953,30954,30955,30957,30958,30959,30960,30961,30963,30965,30966,30968,30969,30971,30972,30973,30974,30975,30976,30978,30979,30980,30982,30983,30984,30985,30986,30987,30988,30784,20648,30679,25616,35302,22788,25571,24029,31359,26941,20256,33337,21912,20018,30126,31383,24162,24202,38383,21019,21561,28810,25462,38180,22402,26149,26943,37255,21767,28147,32431,34850,25139,32496,30133,33576,30913,38604,36766,24904,29943,35789,27492,21050,36176,27425,32874,33905,22257,21254,20174,19995,20945,31895,37259,31751,20419,36479,31713,31388,25703,23828,20652,33030,30209,31929,28140,32736,26449,23384,23544,30923,25774,25619,25514,25387,38169,25645,36798,31572,30249,25171,22823,21574,27513,20643,25140,24102,27526,20195,36151,34955,24453,36910,30989,30990,30991,30992,30993,30994,30996,30997,30998,30999,31e3,31001,31002,31003,31004,31005,31007,31008,31009,31010,31011,31013,31014,31015,31016,31017,31018,31019,31020,31021,31022,31023,31024,31025,31026,31027,31029,31030,31031,31032,31033,31037,31039,31042,31043,31044,31045,31047,31050,31051,31052,31053,31054,31055,31056,31057,31058,31060,31061,31064,31065,31073,31075,31076,31078,31081,31082,31083,31084,31086,31088,31089,31090,31091,31092,31093,31094,31097,31099,31100,31101,31102,31103,31106,31107,31110,31111,31112,31113,31115,31116,31117,31118,31120,31121,31122,24608,32829,25285,20025,21333,37112,25528,32966,26086,27694,20294,24814,28129,35806,24377,34507,24403,25377,20826,33633,26723,20992,25443,36424,20498,23707,31095,23548,21040,31291,24764,36947,30423,24503,24471,30340,36460,28783,30331,31561,30634,20979,37011,22564,20302,28404,36842,25932,31515,29380,28068,32735,23265,25269,24213,22320,33922,31532,24093,24351,36882,32532,39072,25474,28359,30872,28857,20856,38747,22443,30005,20291,30008,24215,24806,22880,28096,27583,30857,21500,38613,20939,20993,25481,21514,38035,35843,36300,29241,30879,34678,36845,35853,21472,31123,31124,31125,31126,31127,31128,31129,31131,31132,31133,31134,31135,31136,31137,31138,31139,31140,31141,31142,31144,31145,31146,31147,31148,31149,31150,31151,31152,31153,31154,31156,31157,31158,31159,31160,31164,31167,31170,31172,31173,31175,31176,31178,31180,31182,31183,31184,31187,31188,31190,31191,31193,31194,31195,31196,31197,31198,31200,31201,31202,31205,31208,31210,31212,31214,31217,31218,31219,31220,31221,31222,31223,31225,31226,31228,31230,31231,31233,31236,31237,31239,31240,31241,31242,31244,31247,31248,31249,31250,31251,31253,31254,31256,31257,31259,31260,19969,30447,21486,38025,39030,40718,38189,23450,35746,20002,19996,20908,33891,25026,21160,26635,20375,24683,20923,27934,20828,25238,26007,38497,35910,36887,30168,37117,30563,27602,29322,29420,35835,22581,30585,36172,26460,38208,32922,24230,28193,22930,31471,30701,38203,27573,26029,32526,22534,20817,38431,23545,22697,21544,36466,25958,39039,22244,38045,30462,36929,25479,21702,22810,22842,22427,36530,26421,36346,33333,21057,24816,22549,34558,23784,40517,20420,39069,35769,23077,24694,21380,25212,36943,37122,39295,24681,32780,20799,32819,23572,39285,27953,20108,31261,31263,31265,31266,31268,31269,31270,31271,31272,31273,31274,31275,31276,31277,31278,31279,31280,31281,31282,31284,31285,31286,31288,31290,31294,31296,31297,31298,31299,31300,31301,31303,31304,31305,31306,31307,31308,31309,31310,31311,31312,31314,31315,31316,31317,31318,31320,31321,31322,31323,31324,31325,31326,31327,31328,31329,31330,31331,31332,31333,31334,31335,31336,31337,31338,31339,31340,31341,31342,31343,31345,31346,31347,31349,31355,31356,31357,31358,31362,31365,31367,31369,31370,31371,31372,31374,31375,31376,31379,31380,31385,31386,31387,31390,31393,31394,36144,21457,32602,31567,20240,20047,38400,27861,29648,34281,24070,30058,32763,27146,30718,38034,32321,20961,28902,21453,36820,33539,36137,29359,39277,27867,22346,33459,26041,32938,25151,38450,22952,20223,35775,32442,25918,33778,38750,21857,39134,32933,21290,35837,21536,32954,24223,27832,36153,33452,37210,21545,27675,20998,32439,22367,28954,27774,31881,22859,20221,24575,24868,31914,20016,23553,26539,34562,23792,38155,39118,30127,28925,36898,20911,32541,35773,22857,20964,20315,21542,22827,25975,32932,23413,25206,25282,36752,24133,27679,31526,20239,20440,26381,31395,31396,31399,31401,31402,31403,31406,31407,31408,31409,31410,31412,31413,31414,31415,31416,31417,31418,31419,31420,31421,31422,31424,31425,31426,31427,31428,31429,31430,31431,31432,31433,31434,31436,31437,31438,31439,31440,31441,31442,31443,31444,31445,31447,31448,31450,31451,31452,31453,31457,31458,31460,31463,31464,31465,31466,31467,31468,31470,31472,31473,31474,31475,31476,31477,31478,31479,31480,31483,31484,31486,31488,31489,31490,31493,31495,31497,31500,31501,31502,31504,31506,31507,31510,31511,31512,31514,31516,31517,31519,31521,31522,31523,31527,31529,31533,28014,28074,31119,34993,24343,29995,25242,36741,20463,37340,26023,33071,33105,24220,33104,36212,21103,35206,36171,22797,20613,20184,38428,29238,33145,36127,23500,35747,38468,22919,32538,21648,22134,22030,35813,25913,27010,38041,30422,28297,24178,29976,26438,26577,31487,32925,36214,24863,31174,25954,36195,20872,21018,38050,32568,32923,32434,23703,28207,26464,31705,30347,39640,33167,32660,31957,25630,38224,31295,21578,21733,27468,25601,25096,40509,33011,30105,21106,38761,33883,26684,34532,38401,38548,38124,20010,21508,32473,26681,36319,32789,26356,24218,32697,31535,31536,31538,31540,31541,31542,31543,31545,31547,31549,31551,31552,31553,31554,31555,31556,31558,31560,31562,31565,31566,31571,31573,31575,31577,31580,31582,31583,31585,31587,31588,31589,31590,31591,31592,31593,31594,31595,31596,31597,31599,31600,31603,31604,31606,31608,31610,31612,31613,31615,31617,31618,31619,31620,31622,31623,31624,31625,31626,31627,31628,31630,31631,31633,31634,31635,31638,31640,31641,31642,31643,31646,31647,31648,31651,31652,31653,31662,31663,31664,31666,31667,31669,31670,31671,31673,31674,31675,31676,31677,31678,31679,31680,31682,31683,31684,22466,32831,26775,24037,25915,21151,24685,40858,20379,36524,20844,23467,24339,24041,27742,25329,36129,20849,38057,21246,27807,33503,29399,22434,26500,36141,22815,36764,33735,21653,31629,20272,27837,23396,22993,40723,21476,34506,39592,35895,32929,25925,39038,22266,38599,21038,29916,21072,23521,25346,35074,20054,25296,24618,26874,20851,23448,20896,35266,31649,39302,32592,24815,28748,36143,20809,24191,36891,29808,35268,22317,30789,24402,40863,38394,36712,39740,35809,30328,26690,26588,36330,36149,21053,36746,28378,26829,38149,37101,22269,26524,35065,36807,21704,31685,31688,31689,31690,31691,31693,31694,31695,31696,31698,31700,31701,31702,31703,31704,31707,31708,31710,31711,31712,31714,31715,31716,31719,31720,31721,31723,31724,31725,31727,31728,31730,31731,31732,31733,31734,31736,31737,31738,31739,31741,31743,31744,31745,31746,31747,31748,31749,31750,31752,31753,31754,31757,31758,31760,31761,31762,31763,31764,31765,31767,31768,31769,31770,31771,31772,31773,31774,31776,31777,31778,31779,31780,31781,31784,31785,31787,31788,31789,31790,31791,31792,31793,31794,31795,31796,31797,31798,31799,31801,31802,31803,31804,31805,31806,31810,39608,23401,28023,27686,20133,23475,39559,37219,25e3,37039,38889,21547,28085,23506,20989,21898,32597,32752,25788,25421,26097,25022,24717,28938,27735,27721,22831,26477,33322,22741,22158,35946,27627,37085,22909,32791,21495,28009,21621,21917,33655,33743,26680,31166,21644,20309,21512,30418,35977,38402,27827,28088,36203,35088,40548,36154,22079,40657,30165,24456,29408,24680,21756,20136,27178,34913,24658,36720,21700,28888,34425,40511,27946,23439,24344,32418,21897,20399,29492,21564,21402,20505,21518,21628,20046,24573,29786,22774,33899,32993,34676,29392,31946,28246,31811,31812,31813,31814,31815,31816,31817,31818,31819,31820,31822,31823,31824,31825,31826,31827,31828,31829,31830,31831,31832,31833,31834,31835,31836,31837,31838,31839,31840,31841,31842,31843,31844,31845,31846,31847,31848,31849,31850,31851,31852,31853,31854,31855,31856,31857,31858,31861,31862,31863,31864,31865,31866,31870,31871,31872,31873,31874,31875,31876,31877,31878,31879,31880,31882,31883,31884,31885,31886,31887,31888,31891,31892,31894,31897,31898,31899,31904,31905,31907,31910,31911,31912,31913,31915,31916,31917,31919,31920,31924,31925,31926,31927,31928,31930,31931,24359,34382,21804,25252,20114,27818,25143,33457,21719,21326,29502,28369,30011,21010,21270,35805,27088,24458,24576,28142,22351,27426,29615,26707,36824,32531,25442,24739,21796,30186,35938,28949,28067,23462,24187,33618,24908,40644,30970,34647,31783,30343,20976,24822,29004,26179,24140,24653,35854,28784,25381,36745,24509,24674,34516,22238,27585,24724,24935,21321,24800,26214,36159,31229,20250,28905,27719,35763,35826,32472,33636,26127,23130,39746,27985,28151,35905,27963,20249,28779,33719,25110,24785,38669,36135,31096,20987,22334,22522,26426,30072,31293,31215,31637,31935,31936,31938,31939,31940,31942,31945,31947,31950,31951,31952,31953,31954,31955,31956,31960,31962,31963,31965,31966,31969,31970,31971,31972,31973,31974,31975,31977,31978,31979,31980,31981,31982,31984,31985,31986,31987,31988,31989,31990,31991,31993,31994,31996,31997,31998,31999,32e3,32001,32002,32003,32004,32005,32006,32007,32008,32009,32011,32012,32013,32014,32015,32016,32017,32018,32019,32020,32021,32022,32023,32024,32025,32026,32027,32028,32029,32030,32031,32033,32035,32036,32037,32038,32040,32041,32042,32044,32045,32046,32048,32049,32050,32051,32052,32053,32054,32908,39269,36857,28608,35749,40481,23020,32489,32521,21513,26497,26840,36753,31821,38598,21450,24613,30142,27762,21363,23241,32423,25380,20960,33034,24049,34015,25216,20864,23395,20238,31085,21058,24760,27982,23492,23490,35745,35760,26082,24524,38469,22931,32487,32426,22025,26551,22841,20339,23478,21152,33626,39050,36158,30002,38078,20551,31292,20215,26550,39550,23233,27516,30417,22362,23574,31546,38388,29006,20860,32937,33392,22904,32516,33575,26816,26604,30897,30839,25315,25441,31616,20461,21098,20943,33616,27099,37492,36341,36145,35265,38190,31661,20214,32055,32056,32057,32058,32059,32060,32061,32062,32063,32064,32065,32066,32067,32068,32069,32070,32071,32072,32073,32074,32075,32076,32077,32078,32079,32080,32081,32082,32083,32084,32085,32086,32087,32088,32089,32090,32091,32092,32093,32094,32095,32096,32097,32098,32099,32100,32101,32102,32103,32104,32105,32106,32107,32108,32109,32111,32112,32113,32114,32115,32116,32117,32118,32120,32121,32122,32123,32124,32125,32126,32127,32128,32129,32130,32131,32132,32133,32134,32135,32136,32137,32138,32139,32140,32141,32142,32143,32144,32145,32146,32147,32148,32149,32150,32151,32152,20581,33328,21073,39279,28176,28293,28071,24314,20725,23004,23558,27974,27743,30086,33931,26728,22870,35762,21280,37233,38477,34121,26898,30977,28966,33014,20132,37066,27975,39556,23047,22204,25605,38128,30699,20389,33050,29409,35282,39290,32564,32478,21119,25945,37237,36735,36739,21483,31382,25581,25509,30342,31224,34903,38454,25130,21163,33410,26708,26480,25463,30571,31469,27905,32467,35299,22992,25106,34249,33445,30028,20511,20171,30117,35819,23626,24062,31563,26020,37329,20170,27941,35167,32039,38182,20165,35880,36827,38771,26187,31105,36817,28908,28024,32153,32154,32155,32156,32157,32158,32159,32160,32161,32162,32163,32164,32165,32167,32168,32169,32170,32171,32172,32173,32175,32176,32177,32178,32179,32180,32181,32182,32183,32184,32185,32186,32187,32188,32189,32190,32191,32192,32193,32194,32195,32196,32197,32198,32199,32200,32201,32202,32203,32204,32205,32206,32207,32208,32209,32210,32211,32212,32213,32214,32215,32216,32217,32218,32219,32220,32221,32222,32223,32224,32225,32226,32227,32228,32229,32230,32231,32232,32233,32234,32235,32236,32237,32238,32239,32240,32241,32242,32243,32244,32245,32246,32247,32248,32249,32250,23613,21170,33606,20834,33550,30555,26230,40120,20140,24778,31934,31923,32463,20117,35686,26223,39048,38745,22659,25964,38236,24452,30153,38742,31455,31454,20928,28847,31384,25578,31350,32416,29590,38893,20037,28792,20061,37202,21417,25937,26087,33276,33285,21646,23601,30106,38816,25304,29401,30141,23621,39545,33738,23616,21632,30697,20030,27822,32858,25298,25454,24040,20855,36317,36382,38191,20465,21477,24807,28844,21095,25424,40515,23071,20518,30519,21367,32482,25733,25899,25225,25496,20500,29237,35273,20915,35776,32477,22343,33740,38055,20891,21531,23803,32251,32252,32253,32254,32255,32256,32257,32258,32259,32260,32261,32262,32263,32264,32265,32266,32267,32268,32269,32270,32271,32272,32273,32274,32275,32276,32277,32278,32279,32280,32281,32282,32283,32284,32285,32286,32287,32288,32289,32290,32291,32292,32293,32294,32295,32296,32297,32298,32299,32300,32301,32302,32303,32304,32305,32306,32307,32308,32309,32310,32311,32312,32313,32314,32316,32317,32318,32319,32320,32322,32323,32324,32325,32326,32328,32329,32330,32331,32332,32333,32334,32335,32336,32337,32338,32339,32340,32341,32342,32343,32344,32345,32346,32347,32348,32349,20426,31459,27994,37089,39567,21888,21654,21345,21679,24320,25577,26999,20975,24936,21002,22570,21208,22350,30733,30475,24247,24951,31968,25179,25239,20130,28821,32771,25335,28900,38752,22391,33499,26607,26869,30933,39063,31185,22771,21683,21487,28212,20811,21051,23458,35838,32943,21827,22438,24691,22353,21549,31354,24656,23380,25511,25248,21475,25187,23495,26543,21741,31391,33510,37239,24211,35044,22840,22446,25358,36328,33007,22359,31607,20393,24555,23485,27454,21281,31568,29378,26694,30719,30518,26103,20917,20111,30420,23743,31397,33909,22862,39745,20608,32350,32351,32352,32353,32354,32355,32356,32357,32358,32359,32360,32361,32362,32363,32364,32365,32366,32367,32368,32369,32370,32371,32372,32373,32374,32375,32376,32377,32378,32379,32380,32381,32382,32383,32384,32385,32387,32388,32389,32390,32391,32392,32393,32394,32395,32396,32397,32398,32399,32400,32401,32402,32403,32404,32405,32406,32407,32408,32409,32410,32412,32413,32414,32430,32436,32443,32444,32470,32484,32492,32505,32522,32528,32542,32567,32569,32571,32572,32573,32574,32575,32576,32577,32579,32582,32583,32584,32585,32586,32587,32588,32589,32590,32591,32594,32595,39304,24871,28291,22372,26118,25414,22256,25324,25193,24275,38420,22403,25289,21895,34593,33098,36771,21862,33713,26469,36182,34013,23146,26639,25318,31726,38417,20848,28572,35888,25597,35272,25042,32518,28866,28389,29701,27028,29436,24266,37070,26391,28010,25438,21171,29282,32769,20332,23013,37226,28889,28061,21202,20048,38647,38253,34174,30922,32047,20769,22418,25794,32907,31867,27882,26865,26974,20919,21400,26792,29313,40654,31729,29432,31163,28435,29702,26446,37324,40100,31036,33673,33620,21519,26647,20029,21385,21169,30782,21382,21033,20616,20363,20432,32598,32601,32603,32604,32605,32606,32608,32611,32612,32613,32614,32615,32619,32620,32621,32623,32624,32627,32629,32630,32631,32632,32634,32635,32636,32637,32639,32640,32642,32643,32644,32645,32646,32647,32648,32649,32651,32653,32655,32656,32657,32658,32659,32661,32662,32663,32664,32665,32667,32668,32672,32674,32675,32677,32678,32680,32681,32682,32683,32684,32685,32686,32689,32691,32692,32693,32694,32695,32698,32699,32702,32704,32706,32707,32708,32710,32711,32712,32713,32715,32717,32719,32720,32721,32722,32723,32726,32727,32729,32730,32731,32732,32733,32734,32738,32739,30178,31435,31890,27813,38582,21147,29827,21737,20457,32852,33714,36830,38256,24265,24604,28063,24088,25947,33080,38142,24651,28860,32451,31918,20937,26753,31921,33391,20004,36742,37327,26238,20142,35845,25769,32842,20698,30103,29134,23525,36797,28518,20102,25730,38243,24278,26009,21015,35010,28872,21155,29454,29747,26519,30967,38678,20020,37051,40158,28107,20955,36161,21533,25294,29618,33777,38646,40836,38083,20278,32666,20940,28789,38517,23725,39046,21478,20196,28316,29705,27060,30827,39311,30041,21016,30244,27969,26611,20845,40857,32843,21657,31548,31423,32740,32743,32744,32746,32747,32748,32749,32751,32754,32756,32757,32758,32759,32760,32761,32762,32765,32766,32767,32770,32775,32776,32777,32778,32782,32783,32785,32787,32794,32795,32797,32798,32799,32801,32803,32804,32811,32812,32813,32814,32815,32816,32818,32820,32825,32826,32828,32830,32832,32833,32836,32837,32839,32840,32841,32846,32847,32848,32849,32851,32853,32854,32855,32857,32859,32860,32861,32862,32863,32864,32865,32866,32867,32868,32869,32870,32871,32872,32875,32876,32877,32878,32879,32880,32882,32883,32884,32885,32886,32887,32888,32889,32890,32891,32892,32893,38534,22404,25314,38471,27004,23044,25602,31699,28431,38475,33446,21346,39045,24208,28809,25523,21348,34383,40065,40595,30860,38706,36335,36162,40575,28510,31108,24405,38470,25134,39540,21525,38109,20387,26053,23653,23649,32533,34385,27695,24459,29575,28388,32511,23782,25371,23402,28390,21365,20081,25504,30053,25249,36718,20262,20177,27814,32438,35770,33821,34746,32599,36923,38179,31657,39585,35064,33853,27931,39558,32476,22920,40635,29595,30721,34434,39532,39554,22043,21527,22475,20080,40614,21334,36808,33033,30610,39314,34542,28385,34067,26364,24930,28459,32894,32897,32898,32901,32904,32906,32909,32910,32911,32912,32913,32914,32916,32917,32919,32921,32926,32931,32934,32935,32936,32940,32944,32947,32949,32950,32952,32953,32955,32965,32967,32968,32969,32970,32971,32975,32976,32977,32978,32979,32980,32981,32984,32991,32992,32994,32995,32998,33006,33013,33015,33017,33019,33022,33023,33024,33025,33027,33028,33029,33031,33032,33035,33036,33045,33047,33049,33051,33052,33053,33055,33056,33057,33058,33059,33060,33061,33062,33063,33064,33065,33066,33067,33069,33070,33072,33075,33076,33077,33079,33081,33082,33083,33084,33085,33087,35881,33426,33579,30450,27667,24537,33725,29483,33541,38170,27611,30683,38086,21359,33538,20882,24125,35980,36152,20040,29611,26522,26757,37238,38665,29028,27809,30473,23186,38209,27599,32654,26151,23504,22969,23194,38376,38391,20204,33804,33945,27308,30431,38192,29467,26790,23391,30511,37274,38753,31964,36855,35868,24357,31859,31192,35269,27852,34588,23494,24130,26825,30496,32501,20885,20813,21193,23081,32517,38754,33495,25551,30596,34256,31186,28218,24217,22937,34065,28781,27665,25279,30399,25935,24751,38397,26126,34719,40483,38125,21517,21629,35884,25720,33088,33089,33090,33091,33092,33093,33095,33097,33101,33102,33103,33106,33110,33111,33112,33115,33116,33117,33118,33119,33121,33122,33123,33124,33126,33128,33130,33131,33132,33135,33138,33139,33141,33142,33143,33144,33153,33155,33156,33157,33158,33159,33161,33163,33164,33165,33166,33168,33170,33171,33172,33173,33174,33175,33177,33178,33182,33183,33184,33185,33186,33188,33189,33191,33193,33195,33196,33197,33198,33199,33200,33201,33202,33204,33205,33206,33207,33208,33209,33212,33213,33214,33215,33220,33221,33223,33224,33225,33227,33229,33230,33231,33232,33233,33234,33235,25721,34321,27169,33180,30952,25705,39764,25273,26411,33707,22696,40664,27819,28448,23518,38476,35851,29279,26576,25287,29281,20137,22982,27597,22675,26286,24149,21215,24917,26408,30446,30566,29287,31302,25343,21738,21584,38048,37027,23068,32435,27670,20035,22902,32784,22856,21335,30007,38590,22218,25376,33041,24700,38393,28118,21602,39297,20869,23273,33021,22958,38675,20522,27877,23612,25311,20320,21311,33147,36870,28346,34091,25288,24180,30910,25781,25467,24565,23064,37247,40479,23615,25423,32834,23421,21870,38218,38221,28037,24744,26592,29406,20957,23425,33236,33237,33238,33239,33240,33241,33242,33243,33244,33245,33246,33247,33248,33249,33250,33252,33253,33254,33256,33257,33259,33262,33263,33264,33265,33266,33269,33270,33271,33272,33273,33274,33277,33279,33283,33287,33288,33289,33290,33291,33294,33295,33297,33299,33301,33302,33303,33304,33305,33306,33309,33312,33316,33317,33318,33319,33321,33326,33330,33338,33340,33341,33343,33344,33345,33346,33347,33349,33350,33352,33354,33356,33357,33358,33360,33361,33362,33363,33364,33365,33366,33367,33369,33371,33372,33373,33374,33376,33377,33378,33379,33380,33381,33382,33383,33385,25319,27870,29275,25197,38062,32445,33043,27987,20892,24324,22900,21162,24594,22899,26262,34384,30111,25386,25062,31983,35834,21734,27431,40485,27572,34261,21589,20598,27812,21866,36276,29228,24085,24597,29750,25293,25490,29260,24472,28227,27966,25856,28504,30424,30928,30460,30036,21028,21467,20051,24222,26049,32810,32982,25243,21638,21032,28846,34957,36305,27873,21624,32986,22521,35060,36180,38506,37197,20329,27803,21943,30406,30768,25256,28921,28558,24429,34028,26842,30844,31735,33192,26379,40527,25447,30896,22383,30738,38713,25209,25259,21128,29749,27607,33386,33387,33388,33389,33393,33397,33398,33399,33400,33403,33404,33408,33409,33411,33413,33414,33415,33417,33420,33424,33427,33428,33429,33430,33434,33435,33438,33440,33442,33443,33447,33458,33461,33462,33466,33467,33468,33471,33472,33474,33475,33477,33478,33481,33488,33494,33497,33498,33501,33506,33511,33512,33513,33514,33516,33517,33518,33520,33522,33523,33525,33526,33528,33530,33532,33533,33534,33535,33536,33546,33547,33549,33552,33554,33555,33558,33560,33561,33565,33566,33567,33568,33569,33570,33571,33572,33573,33574,33577,33578,33582,33584,33586,33591,33595,33597,21860,33086,30130,30382,21305,30174,20731,23617,35692,31687,20559,29255,39575,39128,28418,29922,31080,25735,30629,25340,39057,36139,21697,32856,20050,22378,33529,33805,24179,20973,29942,35780,23631,22369,27900,39047,23110,30772,39748,36843,31893,21078,25169,38138,20166,33670,33889,33769,33970,22484,26420,22275,26222,28006,35889,26333,28689,26399,27450,26646,25114,22971,19971,20932,28422,26578,27791,20854,26827,22855,27495,30054,23822,33040,40784,26071,31048,31041,39569,36215,23682,20062,20225,21551,22865,30732,22120,27668,36804,24323,27773,27875,35755,25488,33598,33599,33601,33602,33604,33605,33608,33610,33611,33612,33613,33614,33619,33621,33622,33623,33624,33625,33629,33634,33648,33649,33650,33651,33652,33653,33654,33657,33658,33662,33663,33664,33665,33666,33667,33668,33671,33672,33674,33675,33676,33677,33679,33680,33681,33684,33685,33686,33687,33689,33690,33693,33695,33697,33698,33699,33700,33701,33702,33703,33708,33709,33710,33711,33717,33723,33726,33727,33730,33731,33732,33734,33736,33737,33739,33741,33742,33744,33745,33746,33747,33749,33751,33753,33754,33755,33758,33762,33763,33764,33766,33767,33768,33771,33772,33773,24688,27965,29301,25190,38030,38085,21315,36801,31614,20191,35878,20094,40660,38065,38067,21069,28508,36963,27973,35892,22545,23884,27424,27465,26538,21595,33108,32652,22681,34103,24378,25250,27207,38201,25970,24708,26725,30631,20052,20392,24039,38808,25772,32728,23789,20431,31373,20999,33540,19988,24623,31363,38054,20405,20146,31206,29748,21220,33465,25810,31165,23517,27777,38738,36731,27682,20542,21375,28165,25806,26228,27696,24773,39031,35831,24198,29756,31351,31179,19992,37041,29699,27714,22234,37195,27845,36235,21306,34502,26354,36527,23624,39537,28192,33774,33775,33779,33780,33781,33782,33783,33786,33787,33788,33790,33791,33792,33794,33797,33799,33800,33801,33802,33808,33810,33811,33812,33813,33814,33815,33817,33818,33819,33822,33823,33824,33825,33826,33827,33833,33834,33835,33836,33837,33838,33839,33840,33842,33843,33844,33845,33846,33847,33849,33850,33851,33854,33855,33856,33857,33858,33859,33860,33861,33863,33864,33865,33866,33867,33868,33869,33870,33871,33872,33874,33875,33876,33877,33878,33880,33885,33886,33887,33888,33890,33892,33893,33894,33895,33896,33898,33902,33903,33904,33906,33908,33911,33913,33915,33916,21462,23094,40843,36259,21435,22280,39079,26435,37275,27849,20840,30154,25331,29356,21048,21149,32570,28820,30264,21364,40522,27063,30830,38592,35033,32676,28982,29123,20873,26579,29924,22756,25880,22199,35753,39286,25200,32469,24825,28909,22764,20161,20154,24525,38887,20219,35748,20995,22922,32427,25172,20173,26085,25102,33592,33993,33635,34701,29076,28342,23481,32466,20887,25545,26580,32905,33593,34837,20754,23418,22914,36785,20083,27741,20837,35109,36719,38446,34122,29790,38160,38384,28070,33509,24369,25746,27922,33832,33134,40131,22622,36187,19977,21441,33917,33918,33919,33920,33921,33923,33924,33925,33926,33930,33933,33935,33936,33937,33938,33939,33940,33941,33942,33944,33946,33947,33949,33950,33951,33952,33954,33955,33956,33957,33958,33959,33960,33961,33962,33963,33964,33965,33966,33968,33969,33971,33973,33974,33975,33979,33980,33982,33984,33986,33987,33989,33990,33991,33992,33995,33996,33998,33999,34002,34004,34005,34007,34008,34009,34010,34011,34012,34014,34017,34018,34020,34023,34024,34025,34026,34027,34029,34030,34031,34033,34034,34035,34036,34037,34038,34039,34040,34041,34042,34043,34045,34046,34048,34049,34050,20254,25955,26705,21971,20007,25620,39578,25195,23234,29791,33394,28073,26862,20711,33678,30722,26432,21049,27801,32433,20667,21861,29022,31579,26194,29642,33515,26441,23665,21024,29053,34923,38378,38485,25797,36193,33203,21892,27733,25159,32558,22674,20260,21830,36175,26188,19978,23578,35059,26786,25422,31245,28903,33421,21242,38902,23569,21736,37045,32461,22882,36170,34503,33292,33293,36198,25668,23556,24913,28041,31038,35774,30775,30003,21627,20280,36523,28145,23072,32453,31070,27784,23457,23158,29978,32958,24910,28183,22768,29983,29989,29298,21319,32499,34051,34052,34053,34054,34055,34056,34057,34058,34059,34061,34062,34063,34064,34066,34068,34069,34070,34072,34073,34075,34076,34077,34078,34080,34082,34083,34084,34085,34086,34087,34088,34089,34090,34093,34094,34095,34096,34097,34098,34099,34100,34101,34102,34110,34111,34112,34113,34114,34116,34117,34118,34119,34123,34124,34125,34126,34127,34128,34129,34130,34131,34132,34133,34135,34136,34138,34139,34140,34141,34143,34144,34145,34146,34147,34149,34150,34151,34153,34154,34155,34156,34157,34158,34159,34160,34161,34163,34165,34166,34167,34168,34172,34173,34175,34176,34177,30465,30427,21097,32988,22307,24072,22833,29422,26045,28287,35799,23608,34417,21313,30707,25342,26102,20160,39135,34432,23454,35782,21490,30690,20351,23630,39542,22987,24335,31034,22763,19990,26623,20107,25325,35475,36893,21183,26159,21980,22124,36866,20181,20365,37322,39280,27663,24066,24643,23460,35270,35797,25910,25163,39318,23432,23551,25480,21806,21463,30246,20861,34092,26530,26803,27530,25234,36755,21460,33298,28113,30095,20070,36174,23408,29087,34223,26257,26329,32626,34560,40653,40736,23646,26415,36848,26641,26463,25101,31446,22661,24246,25968,28465,34178,34179,34182,34184,34185,34186,34187,34188,34189,34190,34192,34193,34194,34195,34196,34197,34198,34199,34200,34201,34202,34205,34206,34207,34208,34209,34210,34211,34213,34214,34215,34217,34219,34220,34221,34225,34226,34227,34228,34229,34230,34232,34234,34235,34236,34237,34238,34239,34240,34242,34243,34244,34245,34246,34247,34248,34250,34251,34252,34253,34254,34257,34258,34260,34262,34263,34264,34265,34266,34267,34269,34270,34271,34272,34273,34274,34275,34277,34278,34279,34280,34282,34283,34284,34285,34286,34287,34288,34289,34290,34291,34292,34293,34294,34295,34296,24661,21047,32781,25684,34928,29993,24069,26643,25332,38684,21452,29245,35841,27700,30561,31246,21550,30636,39034,33308,35828,30805,26388,28865,26031,25749,22070,24605,31169,21496,19997,27515,32902,23546,21987,22235,20282,20284,39282,24051,26494,32824,24578,39042,36865,23435,35772,35829,25628,33368,25822,22013,33487,37221,20439,32032,36895,31903,20723,22609,28335,23487,35785,32899,37240,33948,31639,34429,38539,38543,32485,39635,30862,23681,31319,36930,38567,31071,23385,25439,31499,34001,26797,21766,32553,29712,32034,38145,25152,22604,20182,23427,22905,22612,34297,34298,34300,34301,34302,34304,34305,34306,34307,34308,34310,34311,34312,34313,34314,34315,34316,34317,34318,34319,34320,34322,34323,34324,34325,34327,34328,34329,34330,34331,34332,34333,34334,34335,34336,34337,34338,34339,34340,34341,34342,34344,34346,34347,34348,34349,34350,34351,34352,34353,34354,34355,34356,34357,34358,34359,34361,34362,34363,34365,34366,34367,34368,34369,34370,34371,34372,34373,34374,34375,34376,34377,34378,34379,34380,34386,34387,34389,34390,34391,34392,34393,34395,34396,34397,34399,34400,34401,34403,34404,34405,34406,34407,34408,34409,34410,29549,25374,36427,36367,32974,33492,25260,21488,27888,37214,22826,24577,27760,22349,25674,36138,30251,28393,22363,27264,30192,28525,35885,35848,22374,27631,34962,30899,25506,21497,28845,27748,22616,25642,22530,26848,33179,21776,31958,20504,36538,28108,36255,28907,25487,28059,28372,32486,33796,26691,36867,28120,38518,35752,22871,29305,34276,33150,30140,35466,26799,21076,36386,38161,25552,39064,36420,21884,20307,26367,22159,24789,28053,21059,23625,22825,28155,22635,3e4,29980,24684,33300,33094,25361,26465,36834,30522,36339,36148,38081,24086,21381,21548,28867,34413,34415,34416,34418,34419,34420,34421,34422,34423,34424,34435,34436,34437,34438,34439,34440,34441,34446,34447,34448,34449,34450,34452,34454,34455,34456,34457,34458,34459,34462,34463,34464,34465,34466,34469,34470,34475,34477,34478,34482,34483,34487,34488,34489,34491,34492,34493,34494,34495,34497,34498,34499,34501,34504,34508,34509,34514,34515,34517,34518,34519,34522,34524,34525,34528,34529,34530,34531,34533,34534,34535,34536,34538,34539,34540,34543,34549,34550,34551,34554,34555,34556,34557,34559,34561,34564,34565,34566,34571,34572,34574,34575,34576,34577,34580,34582,27712,24311,20572,20141,24237,25402,33351,36890,26704,37230,30643,21516,38108,24420,31461,26742,25413,31570,32479,30171,20599,25237,22836,36879,20984,31171,31361,22270,24466,36884,28034,23648,22303,21520,20820,28237,22242,25512,39059,33151,34581,35114,36864,21534,23663,33216,25302,25176,33073,40501,38464,39534,39548,26925,22949,25299,21822,25366,21703,34521,27964,23043,29926,34972,27498,22806,35916,24367,28286,29609,39037,20024,28919,23436,30871,25405,26202,30358,24779,23451,23113,19975,33109,27754,29579,20129,26505,32593,24448,26106,26395,24536,22916,23041,34585,34587,34589,34591,34592,34596,34598,34599,34600,34602,34603,34604,34605,34607,34608,34610,34611,34613,34614,34616,34617,34618,34620,34621,34624,34625,34626,34627,34628,34629,34630,34634,34635,34637,34639,34640,34641,34642,34644,34645,34646,34648,34650,34651,34652,34653,34654,34655,34657,34658,34662,34663,34664,34665,34666,34667,34668,34669,34671,34673,34674,34675,34677,34679,34680,34681,34682,34687,34688,34689,34692,34694,34695,34697,34698,34700,34702,34703,34704,34705,34706,34708,34709,34710,34712,34713,34714,34715,34716,34717,34718,34720,34721,34722,34723,34724,24013,24494,21361,38886,36829,26693,22260,21807,24799,20026,28493,32500,33479,33806,22996,20255,20266,23614,32428,26410,34074,21619,30031,32963,21890,39759,20301,28205,35859,23561,24944,21355,30239,28201,34442,25991,38395,32441,21563,31283,32010,38382,21985,32705,29934,25373,34583,28065,31389,25105,26017,21351,25569,27779,24043,21596,38056,20044,27745,35820,23627,26080,33436,26791,21566,21556,27595,27494,20116,25410,21320,33310,20237,20398,22366,25098,38654,26212,29289,21247,21153,24735,35823,26132,29081,26512,35199,30802,30717,26224,22075,21560,38177,29306,34725,34726,34727,34729,34730,34734,34736,34737,34738,34740,34742,34743,34744,34745,34747,34748,34750,34751,34753,34754,34755,34756,34757,34759,34760,34761,34764,34765,34766,34767,34768,34772,34773,34774,34775,34776,34777,34778,34780,34781,34782,34783,34785,34786,34787,34788,34790,34791,34792,34793,34795,34796,34797,34799,34800,34801,34802,34803,34804,34805,34806,34807,34808,34810,34811,34812,34813,34815,34816,34817,34818,34820,34821,34822,34823,34824,34825,34827,34828,34829,34830,34831,34832,34833,34834,34836,34839,34840,34841,34842,34844,34845,34846,34847,34848,34851,31232,24687,24076,24713,33181,22805,24796,29060,28911,28330,27728,29312,27268,34989,24109,20064,23219,21916,38115,27927,31995,38553,25103,32454,30606,34430,21283,38686,36758,26247,23777,20384,29421,19979,21414,22799,21523,25472,38184,20808,20185,40092,32420,21688,36132,34900,33335,38386,28046,24358,23244,26174,38505,29616,29486,21439,33146,39301,32673,23466,38519,38480,32447,30456,21410,38262,39321,31665,35140,28248,20065,32724,31077,35814,24819,21709,20139,39033,24055,27233,20687,21521,35937,33831,30813,38660,21066,21742,22179,38144,28040,23477,28102,26195,34852,34853,34854,34855,34856,34857,34858,34859,34860,34861,34862,34863,34864,34865,34867,34868,34869,34870,34871,34872,34874,34875,34877,34878,34879,34881,34882,34883,34886,34887,34888,34889,34890,34891,34894,34895,34896,34897,34898,34899,34901,34902,34904,34906,34907,34908,34909,34910,34911,34912,34918,34919,34922,34925,34927,34929,34931,34932,34933,34934,34936,34937,34938,34939,34940,34944,34947,34950,34951,34953,34954,34956,34958,34959,34960,34961,34963,34964,34965,34967,34968,34969,34970,34971,34973,34974,34975,34976,34977,34979,34981,34982,34983,34984,34985,34986,23567,23389,26657,32918,21880,31505,25928,26964,20123,27463,34638,38795,21327,25375,25658,37034,26012,32961,35856,20889,26800,21368,34809,25032,27844,27899,35874,23633,34218,33455,38156,27427,36763,26032,24571,24515,20449,34885,26143,33125,29481,24826,20852,21009,22411,24418,37026,34892,37266,24184,26447,24615,22995,20804,20982,33016,21256,27769,38596,29066,20241,20462,32670,26429,21957,38152,31168,34966,32483,22687,25100,38656,34394,22040,39035,24464,35768,33988,37207,21465,26093,24207,30044,24676,32110,23167,32490,32493,36713,21927,23459,24748,26059,29572,34988,34990,34991,34992,34994,34995,34996,34997,34998,35e3,35001,35002,35003,35005,35006,35007,35008,35011,35012,35015,35016,35018,35019,35020,35021,35023,35024,35025,35027,35030,35031,35034,35035,35036,35037,35038,35040,35041,35046,35047,35049,35050,35051,35052,35053,35054,35055,35058,35061,35062,35063,35066,35067,35069,35071,35072,35073,35075,35076,35077,35078,35079,35080,35081,35083,35084,35085,35086,35087,35089,35092,35093,35094,35095,35096,35100,35101,35102,35103,35104,35106,35107,35108,35110,35111,35112,35113,35116,35117,35118,35119,35121,35122,35123,35125,35127,36873,30307,30505,32474,38772,34203,23398,31348,38634,34880,21195,29071,24490,26092,35810,23547,39535,24033,27529,27739,35757,35759,36874,36805,21387,25276,40486,40493,21568,20011,33469,29273,34460,23830,34905,28079,38597,21713,20122,35766,28937,21693,38409,28895,28153,30416,20005,30740,34578,23721,24310,35328,39068,38414,28814,27839,22852,25513,30524,34893,28436,33395,22576,29141,21388,30746,38593,21761,24422,28976,23476,35866,39564,27523,22830,40495,31207,26472,25196,20335,30113,32650,27915,38451,27687,20208,30162,20859,26679,28478,36992,33136,22934,29814,35128,35129,35130,35131,35132,35133,35134,35135,35136,35138,35139,35141,35142,35143,35144,35145,35146,35147,35148,35149,35150,35151,35152,35153,35154,35155,35156,35157,35158,35159,35160,35161,35162,35163,35164,35165,35168,35169,35170,35171,35172,35173,35175,35176,35177,35178,35179,35180,35181,35182,35183,35184,35185,35186,35187,35188,35189,35190,35191,35192,35193,35194,35196,35197,35198,35200,35202,35204,35205,35207,35208,35209,35210,35211,35212,35213,35214,35215,35216,35217,35218,35219,35220,35221,35222,35223,35224,35225,35226,35227,35228,35229,35230,35231,35232,35233,25671,23591,36965,31377,35875,23002,21676,33280,33647,35201,32768,26928,22094,32822,29239,37326,20918,20063,39029,25494,19994,21494,26355,33099,22812,28082,19968,22777,21307,25558,38129,20381,20234,34915,39056,22839,36951,31227,20202,33008,30097,27778,23452,23016,24413,26885,34433,20506,24050,20057,30691,20197,33402,25233,26131,37009,23673,20159,24441,33222,36920,32900,30123,20134,35028,24847,27589,24518,20041,30410,28322,35811,35758,35850,35793,24322,32764,32716,32462,33589,33643,22240,27575,38899,38452,23035,21535,38134,28139,23493,39278,23609,24341,38544,35234,35235,35236,35237,35238,35239,35240,35241,35242,35243,35244,35245,35246,35247,35248,35249,35250,35251,35252,35253,35254,35255,35256,35257,35258,35259,35260,35261,35262,35263,35264,35267,35277,35283,35284,35285,35287,35288,35289,35291,35293,35295,35296,35297,35298,35300,35303,35304,35305,35306,35308,35309,35310,35312,35313,35314,35316,35317,35318,35319,35320,35321,35322,35323,35324,35325,35326,35327,35329,35330,35331,35332,35333,35334,35336,35337,35338,35339,35340,35341,35342,35343,35344,35345,35346,35347,35348,35349,35350,35351,35352,35353,35354,35355,35356,35357,21360,33521,27185,23156,40560,24212,32552,33721,33828,33829,33639,34631,36814,36194,30408,24433,39062,30828,26144,21727,25317,20323,33219,30152,24248,38605,36362,34553,21647,27891,28044,27704,24703,21191,29992,24189,20248,24736,24551,23588,30001,37038,38080,29369,27833,28216,37193,26377,21451,21491,20305,37321,35825,21448,24188,36802,28132,20110,30402,27014,34398,24858,33286,20313,20446,36926,40060,24841,28189,28180,38533,20104,23089,38632,19982,23679,31161,23431,35821,32701,29577,22495,33419,37057,21505,36935,21947,23786,24481,24840,27442,29425,32946,35465,35358,35359,35360,35361,35362,35363,35364,35365,35366,35367,35368,35369,35370,35371,35372,35373,35374,35375,35376,35377,35378,35379,35380,35381,35382,35383,35384,35385,35386,35387,35388,35389,35391,35392,35393,35394,35395,35396,35397,35398,35399,35401,35402,35403,35404,35405,35406,35407,35408,35409,35410,35411,35412,35413,35414,35415,35416,35417,35418,35419,35420,35421,35422,35423,35424,35425,35426,35427,35428,35429,35430,35431,35432,35433,35434,35435,35436,35437,35438,35439,35440,35441,35442,35443,35444,35445,35446,35447,35448,35450,35451,35452,35453,35454,35455,35456,28020,23507,35029,39044,35947,39533,40499,28170,20900,20803,22435,34945,21407,25588,36757,22253,21592,22278,29503,28304,32536,36828,33489,24895,24616,38498,26352,32422,36234,36291,38053,23731,31908,26376,24742,38405,32792,20113,37095,21248,38504,20801,36816,34164,37213,26197,38901,23381,21277,30776,26434,26685,21705,28798,23472,36733,20877,22312,21681,25874,26242,36190,36163,33039,33900,36973,31967,20991,34299,26531,26089,28577,34468,36481,22122,36896,30338,28790,29157,36131,25321,21017,27901,36156,24590,22686,24974,26366,36192,25166,21939,28195,26413,36711,35457,35458,35459,35460,35461,35462,35463,35464,35467,35468,35469,35470,35471,35472,35473,35474,35476,35477,35478,35479,35480,35481,35482,35483,35484,35485,35486,35487,35488,35489,35490,35491,35492,35493,35494,35495,35496,35497,35498,35499,35500,35501,35502,35503,35504,35505,35506,35507,35508,35509,35510,35511,35512,35513,35514,35515,35516,35517,35518,35519,35520,35521,35522,35523,35524,35525,35526,35527,35528,35529,35530,35531,35532,35533,35534,35535,35536,35537,35538,35539,35540,35541,35542,35543,35544,35545,35546,35547,35548,35549,35550,35551,35552,35553,35554,35555,38113,38392,30504,26629,27048,21643,20045,28856,35784,25688,25995,23429,31364,20538,23528,30651,27617,35449,31896,27838,30415,26025,36759,23853,23637,34360,26632,21344,25112,31449,28251,32509,27167,31456,24432,28467,24352,25484,28072,26454,19976,24080,36134,20183,32960,30260,38556,25307,26157,25214,27836,36213,29031,32617,20806,32903,21484,36974,25240,21746,34544,36761,32773,38167,34071,36825,27993,29645,26015,30495,29956,30759,33275,36126,38024,20390,26517,30137,35786,38663,25391,38215,38453,33976,25379,30529,24449,29424,20105,24596,25972,25327,27491,25919,35556,35557,35558,35559,35560,35561,35562,35563,35564,35565,35566,35567,35568,35569,35570,35571,35572,35573,35574,35575,35576,35577,35578,35579,35580,35581,35582,35583,35584,35585,35586,35587,35588,35589,35590,35592,35593,35594,35595,35596,35597,35598,35599,35600,35601,35602,35603,35604,35605,35606,35607,35608,35609,35610,35611,35612,35613,35614,35615,35616,35617,35618,35619,35620,35621,35623,35624,35625,35626,35627,35628,35629,35630,35631,35632,35633,35634,35635,35636,35637,35638,35639,35640,35641,35642,35643,35644,35645,35646,35647,35648,35649,35650,35651,35652,35653,24103,30151,37073,35777,33437,26525,25903,21553,34584,30693,32930,33026,27713,20043,32455,32844,30452,26893,27542,25191,20540,20356,22336,25351,27490,36286,21482,26088,32440,24535,25370,25527,33267,33268,32622,24092,23769,21046,26234,31209,31258,36136,28825,30164,28382,27835,31378,20013,30405,24544,38047,34935,32456,31181,32959,37325,20210,20247,33311,21608,24030,27954,35788,31909,36724,32920,24090,21650,30385,23449,26172,39588,29664,26666,34523,26417,29482,35832,35803,36880,31481,28891,29038,25284,30633,22065,20027,33879,26609,21161,34496,36142,38136,31569,35654,35655,35656,35657,35658,35659,35660,35661,35662,35663,35664,35665,35666,35667,35668,35669,35670,35671,35672,35673,35674,35675,35676,35677,35678,35679,35680,35681,35682,35683,35684,35685,35687,35688,35689,35690,35691,35693,35694,35695,35696,35697,35698,35699,35700,35701,35702,35703,35704,35705,35706,35707,35708,35709,35710,35711,35712,35713,35714,35715,35716,35717,35718,35719,35720,35721,35722,35723,35724,35725,35726,35727,35728,35729,35730,35731,35732,35733,35734,35735,35736,35737,35738,35739,35740,35741,35742,35743,35756,35761,35771,35783,35792,35818,35849,35870,20303,27880,31069,39547,25235,29226,25341,19987,30742,36716,25776,36186,31686,26729,24196,35013,22918,25758,22766,29366,26894,38181,36861,36184,22368,32512,35846,20934,25417,25305,21331,26700,29730,33537,37196,21828,30528,28796,27978,20857,21672,36164,23039,28363,28100,23388,32043,20180,31869,28371,23376,33258,28173,23383,39683,26837,36394,23447,32508,24635,32437,37049,36208,22863,25549,31199,36275,21330,26063,31062,35781,38459,32452,38075,32386,22068,37257,26368,32618,23562,36981,26152,24038,20304,26590,20570,20316,22352,24231,59408,59409,59410,59411,59412,35896,35897,35898,35899,35900,35901,35902,35903,35904,35906,35907,35908,35909,35912,35914,35915,35917,35918,35919,35920,35921,35922,35923,35924,35926,35927,35928,35929,35931,35932,35933,35934,35935,35936,35939,35940,35941,35942,35943,35944,35945,35948,35949,35950,35951,35952,35953,35954,35956,35957,35958,35959,35963,35964,35965,35966,35967,35968,35969,35971,35972,35974,35975,35976,35979,35981,35982,35983,35984,35985,35986,35987,35989,35990,35991,35993,35994,35995,35996,35997,35998,35999,36e3,36001,36002,36003,36004,36005,36006,36007,36008,36009,36010,36011,36012,36013,20109,19980,20800,19984,24319,21317,19989,20120,19998,39730,23404,22121,20008,31162,20031,21269,20039,22829,29243,21358,27664,22239,32996,39319,27603,30590,40727,20022,20127,40720,20060,20073,20115,33416,23387,21868,22031,20164,21389,21405,21411,21413,21422,38757,36189,21274,21493,21286,21294,21310,36188,21350,21347,20994,21e3,21006,21037,21043,21055,21056,21068,21086,21089,21084,33967,21117,21122,21121,21136,21139,20866,32596,20155,20163,20169,20162,20200,20193,20203,20190,20251,20211,20258,20324,20213,20261,20263,20233,20267,20318,20327,25912,20314,20317,36014,36015,36016,36017,36018,36019,36020,36021,36022,36023,36024,36025,36026,36027,36028,36029,36030,36031,36032,36033,36034,36035,36036,36037,36038,36039,36040,36041,36042,36043,36044,36045,36046,36047,36048,36049,36050,36051,36052,36053,36054,36055,36056,36057,36058,36059,36060,36061,36062,36063,36064,36065,36066,36067,36068,36069,36070,36071,36072,36073,36074,36075,36076,36077,36078,36079,36080,36081,36082,36083,36084,36085,36086,36087,36088,36089,36090,36091,36092,36093,36094,36095,36096,36097,36098,36099,36100,36101,36102,36103,36104,36105,36106,36107,36108,36109,20319,20311,20274,20285,20342,20340,20369,20361,20355,20367,20350,20347,20394,20348,20396,20372,20454,20456,20458,20421,20442,20451,20444,20433,20447,20472,20521,20556,20467,20524,20495,20526,20525,20478,20508,20492,20517,20520,20606,20547,20565,20552,20558,20588,20603,20645,20647,20649,20666,20694,20742,20717,20716,20710,20718,20743,20747,20189,27709,20312,20325,20430,40864,27718,31860,20846,24061,40649,39320,20865,22804,21241,21261,35335,21264,20971,22809,20821,20128,20822,20147,34926,34980,20149,33044,35026,31104,23348,34819,32696,20907,20913,20925,20924,36110,36111,36112,36113,36114,36115,36116,36117,36118,36119,36120,36121,36122,36123,36124,36128,36177,36178,36183,36191,36197,36200,36201,36202,36204,36206,36207,36209,36210,36216,36217,36218,36219,36220,36221,36222,36223,36224,36226,36227,36230,36231,36232,36233,36236,36237,36238,36239,36240,36242,36243,36245,36246,36247,36248,36249,36250,36251,36252,36253,36254,36256,36257,36258,36260,36261,36262,36263,36264,36265,36266,36267,36268,36269,36270,36271,36272,36274,36278,36279,36281,36283,36285,36288,36289,36290,36293,36295,36296,36297,36298,36301,36304,36306,36307,36308,20935,20886,20898,20901,35744,35750,35751,35754,35764,35765,35767,35778,35779,35787,35791,35790,35794,35795,35796,35798,35800,35801,35804,35807,35808,35812,35816,35817,35822,35824,35827,35830,35833,35836,35839,35840,35842,35844,35847,35852,35855,35857,35858,35860,35861,35862,35865,35867,35864,35869,35871,35872,35873,35877,35879,35882,35883,35886,35887,35890,35891,35893,35894,21353,21370,38429,38434,38433,38449,38442,38461,38460,38466,38473,38484,38495,38503,38508,38514,38516,38536,38541,38551,38576,37015,37019,37021,37017,37036,37025,37044,37043,37046,37050,36309,36312,36313,36316,36320,36321,36322,36325,36326,36327,36329,36333,36334,36336,36337,36338,36340,36342,36348,36350,36351,36352,36353,36354,36355,36356,36358,36359,36360,36363,36365,36366,36368,36369,36370,36371,36373,36374,36375,36376,36377,36378,36379,36380,36384,36385,36388,36389,36390,36391,36392,36395,36397,36400,36402,36403,36404,36406,36407,36408,36411,36412,36414,36415,36419,36421,36422,36428,36429,36430,36431,36432,36435,36436,36437,36438,36439,36440,36442,36443,36444,36445,36446,36447,36448,36449,36450,36451,36452,36453,36455,36456,36458,36459,36462,36465,37048,37040,37071,37061,37054,37072,37060,37063,37075,37094,37090,37084,37079,37083,37099,37103,37118,37124,37154,37150,37155,37169,37167,37177,37187,37190,21005,22850,21154,21164,21165,21182,21759,21200,21206,21232,21471,29166,30669,24308,20981,20988,39727,21430,24321,30042,24047,22348,22441,22433,22654,22716,22725,22737,22313,22316,22314,22323,22329,22318,22319,22364,22331,22338,22377,22405,22379,22406,22396,22395,22376,22381,22390,22387,22445,22436,22412,22450,22479,22439,22452,22419,22432,22485,22488,22490,22489,22482,22456,22516,22511,22520,22500,22493,36467,36469,36471,36472,36473,36474,36475,36477,36478,36480,36482,36483,36484,36486,36488,36489,36490,36491,36492,36493,36494,36497,36498,36499,36501,36502,36503,36504,36505,36506,36507,36509,36511,36512,36513,36514,36515,36516,36517,36518,36519,36520,36521,36522,36525,36526,36528,36529,36531,36532,36533,36534,36535,36536,36537,36539,36540,36541,36542,36543,36544,36545,36546,36547,36548,36549,36550,36551,36552,36553,36554,36555,36556,36557,36559,36560,36561,36562,36563,36564,36565,36566,36567,36568,36569,36570,36571,36572,36573,36574,36575,36576,36577,36578,36579,36580,22539,22541,22525,22509,22528,22558,22553,22596,22560,22629,22636,22657,22665,22682,22656,39336,40729,25087,33401,33405,33407,33423,33418,33448,33412,33422,33425,33431,33433,33451,33464,33470,33456,33480,33482,33507,33432,33463,33454,33483,33484,33473,33449,33460,33441,33450,33439,33476,33486,33444,33505,33545,33527,33508,33551,33543,33500,33524,33490,33496,33548,33531,33491,33553,33562,33542,33556,33557,33504,33493,33564,33617,33627,33628,33544,33682,33596,33588,33585,33691,33630,33583,33615,33607,33603,33631,33600,33559,33632,33581,33594,33587,33638,33637,36581,36582,36583,36584,36585,36586,36587,36588,36589,36590,36591,36592,36593,36594,36595,36596,36597,36598,36599,36600,36601,36602,36603,36604,36605,36606,36607,36608,36609,36610,36611,36612,36613,36614,36615,36616,36617,36618,36619,36620,36621,36622,36623,36624,36625,36626,36627,36628,36629,36630,36631,36632,36633,36634,36635,36636,36637,36638,36639,36640,36641,36642,36643,36644,36645,36646,36647,36648,36649,36650,36651,36652,36653,36654,36655,36656,36657,36658,36659,36660,36661,36662,36663,36664,36665,36666,36667,36668,36669,36670,36671,36672,36673,36674,36675,36676,33640,33563,33641,33644,33642,33645,33646,33712,33656,33715,33716,33696,33706,33683,33692,33669,33660,33718,33705,33661,33720,33659,33688,33694,33704,33722,33724,33729,33793,33765,33752,22535,33816,33803,33757,33789,33750,33820,33848,33809,33798,33748,33759,33807,33795,33784,33785,33770,33733,33728,33830,33776,33761,33884,33873,33882,33881,33907,33927,33928,33914,33929,33912,33852,33862,33897,33910,33932,33934,33841,33901,33985,33997,34e3,34022,33981,34003,33994,33983,33978,34016,33953,33977,33972,33943,34021,34019,34060,29965,34104,34032,34105,34079,34106,36677,36678,36679,36680,36681,36682,36683,36684,36685,36686,36687,36688,36689,36690,36691,36692,36693,36694,36695,36696,36697,36698,36699,36700,36701,36702,36703,36704,36705,36706,36707,36708,36709,36714,36736,36748,36754,36765,36768,36769,36770,36772,36773,36774,36775,36778,36780,36781,36782,36783,36786,36787,36788,36789,36791,36792,36794,36795,36796,36799,36800,36803,36806,36809,36810,36811,36812,36813,36815,36818,36822,36823,36826,36832,36833,36835,36839,36844,36847,36849,36850,36852,36853,36854,36858,36859,36860,36862,36863,36871,36872,36876,36878,36883,36885,36888,34134,34107,34047,34044,34137,34120,34152,34148,34142,34170,30626,34115,34162,34171,34212,34216,34183,34191,34169,34222,34204,34181,34233,34231,34224,34259,34241,34268,34303,34343,34309,34345,34326,34364,24318,24328,22844,22849,32823,22869,22874,22872,21263,23586,23589,23596,23604,25164,25194,25247,25275,25290,25306,25303,25326,25378,25334,25401,25419,25411,25517,25590,25457,25466,25486,25524,25453,25516,25482,25449,25518,25532,25586,25592,25568,25599,25540,25566,25550,25682,25542,25534,25669,25665,25611,25627,25632,25612,25638,25633,25694,25732,25709,25750,36889,36892,36899,36900,36901,36903,36904,36905,36906,36907,36908,36912,36913,36914,36915,36916,36919,36921,36922,36925,36927,36928,36931,36933,36934,36936,36937,36938,36939,36940,36942,36948,36949,36950,36953,36954,36956,36957,36958,36959,36960,36961,36964,36966,36967,36969,36970,36971,36972,36975,36976,36977,36978,36979,36982,36983,36984,36985,36986,36987,36988,36990,36993,36996,36997,36998,36999,37001,37002,37004,37005,37006,37007,37008,37010,37012,37014,37016,37018,37020,37022,37023,37024,37028,37029,37031,37032,37033,37035,37037,37042,37047,37052,37053,37055,37056,25722,25783,25784,25753,25786,25792,25808,25815,25828,25826,25865,25893,25902,24331,24530,29977,24337,21343,21489,21501,21481,21480,21499,21522,21526,21510,21579,21586,21587,21588,21590,21571,21537,21591,21593,21539,21554,21634,21652,21623,21617,21604,21658,21659,21636,21622,21606,21661,21712,21677,21698,21684,21714,21671,21670,21715,21716,21618,21667,21717,21691,21695,21708,21721,21722,21724,21673,21674,21668,21725,21711,21726,21787,21735,21792,21757,21780,21747,21794,21795,21775,21777,21799,21802,21863,21903,21941,21833,21869,21825,21845,21823,21840,21820,37058,37059,37062,37064,37065,37067,37068,37069,37074,37076,37077,37078,37080,37081,37082,37086,37087,37088,37091,37092,37093,37097,37098,37100,37102,37104,37105,37106,37107,37109,37110,37111,37113,37114,37115,37116,37119,37120,37121,37123,37125,37126,37127,37128,37129,37130,37131,37132,37133,37134,37135,37136,37137,37138,37139,37140,37141,37142,37143,37144,37146,37147,37148,37149,37151,37152,37153,37156,37157,37158,37159,37160,37161,37162,37163,37164,37165,37166,37168,37170,37171,37172,37173,37174,37175,37176,37178,37179,37180,37181,37182,37183,37184,37185,37186,37188,21815,21846,21877,21878,21879,21811,21808,21852,21899,21970,21891,21937,21945,21896,21889,21919,21886,21974,21905,21883,21983,21949,21950,21908,21913,21994,22007,21961,22047,21969,21995,21996,21972,21990,21981,21956,21999,21989,22002,22003,21964,21965,21992,22005,21988,36756,22046,22024,22028,22017,22052,22051,22014,22016,22055,22061,22104,22073,22103,22060,22093,22114,22105,22108,22092,22100,22150,22116,22129,22123,22139,22140,22149,22163,22191,22228,22231,22237,22241,22261,22251,22265,22271,22276,22282,22281,22300,24079,24089,24084,24081,24113,24123,24124,37189,37191,37192,37201,37203,37204,37205,37206,37208,37209,37211,37212,37215,37216,37222,37223,37224,37227,37229,37235,37242,37243,37244,37248,37249,37250,37251,37252,37254,37256,37258,37262,37263,37267,37268,37269,37270,37271,37272,37273,37276,37277,37278,37279,37280,37281,37284,37285,37286,37287,37288,37289,37291,37292,37296,37297,37298,37299,37302,37303,37304,37305,37307,37308,37309,37310,37311,37312,37313,37314,37315,37316,37317,37318,37320,37323,37328,37330,37331,37332,37333,37334,37335,37336,37337,37338,37339,37341,37342,37343,37344,37345,37346,37347,37348,37349,24119,24132,24148,24155,24158,24161,23692,23674,23693,23696,23702,23688,23704,23705,23697,23706,23708,23733,23714,23741,23724,23723,23729,23715,23745,23735,23748,23762,23780,23755,23781,23810,23811,23847,23846,23854,23844,23838,23814,23835,23896,23870,23860,23869,23916,23899,23919,23901,23915,23883,23882,23913,23924,23938,23961,23965,35955,23991,24005,24435,24439,24450,24455,24457,24460,24469,24473,24476,24488,24493,24501,24508,34914,24417,29357,29360,29364,29367,29368,29379,29377,29390,29389,29394,29416,29423,29417,29426,29428,29431,29441,29427,29443,29434,37350,37351,37352,37353,37354,37355,37356,37357,37358,37359,37360,37361,37362,37363,37364,37365,37366,37367,37368,37369,37370,37371,37372,37373,37374,37375,37376,37377,37378,37379,37380,37381,37382,37383,37384,37385,37386,37387,37388,37389,37390,37391,37392,37393,37394,37395,37396,37397,37398,37399,37400,37401,37402,37403,37404,37405,37406,37407,37408,37409,37410,37411,37412,37413,37414,37415,37416,37417,37418,37419,37420,37421,37422,37423,37424,37425,37426,37427,37428,37429,37430,37431,37432,37433,37434,37435,37436,37437,37438,37439,37440,37441,37442,37443,37444,37445,29435,29463,29459,29473,29450,29470,29469,29461,29474,29497,29477,29484,29496,29489,29520,29517,29527,29536,29548,29551,29566,33307,22821,39143,22820,22786,39267,39271,39272,39273,39274,39275,39276,39284,39287,39293,39296,39300,39303,39306,39309,39312,39313,39315,39316,39317,24192,24209,24203,24214,24229,24224,24249,24245,24254,24243,36179,24274,24273,24283,24296,24298,33210,24516,24521,24534,24527,24579,24558,24580,24545,24548,24574,24581,24582,24554,24557,24568,24601,24629,24614,24603,24591,24589,24617,24619,24586,24639,24609,24696,24697,24699,24698,24642,37446,37447,37448,37449,37450,37451,37452,37453,37454,37455,37456,37457,37458,37459,37460,37461,37462,37463,37464,37465,37466,37467,37468,37469,37470,37471,37472,37473,37474,37475,37476,37477,37478,37479,37480,37481,37482,37483,37484,37485,37486,37487,37488,37489,37490,37491,37493,37494,37495,37496,37497,37498,37499,37500,37501,37502,37503,37504,37505,37506,37507,37508,37509,37510,37511,37512,37513,37514,37515,37516,37517,37519,37520,37521,37522,37523,37524,37525,37526,37527,37528,37529,37530,37531,37532,37533,37534,37535,37536,37537,37538,37539,37540,37541,37542,37543,24682,24701,24726,24730,24749,24733,24707,24722,24716,24731,24812,24763,24753,24797,24792,24774,24794,24756,24864,24870,24853,24867,24820,24832,24846,24875,24906,24949,25004,24980,24999,25015,25044,25077,24541,38579,38377,38379,38385,38387,38389,38390,38396,38398,38403,38404,38406,38408,38410,38411,38412,38413,38415,38418,38421,38422,38423,38425,38426,20012,29247,25109,27701,27732,27740,27722,27811,27781,27792,27796,27788,27752,27753,27764,27766,27782,27817,27856,27860,27821,27895,27896,27889,27863,27826,27872,27862,27898,27883,27886,27825,27859,27887,27902,37544,37545,37546,37547,37548,37549,37551,37552,37553,37554,37555,37556,37557,37558,37559,37560,37561,37562,37563,37564,37565,37566,37567,37568,37569,37570,37571,37572,37573,37574,37575,37577,37578,37579,37580,37581,37582,37583,37584,37585,37586,37587,37588,37589,37590,37591,37592,37593,37594,37595,37596,37597,37598,37599,37600,37601,37602,37603,37604,37605,37606,37607,37608,37609,37610,37611,37612,37613,37614,37615,37616,37617,37618,37619,37620,37621,37622,37623,37624,37625,37626,37627,37628,37629,37630,37631,37632,37633,37634,37635,37636,37637,37638,37639,37640,37641,27961,27943,27916,27971,27976,27911,27908,27929,27918,27947,27981,27950,27957,27930,27983,27986,27988,27955,28049,28015,28062,28064,27998,28051,28052,27996,28e3,28028,28003,28186,28103,28101,28126,28174,28095,28128,28177,28134,28125,28121,28182,28075,28172,28078,28203,28270,28238,28267,28338,28255,28294,28243,28244,28210,28197,28228,28383,28337,28312,28384,28461,28386,28325,28327,28349,28347,28343,28375,28340,28367,28303,28354,28319,28514,28486,28487,28452,28437,28409,28463,28470,28491,28532,28458,28425,28457,28553,28557,28556,28536,28530,28540,28538,28625,37642,37643,37644,37645,37646,37647,37648,37649,37650,37651,37652,37653,37654,37655,37656,37657,37658,37659,37660,37661,37662,37663,37664,37665,37666,37667,37668,37669,37670,37671,37672,37673,37674,37675,37676,37677,37678,37679,37680,37681,37682,37683,37684,37685,37686,37687,37688,37689,37690,37691,37692,37693,37695,37696,37697,37698,37699,37700,37701,37702,37703,37704,37705,37706,37707,37708,37709,37710,37711,37712,37713,37714,37715,37716,37717,37718,37719,37720,37721,37722,37723,37724,37725,37726,37727,37728,37729,37730,37731,37732,37733,37734,37735,37736,37737,37739,28617,28583,28601,28598,28610,28641,28654,28638,28640,28655,28698,28707,28699,28729,28725,28751,28766,23424,23428,23445,23443,23461,23480,29999,39582,25652,23524,23534,35120,23536,36423,35591,36790,36819,36821,36837,36846,36836,36841,36838,36851,36840,36869,36868,36875,36902,36881,36877,36886,36897,36917,36918,36909,36911,36932,36945,36946,36944,36968,36952,36962,36955,26297,36980,36989,36994,37e3,36995,37003,24400,24407,24406,24408,23611,21675,23632,23641,23409,23651,23654,32700,24362,24361,24365,33396,24380,39739,23662,22913,22915,22925,22953,22954,22947,37740,37741,37742,37743,37744,37745,37746,37747,37748,37749,37750,37751,37752,37753,37754,37755,37756,37757,37758,37759,37760,37761,37762,37763,37764,37765,37766,37767,37768,37769,37770,37771,37772,37773,37774,37776,37777,37778,37779,37780,37781,37782,37783,37784,37785,37786,37787,37788,37789,37790,37791,37792,37793,37794,37795,37796,37797,37798,37799,37800,37801,37802,37803,37804,37805,37806,37807,37808,37809,37810,37811,37812,37813,37814,37815,37816,37817,37818,37819,37820,37821,37822,37823,37824,37825,37826,37827,37828,37829,37830,37831,37832,37833,37835,37836,37837,22935,22986,22955,22942,22948,22994,22962,22959,22999,22974,23045,23046,23005,23048,23011,23e3,23033,23052,23049,23090,23092,23057,23075,23059,23104,23143,23114,23125,23100,23138,23157,33004,23210,23195,23159,23162,23230,23275,23218,23250,23252,23224,23264,23267,23281,23254,23270,23256,23260,23305,23319,23318,23346,23351,23360,23573,23580,23386,23397,23411,23377,23379,23394,39541,39543,39544,39546,39551,39549,39552,39553,39557,39560,39562,39568,39570,39571,39574,39576,39579,39580,39581,39583,39584,39586,39587,39589,39591,32415,32417,32419,32421,32424,32425,37838,37839,37840,37841,37842,37843,37844,37845,37847,37848,37849,37850,37851,37852,37853,37854,37855,37856,37857,37858,37859,37860,37861,37862,37863,37864,37865,37866,37867,37868,37869,37870,37871,37872,37873,37874,37875,37876,37877,37878,37879,37880,37881,37882,37883,37884,37885,37886,37887,37888,37889,37890,37891,37892,37893,37894,37895,37896,37897,37898,37899,37900,37901,37902,37903,37904,37905,37906,37907,37908,37909,37910,37911,37912,37913,37914,37915,37916,37917,37918,37919,37920,37921,37922,37923,37924,37925,37926,37927,37928,37929,37930,37931,37932,37933,37934,32429,32432,32446,32448,32449,32450,32457,32459,32460,32464,32468,32471,32475,32480,32481,32488,32491,32494,32495,32497,32498,32525,32502,32506,32507,32510,32513,32514,32515,32519,32520,32523,32524,32527,32529,32530,32535,32537,32540,32539,32543,32545,32546,32547,32548,32549,32550,32551,32554,32555,32556,32557,32559,32560,32561,32562,32563,32565,24186,30079,24027,30014,37013,29582,29585,29614,29602,29599,29647,29634,29649,29623,29619,29632,29641,29640,29669,29657,39036,29706,29673,29671,29662,29626,29682,29711,29738,29787,29734,29733,29736,29744,29742,29740,37935,37936,37937,37938,37939,37940,37941,37942,37943,37944,37945,37946,37947,37948,37949,37951,37952,37953,37954,37955,37956,37957,37958,37959,37960,37961,37962,37963,37964,37965,37966,37967,37968,37969,37970,37971,37972,37973,37974,37975,37976,37977,37978,37979,37980,37981,37982,37983,37984,37985,37986,37987,37988,37989,37990,37991,37992,37993,37994,37996,37997,37998,37999,38e3,38001,38002,38003,38004,38005,38006,38007,38008,38009,38010,38011,38012,38013,38014,38015,38016,38017,38018,38019,38020,38033,38038,38040,38087,38095,38099,38100,38106,38118,38139,38172,38176,29723,29722,29761,29788,29783,29781,29785,29815,29805,29822,29852,29838,29824,29825,29831,29835,29854,29864,29865,29840,29863,29906,29882,38890,38891,38892,26444,26451,26462,26440,26473,26533,26503,26474,26483,26520,26535,26485,26536,26526,26541,26507,26487,26492,26608,26633,26584,26634,26601,26544,26636,26585,26549,26586,26547,26589,26624,26563,26552,26594,26638,26561,26621,26674,26675,26720,26721,26702,26722,26692,26724,26755,26653,26709,26726,26689,26727,26688,26686,26698,26697,26665,26805,26767,26740,26743,26771,26731,26818,26990,26876,26911,26912,26873,38183,38195,38205,38211,38216,38219,38229,38234,38240,38254,38260,38261,38263,38264,38265,38266,38267,38268,38269,38270,38272,38273,38274,38275,38276,38277,38278,38279,38280,38281,38282,38283,38284,38285,38286,38287,38288,38289,38290,38291,38292,38293,38294,38295,38296,38297,38298,38299,38300,38301,38302,38303,38304,38305,38306,38307,38308,38309,38310,38311,38312,38313,38314,38315,38316,38317,38318,38319,38320,38321,38322,38323,38324,38325,38326,38327,38328,38329,38330,38331,38332,38333,38334,38335,38336,38337,38338,38339,38340,38341,38342,38343,38344,38345,38346,38347,26916,26864,26891,26881,26967,26851,26896,26993,26937,26976,26946,26973,27012,26987,27008,27032,27e3,26932,27084,27015,27016,27086,27017,26982,26979,27001,27035,27047,27067,27051,27053,27092,27057,27073,27082,27103,27029,27104,27021,27135,27183,27117,27159,27160,27237,27122,27204,27198,27296,27216,27227,27189,27278,27257,27197,27176,27224,27260,27281,27280,27305,27287,27307,29495,29522,27521,27522,27527,27524,27538,27539,27533,27546,27547,27553,27562,36715,36717,36721,36722,36723,36725,36726,36728,36727,36729,36730,36732,36734,36737,36738,36740,36743,36747,38348,38349,38350,38351,38352,38353,38354,38355,38356,38357,38358,38359,38360,38361,38362,38363,38364,38365,38366,38367,38368,38369,38370,38371,38372,38373,38374,38375,38380,38399,38407,38419,38424,38427,38430,38432,38435,38436,38437,38438,38439,38440,38441,38443,38444,38445,38447,38448,38455,38456,38457,38458,38462,38465,38467,38474,38478,38479,38481,38482,38483,38486,38487,38488,38489,38490,38492,38493,38494,38496,38499,38501,38502,38507,38509,38510,38511,38512,38513,38515,38520,38521,38522,38523,38524,38525,38526,38527,38528,38529,38530,38531,38532,38535,38537,38538,36749,36750,36751,36760,36762,36558,25099,25111,25115,25119,25122,25121,25125,25124,25132,33255,29935,29940,29951,29967,29969,29971,25908,26094,26095,26096,26122,26137,26482,26115,26133,26112,28805,26359,26141,26164,26161,26166,26165,32774,26207,26196,26177,26191,26198,26209,26199,26231,26244,26252,26279,26269,26302,26331,26332,26342,26345,36146,36147,36150,36155,36157,36160,36165,36166,36168,36169,36167,36173,36181,36185,35271,35274,35275,35276,35278,35279,35280,35281,29294,29343,29277,29286,29295,29310,29311,29316,29323,29325,29327,29330,25352,25394,25520,38540,38542,38545,38546,38547,38549,38550,38554,38555,38557,38558,38559,38560,38561,38562,38563,38564,38565,38566,38568,38569,38570,38571,38572,38573,38574,38575,38577,38578,38580,38581,38583,38584,38586,38587,38591,38594,38595,38600,38602,38603,38608,38609,38611,38612,38614,38615,38616,38617,38618,38619,38620,38621,38622,38623,38625,38626,38627,38628,38629,38630,38631,38635,38636,38637,38638,38640,38641,38642,38644,38645,38648,38650,38651,38652,38653,38655,38658,38659,38661,38666,38667,38668,38672,38673,38674,38676,38677,38679,38680,38681,38682,38683,38685,38687,38688,25663,25816,32772,27626,27635,27645,27637,27641,27653,27655,27654,27661,27669,27672,27673,27674,27681,27689,27684,27690,27698,25909,25941,25963,29261,29266,29270,29232,34402,21014,32927,32924,32915,32956,26378,32957,32945,32939,32941,32948,32951,32999,33e3,33001,33002,32987,32962,32964,32985,32973,32983,26384,32989,33003,33009,33012,33005,33037,33038,33010,33020,26389,33042,35930,33078,33054,33068,33048,33074,33096,33100,33107,33140,33113,33114,33137,33120,33129,33148,33149,33133,33127,22605,23221,33160,33154,33169,28373,33187,33194,33228,26406,33226,33211,38689,38690,38691,38692,38693,38694,38695,38696,38697,38699,38700,38702,38703,38705,38707,38708,38709,38710,38711,38714,38715,38716,38717,38719,38720,38721,38722,38723,38724,38725,38726,38727,38728,38729,38730,38731,38732,38733,38734,38735,38736,38737,38740,38741,38743,38744,38746,38748,38749,38751,38755,38756,38758,38759,38760,38762,38763,38764,38765,38766,38767,38768,38769,38770,38773,38775,38776,38777,38778,38779,38781,38782,38783,38784,38785,38786,38787,38788,38790,38791,38792,38793,38794,38796,38798,38799,38800,38803,38805,38806,38807,38809,38810,38811,38812,38813,33217,33190,27428,27447,27449,27459,27462,27481,39121,39122,39123,39125,39129,39130,27571,24384,27586,35315,26e3,40785,26003,26044,26054,26052,26051,26060,26062,26066,26070,28800,28828,28822,28829,28859,28864,28855,28843,28849,28904,28874,28944,28947,28950,28975,28977,29043,29020,29032,28997,29042,29002,29048,29050,29080,29107,29109,29096,29088,29152,29140,29159,29177,29213,29224,28780,28952,29030,29113,25150,25149,25155,25160,25161,31035,31040,31046,31049,31067,31068,31059,31066,31074,31063,31072,31087,31079,31098,31109,31114,31130,31143,31155,24529,24528,38814,38815,38817,38818,38820,38821,38822,38823,38824,38825,38826,38828,38830,38832,38833,38835,38837,38838,38839,38840,38841,38842,38843,38844,38845,38846,38847,38848,38849,38850,38851,38852,38853,38854,38855,38856,38857,38858,38859,38860,38861,38862,38863,38864,38865,38866,38867,38868,38869,38870,38871,38872,38873,38874,38875,38876,38877,38878,38879,38880,38881,38882,38883,38884,38885,38888,38894,38895,38896,38897,38898,38900,38903,38904,38905,38906,38907,38908,38909,38910,38911,38912,38913,38914,38915,38916,38917,38918,38919,38920,38921,38922,38923,38924,38925,38926,24636,24669,24666,24679,24641,24665,24675,24747,24838,24845,24925,25001,24989,25035,25041,25094,32896,32895,27795,27894,28156,30710,30712,30720,30729,30743,30744,30737,26027,30765,30748,30749,30777,30778,30779,30751,30780,30757,30764,30755,30761,30798,30829,30806,30807,30758,30800,30791,30796,30826,30875,30867,30874,30855,30876,30881,30883,30898,30905,30885,30932,30937,30921,30956,30962,30981,30964,30995,31012,31006,31028,40859,40697,40699,40700,30449,30468,30477,30457,30471,30472,30490,30498,30489,30509,30502,30517,30520,30544,30545,30535,30531,30554,30568,38927,38928,38929,38930,38931,38932,38933,38934,38935,38936,38937,38938,38939,38940,38941,38942,38943,38944,38945,38946,38947,38948,38949,38950,38951,38952,38953,38954,38955,38956,38957,38958,38959,38960,38961,38962,38963,38964,38965,38966,38967,38968,38969,38970,38971,38972,38973,38974,38975,38976,38977,38978,38979,38980,38981,38982,38983,38984,38985,38986,38987,38988,38989,38990,38991,38992,38993,38994,38995,38996,38997,38998,38999,39e3,39001,39002,39003,39004,39005,39006,39007,39008,39009,39010,39011,39012,39013,39014,39015,39016,39017,39018,39019,39020,39021,39022,30562,30565,30591,30605,30589,30592,30604,30609,30623,30624,30640,30645,30653,30010,30016,30030,30027,30024,30043,30066,30073,30083,32600,32609,32607,35400,32616,32628,32625,32633,32641,32638,30413,30437,34866,38021,38022,38023,38027,38026,38028,38029,38031,38032,38036,38039,38037,38042,38043,38044,38051,38052,38059,38058,38061,38060,38063,38064,38066,38068,38070,38071,38072,38073,38074,38076,38077,38079,38084,38088,38089,38090,38091,38092,38093,38094,38096,38097,38098,38101,38102,38103,38105,38104,38107,38110,38111,38112,38114,38116,38117,38119,38120,38122,39023,39024,39025,39026,39027,39028,39051,39054,39058,39061,39065,39075,39080,39081,39082,39083,39084,39085,39086,39087,39088,39089,39090,39091,39092,39093,39094,39095,39096,39097,39098,39099,39100,39101,39102,39103,39104,39105,39106,39107,39108,39109,39110,39111,39112,39113,39114,39115,39116,39117,39119,39120,39124,39126,39127,39131,39132,39133,39136,39137,39138,39139,39140,39141,39142,39145,39146,39147,39148,39149,39150,39151,39152,39153,39154,39155,39156,39157,39158,39159,39160,39161,39162,39163,39164,39165,39166,39167,39168,39169,39170,39171,39172,39173,39174,39175,38121,38123,38126,38127,38131,38132,38133,38135,38137,38140,38141,38143,38147,38146,38150,38151,38153,38154,38157,38158,38159,38162,38163,38164,38165,38166,38168,38171,38173,38174,38175,38178,38186,38187,38185,38188,38193,38194,38196,38198,38199,38200,38204,38206,38207,38210,38197,38212,38213,38214,38217,38220,38222,38223,38226,38227,38228,38230,38231,38232,38233,38235,38238,38239,38237,38241,38242,38244,38245,38246,38247,38248,38249,38250,38251,38252,38255,38257,38258,38259,38202,30695,30700,38601,31189,31213,31203,31211,31238,23879,31235,31234,31262,31252,39176,39177,39178,39179,39180,39182,39183,39185,39186,39187,39188,39189,39190,39191,39192,39193,39194,39195,39196,39197,39198,39199,39200,39201,39202,39203,39204,39205,39206,39207,39208,39209,39210,39211,39212,39213,39215,39216,39217,39218,39219,39220,39221,39222,39223,39224,39225,39226,39227,39228,39229,39230,39231,39232,39233,39234,39235,39236,39237,39238,39239,39240,39241,39242,39243,39244,39245,39246,39247,39248,39249,39250,39251,39254,39255,39256,39257,39258,39259,39260,39261,39262,39263,39264,39265,39266,39268,39270,39283,39288,39289,39291,39294,39298,39299,39305,31289,31287,31313,40655,39333,31344,30344,30350,30355,30361,30372,29918,29920,29996,40480,40482,40488,40489,40490,40491,40492,40498,40497,40502,40504,40503,40505,40506,40510,40513,40514,40516,40518,40519,40520,40521,40523,40524,40526,40529,40533,40535,40538,40539,40540,40542,40547,40550,40551,40552,40553,40554,40555,40556,40561,40557,40563,30098,30100,30102,30112,30109,30124,30115,30131,30132,30136,30148,30129,30128,30147,30146,30166,30157,30179,30184,30182,30180,30187,30183,30211,30193,30204,30207,30224,30208,30213,30220,30231,30218,30245,30232,30229,30233,39308,39310,39322,39323,39324,39325,39326,39327,39328,39329,39330,39331,39332,39334,39335,39337,39338,39339,39340,39341,39342,39343,39344,39345,39346,39347,39348,39349,39350,39351,39352,39353,39354,39355,39356,39357,39358,39359,39360,39361,39362,39363,39364,39365,39366,39367,39368,39369,39370,39371,39372,39373,39374,39375,39376,39377,39378,39379,39380,39381,39382,39383,39384,39385,39386,39387,39388,39389,39390,39391,39392,39393,39394,39395,39396,39397,39398,39399,39400,39401,39402,39403,39404,39405,39406,39407,39408,39409,39410,39411,39412,39413,39414,39415,39416,39417,30235,30268,30242,30240,30272,30253,30256,30271,30261,30275,30270,30259,30285,30302,30292,30300,30294,30315,30319,32714,31462,31352,31353,31360,31366,31368,31381,31398,31392,31404,31400,31405,31411,34916,34921,34930,34941,34943,34946,34978,35014,34999,35004,35017,35042,35022,35043,35045,35057,35098,35068,35048,35070,35056,35105,35097,35091,35099,35082,35124,35115,35126,35137,35174,35195,30091,32997,30386,30388,30684,32786,32788,32790,32796,32800,32802,32805,32806,32807,32809,32808,32817,32779,32821,32835,32838,32845,32850,32873,32881,35203,39032,39040,39043,39418,39419,39420,39421,39422,39423,39424,39425,39426,39427,39428,39429,39430,39431,39432,39433,39434,39435,39436,39437,39438,39439,39440,39441,39442,39443,39444,39445,39446,39447,39448,39449,39450,39451,39452,39453,39454,39455,39456,39457,39458,39459,39460,39461,39462,39463,39464,39465,39466,39467,39468,39469,39470,39471,39472,39473,39474,39475,39476,39477,39478,39479,39480,39481,39482,39483,39484,39485,39486,39487,39488,39489,39490,39491,39492,39493,39494,39495,39496,39497,39498,39499,39500,39501,39502,39503,39504,39505,39506,39507,39508,39509,39510,39511,39512,39513,39049,39052,39053,39055,39060,39066,39067,39070,39071,39073,39074,39077,39078,34381,34388,34412,34414,34431,34426,34428,34427,34472,34445,34443,34476,34461,34471,34467,34474,34451,34473,34486,34500,34485,34510,34480,34490,34481,34479,34505,34511,34484,34537,34545,34546,34541,34547,34512,34579,34526,34548,34527,34520,34513,34563,34567,34552,34568,34570,34573,34569,34595,34619,34590,34597,34606,34586,34622,34632,34612,34609,34601,34615,34623,34690,34594,34685,34686,34683,34656,34672,34636,34670,34699,34643,34659,34684,34660,34649,34661,34707,34735,34728,34770,39514,39515,39516,39517,39518,39519,39520,39521,39522,39523,39524,39525,39526,39527,39528,39529,39530,39531,39538,39555,39561,39565,39566,39572,39573,39577,39590,39593,39594,39595,39596,39597,39598,39599,39602,39603,39604,39605,39609,39611,39613,39614,39615,39619,39620,39622,39623,39624,39625,39626,39629,39630,39631,39632,39634,39636,39637,39638,39639,39641,39642,39643,39644,39645,39646,39648,39650,39651,39652,39653,39655,39656,39657,39658,39660,39662,39664,39665,39666,39667,39668,39669,39670,39671,39672,39674,39676,39677,39678,39679,39680,39681,39682,39684,39685,39686,34758,34696,34693,34733,34711,34691,34731,34789,34732,34741,34739,34763,34771,34749,34769,34752,34762,34779,34794,34784,34798,34838,34835,34814,34826,34843,34849,34873,34876,32566,32578,32580,32581,33296,31482,31485,31496,31491,31492,31509,31498,31531,31503,31559,31544,31530,31513,31534,31537,31520,31525,31524,31539,31550,31518,31576,31578,31557,31605,31564,31581,31584,31598,31611,31586,31602,31601,31632,31654,31655,31672,31660,31645,31656,31621,31658,31644,31650,31659,31668,31697,31681,31692,31709,31706,31717,31718,31722,31756,31742,31740,31759,31766,31755,39687,39689,39690,39691,39692,39693,39694,39696,39697,39698,39700,39701,39702,39703,39704,39705,39706,39707,39708,39709,39710,39712,39713,39714,39716,39717,39718,39719,39720,39721,39722,39723,39724,39725,39726,39728,39729,39731,39732,39733,39734,39735,39736,39737,39738,39741,39742,39743,39744,39750,39754,39755,39756,39758,39760,39762,39763,39765,39766,39767,39768,39769,39770,39771,39772,39773,39774,39775,39776,39777,39778,39779,39780,39781,39782,39783,39784,39785,39786,39787,39788,39789,39790,39791,39792,39793,39794,39795,39796,39797,39798,39799,39800,39801,39802,39803,31775,31786,31782,31800,31809,31808,33278,33281,33282,33284,33260,34884,33313,33314,33315,33325,33327,33320,33323,33336,33339,33331,33332,33342,33348,33353,33355,33359,33370,33375,33384,34942,34949,34952,35032,35039,35166,32669,32671,32679,32687,32688,32690,31868,25929,31889,31901,31900,31902,31906,31922,31932,31933,31937,31943,31948,31949,31944,31941,31959,31976,33390,26280,32703,32718,32725,32741,32737,32742,32745,32750,32755,31992,32119,32166,32174,32327,32411,40632,40628,36211,36228,36244,36241,36273,36199,36205,35911,35913,37194,37200,37198,37199,37220,39804,39805,39806,39807,39808,39809,39810,39811,39812,39813,39814,39815,39816,39817,39818,39819,39820,39821,39822,39823,39824,39825,39826,39827,39828,39829,39830,39831,39832,39833,39834,39835,39836,39837,39838,39839,39840,39841,39842,39843,39844,39845,39846,39847,39848,39849,39850,39851,39852,39853,39854,39855,39856,39857,39858,39859,39860,39861,39862,39863,39864,39865,39866,39867,39868,39869,39870,39871,39872,39873,39874,39875,39876,39877,39878,39879,39880,39881,39882,39883,39884,39885,39886,39887,39888,39889,39890,39891,39892,39893,39894,39895,39896,39897,39898,39899,37218,37217,37232,37225,37231,37245,37246,37234,37236,37241,37260,37253,37264,37261,37265,37282,37283,37290,37293,37294,37295,37301,37300,37306,35925,40574,36280,36331,36357,36441,36457,36277,36287,36284,36282,36292,36310,36311,36314,36318,36302,36303,36315,36294,36332,36343,36344,36323,36345,36347,36324,36361,36349,36372,36381,36383,36396,36398,36387,36399,36410,36416,36409,36405,36413,36401,36425,36417,36418,36433,36434,36426,36464,36470,36476,36463,36468,36485,36495,36500,36496,36508,36510,35960,35970,35978,35973,35992,35988,26011,35286,35294,35290,35292,39900,39901,39902,39903,39904,39905,39906,39907,39908,39909,39910,39911,39912,39913,39914,39915,39916,39917,39918,39919,39920,39921,39922,39923,39924,39925,39926,39927,39928,39929,39930,39931,39932,39933,39934,39935,39936,39937,39938,39939,39940,39941,39942,39943,39944,39945,39946,39947,39948,39949,39950,39951,39952,39953,39954,39955,39956,39957,39958,39959,39960,39961,39962,39963,39964,39965,39966,39967,39968,39969,39970,39971,39972,39973,39974,39975,39976,39977,39978,39979,39980,39981,39982,39983,39984,39985,39986,39987,39988,39989,39990,39991,39992,39993,39994,39995,35301,35307,35311,35390,35622,38739,38633,38643,38639,38662,38657,38664,38671,38670,38698,38701,38704,38718,40832,40835,40837,40838,40839,40840,40841,40842,40844,40702,40715,40717,38585,38588,38589,38606,38610,30655,38624,37518,37550,37576,37694,37738,37834,37775,37950,37995,40063,40066,40069,40070,40071,40072,31267,40075,40078,40080,40081,40082,40084,40085,40090,40091,40094,40095,40096,40097,40098,40099,40101,40102,40103,40104,40105,40107,40109,40110,40112,40113,40114,40115,40116,40117,40118,40119,40122,40123,40124,40125,40132,40133,40134,40135,40138,40139,39996,39997,39998,39999,4e4,40001,40002,40003,40004,40005,40006,40007,40008,40009,40010,40011,40012,40013,40014,40015,40016,40017,40018,40019,40020,40021,40022,40023,40024,40025,40026,40027,40028,40029,40030,40031,40032,40033,40034,40035,40036,40037,40038,40039,40040,40041,40042,40043,40044,40045,40046,40047,40048,40049,40050,40051,40052,40053,40054,40055,40056,40057,40058,40059,40061,40062,40064,40067,40068,40073,40074,40076,40079,40083,40086,40087,40088,40089,40093,40106,40108,40111,40121,40126,40127,40128,40129,40130,40136,40137,40145,40146,40154,40155,40160,40161,40140,40141,40142,40143,40144,40147,40148,40149,40151,40152,40153,40156,40157,40159,40162,38780,38789,38801,38802,38804,38831,38827,38819,38834,38836,39601,39600,39607,40536,39606,39610,39612,39617,39616,39621,39618,39627,39628,39633,39749,39747,39751,39753,39752,39757,39761,39144,39181,39214,39253,39252,39647,39649,39654,39663,39659,39675,39661,39673,39688,39695,39699,39711,39715,40637,40638,32315,40578,40583,40584,40587,40594,37846,40605,40607,40667,40668,40669,40672,40671,40674,40681,40679,40677,40682,40687,40738,40748,40751,40761,40759,40765,40766,40772,40163,40164,40165,40166,40167,40168,40169,40170,40171,40172,40173,40174,40175,40176,40177,40178,40179,40180,40181,40182,40183,40184,40185,40186,40187,40188,40189,40190,40191,40192,40193,40194,40195,40196,40197,40198,40199,40200,40201,40202,40203,40204,40205,40206,40207,40208,40209,40210,40211,40212,40213,40214,40215,40216,40217,40218,40219,40220,40221,40222,40223,40224,40225,40226,40227,40228,40229,40230,40231,40232,40233,40234,40235,40236,40237,40238,40239,40240,40241,40242,40243,40244,40245,40246,40247,40248,40249,40250,40251,40252,40253,40254,40255,40256,40257,40258,57908,57909,57910,57911,57912,57913,57914,57915,57916,57917,57918,57919,57920,57921,57922,57923,57924,57925,57926,57927,57928,57929,57930,57931,57932,57933,57934,57935,57936,57937,57938,57939,57940,57941,57942,57943,57944,57945,57946,57947,57948,57949,57950,57951,57952,57953,57954,57955,57956,57957,57958,57959,57960,57961,57962,57963,57964,57965,57966,57967,57968,57969,57970,57971,57972,57973,57974,57975,57976,57977,57978,57979,57980,57981,57982,57983,57984,57985,57986,57987,57988,57989,57990,57991,57992,57993,57994,57995,57996,57997,57998,57999,58e3,58001,40259,40260,40261,40262,40263,40264,40265,40266,40267,40268,40269,40270,40271,40272,40273,40274,40275,40276,40277,40278,40279,40280,40281,40282,40283,40284,40285,40286,40287,40288,40289,40290,40291,40292,40293,40294,40295,40296,40297,40298,40299,40300,40301,40302,40303,40304,40305,40306,40307,40308,40309,40310,40311,40312,40313,40314,40315,40316,40317,40318,40319,40320,40321,40322,40323,40324,40325,40326,40327,40328,40329,40330,40331,40332,40333,40334,40335,40336,40337,40338,40339,40340,40341,40342,40343,40344,40345,40346,40347,40348,40349,40350,40351,40352,40353,40354,58002,58003,58004,58005,58006,58007,58008,58009,58010,58011,58012,58013,58014,58015,58016,58017,58018,58019,58020,58021,58022,58023,58024,58025,58026,58027,58028,58029,58030,58031,58032,58033,58034,58035,58036,58037,58038,58039,58040,58041,58042,58043,58044,58045,58046,58047,58048,58049,58050,58051,58052,58053,58054,58055,58056,58057,58058,58059,58060,58061,58062,58063,58064,58065,58066,58067,58068,58069,58070,58071,58072,58073,58074,58075,58076,58077,58078,58079,58080,58081,58082,58083,58084,58085,58086,58087,58088,58089,58090,58091,58092,58093,58094,58095,40355,40356,40357,40358,40359,40360,40361,40362,40363,40364,40365,40366,40367,40368,40369,40370,40371,40372,40373,40374,40375,40376,40377,40378,40379,40380,40381,40382,40383,40384,40385,40386,40387,40388,40389,40390,40391,40392,40393,40394,40395,40396,40397,40398,40399,40400,40401,40402,40403,40404,40405,40406,40407,40408,40409,40410,40411,40412,40413,40414,40415,40416,40417,40418,40419,40420,40421,40422,40423,40424,40425,40426,40427,40428,40429,40430,40431,40432,40433,40434,40435,40436,40437,40438,40439,40440,40441,40442,40443,40444,40445,40446,40447,40448,40449,40450,58096,58097,58098,58099,58100,58101,58102,58103,58104,58105,58106,58107,58108,58109,58110,58111,58112,58113,58114,58115,58116,58117,58118,58119,58120,58121,58122,58123,58124,58125,58126,58127,58128,58129,58130,58131,58132,58133,58134,58135,58136,58137,58138,58139,58140,58141,58142,58143,58144,58145,58146,58147,58148,58149,58150,58151,58152,58153,58154,58155,58156,58157,58158,58159,58160,58161,58162,58163,58164,58165,58166,58167,58168,58169,58170,58171,58172,58173,58174,58175,58176,58177,58178,58179,58180,58181,58182,58183,58184,58185,58186,58187,58188,58189,40451,40452,40453,40454,40455,40456,40457,40458,40459,40460,40461,40462,40463,40464,40465,40466,40467,40468,40469,40470,40471,40472,40473,40474,40475,40476,40477,40478,40484,40487,40494,40496,40500,40507,40508,40512,40525,40528,40530,40531,40532,40534,40537,40541,40543,40544,40545,40546,40549,40558,40559,40562,40564,40565,40566,40567,40568,40569,40570,40571,40572,40573,40576,40577,40579,40580,40581,40582,40585,40586,40588,40589,40590,40591,40592,40593,40596,40597,40598,40599,40600,40601,40602,40603,40604,40606,40608,40609,40610,40611,40612,40613,40615,40616,40617,40618,58190,58191,58192,58193,58194,58195,58196,58197,58198,58199,58200,58201,58202,58203,58204,58205,58206,58207,58208,58209,58210,58211,58212,58213,58214,58215,58216,58217,58218,58219,58220,58221,58222,58223,58224,58225,58226,58227,58228,58229,58230,58231,58232,58233,58234,58235,58236,58237,58238,58239,58240,58241,58242,58243,58244,58245,58246,58247,58248,58249,58250,58251,58252,58253,58254,58255,58256,58257,58258,58259,58260,58261,58262,58263,58264,58265,58266,58267,58268,58269,58270,58271,58272,58273,58274,58275,58276,58277,58278,58279,58280,58281,58282,58283,40619,40620,40621,40622,40623,40624,40625,40626,40627,40629,40630,40631,40633,40634,40636,40639,40640,40641,40642,40643,40645,40646,40647,40648,40650,40651,40652,40656,40658,40659,40661,40662,40663,40665,40666,40670,40673,40675,40676,40678,40680,40683,40684,40685,40686,40688,40689,40690,40691,40692,40693,40694,40695,40696,40698,40701,40703,40704,40705,40706,40707,40708,40709,40710,40711,40712,40713,40714,40716,40719,40721,40722,40724,40725,40726,40728,40730,40731,40732,40733,40734,40735,40737,40739,40740,40741,40742,40743,40744,40745,40746,40747,40749,40750,40752,40753,58284,58285,58286,58287,58288,58289,58290,58291,58292,58293,58294,58295,58296,58297,58298,58299,58300,58301,58302,58303,58304,58305,58306,58307,58308,58309,58310,58311,58312,58313,58314,58315,58316,58317,58318,58319,58320,58321,58322,58323,58324,58325,58326,58327,58328,58329,58330,58331,58332,58333,58334,58335,58336,58337,58338,58339,58340,58341,58342,58343,58344,58345,58346,58347,58348,58349,58350,58351,58352,58353,58354,58355,58356,58357,58358,58359,58360,58361,58362,58363,58364,58365,58366,58367,58368,58369,58370,58371,58372,58373,58374,58375,58376,58377,40754,40755,40756,40757,40758,40760,40762,40764,40767,40768,40769,40770,40771,40773,40774,40775,40776,40777,40778,40779,40780,40781,40782,40783,40786,40787,40788,40789,40790,40791,40792,40793,40794,40795,40796,40797,40798,40799,40800,40801,40802,40803,40804,40805,40806,40807,40808,40809,40810,40811,40812,40813,40814,40815,40816,40817,40818,40819,40820,40821,40822,40823,40824,40825,40826,40827,40828,40829,40830,40833,40834,40845,40846,40847,40848,40849,40850,40851,40852,40853,40854,40855,40856,40860,40861,40862,40865,40866,40867,40868,40869,63788,63865,63893,63975,63985,58378,58379,58380,58381,58382,58383,58384,58385,58386,58387,58388,58389,58390,58391,58392,58393,58394,58395,58396,58397,58398,58399,58400,58401,58402,58403,58404,58405,58406,58407,58408,58409,58410,58411,58412,58413,58414,58415,58416,58417,58418,58419,58420,58421,58422,58423,58424,58425,58426,58427,58428,58429,58430,58431,58432,58433,58434,58435,58436,58437,58438,58439,58440,58441,58442,58443,58444,58445,58446,58447,58448,58449,58450,58451,58452,58453,58454,58455,58456,58457,58458,58459,58460,58461,58462,58463,58464,58465,58466,58467,58468,58469,58470,58471,64012,64013,64014,64015,64017,64019,64020,64024,64031,64032,64033,64035,64036,64039,64040,64041,11905,59414,59415,59416,11908,13427,13383,11912,11915,59422,13726,13850,13838,11916,11927,14702,14616,59430,14799,14815,14963,14800,59435,59436,15182,15470,15584,11943,59441,59442,11946,16470,16735,11950,17207,11955,11958,11959,59451,17329,17324,11963,17373,17622,18017,17996,59459,18211,18217,18300,18317,11978,18759,18810,18813,18818,18819,18821,18822,18847,18843,18871,18870,59476,59477,19619,19615,19616,19617,19575,19618,19731,19732,19733,19734,19735,19736,19737,19886,59492,58472,58473,58474,58475,58476,58477,58478,58479,58480,58481,58482,58483,58484,58485,58486,58487,58488,58489,58490,58491,58492,58493,58494,58495,58496,58497,58498,58499,58500,58501,58502,58503,58504,58505,58506,58507,58508,58509,58510,58511,58512,58513,58514,58515,58516,58517,58518,58519,58520,58521,58522,58523,58524,58525,58526,58527,58528,58529,58530,58531,58532,58533,58534,58535,58536,58537,58538,58539,58540,58541,58542,58543,58544,58545,58546,58547,58548,58549,58550,58551,58552,58553,58554,58555,58556,58557,58558,58559,58560,58561,58562,58563,58564,58565],"gb18030-ranges":[[0,128],[36,165],[38,169],[45,178],[50,184],[81,216],[89,226],[95,235],[96,238],[100,244],[103,248],[104,251],[105,253],[109,258],[126,276],[133,284],[148,300],[172,325],[175,329],[179,334],[208,364],[306,463],[307,465],[308,467],[309,469],[310,471],[311,473],[312,475],[313,477],[341,506],[428,594],[443,610],[544,712],[545,716],[558,730],[741,930],[742,938],[749,962],[750,970],[805,1026],[819,1104],[820,1106],[7922,8209],[7924,8215],[7925,8218],[7927,8222],[7934,8231],[7943,8241],[7944,8244],[7945,8246],[7950,8252],[8062,8365],[8148,8452],[8149,8454],[8152,8458],[8164,8471],[8174,8482],[8236,8556],[8240,8570],[8262,8596],[8264,8602],[8374,8713],[8380,8720],[8381,8722],[8384,8726],[8388,8731],[8390,8737],[8392,8740],[8393,8742],[8394,8748],[8396,8751],[8401,8760],[8406,8766],[8416,8777],[8419,8781],[8424,8787],[8437,8802],[8439,8808],[8445,8816],[8482,8854],[8485,8858],[8496,8870],[8521,8896],[8603,8979],[8936,9322],[8946,9372],[9046,9548],[9050,9588],[9063,9616],[9066,9622],[9076,9634],[9092,9652],[9100,9662],[9108,9672],[9111,9676],[9113,9680],[9131,9702],[9162,9735],[9164,9738],[9218,9793],[9219,9795],[11329,11906],[11331,11909],[11334,11913],[11336,11917],[11346,11928],[11361,11944],[11363,11947],[11366,11951],[11370,11956],[11372,11960],[11375,11964],[11389,11979],[11682,12284],[11686,12292],[11687,12312],[11692,12319],[11694,12330],[11714,12351],[11716,12436],[11723,12447],[11725,12535],[11730,12543],[11736,12586],[11982,12842],[11989,12850],[12102,12964],[12336,13200],[12348,13215],[12350,13218],[12384,13253],[12393,13263],[12395,13267],[12397,13270],[12510,13384],[12553,13428],[12851,13727],[12962,13839],[12973,13851],[13738,14617],[13823,14703],[13919,14801],[13933,14816],[14080,14964],[14298,15183],[14585,15471],[14698,15585],[15583,16471],[15847,16736],[16318,17208],[16434,17325],[16438,17330],[16481,17374],[16729,17623],[17102,17997],[17122,18018],[17315,18212],[17320,18218],[17402,18301],[17418,18318],[17859,18760],[17909,18811],[17911,18814],[17915,18820],[17916,18823],[17936,18844],[17939,18848],[17961,18872],[18664,19576],[18703,19620],[18814,19738],[18962,19887],[19043,40870],[33469,59244],[33470,59336],[33471,59367],[33484,59413],[33485,59417],[33490,59423],[33497,59431],[33501,59437],[33505,59443],[33513,59452],[33520,59460],[33536,59478],[33550,59493],[37845,63789],[37921,63866],[37948,63894],[38029,63976],[38038,63986],[38064,64016],[38065,64018],[38066,64021],[38069,64025],[38075,64034],[38076,64037],[38078,64042],[39108,65074],[39109,65093],[39113,65107],[39114,65112],[39115,65127],[39116,65132],[39265,65375],[39394,65510],[189e3,65536]],jis0208:[12288,12289,12290,65292,65294,12539,65306,65307,65311,65281,12443,12444,180,65344,168,65342,65507,65343,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,8213,8208,65295,65340,65374,8741,65372,8230,8229,8216,8217,8220,8221,65288,65289,12308,12309,65339,65341,65371,65373,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,65291,65293,177,215,247,65309,8800,65308,65310,8806,8807,8734,8756,9794,9792,176,8242,8243,8451,65509,65284,65504,65505,65285,65283,65286,65290,65312,167,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8251,12306,8594,8592,8593,8595,12307,null,null,null,null,null,null,null,null,null,null,null,8712,8715,8838,8839,8834,8835,8746,8745,null,null,null,null,null,null,null,null,8743,8744,65506,8658,8660,8704,8707,null,null,null,null,null,null,null,null,null,null,null,8736,8869,8978,8706,8711,8801,8786,8810,8811,8730,8765,8733,8757,8747,8748,null,null,null,null,null,null,null,8491,8240,9839,9837,9834,8224,8225,182,null,null,null,null,9711,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,null,null,null,null,null,null,null,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,null,null,null,null,null,null,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,null,null,null,null,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,9327,9328,9329,9330,9331,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,13129,13076,13090,13133,13080,13095,13059,13110,13137,13143,13069,13094,13091,13099,13130,13115,13212,13213,13214,13198,13199,13252,13217,null,null,null,null,null,null,null,null,13179,12317,12319,8470,13261,8481,12964,12965,12966,12967,12968,12849,12850,12857,13182,13181,13180,8786,8801,8747,8750,8721,8730,8869,8736,8735,8895,8757,8745,8746,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20124,21782,23043,38463,21696,24859,25384,23030,36898,33909,33564,31312,24746,25569,28197,26093,33894,33446,39925,26771,22311,26017,25201,23451,22992,34427,39156,32098,32190,39822,25110,31903,34999,23433,24245,25353,26263,26696,38343,38797,26447,20197,20234,20301,20381,20553,22258,22839,22996,23041,23561,24799,24847,24944,26131,26885,28858,30031,30064,31227,32173,32239,32963,33806,34915,35586,36949,36986,21307,20117,20133,22495,32946,37057,30959,19968,22769,28322,36920,31282,33576,33419,39983,20801,21360,21693,21729,22240,23035,24341,39154,28139,32996,34093,38498,38512,38560,38907,21515,21491,23431,28879,32701,36802,38632,21359,40284,31418,19985,30867,33276,28198,22040,21764,27421,34074,39995,23013,21417,28006,29916,38287,22082,20113,36939,38642,33615,39180,21473,21942,23344,24433,26144,26355,26628,27704,27891,27945,29787,30408,31310,38964,33521,34907,35424,37613,28082,30123,30410,39365,24742,35585,36234,38322,27022,21421,20870,22290,22576,22852,23476,24310,24616,25513,25588,27839,28436,28814,28948,29017,29141,29503,32257,33398,33489,34199,36960,37467,40219,22633,26044,27738,29989,20985,22830,22885,24448,24540,25276,26106,27178,27431,27572,29579,32705,35158,40236,40206,40644,23713,27798,33659,20740,23627,25014,33222,26742,29281,20057,20474,21368,24681,28201,31311,38899,19979,21270,20206,20309,20285,20385,20339,21152,21487,22025,22799,23233,23478,23521,31185,26247,26524,26550,27468,27827,28779,29634,31117,31166,31292,31623,33457,33499,33540,33655,33775,33747,34662,35506,22057,36008,36838,36942,38686,34442,20420,23784,25105,29273,30011,33253,33469,34558,36032,38597,39187,39381,20171,20250,35299,22238,22602,22730,24315,24555,24618,24724,24674,25040,25106,25296,25913,39745,26214,26800,28023,28784,30028,30342,32117,33445,34809,38283,38542,35997,20977,21182,22806,21683,23475,23830,24936,27010,28079,30861,33995,34903,35442,37799,39608,28012,39336,34521,22435,26623,34510,37390,21123,22151,21508,24275,25313,25785,26684,26680,27579,29554,30906,31339,35226,35282,36203,36611,37101,38307,38548,38761,23398,23731,27005,38989,38990,25499,31520,27179,27263,26806,39949,28511,21106,21917,24688,25324,27963,28167,28369,33883,35088,36676,19988,39993,21494,26907,27194,38788,26666,20828,31427,33970,37340,37772,22107,40232,26658,33541,33841,31909,21e3,33477,29926,20094,20355,20896,23506,21002,21208,21223,24059,21914,22570,23014,23436,23448,23515,24178,24185,24739,24863,24931,25022,25563,25954,26577,26707,26874,27454,27475,27735,28450,28567,28485,29872,29976,30435,30475,31487,31649,31777,32233,32566,32752,32925,33382,33694,35251,35532,36011,36996,37969,38291,38289,38306,38501,38867,39208,33304,20024,21547,23736,24012,29609,30284,30524,23721,32747,36107,38593,38929,38996,39e3,20225,20238,21361,21916,22120,22522,22855,23305,23492,23696,24076,24190,24524,25582,26426,26071,26082,26399,26827,26820,27231,24112,27589,27671,27773,30079,31048,23395,31232,32e3,24509,35215,35352,36020,36215,36556,36637,39138,39438,39740,20096,20605,20736,22931,23452,25135,25216,25836,27450,29344,30097,31047,32681,34811,35516,35696,25516,33738,38816,21513,21507,21931,26708,27224,35440,30759,26485,40653,21364,23458,33050,34384,36870,19992,20037,20167,20241,21450,21560,23470,24339,24613,25937,26429,27714,27762,27875,28792,29699,31350,31406,31496,32026,31998,32102,26087,29275,21435,23621,24040,25298,25312,25369,28192,34394,35377,36317,37624,28417,31142,39770,20136,20139,20140,20379,20384,20689,20807,31478,20849,20982,21332,21281,21375,21483,21932,22659,23777,24375,24394,24623,24656,24685,25375,25945,27211,27841,29378,29421,30703,33016,33029,33288,34126,37111,37857,38911,39255,39514,20208,20957,23597,26241,26989,23616,26354,26997,29577,26704,31873,20677,21220,22343,24062,37670,26020,27427,27453,29748,31105,31165,31563,32202,33465,33740,34943,35167,35641,36817,37329,21535,37504,20061,20534,21477,21306,29399,29590,30697,33510,36527,39366,39368,39378,20855,24858,34398,21936,31354,20598,23507,36935,38533,20018,27355,37351,23633,23624,25496,31391,27795,38772,36705,31402,29066,38536,31874,26647,32368,26705,37740,21234,21531,34219,35347,32676,36557,37089,21350,34952,31041,20418,20670,21009,20804,21843,22317,29674,22411,22865,24418,24452,24693,24950,24935,25001,25522,25658,25964,26223,26690,28179,30054,31293,31995,32076,32153,32331,32619,33550,33610,34509,35336,35427,35686,36605,38938,40335,33464,36814,39912,21127,25119,25731,28608,38553,26689,20625,27424,27770,28500,31348,32080,34880,35363,26376,20214,20537,20518,20581,20860,21048,21091,21927,22287,22533,23244,24314,25010,25080,25331,25458,26908,27177,29309,29356,29486,30740,30831,32121,30476,32937,35211,35609,36066,36562,36963,37749,38522,38997,39443,40568,20803,21407,21427,24187,24358,28187,28304,29572,29694,32067,33335,35328,35578,38480,20046,20491,21476,21628,22266,22993,23396,24049,24235,24359,25144,25925,26543,28246,29392,31946,34996,32929,32993,33776,34382,35463,36328,37431,38599,39015,40723,20116,20114,20237,21320,21577,21566,23087,24460,24481,24735,26791,27278,29786,30849,35486,35492,35703,37264,20062,39881,20132,20348,20399,20505,20502,20809,20844,21151,21177,21246,21402,21475,21521,21518,21897,22353,22434,22909,23380,23389,23439,24037,24039,24055,24184,24195,24218,24247,24344,24658,24908,25239,25304,25511,25915,26114,26179,26356,26477,26657,26775,27083,27743,27946,28009,28207,28317,30002,30343,30828,31295,31968,32005,32024,32094,32177,32789,32771,32943,32945,33108,33167,33322,33618,34892,34913,35611,36002,36092,37066,37237,37489,30783,37628,38308,38477,38917,39321,39640,40251,21083,21163,21495,21512,22741,25335,28640,35946,36703,40633,20811,21051,21578,22269,31296,37239,40288,40658,29508,28425,33136,29969,24573,24794,39592,29403,36796,27492,38915,20170,22256,22372,22718,23130,24680,25031,26127,26118,26681,26801,28151,30165,32058,33390,39746,20123,20304,21449,21766,23919,24038,24046,26619,27801,29811,30722,35408,37782,35039,22352,24231,25387,20661,20652,20877,26368,21705,22622,22971,23472,24425,25165,25505,26685,27507,28168,28797,37319,29312,30741,30758,31085,25998,32048,33756,35009,36617,38555,21092,22312,26448,32618,36001,20916,22338,38442,22586,27018,32948,21682,23822,22524,30869,40442,20316,21066,21643,25662,26152,26388,26613,31364,31574,32034,37679,26716,39853,31545,21273,20874,21047,23519,25334,25774,25830,26413,27578,34217,38609,30352,39894,25420,37638,39851,30399,26194,19977,20632,21442,23665,24808,25746,25955,26719,29158,29642,29987,31639,32386,34453,35715,36059,37240,39184,26028,26283,27531,20181,20180,20282,20351,21050,21496,21490,21987,22235,22763,22987,22985,23039,23376,23629,24066,24107,24535,24605,25351,25903,23388,26031,26045,26088,26525,27490,27515,27663,29509,31049,31169,31992,32025,32043,32930,33026,33267,35222,35422,35433,35430,35468,35566,36039,36060,38604,39164,27503,20107,20284,20365,20816,23383,23546,24904,25345,26178,27425,28363,27835,29246,29885,30164,30913,31034,32780,32819,33258,33940,36766,27728,40575,24335,35672,40235,31482,36600,23437,38635,19971,21489,22519,22833,23241,23460,24713,28287,28422,30142,36074,23455,34048,31712,20594,26612,33437,23649,34122,32286,33294,20889,23556,25448,36198,26012,29038,31038,32023,32773,35613,36554,36974,34503,37034,20511,21242,23610,26451,28796,29237,37196,37320,37675,33509,23490,24369,24825,20027,21462,23432,25163,26417,27530,29417,29664,31278,33131,36259,37202,39318,20754,21463,21610,23551,25480,27193,32172,38656,22234,21454,21608,23447,23601,24030,20462,24833,25342,27954,31168,31179,32066,32333,32722,33261,33311,33936,34886,35186,35728,36468,36655,36913,37195,37228,38598,37276,20160,20303,20805,21313,24467,25102,26580,27713,28171,29539,32294,37325,37507,21460,22809,23487,28113,31069,32302,31899,22654,29087,20986,34899,36848,20426,23803,26149,30636,31459,33308,39423,20934,24490,26092,26991,27529,28147,28310,28516,30462,32020,24033,36981,37255,38918,20966,21021,25152,26257,26329,28186,24246,32210,32626,26360,34223,34295,35576,21161,21465,22899,24207,24464,24661,37604,38500,20663,20767,21213,21280,21319,21484,21736,21830,21809,22039,22888,22974,23100,23477,23558,23567,23569,23578,24196,24202,24288,24432,25215,25220,25307,25484,25463,26119,26124,26157,26230,26494,26786,27167,27189,27836,28040,28169,28248,28988,28966,29031,30151,30465,30813,30977,31077,31216,31456,31505,31911,32057,32918,33750,33931,34121,34909,35059,35359,35388,35412,35443,35937,36062,37284,37478,37758,37912,38556,38808,19978,19976,19998,20055,20887,21104,22478,22580,22732,23330,24120,24773,25854,26465,26454,27972,29366,30067,31331,33976,35698,37304,37664,22065,22516,39166,25325,26893,27542,29165,32340,32887,33394,35302,39135,34645,36785,23611,20280,20449,20405,21767,23072,23517,23529,24515,24910,25391,26032,26187,26862,27035,28024,28145,30003,30137,30495,31070,31206,32051,33251,33455,34218,35242,35386,36523,36763,36914,37341,38663,20154,20161,20995,22645,22764,23563,29978,23613,33102,35338,36805,38499,38765,31525,35535,38920,37218,22259,21416,36887,21561,22402,24101,25512,27700,28810,30561,31883,32736,34928,36930,37204,37648,37656,38543,29790,39620,23815,23913,25968,26530,36264,38619,25454,26441,26905,33733,38935,38592,35070,28548,25722,23544,19990,28716,30045,26159,20932,21046,21218,22995,24449,24615,25104,25919,25972,26143,26228,26866,26646,27491,28165,29298,29983,30427,31934,32854,22768,35069,35199,35488,35475,35531,36893,37266,38738,38745,25993,31246,33030,38587,24109,24796,25114,26021,26132,26512,30707,31309,31821,32318,33034,36012,36196,36321,36447,30889,20999,25305,25509,25666,25240,35373,31363,31680,35500,38634,32118,33292,34633,20185,20808,21315,21344,23459,23554,23574,24029,25126,25159,25776,26643,26676,27849,27973,27927,26579,28508,29006,29053,26059,31359,31661,32218,32330,32680,33146,33307,33337,34214,35438,36046,36341,36984,36983,37549,37521,38275,39854,21069,21892,28472,28982,20840,31109,32341,33203,31950,22092,22609,23720,25514,26366,26365,26970,29401,30095,30094,30990,31062,31199,31895,32032,32068,34311,35380,38459,36961,40736,20711,21109,21452,21474,20489,21930,22766,22863,29245,23435,23652,21277,24803,24819,25436,25475,25407,25531,25805,26089,26361,24035,27085,27133,28437,29157,20105,30185,30456,31379,31967,32207,32156,32865,33609,33624,33900,33980,34299,35013,36208,36865,36973,37783,38684,39442,20687,22679,24974,33235,34101,36104,36896,20419,20596,21063,21363,24687,25417,26463,28204,36275,36895,20439,23646,36042,26063,32154,21330,34966,20854,25539,23384,23403,23562,25613,26449,36956,20182,22810,22826,27760,35409,21822,22549,22949,24816,25171,26561,33333,26965,38464,39364,39464,20307,22534,23550,32784,23729,24111,24453,24608,24907,25140,26367,27888,28382,32974,33151,33492,34955,36024,36864,36910,38538,40667,39899,20195,21488,22823,31532,37261,38988,40441,28381,28711,21331,21828,23429,25176,25246,25299,27810,28655,29730,35351,37944,28609,35582,33592,20967,34552,21482,21481,20294,36948,36784,22890,33073,24061,31466,36799,26842,35895,29432,40008,27197,35504,20025,21336,22022,22374,25285,25506,26086,27470,28129,28251,28845,30701,31471,31658,32187,32829,32966,34507,35477,37723,22243,22727,24382,26029,26262,27264,27573,30007,35527,20516,30693,22320,24347,24677,26234,27744,30196,31258,32622,33268,34584,36933,39347,31689,30044,31481,31569,33988,36880,31209,31378,33590,23265,30528,20013,20210,23449,24544,25277,26172,26609,27880,34411,34935,35387,37198,37619,39376,27159,28710,29482,33511,33879,36015,19969,20806,20939,21899,23541,24086,24115,24193,24340,24373,24427,24500,25074,25361,26274,26397,28526,29266,30010,30522,32884,33081,33144,34678,35519,35548,36229,36339,37530,38263,38914,40165,21189,25431,30452,26389,27784,29645,36035,37806,38515,27941,22684,26894,27084,36861,37786,30171,36890,22618,26626,25524,27131,20291,28460,26584,36795,34086,32180,37716,26943,28528,22378,22775,23340,32044,29226,21514,37347,40372,20141,20302,20572,20597,21059,35998,21576,22564,23450,24093,24213,24237,24311,24351,24716,25269,25402,25552,26799,27712,30855,31118,31243,32224,33351,35330,35558,36420,36883,37048,37165,37336,40718,27877,25688,25826,25973,28404,30340,31515,36969,37841,28346,21746,24505,25764,36685,36845,37444,20856,22635,22825,23637,24215,28155,32399,29980,36028,36578,39003,28857,20253,27583,28593,3e4,38651,20814,21520,22581,22615,22956,23648,24466,26007,26460,28193,30331,33759,36077,36884,37117,37709,30757,30778,21162,24230,22303,22900,24594,20498,20826,20908,20941,20992,21776,22612,22616,22871,23445,23798,23947,24764,25237,25645,26481,26691,26812,26847,30423,28120,28271,28059,28783,29128,24403,30168,31095,31561,31572,31570,31958,32113,21040,33891,34153,34276,35342,35588,35910,36367,36867,36879,37913,38518,38957,39472,38360,20685,21205,21516,22530,23566,24999,25758,27934,30643,31461,33012,33796,36947,37509,23776,40199,21311,24471,24499,28060,29305,30563,31167,31716,27602,29420,35501,26627,27233,20984,31361,26932,23626,40182,33515,23493,37193,28702,22136,23663,24775,25958,27788,35930,36929,38931,21585,26311,37389,22856,37027,20869,20045,20970,34201,35598,28760,25466,37707,26978,39348,32260,30071,21335,26976,36575,38627,27741,20108,23612,24336,36841,21250,36049,32905,34425,24319,26085,20083,20837,22914,23615,38894,20219,22922,24525,35469,28641,31152,31074,23527,33905,29483,29105,24180,24565,25467,25754,29123,31896,20035,24316,20043,22492,22178,24745,28611,32013,33021,33075,33215,36786,35223,34468,24052,25226,25773,35207,26487,27874,27966,29750,30772,23110,32629,33453,39340,20467,24259,25309,25490,25943,26479,30403,29260,32972,32954,36649,37197,20493,22521,23186,26757,26995,29028,29437,36023,22770,36064,38506,36889,34687,31204,30695,33833,20271,21093,21338,25293,26575,27850,30333,31636,31893,33334,34180,36843,26333,28448,29190,32283,33707,39361,40614,20989,31665,30834,31672,32903,31560,27368,24161,32908,30033,30048,20843,37474,28300,30330,37271,39658,20240,32624,25244,31567,38309,40169,22138,22617,34532,38588,20276,21028,21322,21453,21467,24070,25644,26001,26495,27710,27726,29256,29359,29677,30036,32321,33324,34281,36009,31684,37318,29033,38930,39151,25405,26217,30058,30436,30928,34115,34542,21290,21329,21542,22915,24199,24444,24754,25161,25209,25259,26e3,27604,27852,30130,30382,30865,31192,32203,32631,32933,34987,35513,36027,36991,38750,39131,27147,31800,20633,23614,24494,26503,27608,29749,30473,32654,40763,26570,31255,21305,30091,39661,24422,33181,33777,32920,24380,24517,30050,31558,36924,26727,23019,23195,32016,30334,35628,20469,24426,27161,27703,28418,29922,31080,34920,35413,35961,24287,25551,30149,31186,33495,37672,37618,33948,34541,39981,21697,24428,25996,27996,28693,36007,36051,38971,25935,29942,19981,20184,22496,22827,23142,23500,20904,24067,24220,24598,25206,25975,26023,26222,28014,29238,31526,33104,33178,33433,35676,36e3,36070,36212,38428,38468,20398,25771,27494,33310,33889,34154,37096,23553,26963,39080,33914,34135,20239,21103,24489,24133,26381,31119,33145,35079,35206,28149,24343,25173,27832,20175,29289,39826,20998,21563,22132,22707,24996,25198,28954,22894,31881,31966,32027,38640,25991,32862,19993,20341,20853,22592,24163,24179,24330,26564,20006,34109,38281,38491,31859,38913,20731,22721,30294,30887,21029,30629,34065,31622,20559,22793,29255,31687,32232,36794,36820,36941,20415,21193,23081,24321,38829,20445,33303,37610,22275,25429,27497,29995,35036,36628,31298,21215,22675,24917,25098,26286,27597,31807,33769,20515,20472,21253,21574,22577,22857,23453,23792,23791,23849,24214,25265,25447,25918,26041,26379,27861,27873,28921,30770,32299,32990,33459,33804,34028,34562,35090,35370,35914,37030,37586,39165,40179,40300,20047,20129,20621,21078,22346,22952,24125,24536,24537,25151,26292,26395,26576,26834,20882,32033,32938,33192,35584,35980,36031,37502,38450,21536,38956,21271,20693,21340,22696,25778,26420,29287,30566,31302,37350,21187,27809,27526,22528,24140,22868,26412,32763,20961,30406,25705,30952,39764,40635,22475,22969,26151,26522,27598,21737,27097,24149,33180,26517,39850,26622,40018,26717,20134,20451,21448,25273,26411,27819,36804,20397,32365,40639,19975,24930,28288,28459,34067,21619,26410,39749,24051,31637,23724,23494,34588,28234,34001,31252,33032,22937,31885,27665,30496,21209,22818,28961,29279,30683,38695,40289,26891,23167,23064,20901,21517,21629,26126,30431,36855,37528,40180,23018,29277,28357,20813,26825,32191,32236,38754,40634,25720,27169,33538,22916,23391,27611,29467,30450,32178,32791,33945,20786,26408,40665,30446,26466,21247,39173,23588,25147,31870,36016,21839,24758,32011,38272,21249,20063,20918,22812,29242,32822,37326,24357,30690,21380,24441,32004,34220,35379,36493,38742,26611,34222,37971,24841,24840,27833,30290,35565,36664,21807,20305,20778,21191,21451,23461,24189,24736,24962,25558,26377,26586,28263,28044,29494,29495,30001,31056,35029,35480,36938,37009,37109,38596,34701,22805,20104,20313,19982,35465,36671,38928,20653,24188,22934,23481,24248,25562,25594,25793,26332,26954,27096,27915,28342,29076,29992,31407,32650,32768,33865,33993,35201,35617,36362,36965,38525,39178,24958,25233,27442,27779,28020,32716,32764,28096,32645,34746,35064,26469,33713,38972,38647,27931,32097,33853,37226,20081,21365,23888,27396,28651,34253,34349,35239,21033,21519,23653,26446,26792,29702,29827,30178,35023,35041,37324,38626,38520,24459,29575,31435,33870,25504,30053,21129,27969,28316,29705,30041,30827,31890,38534,31452,40845,20406,24942,26053,34396,20102,20142,20698,20001,20940,23534,26009,26753,28092,29471,30274,30637,31260,31975,33391,35538,36988,37327,38517,38936,21147,32209,20523,21400,26519,28107,29136,29747,33256,36650,38563,40023,40607,29792,22593,28057,32047,39006,20196,20278,20363,20919,21169,23994,24604,29618,31036,33491,37428,38583,38646,38666,40599,40802,26278,27508,21015,21155,28872,35010,24265,24651,24976,28451,29001,31806,32244,32879,34030,36899,37676,21570,39791,27347,28809,36034,36335,38706,21172,23105,24266,24324,26391,27004,27028,28010,28431,29282,29436,31725,32769,32894,34635,37070,20845,40595,31108,32907,37682,35542,20525,21644,35441,27498,36036,33031,24785,26528,40434,20121,20120,39952,35435,34241,34152,26880,28286,30871,33109,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24332,19984,19989,20010,20017,20022,20028,20031,20034,20054,20056,20098,20101,35947,20106,33298,24333,20110,20126,20127,20128,20130,20144,20147,20150,20174,20173,20164,20166,20162,20183,20190,20205,20191,20215,20233,20314,20272,20315,20317,20311,20295,20342,20360,20367,20376,20347,20329,20336,20369,20335,20358,20374,20760,20436,20447,20430,20440,20443,20433,20442,20432,20452,20453,20506,20520,20500,20522,20517,20485,20252,20470,20513,20521,20524,20478,20463,20497,20486,20547,20551,26371,20565,20560,20552,20570,20566,20588,20600,20608,20634,20613,20660,20658,20681,20682,20659,20674,20694,20702,20709,20717,20707,20718,20729,20725,20745,20737,20738,20758,20757,20756,20762,20769,20794,20791,20796,20795,20799,20800,20818,20812,20820,20834,31480,20841,20842,20846,20864,20866,22232,20876,20873,20879,20881,20883,20885,20886,20900,20902,20898,20905,20906,20907,20915,20913,20914,20912,20917,20925,20933,20937,20955,20960,34389,20969,20973,20976,20981,20990,20996,21003,21012,21006,21031,21034,21038,21043,21049,21071,21060,21067,21068,21086,21076,21098,21108,21097,21107,21119,21117,21133,21140,21138,21105,21128,21137,36776,36775,21164,21165,21180,21173,21185,21197,21207,21214,21219,21222,39149,21216,21235,21237,21240,21241,21254,21256,30008,21261,21264,21263,21269,21274,21283,21295,21297,21299,21304,21312,21318,21317,19991,21321,21325,20950,21342,21353,21358,22808,21371,21367,21378,21398,21408,21414,21413,21422,21424,21430,21443,31762,38617,21471,26364,29166,21486,21480,21485,21498,21505,21565,21568,21548,21549,21564,21550,21558,21545,21533,21582,21647,21621,21646,21599,21617,21623,21616,21650,21627,21632,21622,21636,21648,21638,21703,21666,21688,21669,21676,21700,21704,21672,21675,21698,21668,21694,21692,21720,21733,21734,21775,21780,21757,21742,21741,21754,21730,21817,21824,21859,21836,21806,21852,21829,21846,21847,21816,21811,21853,21913,21888,21679,21898,21919,21883,21886,21912,21918,21934,21884,21891,21929,21895,21928,21978,21957,21983,21956,21980,21988,21972,22036,22007,22038,22014,22013,22043,22009,22094,22096,29151,22068,22070,22066,22072,22123,22116,22063,22124,22122,22150,22144,22154,22176,22164,22159,22181,22190,22198,22196,22210,22204,22209,22211,22208,22216,22222,22225,22227,22231,22254,22265,22272,22271,22276,22281,22280,22283,22285,22291,22296,22294,21959,22300,22310,22327,22328,22350,22331,22336,22351,22377,22464,22408,22369,22399,22409,22419,22432,22451,22436,22442,22448,22467,22470,22484,22482,22483,22538,22486,22499,22539,22553,22557,22642,22561,22626,22603,22640,27584,22610,22589,22649,22661,22713,22687,22699,22714,22750,22715,22712,22702,22725,22739,22737,22743,22745,22744,22757,22748,22756,22751,22767,22778,22777,22779,22780,22781,22786,22794,22800,22811,26790,22821,22828,22829,22834,22840,22846,31442,22869,22864,22862,22874,22872,22882,22880,22887,22892,22889,22904,22913,22941,20318,20395,22947,22962,22982,23016,23004,22925,23001,23002,23077,23071,23057,23068,23049,23066,23104,23148,23113,23093,23094,23138,23146,23194,23228,23230,23243,23234,23229,23267,23255,23270,23273,23254,23290,23291,23308,23307,23318,23346,23248,23338,23350,23358,23363,23365,23360,23377,23381,23386,23387,23397,23401,23408,23411,23413,23416,25992,23418,23424,23427,23462,23480,23491,23495,23497,23508,23504,23524,23526,23522,23518,23525,23531,23536,23542,23539,23557,23559,23560,23565,23571,23584,23586,23592,23608,23609,23617,23622,23630,23635,23632,23631,23409,23660,23662,20066,23670,23673,23692,23697,23700,22939,23723,23739,23734,23740,23735,23749,23742,23751,23769,23785,23805,23802,23789,23948,23786,23819,23829,23831,23900,23839,23835,23825,23828,23842,23834,23833,23832,23884,23890,23886,23883,23916,23923,23926,23943,23940,23938,23970,23965,23980,23982,23997,23952,23991,23996,24009,24013,24019,24018,24022,24027,24043,24050,24053,24075,24090,24089,24081,24091,24118,24119,24132,24131,24128,24142,24151,24148,24159,24162,24164,24135,24181,24182,24186,40636,24191,24224,24257,24258,24264,24272,24271,24278,24291,24285,24282,24283,24290,24289,24296,24297,24300,24305,24307,24304,24308,24312,24318,24323,24329,24413,24412,24331,24337,24342,24361,24365,24376,24385,24392,24396,24398,24367,24401,24406,24407,24409,24417,24429,24435,24439,24451,24450,24447,24458,24456,24465,24455,24478,24473,24472,24480,24488,24493,24508,24534,24571,24548,24568,24561,24541,24755,24575,24609,24672,24601,24592,24617,24590,24625,24603,24597,24619,24614,24591,24634,24666,24641,24682,24695,24671,24650,24646,24653,24675,24643,24676,24642,24684,24683,24665,24705,24717,24807,24707,24730,24708,24731,24726,24727,24722,24743,24715,24801,24760,24800,24787,24756,24560,24765,24774,24757,24792,24909,24853,24838,24822,24823,24832,24820,24826,24835,24865,24827,24817,24845,24846,24903,24894,24872,24871,24906,24895,24892,24876,24884,24893,24898,24900,24947,24951,24920,24921,24922,24939,24948,24943,24933,24945,24927,24925,24915,24949,24985,24982,24967,25004,24980,24986,24970,24977,25003,25006,25036,25034,25033,25079,25032,25027,25030,25018,25035,32633,25037,25062,25059,25078,25082,25076,25087,25085,25084,25086,25088,25096,25097,25101,25100,25108,25115,25118,25121,25130,25134,25136,25138,25139,25153,25166,25182,25187,25179,25184,25192,25212,25218,25225,25214,25234,25235,25238,25300,25219,25236,25303,25297,25275,25295,25343,25286,25812,25288,25308,25292,25290,25282,25287,25243,25289,25356,25326,25329,25383,25346,25352,25327,25333,25424,25406,25421,25628,25423,25494,25486,25472,25515,25462,25507,25487,25481,25503,25525,25451,25449,25534,25577,25536,25542,25571,25545,25554,25590,25540,25622,25652,25606,25619,25638,25654,25885,25623,25640,25615,25703,25711,25718,25678,25898,25749,25747,25765,25769,25736,25788,25818,25810,25797,25799,25787,25816,25794,25841,25831,33289,25824,25825,25260,25827,25839,25900,25846,25844,25842,25850,25856,25853,25880,25884,25861,25892,25891,25899,25908,25909,25911,25910,25912,30027,25928,25942,25941,25933,25944,25950,25949,25970,25976,25986,25987,35722,26011,26015,26027,26039,26051,26054,26049,26052,26060,26066,26075,26073,26080,26081,26097,26482,26122,26115,26107,26483,26165,26166,26164,26140,26191,26180,26185,26177,26206,26205,26212,26215,26216,26207,26210,26224,26243,26248,26254,26249,26244,26264,26269,26305,26297,26313,26302,26300,26308,26296,26326,26330,26336,26175,26342,26345,26352,26357,26359,26383,26390,26398,26406,26407,38712,26414,26431,26422,26433,26424,26423,26438,26462,26464,26457,26467,26468,26505,26480,26537,26492,26474,26508,26507,26534,26529,26501,26551,26607,26548,26604,26547,26601,26552,26596,26590,26589,26594,26606,26553,26574,26566,26599,27292,26654,26694,26665,26688,26701,26674,26702,26803,26667,26713,26723,26743,26751,26783,26767,26797,26772,26781,26779,26755,27310,26809,26740,26805,26784,26810,26895,26765,26750,26881,26826,26888,26840,26914,26918,26849,26892,26829,26836,26855,26837,26934,26898,26884,26839,26851,26917,26873,26848,26863,26920,26922,26906,26915,26913,26822,27001,26999,26972,27e3,26987,26964,27006,26990,26937,26996,26941,26969,26928,26977,26974,26973,27009,26986,27058,27054,27088,27071,27073,27091,27070,27086,23528,27082,27101,27067,27075,27047,27182,27025,27040,27036,27029,27060,27102,27112,27138,27163,27135,27402,27129,27122,27111,27141,27057,27166,27117,27156,27115,27146,27154,27329,27171,27155,27204,27148,27250,27190,27256,27207,27234,27225,27238,27208,27192,27170,27280,27277,27296,27268,27298,27299,27287,34327,27323,27331,27330,27320,27315,27308,27358,27345,27359,27306,27354,27370,27387,27397,34326,27386,27410,27414,39729,27423,27448,27447,30428,27449,39150,27463,27459,27465,27472,27481,27476,27483,27487,27489,27512,27513,27519,27520,27524,27523,27533,27544,27541,27550,27556,27562,27563,27567,27570,27569,27571,27575,27580,27590,27595,27603,27615,27628,27627,27635,27631,40638,27656,27667,27668,27675,27684,27683,27742,27733,27746,27754,27778,27789,27802,27777,27803,27774,27752,27763,27794,27792,27844,27889,27859,27837,27863,27845,27869,27822,27825,27838,27834,27867,27887,27865,27882,27935,34893,27958,27947,27965,27960,27929,27957,27955,27922,27916,28003,28051,28004,27994,28025,27993,28046,28053,28644,28037,28153,28181,28170,28085,28103,28134,28088,28102,28140,28126,28108,28136,28114,28101,28154,28121,28132,28117,28138,28142,28205,28270,28206,28185,28274,28255,28222,28195,28267,28203,28278,28237,28191,28227,28218,28238,28196,28415,28189,28216,28290,28330,28312,28361,28343,28371,28349,28335,28356,28338,28372,28373,28303,28325,28354,28319,28481,28433,28748,28396,28408,28414,28479,28402,28465,28399,28466,28364,28478,28435,28407,28550,28538,28536,28545,28544,28527,28507,28659,28525,28546,28540,28504,28558,28561,28610,28518,28595,28579,28577,28580,28601,28614,28586,28639,28629,28652,28628,28632,28657,28654,28635,28681,28683,28666,28689,28673,28687,28670,28699,28698,28532,28701,28696,28703,28720,28734,28722,28753,28771,28825,28818,28847,28913,28844,28856,28851,28846,28895,28875,28893,28889,28937,28925,28956,28953,29029,29013,29064,29030,29026,29004,29014,29036,29071,29179,29060,29077,29096,29100,29143,29113,29118,29138,29129,29140,29134,29152,29164,29159,29173,29180,29177,29183,29197,29200,29211,29224,29229,29228,29232,29234,29243,29244,29247,29248,29254,29259,29272,29300,29310,29314,29313,29319,29330,29334,29346,29351,29369,29362,29379,29382,29380,29390,29394,29410,29408,29409,29433,29431,20495,29463,29450,29468,29462,29469,29492,29487,29481,29477,29502,29518,29519,40664,29527,29546,29544,29552,29560,29557,29563,29562,29640,29619,29646,29627,29632,29669,29678,29662,29858,29701,29807,29733,29688,29746,29754,29781,29759,29791,29785,29761,29788,29801,29808,29795,29802,29814,29822,29835,29854,29863,29898,29903,29908,29681,29920,29923,29927,29929,29934,29938,29936,29937,29944,29943,29956,29955,29957,29964,29966,29965,29973,29971,29982,29990,29996,30012,30020,30029,30026,30025,30043,30022,30042,30057,30052,30055,30059,30061,30072,30070,30086,30087,30068,30090,30089,30082,30100,30106,30109,30117,30115,30146,30131,30147,30133,30141,30136,30140,30129,30157,30154,30162,30169,30179,30174,30206,30207,30204,30209,30192,30202,30194,30195,30219,30221,30217,30239,30247,30240,30241,30242,30244,30260,30256,30267,30279,30280,30278,30300,30296,30305,30306,30312,30313,30314,30311,30316,30320,30322,30326,30328,30332,30336,30339,30344,30347,30350,30358,30355,30361,30362,30384,30388,30392,30393,30394,30402,30413,30422,30418,30430,30433,30437,30439,30442,34351,30459,30472,30471,30468,30505,30500,30494,30501,30502,30491,30519,30520,30535,30554,30568,30571,30555,30565,30591,30590,30585,30606,30603,30609,30624,30622,30640,30646,30649,30655,30652,30653,30651,30663,30669,30679,30682,30684,30691,30702,30716,30732,30738,31014,30752,31018,30789,30862,30836,30854,30844,30874,30860,30883,30901,30890,30895,30929,30918,30923,30932,30910,30908,30917,30922,30956,30951,30938,30973,30964,30983,30994,30993,31001,31020,31019,31040,31072,31063,31071,31066,31061,31059,31098,31103,31114,31133,31143,40779,31146,31150,31155,31161,31162,31177,31189,31207,31212,31201,31203,31240,31245,31256,31257,31264,31263,31104,31281,31291,31294,31287,31299,31319,31305,31329,31330,31337,40861,31344,31353,31357,31368,31383,31381,31384,31382,31401,31432,31408,31414,31429,31428,31423,36995,31431,31434,31437,31439,31445,31443,31449,31450,31453,31457,31458,31462,31469,31472,31490,31503,31498,31494,31539,31512,31513,31518,31541,31528,31542,31568,31610,31492,31565,31499,31564,31557,31605,31589,31604,31591,31600,31601,31596,31598,31645,31640,31647,31629,31644,31642,31627,31634,31631,31581,31641,31691,31681,31692,31695,31668,31686,31709,31721,31761,31764,31718,31717,31840,31744,31751,31763,31731,31735,31767,31757,31734,31779,31783,31786,31775,31799,31787,31805,31820,31811,31828,31823,31808,31824,31832,31839,31844,31830,31845,31852,31861,31875,31888,31908,31917,31906,31915,31905,31912,31923,31922,31921,31918,31929,31933,31936,31941,31938,31960,31954,31964,31970,39739,31983,31986,31988,31990,31994,32006,32002,32028,32021,32010,32069,32075,32046,32050,32063,32053,32070,32115,32086,32078,32114,32104,32110,32079,32099,32147,32137,32091,32143,32125,32155,32186,32174,32163,32181,32199,32189,32171,32317,32162,32175,32220,32184,32159,32176,32216,32221,32228,32222,32251,32242,32225,32261,32266,32291,32289,32274,32305,32287,32265,32267,32290,32326,32358,32315,32309,32313,32323,32311,32306,32314,32359,32349,32342,32350,32345,32346,32377,32362,32361,32380,32379,32387,32213,32381,36782,32383,32392,32393,32396,32402,32400,32403,32404,32406,32398,32411,32412,32568,32570,32581,32588,32589,32590,32592,32593,32597,32596,32600,32607,32608,32616,32617,32615,32632,32642,32646,32643,32648,32647,32652,32660,32670,32669,32666,32675,32687,32690,32697,32686,32694,32696,35697,32709,32710,32714,32725,32724,32737,32742,32745,32755,32761,39132,32774,32772,32779,32786,32792,32793,32796,32801,32808,32831,32827,32842,32838,32850,32856,32858,32863,32866,32872,32883,32882,32880,32886,32889,32893,32895,32900,32902,32901,32923,32915,32922,32941,20880,32940,32987,32997,32985,32989,32964,32986,32982,33033,33007,33009,33051,33065,33059,33071,33099,38539,33094,33086,33107,33105,33020,33137,33134,33125,33126,33140,33155,33160,33162,33152,33154,33184,33173,33188,33187,33119,33171,33193,33200,33205,33214,33208,33213,33216,33218,33210,33225,33229,33233,33241,33240,33224,33242,33247,33248,33255,33274,33275,33278,33281,33282,33285,33287,33290,33293,33296,33302,33321,33323,33336,33331,33344,33369,33368,33373,33370,33375,33380,33378,33384,33386,33387,33326,33393,33399,33400,33406,33421,33426,33451,33439,33467,33452,33505,33507,33503,33490,33524,33523,33530,33683,33539,33531,33529,33502,33542,33500,33545,33497,33589,33588,33558,33586,33585,33600,33593,33616,33605,33583,33579,33559,33560,33669,33690,33706,33695,33698,33686,33571,33678,33671,33674,33660,33717,33651,33653,33696,33673,33704,33780,33811,33771,33742,33789,33795,33752,33803,33729,33783,33799,33760,33778,33805,33826,33824,33725,33848,34054,33787,33901,33834,33852,34138,33924,33911,33899,33965,33902,33922,33897,33862,33836,33903,33913,33845,33994,33890,33977,33983,33951,34009,33997,33979,34010,34e3,33985,33990,34006,33953,34081,34047,34036,34071,34072,34092,34079,34069,34068,34044,34112,34147,34136,34120,34113,34306,34123,34133,34176,34212,34184,34193,34186,34216,34157,34196,34203,34282,34183,34204,34167,34174,34192,34249,34234,34255,34233,34256,34261,34269,34277,34268,34297,34314,34323,34315,34302,34298,34310,34338,34330,34352,34367,34381,20053,34388,34399,34407,34417,34451,34467,34473,34474,34443,34444,34486,34479,34500,34502,34480,34505,34851,34475,34516,34526,34537,34540,34527,34523,34543,34578,34566,34568,34560,34563,34555,34577,34569,34573,34553,34570,34612,34623,34615,34619,34597,34601,34586,34656,34655,34680,34636,34638,34676,34647,34664,34670,34649,34643,34659,34666,34821,34722,34719,34690,34735,34763,34749,34752,34768,38614,34731,34756,34739,34759,34758,34747,34799,34802,34784,34831,34829,34814,34806,34807,34830,34770,34833,34838,34837,34850,34849,34865,34870,34873,34855,34875,34884,34882,34898,34905,34910,34914,34923,34945,34942,34974,34933,34941,34997,34930,34946,34967,34962,34990,34969,34978,34957,34980,34992,35007,34993,35011,35012,35028,35032,35033,35037,35065,35074,35068,35060,35048,35058,35076,35084,35082,35091,35139,35102,35109,35114,35115,35137,35140,35131,35126,35128,35148,35101,35168,35166,35174,35172,35181,35178,35183,35188,35191,35198,35203,35208,35210,35219,35224,35233,35241,35238,35244,35247,35250,35258,35261,35263,35264,35290,35292,35293,35303,35316,35320,35331,35350,35344,35340,35355,35357,35365,35382,35393,35419,35410,35398,35400,35452,35437,35436,35426,35461,35458,35460,35496,35489,35473,35493,35494,35482,35491,35524,35533,35522,35546,35563,35571,35559,35556,35569,35604,35552,35554,35575,35550,35547,35596,35591,35610,35553,35606,35600,35607,35616,35635,38827,35622,35627,35646,35624,35649,35660,35663,35662,35657,35670,35675,35674,35691,35679,35692,35695,35700,35709,35712,35724,35726,35730,35731,35734,35737,35738,35898,35905,35903,35912,35916,35918,35920,35925,35938,35948,35960,35962,35970,35977,35973,35978,35981,35982,35988,35964,35992,25117,36013,36010,36029,36018,36019,36014,36022,36040,36033,36068,36067,36058,36093,36090,36091,36100,36101,36106,36103,36111,36109,36112,40782,36115,36045,36116,36118,36199,36205,36209,36211,36225,36249,36290,36286,36282,36303,36314,36310,36300,36315,36299,36330,36331,36319,36323,36348,36360,36361,36351,36381,36382,36368,36383,36418,36405,36400,36404,36426,36423,36425,36428,36432,36424,36441,36452,36448,36394,36451,36437,36470,36466,36476,36481,36487,36485,36484,36491,36490,36499,36497,36500,36505,36522,36513,36524,36528,36550,36529,36542,36549,36552,36555,36571,36579,36604,36603,36587,36606,36618,36613,36629,36626,36633,36627,36636,36639,36635,36620,36646,36659,36667,36665,36677,36674,36670,36684,36681,36678,36686,36695,36700,36706,36707,36708,36764,36767,36771,36781,36783,36791,36826,36837,36834,36842,36847,36999,36852,36869,36857,36858,36881,36885,36897,36877,36894,36886,36875,36903,36918,36917,36921,36856,36943,36944,36945,36946,36878,36937,36926,36950,36952,36958,36968,36975,36982,38568,36978,36994,36989,36993,36992,37002,37001,37007,37032,37039,37041,37045,37090,37092,25160,37083,37122,37138,37145,37170,37168,37194,37206,37208,37219,37221,37225,37235,37234,37259,37257,37250,37282,37291,37295,37290,37301,37300,37306,37312,37313,37321,37323,37328,37334,37343,37345,37339,37372,37365,37366,37406,37375,37396,37420,37397,37393,37470,37463,37445,37449,37476,37448,37525,37439,37451,37456,37532,37526,37523,37531,37466,37583,37561,37559,37609,37647,37626,37700,37678,37657,37666,37658,37667,37690,37685,37691,37724,37728,37756,37742,37718,37808,37804,37805,37780,37817,37846,37847,37864,37861,37848,37827,37853,37840,37832,37860,37914,37908,37907,37891,37895,37904,37942,37931,37941,37921,37946,37953,37970,37956,37979,37984,37986,37982,37994,37417,38e3,38005,38007,38013,37978,38012,38014,38017,38015,38274,38279,38282,38292,38294,38296,38297,38304,38312,38311,38317,38332,38331,38329,38334,38346,28662,38339,38349,38348,38357,38356,38358,38364,38369,38373,38370,38433,38440,38446,38447,38466,38476,38479,38475,38519,38492,38494,38493,38495,38502,38514,38508,38541,38552,38549,38551,38570,38567,38577,38578,38576,38580,38582,38584,38585,38606,38603,38601,38605,35149,38620,38669,38613,38649,38660,38662,38664,38675,38670,38673,38671,38678,38681,38692,38698,38704,38713,38717,38718,38724,38726,38728,38722,38729,38748,38752,38756,38758,38760,21202,38763,38769,38777,38789,38780,38785,38778,38790,38795,38799,38800,38812,38824,38822,38819,38835,38836,38851,38854,38856,38859,38876,38893,40783,38898,31455,38902,38901,38927,38924,38968,38948,38945,38967,38973,38982,38991,38987,39019,39023,39024,39025,39028,39027,39082,39087,39089,39094,39108,39107,39110,39145,39147,39171,39177,39186,39188,39192,39201,39197,39198,39204,39200,39212,39214,39229,39230,39234,39241,39237,39248,39243,39249,39250,39244,39253,39319,39320,39333,39341,39342,39356,39391,39387,39389,39384,39377,39405,39406,39409,39410,39419,39416,39425,39439,39429,39394,39449,39467,39479,39493,39490,39488,39491,39486,39509,39501,39515,39511,39519,39522,39525,39524,39529,39531,39530,39597,39600,39612,39616,39631,39633,39635,39636,39646,39647,39650,39651,39654,39663,39659,39662,39668,39665,39671,39675,39686,39704,39706,39711,39714,39715,39717,39719,39720,39721,39722,39726,39727,39730,39748,39747,39759,39757,39758,39761,39768,39796,39827,39811,39825,39830,39831,39839,39840,39848,39860,39872,39882,39865,39878,39887,39889,39890,39907,39906,39908,39892,39905,39994,39922,39921,39920,39957,39956,39945,39955,39948,39942,39944,39954,39946,39940,39982,39963,39973,39972,39969,39984,40007,39986,40006,39998,40026,40032,40039,40054,40056,40167,40172,40176,40201,40200,40171,40195,40198,40234,40230,40367,40227,40223,40260,40213,40210,40257,40255,40254,40262,40264,40285,40286,40292,40273,40272,40281,40306,40329,40327,40363,40303,40314,40346,40356,40361,40370,40388,40385,40379,40376,40378,40390,40399,40386,40409,40403,40440,40422,40429,40431,40445,40474,40475,40478,40565,40569,40573,40577,40584,40587,40588,40594,40597,40593,40605,40613,40617,40632,40618,40621,38753,40652,40654,40655,40656,40660,40668,40670,40669,40672,40677,40680,40687,40692,40694,40695,40697,40699,40700,40701,40711,40712,30391,40725,40737,40748,40766,40778,40786,40788,40803,40799,40800,40801,40806,40807,40812,40810,40823,40818,40822,40853,40860,40864,22575,27079,36953,29796,20956,29081,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,65506,65508,65287,65282,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,65506,65508,65287,65282,12849,8470,8481,8757,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],jis0212:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,728,711,184,729,733,175,731,730,65374,900,901,null,null,null,null,null,null,null,null,161,166,191,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,186,170,169,174,8482,164,8470,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,902,904,905,906,938,null,908,null,910,939,null,911,null,null,null,null,940,941,942,943,970,912,972,962,973,971,944,974,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1038,1039,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1118,1119,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,198,272,null,294,null,306,null,321,319,null,330,216,338,null,358,222,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,230,273,240,295,305,307,312,322,320,329,331,248,339,223,359,254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,193,192,196,194,258,461,256,260,197,195,262,264,268,199,266,270,201,200,203,202,282,278,274,280,null,284,286,290,288,292,205,204,207,206,463,304,298,302,296,308,310,313,317,315,323,327,325,209,211,210,214,212,465,336,332,213,340,344,342,346,348,352,350,356,354,218,217,220,219,364,467,368,362,370,366,360,471,475,473,469,372,221,376,374,377,381,379,null,null,null,null,null,null,null,225,224,228,226,259,462,257,261,229,227,263,265,269,231,267,271,233,232,235,234,283,279,275,281,501,285,287,null,289,293,237,236,239,238,464,null,299,303,297,309,311,314,318,316,324,328,326,241,243,242,246,244,466,337,333,245,341,345,343,347,349,353,351,357,355,250,249,252,251,365,468,369,363,371,367,361,472,476,474,470,373,253,255,375,378,382,380,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19970,19972,19973,19980,19986,19999,20003,20004,20008,20011,20014,20015,20016,20021,20032,20033,20036,20039,20049,20058,20060,20067,20072,20073,20084,20085,20089,20095,20109,20118,20119,20125,20143,20153,20163,20176,20186,20187,20192,20193,20194,20200,20207,20209,20211,20213,20221,20222,20223,20224,20226,20227,20232,20235,20236,20242,20245,20246,20247,20249,20270,20273,20320,20275,20277,20279,20281,20283,20286,20288,20290,20296,20297,20299,20300,20306,20308,20310,20312,20319,20323,20330,20332,20334,20337,20343,20344,20345,20346,20349,20350,20353,20354,20356,20357,20361,20362,20364,20366,20368,20370,20371,20372,20375,20377,20378,20382,20383,20402,20407,20409,20411,20412,20413,20414,20416,20417,20421,20422,20424,20425,20427,20428,20429,20431,20434,20444,20448,20450,20464,20466,20476,20477,20479,20480,20481,20484,20487,20490,20492,20494,20496,20499,20503,20504,20507,20508,20509,20510,20514,20519,20526,20528,20530,20531,20533,20544,20545,20546,20549,20550,20554,20556,20558,20561,20562,20563,20567,20569,20575,20576,20578,20579,20582,20583,20586,20589,20592,20593,20539,20609,20611,20612,20614,20618,20622,20623,20624,20626,20627,20628,20630,20635,20636,20638,20639,20640,20641,20642,20650,20655,20656,20665,20666,20669,20672,20675,20676,20679,20684,20686,20688,20691,20692,20696,20700,20701,20703,20706,20708,20710,20712,20713,20719,20721,20726,20730,20734,20739,20742,20743,20744,20747,20748,20749,20750,20722,20752,20759,20761,20763,20764,20765,20766,20771,20775,20776,20780,20781,20783,20785,20787,20788,20789,20792,20793,20802,20810,20815,20819,20821,20823,20824,20831,20836,20838,20862,20867,20868,20875,20878,20888,20893,20897,20899,20909,20920,20922,20924,20926,20927,20930,20936,20943,20945,20946,20947,20949,20952,20958,20962,20965,20974,20978,20979,20980,20983,20993,20994,20997,21010,21011,21013,21014,21016,21026,21032,21041,21042,21045,21052,21061,21065,21077,21079,21080,21082,21084,21087,21088,21089,21094,21102,21111,21112,21113,21120,21122,21125,21130,21132,21139,21141,21142,21143,21144,21146,21148,21156,21157,21158,21159,21167,21168,21174,21175,21176,21178,21179,21181,21184,21188,21190,21192,21196,21199,21201,21204,21206,21211,21212,21217,21221,21224,21225,21226,21228,21232,21233,21236,21238,21239,21248,21251,21258,21259,21260,21265,21267,21272,21275,21276,21278,21279,21285,21287,21288,21289,21291,21292,21293,21296,21298,21301,21308,21309,21310,21314,21324,21323,21337,21339,21345,21347,21349,21356,21357,21362,21369,21374,21379,21383,21384,21390,21395,21396,21401,21405,21409,21412,21418,21419,21423,21426,21428,21429,21431,21432,21434,21437,21440,21445,21455,21458,21459,21461,21466,21469,21470,21472,21478,21479,21493,21506,21523,21530,21537,21543,21544,21546,21551,21553,21556,21557,21571,21572,21575,21581,21583,21598,21602,21604,21606,21607,21609,21611,21613,21614,21620,21631,21633,21635,21637,21640,21641,21645,21649,21653,21654,21660,21663,21665,21670,21671,21673,21674,21677,21678,21681,21687,21689,21690,21691,21695,21702,21706,21709,21710,21728,21738,21740,21743,21750,21756,21758,21759,21760,21761,21765,21768,21769,21772,21773,21774,21781,21802,21803,21810,21813,21814,21819,21820,21821,21825,21831,21833,21834,21837,21840,21841,21848,21850,21851,21854,21856,21857,21860,21862,21887,21889,21890,21894,21896,21902,21903,21905,21906,21907,21908,21911,21923,21924,21933,21938,21951,21953,21955,21958,21961,21963,21964,21966,21969,21970,21971,21975,21976,21979,21982,21986,21993,22006,22015,22021,22024,22026,22029,22030,22031,22032,22033,22034,22041,22060,22064,22067,22069,22071,22073,22075,22076,22077,22079,22080,22081,22083,22084,22086,22089,22091,22093,22095,22100,22110,22112,22113,22114,22115,22118,22121,22125,22127,22129,22130,22133,22148,22149,22152,22155,22156,22165,22169,22170,22173,22174,22175,22182,22183,22184,22185,22187,22188,22189,22193,22195,22199,22206,22213,22217,22218,22219,22223,22224,22220,22221,22233,22236,22237,22239,22241,22244,22245,22246,22247,22248,22257,22251,22253,22262,22263,22273,22274,22279,22282,22284,22289,22293,22298,22299,22301,22304,22306,22307,22308,22309,22313,22314,22316,22318,22319,22323,22324,22333,22334,22335,22341,22342,22348,22349,22354,22370,22373,22375,22376,22379,22381,22382,22383,22384,22385,22387,22388,22389,22391,22393,22394,22395,22396,22398,22401,22403,22412,22420,22423,22425,22426,22428,22429,22430,22431,22433,22421,22439,22440,22441,22444,22456,22461,22471,22472,22476,22479,22485,22493,22494,22500,22502,22503,22505,22509,22512,22517,22518,22520,22525,22526,22527,22531,22532,22536,22537,22497,22540,22541,22555,22558,22559,22560,22566,22567,22573,22578,22585,22591,22601,22604,22605,22607,22608,22613,22623,22625,22628,22631,22632,22648,22652,22655,22656,22657,22663,22664,22665,22666,22668,22669,22671,22672,22676,22678,22685,22688,22689,22690,22694,22697,22705,22706,22724,22716,22722,22728,22733,22734,22736,22738,22740,22742,22746,22749,22753,22754,22761,22771,22789,22790,22795,22796,22802,22803,22804,34369,22813,22817,22819,22820,22824,22831,22832,22835,22837,22838,22847,22851,22854,22866,22867,22873,22875,22877,22878,22879,22881,22883,22891,22893,22895,22898,22901,22902,22905,22907,22908,22923,22924,22926,22930,22933,22935,22943,22948,22951,22957,22958,22959,22960,22963,22967,22970,22972,22977,22979,22980,22984,22986,22989,22994,23005,23006,23007,23011,23012,23015,23022,23023,23025,23026,23028,23031,23040,23044,23052,23053,23054,23058,23059,23070,23075,23076,23079,23080,23082,23085,23088,23108,23109,23111,23112,23116,23120,23125,23134,23139,23141,23143,23149,23159,23162,23163,23166,23179,23184,23187,23190,23193,23196,23198,23199,23200,23202,23207,23212,23217,23218,23219,23221,23224,23226,23227,23231,23236,23238,23240,23247,23258,23260,23264,23269,23274,23278,23285,23286,23293,23296,23297,23304,23319,23348,23321,23323,23325,23329,23333,23341,23352,23361,23371,23372,23378,23382,23390,23400,23406,23407,23420,23421,23422,23423,23425,23428,23430,23434,23438,23440,23441,23443,23444,23446,23464,23465,23468,23469,23471,23473,23474,23479,23482,23484,23488,23489,23501,23503,23510,23511,23512,23513,23514,23520,23535,23537,23540,23549,23564,23575,23582,23583,23587,23590,23593,23595,23596,23598,23600,23602,23605,23606,23641,23642,23644,23650,23651,23655,23656,23657,23661,23664,23668,23669,23674,23675,23676,23677,23687,23688,23690,23695,23698,23709,23711,23712,23714,23715,23718,23722,23730,23732,23733,23738,23753,23755,23762,23773,23767,23790,23793,23794,23796,23809,23814,23821,23826,23851,23843,23844,23846,23847,23857,23860,23865,23869,23871,23874,23875,23878,23880,23893,23889,23897,23882,23903,23904,23905,23906,23908,23914,23917,23920,23929,23930,23934,23935,23937,23939,23944,23946,23954,23955,23956,23957,23961,23963,23967,23968,23975,23979,23984,23988,23992,23993,24003,24007,24011,24016,24014,24024,24025,24032,24036,24041,24056,24057,24064,24071,24077,24082,24084,24085,24088,24095,24096,24110,24104,24114,24117,24126,24139,24144,24137,24145,24150,24152,24155,24156,24158,24168,24170,24171,24172,24173,24174,24176,24192,24203,24206,24226,24228,24229,24232,24234,24236,24241,24243,24253,24254,24255,24262,24268,24267,24270,24273,24274,24276,24277,24284,24286,24293,24299,24322,24326,24327,24328,24334,24345,24348,24349,24353,24354,24355,24356,24360,24363,24364,24366,24368,24372,24374,24379,24381,24383,24384,24388,24389,24391,24397,24400,24404,24408,24411,24416,24419,24420,24423,24431,24434,24436,24437,24440,24442,24445,24446,24457,24461,24463,24470,24476,24477,24482,24487,24491,24484,24492,24495,24496,24497,24504,24516,24519,24520,24521,24523,24528,24529,24530,24531,24532,24542,24545,24546,24552,24553,24554,24556,24557,24558,24559,24562,24563,24566,24570,24572,24583,24586,24589,24595,24596,24599,24600,24602,24607,24612,24621,24627,24629,24640,24647,24648,24649,24652,24657,24660,24662,24663,24669,24673,24679,24689,24702,24703,24706,24710,24712,24714,24718,24721,24723,24725,24728,24733,24734,24738,24740,24741,24744,24752,24753,24759,24763,24766,24770,24772,24776,24777,24778,24779,24782,24783,24788,24789,24793,24795,24797,24798,24802,24805,24818,24821,24824,24828,24829,24834,24839,24842,24844,24848,24849,24850,24851,24852,24854,24855,24857,24860,24862,24866,24874,24875,24880,24881,24885,24886,24887,24889,24897,24901,24902,24905,24926,24928,24940,24946,24952,24955,24956,24959,24960,24961,24963,24964,24971,24973,24978,24979,24983,24984,24988,24989,24991,24992,24997,25e3,25002,25005,25016,25017,25020,25024,25025,25026,25038,25039,25045,25052,25053,25054,25055,25057,25058,25063,25065,25061,25068,25069,25071,25089,25091,25092,25095,25107,25109,25116,25120,25122,25123,25127,25129,25131,25145,25149,25154,25155,25156,25158,25164,25168,25169,25170,25172,25174,25178,25180,25188,25197,25199,25203,25210,25213,25229,25230,25231,25232,25254,25256,25267,25270,25271,25274,25278,25279,25284,25294,25301,25302,25306,25322,25330,25332,25340,25341,25347,25348,25354,25355,25357,25360,25363,25366,25368,25385,25386,25389,25397,25398,25401,25404,25409,25410,25411,25412,25414,25418,25419,25422,25426,25427,25428,25432,25435,25445,25446,25452,25453,25457,25460,25461,25464,25468,25469,25471,25474,25476,25479,25482,25488,25492,25493,25497,25498,25502,25508,25510,25517,25518,25519,25533,25537,25541,25544,25550,25553,25555,25556,25557,25564,25568,25573,25578,25580,25586,25587,25589,25592,25593,25609,25610,25616,25618,25620,25624,25630,25632,25634,25636,25637,25641,25642,25647,25648,25653,25661,25663,25675,25679,25681,25682,25683,25684,25690,25691,25692,25693,25695,25696,25697,25699,25709,25715,25716,25723,25725,25733,25735,25743,25744,25745,25752,25753,25755,25757,25759,25761,25763,25766,25768,25772,25779,25789,25790,25791,25796,25801,25802,25803,25804,25806,25808,25809,25813,25815,25828,25829,25833,25834,25837,25840,25845,25847,25851,25855,25857,25860,25864,25865,25866,25871,25875,25876,25878,25881,25883,25886,25887,25890,25894,25897,25902,25905,25914,25916,25917,25923,25927,25929,25936,25938,25940,25951,25952,25959,25963,25978,25981,25985,25989,25994,26002,26005,26008,26013,26016,26019,26022,26030,26034,26035,26036,26047,26050,26056,26057,26062,26064,26068,26070,26072,26079,26096,26098,26100,26101,26105,26110,26111,26112,26116,26120,26121,26125,26129,26130,26133,26134,26141,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26161,26163,26169,26167,26176,26181,26182,26186,26188,26193,26190,26199,26200,26201,26203,26204,26208,26209,26363,26218,26219,26220,26238,26227,26229,26239,26231,26232,26233,26235,26240,26236,26251,26252,26253,26256,26258,26265,26266,26267,26268,26271,26272,26276,26285,26289,26290,26293,26299,26303,26304,26306,26307,26312,26316,26318,26319,26324,26331,26335,26344,26347,26348,26350,26362,26373,26375,26382,26387,26393,26396,26400,26402,26419,26430,26437,26439,26440,26444,26452,26453,26461,26470,26476,26478,26484,26486,26491,26497,26500,26510,26511,26513,26515,26518,26520,26521,26523,26544,26545,26546,26549,26555,26556,26557,26617,26560,26562,26563,26565,26568,26569,26578,26583,26585,26588,26593,26598,26608,26610,26614,26615,26706,26644,26649,26653,26655,26664,26663,26668,26669,26671,26672,26673,26675,26683,26687,26692,26693,26698,26700,26709,26711,26712,26715,26731,26734,26735,26736,26737,26738,26741,26745,26746,26747,26748,26754,26756,26758,26760,26774,26776,26778,26780,26785,26787,26789,26793,26794,26798,26802,26811,26821,26824,26828,26831,26832,26833,26835,26838,26841,26844,26845,26853,26856,26858,26859,26860,26861,26864,26865,26869,26870,26875,26876,26877,26886,26889,26890,26896,26897,26899,26902,26903,26929,26931,26933,26936,26939,26946,26949,26953,26958,26967,26971,26979,26980,26981,26982,26984,26985,26988,26992,26993,26994,27002,27003,27007,27008,27021,27026,27030,27032,27041,27045,27046,27048,27051,27053,27055,27063,27064,27066,27068,27077,27080,27089,27094,27095,27106,27109,27118,27119,27121,27123,27125,27134,27136,27137,27139,27151,27153,27157,27162,27165,27168,27172,27176,27184,27186,27188,27191,27195,27198,27199,27205,27206,27209,27210,27214,27216,27217,27218,27221,27222,27227,27236,27239,27242,27249,27251,27262,27265,27267,27270,27271,27273,27275,27281,27291,27293,27294,27295,27301,27307,27311,27312,27313,27316,27325,27326,27327,27334,27337,27336,27340,27344,27348,27349,27350,27356,27357,27364,27367,27372,27376,27377,27378,27388,27389,27394,27395,27398,27399,27401,27407,27408,27409,27415,27419,27422,27428,27432,27435,27436,27439,27445,27446,27451,27455,27462,27466,27469,27474,27478,27480,27485,27488,27495,27499,27502,27504,27509,27517,27518,27522,27525,27543,27547,27551,27552,27554,27555,27560,27561,27564,27565,27566,27568,27576,27577,27581,27582,27587,27588,27593,27596,27606,27610,27617,27619,27622,27623,27630,27633,27639,27641,27647,27650,27652,27653,27657,27661,27662,27664,27666,27673,27679,27686,27687,27688,27692,27694,27699,27701,27702,27706,27707,27711,27722,27723,27725,27727,27730,27732,27737,27739,27740,27755,27757,27759,27764,27766,27768,27769,27771,27781,27782,27783,27785,27796,27797,27799,27800,27804,27807,27824,27826,27828,27842,27846,27853,27855,27856,27857,27858,27860,27862,27866,27868,27872,27879,27881,27883,27884,27886,27890,27892,27908,27911,27914,27918,27919,27921,27923,27930,27942,27943,27944,27751,27950,27951,27953,27961,27964,27967,27991,27998,27999,28001,28005,28007,28015,28016,28028,28034,28039,28049,28050,28052,28054,28055,28056,28074,28076,28084,28087,28089,28093,28095,28100,28104,28106,28110,28111,28118,28123,28125,28127,28128,28130,28133,28137,28143,28144,28148,28150,28156,28160,28164,28190,28194,28199,28210,28214,28217,28219,28220,28228,28229,28232,28233,28235,28239,28241,28242,28243,28244,28247,28252,28253,28254,28258,28259,28264,28275,28283,28285,28301,28307,28313,28320,28327,28333,28334,28337,28339,28347,28351,28352,28353,28355,28359,28360,28362,28365,28366,28367,28395,28397,28398,28409,28411,28413,28420,28424,28426,28428,28429,28438,28440,28442,28443,28454,28457,28458,28463,28464,28467,28470,28475,28476,28461,28495,28497,28498,28499,28503,28505,28506,28509,28510,28513,28514,28520,28524,28541,28542,28547,28551,28552,28555,28556,28557,28560,28562,28563,28564,28566,28570,28575,28576,28581,28582,28583,28584,28590,28591,28592,28597,28598,28604,28613,28615,28616,28618,28634,28638,28648,28649,28656,28661,28665,28668,28669,28672,28677,28678,28679,28685,28695,28704,28707,28719,28724,28727,28729,28732,28739,28740,28744,28745,28746,28747,28756,28757,28765,28766,28750,28772,28773,28780,28782,28789,28790,28798,28801,28805,28806,28820,28821,28822,28823,28824,28827,28836,28843,28848,28849,28852,28855,28874,28881,28883,28884,28885,28886,28888,28892,28900,28922,28931,28932,28933,28934,28935,28939,28940,28943,28958,28960,28971,28973,28975,28976,28977,28984,28993,28997,28998,28999,29002,29003,29008,29010,29015,29018,29020,29022,29024,29032,29049,29056,29061,29063,29068,29074,29082,29083,29088,29090,29103,29104,29106,29107,29114,29119,29120,29121,29124,29131,29132,29139,29142,29145,29146,29148,29176,29182,29184,29191,29192,29193,29203,29207,29210,29213,29215,29220,29227,29231,29236,29240,29241,29249,29250,29251,29253,29262,29263,29264,29267,29269,29270,29274,29276,29278,29280,29283,29288,29291,29294,29295,29297,29303,29304,29307,29308,29311,29316,29321,29325,29326,29331,29339,29352,29357,29358,29361,29364,29374,29377,29383,29385,29388,29397,29398,29400,29407,29413,29427,29428,29434,29435,29438,29442,29444,29445,29447,29451,29453,29458,29459,29464,29465,29470,29474,29476,29479,29480,29484,29489,29490,29493,29498,29499,29501,29507,29517,29520,29522,29526,29528,29533,29534,29535,29536,29542,29543,29545,29547,29548,29550,29551,29553,29559,29561,29564,29568,29569,29571,29573,29574,29582,29584,29587,29589,29591,29592,29596,29598,29599,29600,29602,29605,29606,29610,29611,29613,29621,29623,29625,29628,29629,29631,29637,29638,29641,29643,29644,29647,29650,29651,29654,29657,29661,29665,29667,29670,29671,29673,29684,29685,29687,29689,29690,29691,29693,29695,29696,29697,29700,29703,29706,29713,29722,29723,29732,29734,29736,29737,29738,29739,29740,29741,29742,29743,29744,29745,29753,29760,29763,29764,29766,29767,29771,29773,29777,29778,29783,29789,29794,29798,29799,29800,29803,29805,29806,29809,29810,29824,29825,29829,29830,29831,29833,29839,29840,29841,29842,29848,29849,29850,29852,29855,29856,29857,29859,29862,29864,29865,29866,29867,29870,29871,29873,29874,29877,29881,29883,29887,29896,29897,29900,29904,29907,29912,29914,29915,29918,29919,29924,29928,29930,29931,29935,29940,29946,29947,29948,29951,29958,29970,29974,29975,29984,29985,29988,29991,29993,29994,29999,30006,30009,30013,30014,30015,30016,30019,30023,30024,30030,30032,30034,30039,30046,30047,30049,30063,30065,30073,30074,30075,30076,30077,30078,30081,30085,30096,30098,30099,30101,30105,30108,30114,30116,30132,30138,30143,30144,30145,30148,30150,30156,30158,30159,30167,30172,30175,30176,30177,30180,30183,30188,30190,30191,30193,30201,30208,30210,30211,30212,30215,30216,30218,30220,30223,30226,30227,30229,30230,30233,30235,30236,30237,30238,30243,30245,30246,30249,30253,30258,30259,30261,30264,30265,30266,30268,30282,30272,30273,30275,30276,30277,30281,30283,30293,30297,30303,30308,30309,30317,30318,30319,30321,30324,30337,30341,30348,30349,30357,30363,30364,30365,30367,30368,30370,30371,30372,30373,30374,30375,30376,30378,30381,30397,30401,30405,30409,30411,30412,30414,30420,30425,30432,30438,30440,30444,30448,30449,30454,30457,30460,30464,30470,30474,30478,30482,30484,30485,30487,30489,30490,30492,30498,30504,30509,30510,30511,30516,30517,30518,30521,30525,30526,30530,30533,30534,30538,30541,30542,30543,30546,30550,30551,30556,30558,30559,30560,30562,30564,30567,30570,30572,30576,30578,30579,30580,30586,30589,30592,30596,30604,30605,30612,30613,30614,30618,30623,30626,30631,30634,30638,30639,30641,30645,30654,30659,30665,30673,30674,30677,30681,30686,30687,30688,30692,30694,30698,30700,30704,30705,30708,30712,30715,30725,30726,30729,30733,30734,30737,30749,30753,30754,30755,30765,30766,30768,30773,30775,30787,30788,30791,30792,30796,30798,30802,30812,30814,30816,30817,30819,30820,30824,30826,30830,30842,30846,30858,30863,30868,30872,30881,30877,30878,30879,30884,30888,30892,30893,30896,30897,30898,30899,30907,30909,30911,30919,30920,30921,30924,30926,30930,30931,30933,30934,30948,30939,30943,30944,30945,30950,30954,30962,30963,30976,30966,30967,30970,30971,30975,30982,30988,30992,31002,31004,31006,31007,31008,31013,31015,31017,31021,31025,31028,31029,31035,31037,31039,31044,31045,31046,31050,31051,31055,31057,31060,31064,31067,31068,31079,31081,31083,31090,31097,31099,31100,31102,31115,31116,31121,31123,31124,31125,31126,31128,31131,31132,31137,31144,31145,31147,31151,31153,31156,31160,31163,31170,31172,31175,31176,31178,31183,31188,31190,31194,31197,31198,31200,31202,31205,31210,31211,31213,31217,31224,31228,31234,31235,31239,31241,31242,31244,31249,31253,31259,31262,31265,31271,31275,31277,31279,31280,31284,31285,31288,31289,31290,31300,31301,31303,31304,31308,31317,31318,31321,31324,31325,31327,31328,31333,31335,31338,31341,31349,31352,31358,31360,31362,31365,31366,31370,31371,31376,31377,31380,31390,31392,31395,31404,31411,31413,31417,31419,31420,31430,31433,31436,31438,31441,31451,31464,31465,31467,31468,31473,31476,31483,31485,31486,31495,31508,31519,31523,31527,31529,31530,31531,31533,31534,31535,31536,31537,31540,31549,31551,31552,31553,31559,31566,31573,31584,31588,31590,31593,31594,31597,31599,31602,31603,31607,31620,31625,31630,31632,31633,31638,31643,31646,31648,31653,31660,31663,31664,31666,31669,31670,31674,31675,31676,31677,31682,31685,31688,31690,31700,31702,31703,31705,31706,31707,31720,31722,31730,31732,31733,31736,31737,31738,31740,31742,31745,31746,31747,31748,31750,31753,31755,31756,31758,31759,31769,31771,31776,31781,31782,31784,31788,31793,31795,31796,31798,31801,31802,31814,31818,31829,31825,31826,31827,31833,31834,31835,31836,31837,31838,31841,31843,31847,31849,31853,31854,31856,31858,31865,31868,31869,31878,31879,31887,31892,31902,31904,31910,31920,31926,31927,31930,31931,31932,31935,31940,31943,31944,31945,31949,31951,31955,31956,31957,31959,31961,31962,31965,31974,31977,31979,31989,32003,32007,32008,32009,32015,32017,32018,32019,32022,32029,32030,32035,32038,32042,32045,32049,32060,32061,32062,32064,32065,32071,32072,32077,32081,32083,32087,32089,32090,32092,32093,32101,32103,32106,32112,32120,32122,32123,32127,32129,32130,32131,32133,32134,32136,32139,32140,32141,32145,32150,32151,32157,32158,32166,32167,32170,32179,32182,32183,32185,32194,32195,32196,32197,32198,32204,32205,32206,32215,32217,32256,32226,32229,32230,32234,32235,32237,32241,32245,32246,32249,32250,32264,32272,32273,32277,32279,32284,32285,32288,32295,32296,32300,32301,32303,32307,32310,32319,32324,32325,32327,32334,32336,32338,32344,32351,32353,32354,32357,32363,32366,32367,32371,32376,32382,32385,32390,32391,32394,32397,32401,32405,32408,32410,32413,32414,32572,32571,32573,32574,32575,32579,32580,32583,32591,32594,32595,32603,32604,32605,32609,32611,32612,32613,32614,32621,32625,32637,32638,32639,32640,32651,32653,32655,32656,32657,32662,32663,32668,32673,32674,32678,32682,32685,32692,32700,32703,32704,32707,32712,32718,32719,32731,32735,32739,32741,32744,32748,32750,32751,32754,32762,32765,32766,32767,32775,32776,32778,32781,32782,32783,32785,32787,32788,32790,32797,32798,32799,32800,32804,32806,32812,32814,32816,32820,32821,32823,32825,32826,32828,32830,32832,32836,32864,32868,32870,32877,32881,32885,32897,32904,32910,32924,32926,32934,32935,32939,32952,32953,32968,32973,32975,32978,32980,32981,32983,32984,32992,33005,33006,33008,33010,33011,33014,33017,33018,33022,33027,33035,33046,33047,33048,33052,33054,33056,33060,33063,33068,33072,33077,33082,33084,33093,33095,33098,33100,33106,33111,33120,33121,33127,33128,33129,33133,33135,33143,33153,33168,33156,33157,33158,33163,33166,33174,33176,33179,33182,33186,33198,33202,33204,33211,33227,33219,33221,33226,33230,33231,33237,33239,33243,33245,33246,33249,33252,33259,33260,33264,33265,33266,33269,33270,33272,33273,33277,33279,33280,33283,33295,33299,33300,33305,33306,33309,33313,33314,33320,33330,33332,33338,33347,33348,33349,33350,33355,33358,33359,33361,33366,33372,33376,33379,33383,33389,33396,33403,33405,33407,33408,33409,33411,33412,33415,33417,33418,33422,33425,33428,33430,33432,33434,33435,33440,33441,33443,33444,33447,33448,33449,33450,33454,33456,33458,33460,33463,33466,33468,33470,33471,33478,33488,33493,33498,33504,33506,33508,33512,33514,33517,33519,33526,33527,33533,33534,33536,33537,33543,33544,33546,33547,33620,33563,33565,33566,33567,33569,33570,33580,33581,33582,33584,33587,33591,33594,33596,33597,33602,33603,33604,33607,33613,33614,33617,33621,33622,33623,33648,33656,33661,33663,33664,33666,33668,33670,33677,33682,33684,33685,33688,33689,33691,33692,33693,33702,33703,33705,33708,33726,33727,33728,33735,33737,33743,33744,33745,33748,33757,33619,33768,33770,33782,33784,33785,33788,33793,33798,33802,33807,33809,33813,33817,33709,33839,33849,33861,33863,33864,33866,33869,33871,33873,33874,33878,33880,33881,33882,33884,33888,33892,33893,33895,33898,33904,33907,33908,33910,33912,33916,33917,33921,33925,33938,33939,33941,33950,33958,33960,33961,33962,33967,33969,33972,33978,33981,33982,33984,33986,33991,33992,33996,33999,34003,34012,34023,34026,34031,34032,34033,34034,34039,34098,34042,34043,34045,34050,34051,34055,34060,34062,34064,34076,34078,34082,34083,34084,34085,34087,34090,34091,34095,34099,34100,34102,34111,34118,34127,34128,34129,34130,34131,34134,34137,34140,34141,34142,34143,34144,34145,34146,34148,34155,34159,34169,34170,34171,34173,34175,34177,34181,34182,34185,34187,34188,34191,34195,34200,34205,34207,34208,34210,34213,34215,34228,34230,34231,34232,34236,34237,34238,34239,34242,34247,34250,34251,34254,34221,34264,34266,34271,34272,34278,34280,34285,34291,34294,34300,34303,34304,34308,34309,34317,34318,34320,34321,34322,34328,34329,34331,34334,34337,34343,34345,34358,34360,34362,34364,34365,34368,34370,34374,34386,34387,34390,34391,34392,34393,34397,34400,34401,34402,34403,34404,34409,34412,34415,34421,34422,34423,34426,34445,34449,34454,34456,34458,34460,34465,34470,34471,34472,34477,34481,34483,34484,34485,34487,34488,34489,34495,34496,34497,34499,34501,34513,34514,34517,34519,34522,34524,34528,34531,34533,34535,34440,34554,34556,34557,34564,34565,34567,34571,34574,34575,34576,34579,34580,34585,34590,34591,34593,34595,34600,34606,34607,34609,34610,34617,34618,34620,34621,34622,34624,34627,34629,34637,34648,34653,34657,34660,34661,34671,34673,34674,34683,34691,34692,34693,34694,34695,34696,34697,34699,34700,34704,34707,34709,34711,34712,34713,34718,34720,34723,34727,34732,34733,34734,34737,34741,34750,34751,34753,34760,34761,34762,34766,34773,34774,34777,34778,34780,34783,34786,34787,34788,34794,34795,34797,34801,34803,34808,34810,34815,34817,34819,34822,34825,34826,34827,34832,34841,34834,34835,34836,34840,34842,34843,34844,34846,34847,34856,34861,34862,34864,34866,34869,34874,34876,34881,34883,34885,34888,34889,34890,34891,34894,34897,34901,34902,34904,34906,34908,34911,34912,34916,34921,34929,34937,34939,34944,34968,34970,34971,34972,34975,34976,34984,34986,35002,35005,35006,35008,35018,35019,35020,35021,35022,35025,35026,35027,35035,35038,35047,35055,35056,35057,35061,35063,35073,35078,35085,35086,35087,35093,35094,35096,35097,35098,35100,35104,35110,35111,35112,35120,35121,35122,35125,35129,35130,35134,35136,35138,35141,35142,35145,35151,35154,35159,35162,35163,35164,35169,35170,35171,35179,35182,35184,35187,35189,35194,35195,35196,35197,35209,35213,35216,35220,35221,35227,35228,35231,35232,35237,35248,35252,35253,35254,35255,35260,35284,35285,35286,35287,35288,35301,35305,35307,35309,35313,35315,35318,35321,35325,35327,35332,35333,35335,35343,35345,35346,35348,35349,35358,35360,35362,35364,35366,35371,35372,35375,35381,35383,35389,35390,35392,35395,35397,35399,35401,35405,35406,35411,35414,35415,35416,35420,35421,35425,35429,35431,35445,35446,35447,35449,35450,35451,35454,35455,35456,35459,35462,35467,35471,35472,35474,35478,35479,35481,35487,35495,35497,35502,35503,35507,35510,35511,35515,35518,35523,35526,35528,35529,35530,35537,35539,35540,35541,35543,35549,35551,35564,35568,35572,35573,35574,35580,35583,35589,35590,35595,35601,35612,35614,35615,35594,35629,35632,35639,35644,35650,35651,35652,35653,35654,35656,35666,35667,35668,35673,35661,35678,35683,35693,35702,35704,35705,35708,35710,35713,35716,35717,35723,35725,35727,35732,35733,35740,35742,35743,35896,35897,35901,35902,35909,35911,35913,35915,35919,35921,35923,35924,35927,35928,35931,35933,35929,35939,35940,35942,35944,35945,35949,35955,35957,35958,35963,35966,35974,35975,35979,35984,35986,35987,35993,35995,35996,36004,36025,36026,36037,36038,36041,36043,36047,36054,36053,36057,36061,36065,36072,36076,36079,36080,36082,36085,36087,36088,36094,36095,36097,36099,36105,36114,36119,36123,36197,36201,36204,36206,36223,36226,36228,36232,36237,36240,36241,36245,36254,36255,36256,36262,36267,36268,36271,36274,36277,36279,36281,36283,36288,36293,36294,36295,36296,36298,36302,36305,36308,36309,36311,36313,36324,36325,36327,36332,36336,36284,36337,36338,36340,36349,36353,36356,36357,36358,36363,36369,36372,36374,36384,36385,36386,36387,36390,36391,36401,36403,36406,36407,36408,36409,36413,36416,36417,36427,36429,36430,36431,36436,36443,36444,36445,36446,36449,36450,36457,36460,36461,36463,36464,36465,36473,36474,36475,36482,36483,36489,36496,36498,36501,36506,36507,36509,36510,36514,36519,36521,36525,36526,36531,36533,36538,36539,36544,36545,36547,36548,36551,36559,36561,36564,36572,36584,36590,36592,36593,36599,36601,36602,36589,36608,36610,36615,36616,36623,36624,36630,36631,36632,36638,36640,36641,36643,36645,36647,36648,36652,36653,36654,36660,36661,36662,36663,36666,36672,36673,36675,36679,36687,36689,36690,36691,36692,36693,36696,36701,36702,36709,36765,36768,36769,36772,36773,36774,36789,36790,36792,36798,36800,36801,36806,36810,36811,36813,36816,36818,36819,36821,36832,36835,36836,36840,36846,36849,36853,36854,36859,36862,36866,36868,36872,36876,36888,36891,36904,36905,36911,36906,36908,36909,36915,36916,36919,36927,36931,36932,36940,36955,36957,36962,36966,36967,36972,36976,36980,36985,36997,37e3,37003,37004,37006,37008,37013,37015,37016,37017,37019,37024,37025,37026,37029,37040,37042,37043,37044,37046,37053,37068,37054,37059,37060,37061,37063,37064,37077,37079,37080,37081,37084,37085,37087,37093,37074,37110,37099,37103,37104,37108,37118,37119,37120,37124,37125,37126,37128,37133,37136,37140,37142,37143,37144,37146,37148,37150,37152,37157,37154,37155,37159,37161,37166,37167,37169,37172,37174,37175,37177,37178,37180,37181,37187,37191,37192,37199,37203,37207,37209,37210,37211,37217,37220,37223,37229,37236,37241,37242,37243,37249,37251,37253,37254,37258,37262,37265,37267,37268,37269,37272,37278,37281,37286,37288,37292,37293,37294,37296,37297,37298,37299,37302,37307,37308,37309,37311,37314,37315,37317,37331,37332,37335,37337,37338,37342,37348,37349,37353,37354,37356,37357,37358,37359,37360,37361,37367,37369,37371,37373,37376,37377,37380,37381,37382,37383,37385,37386,37388,37392,37394,37395,37398,37400,37404,37405,37411,37412,37413,37414,37416,37422,37423,37424,37427,37429,37430,37432,37433,37434,37436,37438,37440,37442,37443,37446,37447,37450,37453,37454,37455,37457,37464,37465,37468,37469,37472,37473,37477,37479,37480,37481,37486,37487,37488,37493,37494,37495,37496,37497,37499,37500,37501,37503,37512,37513,37514,37517,37518,37522,37527,37529,37535,37536,37540,37541,37543,37544,37547,37551,37554,37558,37560,37562,37563,37564,37565,37567,37568,37569,37570,37571,37573,37574,37575,37576,37579,37580,37581,37582,37584,37587,37589,37591,37592,37593,37596,37597,37599,37600,37601,37603,37605,37607,37608,37612,37614,37616,37625,37627,37631,37632,37634,37640,37645,37649,37652,37653,37660,37661,37662,37663,37665,37668,37669,37671,37673,37674,37683,37684,37686,37687,37703,37704,37705,37712,37713,37714,37717,37719,37720,37722,37726,37732,37733,37735,37737,37738,37741,37743,37744,37745,37747,37748,37750,37754,37757,37759,37760,37761,37762,37768,37770,37771,37773,37775,37778,37781,37784,37787,37790,37793,37795,37796,37798,37800,37803,37812,37813,37814,37818,37801,37825,37828,37829,37830,37831,37833,37834,37835,37836,37837,37843,37849,37852,37854,37855,37858,37862,37863,37881,37879,37880,37882,37883,37885,37889,37890,37892,37896,37897,37901,37902,37903,37909,37910,37911,37919,37934,37935,37937,37938,37939,37940,37947,37951,37949,37955,37957,37960,37962,37964,37973,37977,37980,37983,37985,37987,37992,37995,37997,37998,37999,38001,38002,38020,38019,38264,38265,38270,38276,38280,38284,38285,38286,38301,38302,38303,38305,38310,38313,38315,38316,38324,38326,38330,38333,38335,38342,38344,38345,38347,38352,38353,38354,38355,38361,38362,38365,38366,38367,38368,38372,38374,38429,38430,38434,38436,38437,38438,38444,38449,38451,38455,38456,38457,38458,38460,38461,38465,38482,38484,38486,38487,38488,38497,38510,38516,38523,38524,38526,38527,38529,38530,38531,38532,38537,38545,38550,38554,38557,38559,38564,38565,38566,38569,38574,38575,38579,38586,38602,38610,23986,38616,38618,38621,38622,38623,38633,38639,38641,38650,38658,38659,38661,38665,38682,38683,38685,38689,38690,38691,38696,38705,38707,38721,38723,38730,38734,38735,38741,38743,38744,38746,38747,38755,38759,38762,38766,38771,38774,38775,38776,38779,38781,38783,38784,38793,38805,38806,38807,38809,38810,38814,38815,38818,38828,38830,38833,38834,38837,38838,38840,38841,38842,38844,38846,38847,38849,38852,38853,38855,38857,38858,38860,38861,38862,38864,38865,38868,38871,38872,38873,38877,38878,38880,38875,38881,38884,38895,38897,38900,38903,38904,38906,38919,38922,38937,38925,38926,38932,38934,38940,38942,38944,38947,38950,38955,38958,38959,38960,38962,38963,38965,38949,38974,38980,38983,38986,38993,38994,38995,38998,38999,39001,39002,39010,39011,39013,39014,39018,39020,39083,39085,39086,39088,39092,39095,39096,39098,39099,39103,39106,39109,39112,39116,39137,39139,39141,39142,39143,39146,39155,39158,39170,39175,39176,39185,39189,39190,39191,39194,39195,39196,39199,39202,39206,39207,39211,39217,39218,39219,39220,39221,39225,39226,39227,39228,39232,39233,39238,39239,39240,39245,39246,39252,39256,39257,39259,39260,39262,39263,39264,39323,39325,39327,39334,39344,39345,39346,39349,39353,39354,39357,39359,39363,39369,39379,39380,39385,39386,39388,39390,39399,39402,39403,39404,39408,39412,39413,39417,39421,39422,39426,39427,39428,39435,39436,39440,39441,39446,39454,39456,39458,39459,39460,39463,39469,39470,39475,39477,39478,39480,39495,39489,39492,39498,39499,39500,39502,39505,39508,39510,39517,39594,39596,39598,39599,39602,39604,39605,39606,39609,39611,39614,39615,39617,39619,39622,39624,39630,39632,39634,39637,39638,39639,39643,39644,39648,39652,39653,39655,39657,39660,39666,39667,39669,39673,39674,39677,39679,39680,39681,39682,39683,39684,39685,39688,39689,39691,39692,39693,39694,39696,39698,39702,39705,39707,39708,39712,39718,39723,39725,39731,39732,39733,39735,39737,39738,39741,39752,39755,39756,39765,39766,39767,39771,39774,39777,39779,39781,39782,39784,39786,39787,39788,39789,39790,39795,39797,39799,39800,39801,39807,39808,39812,39813,39814,39815,39817,39818,39819,39821,39823,39824,39828,39834,39837,39838,39846,39847,39849,39852,39856,39857,39858,39863,39864,39867,39868,39870,39871,39873,39879,39880,39886,39888,39895,39896,39901,39903,39909,39911,39914,39915,39919,39923,39927,39928,39929,39930,39933,39935,39936,39938,39947,39951,39953,39958,39960,39961,39962,39964,39966,39970,39971,39974,39975,39976,39977,39978,39985,39989,39990,39991,39997,40001,40003,40004,40005,40009,40010,40014,40015,40016,40019,40020,40022,40024,40027,40029,40030,40031,40035,40041,40042,40028,40043,40040,40046,40048,40050,40053,40055,40059,40166,40178,40183,40185,40203,40194,40209,40215,40216,40220,40221,40222,40239,40240,40242,40243,40244,40250,40252,40261,40253,40258,40259,40263,40266,40275,40276,40287,40291,40290,40293,40297,40298,40299,40304,40310,40311,40315,40316,40318,40323,40324,40326,40330,40333,40334,40338,40339,40341,40342,40343,40344,40353,40362,40364,40366,40369,40373,40377,40380,40383,40387,40391,40393,40394,40404,40405,40406,40407,40410,40414,40415,40416,40421,40423,40425,40427,40430,40432,40435,40436,40446,40458,40450,40455,40462,40464,40465,40466,40469,40470,40473,40476,40477,40570,40571,40572,40576,40578,40579,40580,40581,40583,40590,40591,40598,40600,40603,40606,40612,40616,40620,40622,40623,40624,40627,40628,40629,40646,40648,40651,40661,40671,40676,40679,40684,40685,40686,40688,40689,40690,40693,40696,40703,40706,40707,40713,40719,40720,40721,40722,40724,40726,40727,40729,40730,40731,40735,40738,40742,40746,40747,40751,40753,40754,40756,40759,40761,40762,40764,40765,40767,40769,40771,40772,40773,40774,40775,40787,40789,40790,40791,40792,40794,40797,40798,40808,40809,40813,40814,40815,40816,40817,40819,40821,40826,40829,40847,40848,40849,40850,40852,40854,40855,40862,40865,40866,40867,40869,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],ibm866:[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,9617,9618,9619,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9561,9560,9554,9555,9579,9578,9496,9484,9608,9604,9612,9616,9600,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1025,1105,1028,1108,1031,1111,1038,1118,176,8729,183,8730,8470,164,9632,160],"iso-8859-2":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,728,321,164,317,346,167,168,352,350,356,377,173,381,379,176,261,731,322,180,318,347,711,184,353,351,357,378,733,382,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],"iso-8859-3":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,294,728,163,164,null,292,167,168,304,350,286,308,173,null,379,176,295,178,179,180,181,293,183,184,305,351,287,309,189,null,380,192,193,194,null,196,266,264,199,200,201,202,203,204,205,206,207,null,209,210,211,212,288,214,215,284,217,218,219,220,364,348,223,224,225,226,null,228,267,265,231,232,233,234,235,236,237,238,239,null,241,242,243,244,289,246,247,285,249,250,251,252,365,349,729],"iso-8859-4":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,312,342,164,296,315,167,168,352,274,290,358,173,381,175,176,261,731,343,180,297,316,711,184,353,275,291,359,330,382,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,298,272,325,332,310,212,213,214,215,216,370,218,219,220,360,362,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,299,273,326,333,311,244,245,246,247,248,371,250,251,252,361,363,729],"iso-8859-5":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,173,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8470,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,167,1118,1119],"iso-8859-6":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,null,null,164,null,null,null,null,null,null,null,1548,173,null,null,null,null,null,null,null,null,null,null,null,null,null,1563,null,null,null,1567,null,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,null,null,null,null,null,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,null,null,null,null,null,null,null,null,null,null,null,null,null],"iso-8859-7":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8216,8217,163,8364,8367,166,167,168,169,890,171,172,173,null,8213,176,177,178,179,900,901,902,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],"iso-8859-8":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,162,163,164,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8215,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],"iso-8859-10":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,274,290,298,296,310,167,315,272,352,358,381,173,362,330,176,261,275,291,299,297,311,183,316,273,353,359,382,8213,363,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,207,208,325,332,211,212,213,214,360,216,370,218,219,220,221,222,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,239,240,326,333,243,244,245,246,361,248,371,250,251,252,253,254,312],"iso-8859-13":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8221,162,163,164,8222,166,167,216,169,342,171,172,173,174,198,176,177,178,179,8220,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,8217],"iso-8859-14":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7682,7683,163,266,267,7690,167,7808,169,7810,7691,7922,173,174,376,7710,7711,288,289,7744,7745,182,7766,7809,7767,7811,7776,7923,7812,7813,7777,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,372,209,210,211,212,213,214,7786,216,217,218,219,220,221,374,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,373,241,242,243,244,245,246,7787,248,249,250,251,252,253,375,255],"iso-8859-15":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,8364,165,352,167,353,169,170,171,172,173,174,175,176,177,178,179,381,181,182,183,382,185,186,187,338,339,376,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"iso-8859-16":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,261,321,8364,8222,352,167,353,169,536,171,377,173,378,379,176,177,268,322,381,8221,182,183,382,269,537,187,338,339,376,380,192,193,194,258,196,262,198,199,200,201,202,203,204,205,206,207,272,323,210,211,212,336,214,346,368,217,218,219,220,280,538,223,224,225,226,259,228,263,230,231,232,233,234,235,236,237,238,239,273,324,242,243,244,337,246,347,369,249,250,251,252,281,539,255],"koi8-r":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,1025,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],"koi8-u":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,1108,9556,1110,1111,9559,9560,9561,9562,9563,1169,1118,9566,9567,9568,9569,1025,1028,9571,1030,1031,9574,9575,9576,9577,9578,1168,1038,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],macintosh:[196,197,199,201,209,214,220,225,224,226,228,227,229,231,233,232,234,235,237,236,238,239,241,243,242,244,246,245,250,249,251,252,8224,176,162,163,167,8226,182,223,174,169,8482,180,168,8800,198,216,8734,177,8804,8805,165,181,8706,8721,8719,960,8747,170,186,937,230,248,191,161,172,8730,402,8776,8710,171,187,8230,160,192,195,213,338,339,8211,8212,8220,8221,8216,8217,247,9674,255,376,8260,8364,8249,8250,64257,64258,8225,183,8218,8222,8240,194,202,193,203,200,205,206,207,204,211,212,63743,210,218,219,217,305,710,732,175,728,729,730,184,733,731,711],"windows-874":[8364,129,130,131,132,8230,134,135,136,137,138,139,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,153,154,155,156,157,158,159,160,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,null,null,null,null,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,null,null,null,null],"windows-1250":[8364,129,8218,131,8222,8230,8224,8225,136,8240,352,8249,346,356,381,377,144,8216,8217,8220,8221,8226,8211,8212,152,8482,353,8250,347,357,382,378,160,711,728,321,164,260,166,167,168,169,350,171,172,173,174,379,176,177,731,322,180,181,182,183,184,261,351,187,317,733,318,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],"windows-1251":[1026,1027,8218,1107,8222,8230,8224,8225,8364,8240,1033,8249,1034,1036,1035,1039,1106,8216,8217,8220,8221,8226,8211,8212,152,8482,1113,8250,1114,1116,1115,1119,160,1038,1118,1032,164,1168,166,167,1025,169,1028,171,172,173,174,1031,176,177,1030,1110,1169,181,182,183,1105,8470,1108,187,1112,1029,1109,1111,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103],"windows-1252":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,381,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,382,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"windows-1253":[8364,129,8218,402,8222,8230,8224,8225,136,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,157,158,159,160,901,902,163,164,165,166,167,168,169,null,171,172,173,174,8213,176,177,178,179,900,181,182,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],"windows-1254":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,286,209,210,211,212,213,214,215,216,217,218,219,220,304,350,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,287,241,242,243,244,245,246,247,248,249,250,251,252,305,351,255],"windows-1255":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,156,157,158,159,160,161,162,163,8362,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,191,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1520,1521,1522,1523,1524,null,null,null,null,null,null,null,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],"windows-1256":[8364,1662,8218,402,8222,8230,8224,8225,710,8240,1657,8249,338,1670,1688,1672,1711,8216,8217,8220,8221,8226,8211,8212,1705,8482,1681,8250,339,8204,8205,1722,160,1548,162,163,164,165,166,167,168,169,1726,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,1563,187,188,189,190,1567,1729,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,215,1591,1592,1593,1594,1600,1601,1602,1603,224,1604,226,1605,1606,1607,1608,231,232,233,234,235,1609,1610,238,239,1611,1612,1613,1614,244,1615,1616,247,1617,249,1618,251,252,8206,8207,1746],"windows-1257":[8364,129,8218,131,8222,8230,8224,8225,136,8240,138,8249,140,168,711,184,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,175,731,159,160,null,162,163,164,null,166,167,216,169,342,171,172,173,174,198,176,177,178,179,180,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,729],"windows-1258":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,258,196,197,198,199,200,201,202,203,768,205,206,207,272,209,777,211,212,416,214,215,216,217,218,219,220,431,771,223,224,225,226,259,228,229,230,231,232,233,234,235,769,237,238,239,273,241,803,243,244,417,246,247,248,249,250,251,252,432,8363,255],"x-mac-cyrillic":[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,8224,176,1168,163,167,8226,182,1030,174,169,8482,1026,1106,8800,1027,1107,8734,177,8804,8805,1110,181,1169,1032,1028,1108,1031,1111,1033,1113,1034,1114,1112,1029,172,8730,402,8776,8710,171,187,8230,160,1035,1115,1036,1116,1109,8211,8212,8220,8221,8216,8217,247,8222,1038,1118,1039,1119,8470,1025,1105,1103,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,8364]}},{}],88:[function(t,e,n){!function(n){function l(t,e,n){return e<=t&&t<=n}void 0!==e&&e.exports&&!n["encoding-indexes"]&&(n["encoding-indexes"]=t("./encoding-indexes.js")["encoding-indexes"]);var r=Math.floor;function i(t){if(void 0===t)return{};if(t===Object(t))return t;throw TypeError("Could not convert argument to dictionary")}function o(t){return 0<=t&&t<=127}var u=o,s=-1;function a(t){this.tokens=[].slice.call(t),this.tokens.reverse()}a.prototype={endOfStream:function(){return!this.tokens.length},read:function(){return this.tokens.length?this.tokens.pop():s},prepend:function(t){if(Array.isArray(t))for(var e=t;e.length;)this.tokens.push(e.pop());else this.tokens.push(t)},push:function(t){if(Array.isArray(t))for(var e=t;e.length;)this.tokens.unshift(e.shift());else this.tokens.unshift(t)}};var c=-1;function h(t,e){if(t)throw TypeError("Decoder error");return e||65533}function d(t){throw TypeError("The code point "+t+" could not be encoded.")}function p(t){return t=String(t).trim().toLowerCase(),Object.prototype.hasOwnProperty.call(m,t)?m[t]:null}var f=[{encodings:[{labels:["unicode-1-1-utf-8","utf-8","utf8"],name:"UTF-8"}],heading:"The Encoding"},{encodings:[{labels:["866","cp866","csibm866","ibm866"],name:"IBM866"},{labels:["csisolatin2","iso-8859-2","iso-ir-101","iso8859-2","iso88592","iso_8859-2","iso_8859-2:1987","l2","latin2"],name:"ISO-8859-2"},{labels:["csisolatin3","iso-8859-3","iso-ir-109","iso8859-3","iso88593","iso_8859-3","iso_8859-3:1988","l3","latin3"],name:"ISO-8859-3"},{labels:["csisolatin4","iso-8859-4","iso-ir-110","iso8859-4","iso88594","iso_8859-4","iso_8859-4:1988","l4","latin4"],name:"ISO-8859-4"},{labels:["csisolatincyrillic","cyrillic","iso-8859-5","iso-ir-144","iso8859-5","iso88595","iso_8859-5","iso_8859-5:1988"],name:"ISO-8859-5"},{labels:["arabic","asmo-708","csiso88596e","csiso88596i","csisolatinarabic","ecma-114","iso-8859-6","iso-8859-6-e","iso-8859-6-i","iso-ir-127","iso8859-6","iso88596","iso_8859-6","iso_8859-6:1987"],name:"ISO-8859-6"},{labels:["csisolatingreek","ecma-118","elot_928","greek","greek8","iso-8859-7","iso-ir-126","iso8859-7","iso88597","iso_8859-7","iso_8859-7:1987","sun_eu_greek"],name:"ISO-8859-7"},{labels:["csiso88598e","csisolatinhebrew","hebrew","iso-8859-8","iso-8859-8-e","iso-ir-138","iso8859-8","iso88598","iso_8859-8","iso_8859-8:1988","visual"],name:"ISO-8859-8"},{labels:["csiso88598i","iso-8859-8-i","logical"],name:"ISO-8859-8-I"},{labels:["csisolatin6","iso-8859-10","iso-ir-157","iso8859-10","iso885910","l6","latin6"],name:"ISO-8859-10"},{labels:["iso-8859-13","iso8859-13","iso885913"],name:"ISO-8859-13"},{labels:["iso-8859-14","iso8859-14","iso885914"],name:"ISO-8859-14"},{labels:["csisolatin9","iso-8859-15","iso8859-15","iso885915","iso_8859-15","l9"],name:"ISO-8859-15"},{labels:["iso-8859-16"],name:"ISO-8859-16"},{labels:["cskoi8r","koi","koi8","koi8-r","koi8_r"],name:"KOI8-R"},{labels:["koi8-ru","koi8-u"],name:"KOI8-U"},{labels:["csmacintosh","mac","macintosh","x-mac-roman"],name:"macintosh"},{labels:["dos-874","iso-8859-11","iso8859-11","iso885911","tis-620","windows-874"],name:"windows-874"},{labels:["cp1250","windows-1250","x-cp1250"],name:"windows-1250"},{labels:["cp1251","windows-1251","x-cp1251"],name:"windows-1251"},{labels:["ansi_x3.4-1968","ascii","cp1252","cp819","csisolatin1","ibm819","iso-8859-1","iso-ir-100","iso8859-1","iso88591","iso_8859-1","iso_8859-1:1987","l1","latin1","us-ascii","windows-1252","x-cp1252"],name:"windows-1252"},{labels:["cp1253","windows-1253","x-cp1253"],name:"windows-1253"},{labels:["cp1254","csisolatin5","iso-8859-9","iso-ir-148","iso8859-9","iso88599","iso_8859-9","iso_8859-9:1989","l5","latin5","windows-1254","x-cp1254"],name:"windows-1254"},{labels:["cp1255","windows-1255","x-cp1255"],name:"windows-1255"},{labels:["cp1256","windows-1256","x-cp1256"],name:"windows-1256"},{labels:["cp1257","windows-1257","x-cp1257"],name:"windows-1257"},{labels:["cp1258","windows-1258","x-cp1258"],name:"windows-1258"},{labels:["x-mac-cyrillic","x-mac-ukrainian"],name:"x-mac-cyrillic"}],heading:"Legacy single-byte encodings"},{encodings:[{labels:["chinese","csgb2312","csiso58gb231280","gb2312","gb_2312","gb_2312-80","gbk","iso-ir-58","x-gbk"],name:"GBK"},{labels:["gb18030"],name:"gb18030"}],heading:"Legacy multi-byte Chinese (simplified) encodings"},{encodings:[{labels:["big5","big5-hkscs","cn-big5","csbig5","x-x-big5"],name:"Big5"}],heading:"Legacy multi-byte Chinese (traditional) encodings"},{encodings:[{labels:["cseucpkdfmtjapanese","euc-jp","x-euc-jp"],name:"EUC-JP"},{labels:["csiso2022jp","iso-2022-jp"],name:"ISO-2022-JP"},{labels:["csshiftjis","ms932","ms_kanji","shift-jis","shift_jis","sjis","windows-31j","x-sjis"],name:"Shift_JIS"}],heading:"Legacy multi-byte Japanese encodings"},{encodings:[{labels:["cseuckr","csksc56011987","euc-kr","iso-ir-149","korean","ks_c_5601-1987","ks_c_5601-1989","ksc5601","ksc_5601","windows-949"],name:"EUC-KR"}],heading:"Legacy multi-byte Korean encodings"},{encodings:[{labels:["csiso2022kr","hz-gb-2312","iso-2022-cn","iso-2022-cn-ext","iso-2022-kr"],name:"replacement"},{labels:["utf-16be"],name:"UTF-16BE"},{labels:["utf-16","utf-16le"],name:"UTF-16LE"},{labels:["x-user-defined"],name:"x-user-defined"}],heading:"Legacy miscellaneous encodings"}],m={};f.forEach((function(t){t.encodings.forEach((function(t){t.labels.forEach((function(e){m[e]=t}))}))}));var g,v,y={},x={};function b(t,e){return e&&e[t]||null}function w(t,e){var n=e.indexOf(t);return-1===n?null:n}function _(t){if(!("encoding-indexes"in n))throw Error("Indexes missing. Did you forget to include encoding-indexes.js first?");return n["encoding-indexes"][t]}var M="utf-8";function S(t,e){if(!(this instanceof S))throw TypeError("Called as a function. Did you forget 'new'?");t=void 0!==t?String(t):M,e=i(e),this._encoding=null,this._decoder=null,this._ignoreBOM=!1,this._BOMseen=!1,this._error_mode="replacement",this._do_not_flush=!1;var n=p(t);if(null===n||"replacement"===n.name)throw RangeError("Unknown encoding: "+t);if(!x[n.name])throw Error("Decoder not present. Did you forget to include encoding-indexes.js first?");var l=this;return l._encoding=n,Boolean(e.fatal)&&(l._error_mode="fatal"),Boolean(e.ignoreBOM)&&(l._ignoreBOM=!0),Object.defineProperty||(this.encoding=l._encoding.name.toLowerCase(),this.fatal="fatal"===l._error_mode,this.ignoreBOM=l._ignoreBOM),l}function E(t,e){if(!(this instanceof E))throw TypeError("Called as a function. Did you forget 'new'?");e=i(e),this._encoding=null,this._encoder=null,this._do_not_flush=!1,this._fatal=Boolean(e.fatal)?"fatal":"replacement";var l=this;if(Boolean(e.NONSTANDARD_allowLegacyEncoding)){var r=p(t=void 0!==t?String(t):M);if(null===r||"replacement"===r.name)throw RangeError("Unknown encoding: "+t);if(!y[r.name])throw Error("Encoder not present. Did you forget to include encoding-indexes.js first?");l._encoding=r}else l._encoding=p("utf-8"),void 0!==t&&"console"in n&&console.warn("TextEncoder constructor called with encoding label, which is ignored.");return Object.defineProperty||(this.encoding=l._encoding.name.toLowerCase()),l}function T(t){var e=t.fatal,n=0,r=0,i=0,o=128,u=191;this.handler=function(t,a){if(a===s&&0!==i)return i=0,h(e);if(a===s)return c;if(0===i){if(l(a,0,127))return a;if(l(a,194,223))i=1,n=31&a;else if(l(a,224,239))224===a&&(o=160),237===a&&(u=159),i=2,n=15&a;else{if(!l(a,240,244))return h(e);240===a&&(o=144),244===a&&(u=143),i=3,n=7&a}return null}if(!l(a,o,u))return n=i=r=0,o=128,u=191,t.prepend(a),h(e);if(o=128,u=191,n=n<<6|63&a,(r+=1)!==i)return null;var d=n;return n=i=r=0,d}}function A(t){t.fatal,this.handler=function(t,e){if(e===s)return c;if(u(e))return e;var n,r;l(e,128,2047)?(n=1,r=192):l(e,2048,65535)?(n=2,r=224):l(e,65536,1114111)&&(n=3,r=240);for(var i=[(e>>6*n)+r];n>0;){var o=e>>6*(n-1);i.push(128|63&o),n-=1}return i}}function L(t,e){var n=e.fatal;this.handler=function(e,l){if(l===s)return c;if(o(l))return l;var r=t[l-128];return null===r?h(n):r}}function C(t,e){e.fatal,this.handler=function(e,n){if(n===s)return c;if(u(n))return n;var l=w(n,t);return null===l&&d(n),l+128}}function P(t){var e=t.fatal,n=0,r=0,i=0;this.handler=function(t,u){if(u===s&&0===n&&0===r&&0===i)return c;var a;if(u!==s||0===n&&0===r&&0===i||(n=0,r=0,i=0,h(e)),0!==i){a=null,l(u,48,57)&&(a=function(t){if(t>39419&&t<189e3||t>1237575)return null;if(7457===t)return 59335;var e,n=0,l=0,r=_("gb18030-ranges");for(e=0;e<r.length;++e){var i=r[e];if(!(i[0]<=t))break;n=i[0],l=i[1]}return l+t-n}(10*(126*(10*(n-129)+r-48)+i-129)+u-48));var d=[r,i,u];return n=0,r=0,i=0,null===a?(t.prepend(d),h(e)):a}if(0!==r)return l(u,129,254)?(i=u,null):(t.prepend([r,u]),n=0,r=0,h(e));if(0!==n){if(l(u,48,57))return r=u,null;var p=n,f=null;n=0;var m=u<127?64:65;return(l(u,64,126)||l(u,128,254))&&(f=190*(p-129)+(u-m)),null===(a=null===f?null:b(f,_("gb18030")))&&o(u)&&t.prepend(u),null===a?h(e):a}return o(u)?u:128===u?8364:l(u,129,254)?(n=u,null):h(e)}}function R(t,e){t.fatal,this.handler=function(t,n){if(n===s)return c;if(u(n))return n;if(58853===n)return d(n);if(e&&8364===n)return 128;var l=w(n,_("gb18030"));if(null!==l){var i=l%190;return[r(l/190)+129,i+(i<63?64:65)]}if(e)return d(n);l=function(t){if(59335===t)return 7457;var e,n=0,l=0,r=_("gb18030-ranges");for(e=0;e<r.length;++e){var i=r[e];if(!(i[1]<=t))break;n=i[1],l=i[0]}return l+t-n}(n);var o=r(l/10/126/10),a=r((l-=10*o*126*10)/10/126),h=r((l-=10*a*126)/10);return[o+129,a+48,h+129,l-10*h+48]}}function O(t){var e=t.fatal,n=0;this.handler=function(t,r){if(r===s&&0!==n)return n=0,h(e);if(r===s&&0===n)return c;if(0!==n){var i=n,u=null;n=0;var a=r<127?64:98;switch((l(r,64,126)||l(r,161,254))&&(u=157*(i-129)+(r-a)),u){case 1133:return[202,772];case 1135:return[202,780];case 1164:return[234,772];case 1166:return[234,780]}var d=null===u?null:b(u,_("big5"));return null===d&&o(r)&&t.prepend(r),null===d?h(e):d}return o(r)?r:l(r,129,254)?(n=r,null):h(e)}}function I(t){t.fatal,this.handler=function(t,e){if(e===s)return c;if(u(e))return e;var n=function(t){var e=v=v||_("big5").map((function(t,e){return e<5024?null:t}));return 9552===t||9566===t||9569===t||9578===t||21313===t||21317===t?e.lastIndexOf(t):w(t,e)}(e);if(null===n)return d(e);var l=r(n/157)+129;if(l<161)return d(e);var i=n%157;return[l,i+(i<63?64:98)]}}function D(t){var e=t.fatal,n=!1,r=0;this.handler=function(t,i){if(i===s&&0!==r)return r=0,h(e);if(i===s&&0===r)return c;if(142===r&&l(i,161,223))return r=0,65216+i;if(143===r&&l(i,161,254))return n=!0,r=i,null;if(0!==r){var u=r;r=0;var a=null;return l(u,161,254)&&l(i,161,254)&&(a=b(94*(u-161)+(i-161),_(n?"jis0212":"jis0208"))),n=!1,l(i,161,254)||t.prepend(i),null===a?h(e):a}return o(i)?i:142===i||143===i||l(i,161,254)?(r=i,null):h(e)}}function k(t){t.fatal,this.handler=function(t,e){if(e===s)return c;if(u(e))return e;if(165===e)return 92;if(8254===e)return 126;if(l(e,65377,65439))return[142,e-65377+161];8722===e&&(e=65293);var n=w(e,_("jis0208"));return null===n?d(e):[r(n/94)+161,n%94+161]}}function N(t){var e=t.fatal,n=0,r=0,i=!1;this.handler=function(t,o){switch(n){default:case 0:return 27===o?(n=5,null):l(o,0,127)&&14!==o&&15!==o&&27!==o?(i=!1,o):o===s?c:(i=!1,h(e));case 1:return 27===o?(n=5,null):92===o?(i=!1,165):126===o?(i=!1,8254):l(o,0,127)&&14!==o&&15!==o&&27!==o&&92!==o&&126!==o?(i=!1,o):o===s?c:(i=!1,h(e));case 2:return 27===o?(n=5,null):l(o,33,95)?(i=!1,65344+o):o===s?c:(i=!1,h(e));case 3:return 27===o?(n=5,null):l(o,33,126)?(i=!1,r=o,n=4,null):o===s?c:(i=!1,h(e));case 4:if(27===o)return n=5,h(e);if(l(o,33,126)){n=3;var u=b(94*(r-33)+o-33,_("jis0208"));return null===u?h(e):u}return o===s?(n=3,t.prepend(o),h(e)):(n=3,h(e));case 5:return 36===o||40===o?(r=o,n=6,null):(t.prepend(o),i=!1,n=0,h(e));case 6:var a=r;r=0;var d=null;if(40===a&&66===o&&(d=0),40===a&&74===o&&(d=1),40===a&&73===o&&(d=2),36!==a||64!==o&&66!==o||(d=3),null!==d){n=n=d;var p=i;return i=!0,p?h(e):null}return t.prepend([a,o]),i=!1,n=0,h(e)}}}function B(t){t.fatal;var e=0;this.handler=function(t,n){if(n===s&&0!==e)return t.prepend(n),e=0,[27,40,66];if(n===s&&0===e)return c;if(!(0!==e&&1!==e||14!==n&&15!==n&&27!==n))return d(65533);if(0===e&&u(n))return n;if(1===e&&(u(n)&&92!==n&&126!==n||165==n||8254==n)){if(u(n))return n;if(165===n)return 92;if(8254===n)return 126}if(u(n)&&0!==e)return t.prepend(n),e=0,[27,40,66];if((165===n||8254===n)&&1!==e)return t.prepend(n),e=1,[27,40,74];8722===n&&(n=65293);var l=w(n,_("jis0208"));return null===l?d(n):2!==e?(t.prepend(n),e=2,[27,36,66]):[r(l/94)+33,l%94+33]}}function F(t){var e=t.fatal,n=0;this.handler=function(t,r){if(r===s&&0!==n)return n=0,h(e);if(r===s&&0===n)return c;if(0!==n){var i=n,u=null;n=0;var a=r<127?64:65,d=i<160?129:193;if((l(r,64,126)||l(r,128,252))&&(u=188*(i-d)+r-a),l(u,8836,10715))return 48508+u;var p=null===u?null:b(u,_("jis0208"));return null===p&&o(r)&&t.prepend(r),null===p?h(e):p}return o(r)||128===r?r:l(r,161,223)?65216+r:l(r,129,159)||l(r,224,252)?(n=r,null):h(e)}}function z(t){t.fatal,this.handler=function(t,e){if(e===s)return c;if(u(e)||128===e)return e;if(165===e)return 92;if(8254===e)return 126;if(l(e,65377,65439))return e-65377+161;8722===e&&(e=65293);var n=function(t){return(g=g||_("jis0208").map((function(t,e){return l(e,8272,8835)?null:t}))).indexOf(t)}(e);if(null===n)return d(e);var i=r(n/188),o=n%188;return[i+(i<31?129:193),o+(o<63?64:65)]}}function H(t){var e=t.fatal,n=0;this.handler=function(t,r){if(r===s&&0!==n)return n=0,h(e);if(r===s&&0===n)return c;if(0!==n){var i=n,u=null;n=0,l(r,65,254)&&(u=190*(i-129)+(r-65));var a=null===u?null:b(u,_("euc-kr"));return null===u&&o(r)&&t.prepend(r),null===a?h(e):a}return o(r)?r:l(r,129,254)?(n=r,null):h(e)}}function j(t){t.fatal,this.handler=function(t,e){if(e===s)return c;if(u(e))return e;var n=w(e,_("euc-kr"));return null===n?d(e):[r(n/190)+129,n%190+65]}}function U(t,e){var n=t>>8,l=255&t;return e?[n,l]:[l,n]}function G(t,e){var n=e.fatal,r=null,i=null;this.handler=function(e,o){if(o===s&&(null!==r||null!==i))return h(n);if(o===s&&null===r&&null===i)return c;if(null===r)return r=o,null;var u;if(u=t?(r<<8)+o:(o<<8)+r,r=null,null!==i){var a=i;return i=null,l(u,56320,57343)?65536+1024*(a-55296)+(u-56320):(e.prepend(U(u,t)),h(n))}return l(u,55296,56319)?(i=u,null):l(u,56320,57343)?h(n):u}}function V(t,e){e.fatal,this.handler=function(e,n){if(n===s)return c;if(l(n,0,65535))return U(n,t);var r=U(55296+(n-65536>>10),t),i=U(56320+(n-65536&1023),t);return r.concat(i)}}function W(t){t.fatal,this.handler=function(t,e){return e===s?c:o(e)?e:63360+e-128}}function q(t){t.fatal,this.handler=function(t,e){return e===s?c:u(e)?e:l(e,63360,63487)?e-63360+128:d(e)}}Object.defineProperty&&(Object.defineProperty(S.prototype,"encoding",{get:function(){return this._encoding.name.toLowerCase()}}),Object.defineProperty(S.prototype,"fatal",{get:function(){return"fatal"===this._error_mode}}),Object.defineProperty(S.prototype,"ignoreBOM",{get:function(){return this._ignoreBOM}})),S.prototype.decode=function(t,e){var n;n="object"==typeof t&&t instanceof ArrayBuffer?new Uint8Array(t):"object"==typeof t&&"buffer"in t&&t.buffer instanceof ArrayBuffer?new Uint8Array(t.buffer,t.byteOffset,t.byteLength):new Uint8Array(0),e=i(e),this._do_not_flush||(this._decoder=x[this._encoding.name]({fatal:"fatal"===this._error_mode}),this._BOMseen=!1),this._do_not_flush=Boolean(e.stream);for(var l,r=new a(n),o=[];;){var u=r.read();if(u===s)break;if((l=this._decoder.handler(r,u))===c)break;null!==l&&(Array.isArray(l)?o.push.apply(o,l):o.push(l))}if(!this._do_not_flush){do{if((l=this._decoder.handler(r,r.read()))===c)break;null!==l&&(Array.isArray(l)?o.push.apply(o,l):o.push(l))}while(!r.endOfStream());this._decoder=null}return function(t){var e,n;return e=["UTF-8","UTF-16LE","UTF-16BE"],n=this._encoding.name,-1===e.indexOf(n)||this._ignoreBOM||this._BOMseen||(t.length>0&&65279===t[0]?(this._BOMseen=!0,t.shift()):t.length>0&&(this._BOMseen=!0)),function(t){for(var e="",n=0;n<t.length;++n){var l=t[n];l<=65535?e+=String.fromCharCode(l):(l-=65536,e+=String.fromCharCode(55296+(l>>10),56320+(1023&l)))}return e}(t)}.call(this,o)},Object.defineProperty&&Object.defineProperty(E.prototype,"encoding",{get:function(){return this._encoding.name.toLowerCase()}}),E.prototype.encode=function(t,e){t=void 0===t?"":String(t),e=i(e),this._do_not_flush||(this._encoder=y[this._encoding.name]({fatal:"fatal"===this._fatal})),this._do_not_flush=Boolean(e.stream);for(var n,l=new a(function(t){for(var e=String(t),n=e.length,l=0,r=[];l<n;){var i=e.charCodeAt(l);if(i<55296||i>57343)r.push(i);else if(56320<=i&&i<=57343)r.push(65533);else if(55296<=i&&i<=56319)if(l===n-1)r.push(65533);else{var o=e.charCodeAt(l+1);if(56320<=o&&o<=57343){var u=1023&i,s=1023&o;r.push(65536+(u<<10)+s),l+=1}else r.push(65533)}l+=1}return r}(t)),r=[];;){var o=l.read();if(o===s)break;if((n=this._encoder.handler(l,o))===c)break;Array.isArray(n)?r.push.apply(r,n):r.push(n)}if(!this._do_not_flush){for(;(n=this._encoder.handler(l,l.read()))!==c;)Array.isArray(n)?r.push.apply(r,n):r.push(n);this._encoder=null}return new Uint8Array(r)},y["UTF-8"]=function(t){return new A(t)},x["UTF-8"]=function(t){return new T(t)},"encoding-indexes"in n&&f.forEach((function(t){"Legacy single-byte encodings"===t.heading&&t.encodings.forEach((function(t){var e=t.name,n=_(e.toLowerCase());x[e]=function(t){return new L(n,t)},y[e]=function(t){return new C(n,t)}}))})),x.GBK=function(t){return new P(t)},y.GBK=function(t){return new R(t,!0)},y.gb18030=function(t){return new R(t)},x.gb18030=function(t){return new P(t)},y.Big5=function(t){return new I(t)},x.Big5=function(t){return new O(t)},y["EUC-JP"]=function(t){return new k(t)},x["EUC-JP"]=function(t){return new D(t)},y["ISO-2022-JP"]=function(t){return new B(t)},x["ISO-2022-JP"]=function(t){return new N(t)},y.Shift_JIS=function(t){return new z(t)},x.Shift_JIS=function(t){return new F(t)},y["EUC-KR"]=function(t){return new j(t)},x["EUC-KR"]=function(t){return new H(t)},y["UTF-16BE"]=function(t){return new V(!0,t)},x["UTF-16BE"]=function(t){return new G(!0,t)},y["UTF-16LE"]=function(t){return new V(!1,t)},x["UTF-16LE"]=function(t){return new G(!1,t)},y["x-user-defined"]=function(t){return new q(t)},x["x-user-defined"]=function(t){return new W(t)},n.TextEncoder||(n.TextEncoder=E),n.TextDecoder||(n.TextDecoder=S),void 0!==e&&e.exports&&(e.exports={TextEncoder:n.TextEncoder,TextDecoder:n.TextDecoder,EncodingIndexes:n["encoding-indexes"]})}(this||{})},{"./encoding-indexes.js":87}],89:[function(t,e,n){"function"==typeof Object.create?e.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},{}],90:[function(t,e,n){e.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},{}],91:[function(t,e,l){var r=/%[sdj%]/g;l.format=function(t){if(!v(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(u(arguments[n]));return e.join(" ")}n=1;for(var l=arguments,i=l.length,o=String(t).replace(r,(function(t){if("%%"===t)return"%";if(n>=i)return t;switch(t){case"%s":return String(l[n++]);case"%d":return Number(l[n++]);case"%j":try{return JSON.stringify(l[n++])}catch(t){return"[Circular]"}default:return t}})),s=l[n];n<i;s=l[++n])m(s)||!b(s)?o+=" "+s:o+=" "+u(s);return o},l.deprecate=function(t,e){if(y(n.g.process))return function(){return l.deprecate(t,e).apply(this,arguments)};if(!0===process.noDeprecation)return t;var r=!1;return function(){if(!r){if(process.throwDeprecation)throw new Error(e);process.traceDeprecation?console.trace(e):console.error(e),r=!0}return t.apply(this,arguments)}};var i,o={};function u(t,e){var n={seen:[],stylize:a};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),f(e)?n.showHidden=e:e&&l._extend(n,e),y(n.showHidden)&&(n.showHidden=!1),y(n.depth)&&(n.depth=2),y(n.colors)&&(n.colors=!1),y(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=s),c(n,t,n.depth)}function s(t,e){var n=u.styles[e];return n?"["+u.colors[n][0]+"m"+t+"["+u.colors[n][1]+"m":t}function a(t,e){return t}function c(t,e,n){if(t.customInspect&&e&&M(e.inspect)&&e.inspect!==l.inspect&&(!e.constructor||e.constructor.prototype!==e)){var r=e.inspect(n,t);return v(r)||(r=c(t,r,n)),r}var i=function(t,e){if(y(e))return t.stylize("undefined","undefined");if(v(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}return g(e)?t.stylize(""+e,"number"):f(e)?t.stylize(""+e,"boolean"):m(e)?t.stylize("null","null"):void 0}(t,e);if(i)return i;var o=Object.keys(e),u=function(t){var e={};return t.forEach((function(t,n){e[t]=!0})),e}(o);if(t.showHidden&&(o=Object.getOwnPropertyNames(e)),_(e)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return h(e);if(0===o.length){if(M(e)){var s=e.name?": "+e.name:"";return t.stylize("[Function"+s+"]","special")}if(x(e))return t.stylize(RegExp.prototype.toString.call(e),"regexp");if(w(e))return t.stylize(Date.prototype.toString.call(e),"date");if(_(e))return h(e)}var a,b="",S=!1,E=["{","}"];return p(e)&&(S=!0,E=["[","]"]),M(e)&&(b=" [Function"+(e.name?": "+e.name:"")+"]"),x(e)&&(b=" "+RegExp.prototype.toString.call(e)),w(e)&&(b=" "+Date.prototype.toUTCString.call(e)),_(e)&&(b=" "+h(e)),0!==o.length||S&&0!=e.length?n<0?x(e)?t.stylize(RegExp.prototype.toString.call(e),"regexp"):t.stylize("[Object]","special"):(t.seen.push(e),a=S?function(t,e,n,l,r){for(var i=[],o=0,u=e.length;o<u;++o)L(e,String(o))?i.push(d(t,e,n,l,String(o),!0)):i.push("");return r.forEach((function(r){r.match(/^\d+$/)||i.push(d(t,e,n,l,r,!0))})),i}(t,e,n,u,o):o.map((function(l){return d(t,e,n,u,l,S)})),t.seen.pop(),function(t,e,n){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1]:n[0]+e+" "+t.join(", ")+" "+n[1]}(a,b,E)):E[0]+b+E[1]}function h(t){return"["+Error.prototype.toString.call(t)+"]"}function d(t,e,n,l,r,i){var o,u,s;if((s=Object.getOwnPropertyDescriptor(e,r)||{value:e[r]}).get?u=s.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):s.set&&(u=t.stylize("[Setter]","special")),L(l,r)||(o="["+r+"]"),u||(t.seen.indexOf(s.value)<0?(u=m(n)?c(t,s.value,null):c(t,s.value,n-1)).indexOf("\n")>-1&&(u=i?u.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+u.split("\n").map((function(t){return"   "+t})).join("\n")):u=t.stylize("[Circular]","special")),y(o)){if(i&&r.match(/^\d+$/))return u;(o=JSON.stringify(""+r)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.substr(1,o.length-2),o=t.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=t.stylize(o,"string"))}return o+": "+u}function p(t){return Array.isArray(t)}function f(t){return"boolean"==typeof t}function m(t){return null===t}function g(t){return"number"==typeof t}function v(t){return"string"==typeof t}function y(t){return void 0===t}function x(t){return b(t)&&"[object RegExp]"===S(t)}function b(t){return"object"==typeof t&&null!==t}function w(t){return b(t)&&"[object Date]"===S(t)}function _(t){return b(t)&&("[object Error]"===S(t)||t instanceof Error)}function M(t){return"function"==typeof t}function S(t){return Object.prototype.toString.call(t)}function E(t){return t<10?"0"+t.toString(10):t.toString(10)}l.debuglog=function(t){if(y(i)&&(i=process.env.NODE_DEBUG||""),t=t.toUpperCase(),!o[t])if(new RegExp("\\b"+t+"\\b","i").test(i)){var e=process.pid;o[t]=function(){var n=l.format.apply(l,arguments);console.error("%s %d: %s",t,e,n)}}else o[t]=function(){};return o[t]},l.inspect=u,u.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},u.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},l.isArray=p,l.isBoolean=f,l.isNull=m,l.isNullOrUndefined=function(t){return null==t},l.isNumber=g,l.isString=v,l.isSymbol=function(t){return"symbol"==typeof t},l.isUndefined=y,l.isRegExp=x,l.isObject=b,l.isDate=w,l.isError=_,l.isFunction=M,l.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},l.isBuffer=t("./support/isBuffer");var T=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function A(){var t=new Date,e=[E(t.getHours()),E(t.getMinutes()),E(t.getSeconds())].join(":");return[t.getDate(),T[t.getMonth()],e].join(" ")}function L(t,e){return Object.prototype.hasOwnProperty.call(t,e)}l.log=function(){console.log("%s - %s",A(),l.format.apply(l,arguments))},l.inherits=t("inherits"),l._extend=function(t,e){if(!e||!b(e))return t;for(var n=Object.keys(e),l=n.length;l--;)t[n[l]]=e[n[l]];return t}},{"./support/isBuffer":90,inherits:89}],92:[function(t,e,l){var r,i;r=this,i=function(t){function e(){}function n(t,e,n,l,r){for(var i=0,o=e.length,u=0,s=0;i<o;i++){var a=e[i];if(a.removed){if(a.value=t.join(l.slice(s,s+a.count)),s+=a.count,i&&e[i-1].added){var c=e[i-1];e[i-1]=e[i],e[i]=c}}else{if(!a.added&&r){var h=n.slice(u,u+a.count);h=h.map((function(t,e){var n=l[s+e];return n.length>t.length?n:t})),a.value=t.join(h)}else a.value=t.join(n.slice(u,u+a.count));u+=a.count,a.added||(s+=a.count)}}var d=e[o-1];return o>1&&"string"==typeof d.value&&(d.added||d.removed)&&t.equals("",d.value)&&(e[o-2].value+=d.value,e.pop()),e}function l(t){return{newPos:t.newPos,components:t.components.slice(0)}}e.prototype={diff:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=r.callback;"function"==typeof r&&(i=r,r={}),this.options=r;var o=this;function u(t){return i?(setTimeout((function(){i(void 0,t)}),0),!0):t}t=this.castInput(t),e=this.castInput(e),t=this.removeEmpty(this.tokenize(t));var s=(e=this.removeEmpty(this.tokenize(e))).length,a=t.length,c=1,h=s+a,d=[{newPos:-1,components:[]}],p=this.extractCommon(d[0],e,t,0);if(d[0].newPos+1>=s&&p+1>=a)return u([{value:this.join(e),count:e.length}]);function f(){for(var r=-1*c;r<=c;r+=2){var i=void 0,h=d[r-1],p=d[r+1],f=(p?p.newPos:0)-r;h&&(d[r-1]=void 0);var m=h&&h.newPos+1<s,g=p&&0<=f&&f<a;if(m||g){if(!m||g&&h.newPos<p.newPos?(i=l(p),o.pushComponent(i.components,void 0,!0)):((i=h).newPos++,o.pushComponent(i.components,!0,void 0)),f=o.extractCommon(i,e,t,r),i.newPos+1>=s&&f+1>=a)return u(n(o,i.components,e,t,o.useLongestToken));d[r]=i}else d[r]=void 0}c++}if(i)!function t(){setTimeout((function(){if(c>h)return i();f()||t()}),0)}();else for(;c<=h;){var m=f();if(m)return m}},pushComponent:function(t,e,n){var l=t[t.length-1];l&&l.added===e&&l.removed===n?t[t.length-1]={count:l.count+1,added:e,removed:n}:t.push({count:1,added:e,removed:n})},extractCommon:function(t,e,n,l){for(var r=e.length,i=n.length,o=t.newPos,u=o-l,s=0;o+1<r&&u+1<i&&this.equals(e[o+1],n[u+1]);)o++,u++,s++;return s&&t.components.push({count:s}),t.newPos=o,u},equals:function(t,e){return this.options.comparator?this.options.comparator(t,e):t===e||this.options.ignoreCase&&t.toLowerCase()===e.toLowerCase()},removeEmpty:function(t){for(var e=[],n=0;n<t.length;n++)t[n]&&e.push(t[n]);return e},castInput:function(t){return t},tokenize:function(t){return t.split("")},join:function(t){return t.join("")}};var r=new e;function i(t,e){if("function"==typeof t)e.callback=t;else if(t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}var o=/^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/,u=/\S/,s=new e;s.equals=function(t,e){return this.options.ignoreCase&&(t=t.toLowerCase(),e=e.toLowerCase()),t===e||this.options.ignoreWhitespace&&!u.test(t)&&!u.test(e)},s.tokenize=function(t){for(var e=t.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/),n=0;n<e.length-1;n++)!e[n+1]&&e[n+2]&&o.test(e[n])&&o.test(e[n+2])&&(e[n]+=e[n+2],e.splice(n+1,2),n--);return e};var a=new e;function c(t,e,n){return a.diff(t,e,n)}a.tokenize=function(t){var e=[],n=t.split(/(\n|\r\n)/);n[n.length-1]||n.pop();for(var l=0;l<n.length;l++){var r=n[l];l%2&&!this.options.newlineIsToken?e[e.length-1]+=r:(this.options.ignoreWhitespace&&(r=r.trim()),e.push(r))}return e};var h=new e;h.tokenize=function(t){return t.split(/(\S.+?[.!?])(?=\s+|$)/)};var d=new e;function p(t){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function f(t){return function(t){if(Array.isArray(t))return m(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return m(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?m(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,l=new Array(e);n<e;n++)l[n]=t[n];return l}d.tokenize=function(t){return t.split(/([{}:;,]|\s+)/)};var g=Object.prototype.toString,v=new e;function y(t,e,n,l,r){var i,o;for(e=e||[],n=n||[],l&&(t=l(r,t)),i=0;i<e.length;i+=1)if(e[i]===t)return n[i];if("[object Array]"===g.call(t)){for(e.push(t),o=new Array(t.length),n.push(o),i=0;i<t.length;i+=1)o[i]=y(t[i],e,n,l,r);return e.pop(),n.pop(),o}if(t&&t.toJSON&&(t=t.toJSON()),"object"===p(t)&&null!==t){e.push(t),o={},n.push(o);var u,s=[];for(u in t)t.hasOwnProperty(u)&&s.push(u);for(s.sort(),i=0;i<s.length;i+=1)o[u=s[i]]=y(t[u],e,n,l,u);e.pop(),n.pop()}else o=t;return o}v.useLongestToken=!0,v.tokenize=a.tokenize,v.castInput=function(t){var e=this.options,n=e.undefinedReplacement,l=e.stringifyReplacer,r=void 0===l?function(t,e){return void 0===e?n:e}:l;return"string"==typeof t?t:JSON.stringify(y(t,null,null,r),r,"  ")},v.equals=function(t,n){return e.prototype.equals.call(v,t.replace(/,([\r\n])/g,"$1"),n.replace(/,([\r\n])/g,"$1"))};var x=new e;function b(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.split(/\r\n|[\n\v\f\r\x85]/),l=t.match(/\r\n|[\n\v\f\r\x85]/g)||[],r=[],i=0;function o(){var t={};for(r.push(t);i<n.length;){var l=n[i];if(/^(\-\-\-|\+\+\+|@@)\s/.test(l))break;var o=/^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(l);o&&(t.index=o[1]),i++}for(u(t),u(t),t.hunks=[];i<n.length;){var a=n[i];if(/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(a))break;if(/^@@/.test(a))t.hunks.push(s());else{if(a&&e.strict)throw new Error("Unknown line "+(i+1)+" "+JSON.stringify(a));i++}}}function u(t){var e=/^(---|\+\+\+)\s+(.*)$/.exec(n[i]);if(e){var l="---"===e[1]?"old":"new",r=e[2].split("\t",2),o=r[0].replace(/\\\\/g,"\\");/^".*"$/.test(o)&&(o=o.substr(1,o.length-2)),t[l+"FileName"]=o,t[l+"Header"]=(r[1]||"").trim(),i++}}function s(){var t=i,r=n[i++].split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/),o={oldStart:+r[1],oldLines:void 0===r[2]?1:+r[2],newStart:+r[3],newLines:void 0===r[4]?1:+r[4],lines:[],linedelimiters:[]};0===o.oldLines&&(o.oldStart+=1),0===o.newLines&&(o.newStart+=1);for(var u=0,s=0;i<n.length&&!(0===n[i].indexOf("--- ")&&i+2<n.length&&0===n[i+1].indexOf("+++ ")&&0===n[i+2].indexOf("@@"));i++){var a=0==n[i].length&&i!=n.length-1?" ":n[i][0];if("+"!==a&&"-"!==a&&" "!==a&&"\\"!==a)break;o.lines.push(n[i]),o.linedelimiters.push(l[i]||"\n"),"+"===a?u++:"-"===a?s++:" "===a&&(u++,s++)}if(u||1!==o.newLines||(o.newLines=0),s||1!==o.oldLines||(o.oldLines=0),e.strict){if(u!==o.newLines)throw new Error("Added line count did not match for hunk at line "+(t+1));if(s!==o.oldLines)throw new Error("Removed line count did not match for hunk at line "+(t+1))}return o}for(;i<n.length;)o();return r}function w(t,e,n){var l=!0,r=!1,i=!1,o=1;return function u(){if(l&&!i){if(r?o++:l=!1,t+o<=n)return o;i=!0}if(!r)return i||(l=!0),e<=t-o?-o++:(r=!0,u())}}function _(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if("string"==typeof e&&(e=b(e)),Array.isArray(e)){if(e.length>1)throw new Error("applyPatch only works with a single input.");e=e[0]}var l,r,i=t.split(/\r\n|[\n\v\f\r\x85]/),o=t.match(/\r\n|[\n\v\f\r\x85]/g)||[],u=e.hunks,s=n.compareLine||function(t,e,n,l){return e===l},a=0,c=n.fuzzFactor||0,h=0,d=0;function p(t,e){for(var n=0;n<t.lines.length;n++){var l=t.lines[n],r=l.length>0?l[0]:" ",o=l.length>0?l.substr(1):l;if(" "===r||"-"===r){if(!s(e+1,i[e],r,o)&&++a>c)return!1;e++}}return!0}for(var f=0;f<u.length;f++){for(var m=u[f],g=i.length-m.oldLines,v=0,y=d+m.oldStart-1,x=w(y,h,g);void 0!==v;v=x())if(p(m,y+v)){m.offset=d+=v;break}if(void 0===v)return!1;h=m.offset+m.oldStart+m.oldLines}for(var _=0,M=0;M<u.length;M++){var S=u[M],E=S.oldStart+S.offset+_-1;_+=S.newLines-S.oldLines;for(var T=0;T<S.lines.length;T++){var A=S.lines[T],L=A.length>0?A[0]:" ",C=A.length>0?A.substr(1):A,P=S.linedelimiters[T];if(" "===L)E++;else if("-"===L)i.splice(E,1),o.splice(E,1);else if("+"===L)i.splice(E,0,C),o.splice(E,0,P),E++;else if("\\"===L){var R=S.lines[T-1]?S.lines[T-1][0]:null;"+"===R?l=!0:"-"===R&&(r=!0)}}}if(l)for(;!i[i.length-1];)i.pop(),o.pop();else r&&(i.push(""),o.push("\n"));for(var O=0;O<i.length-1;O++)i[O]=i[O]+o[O];return i.join("")}function M(t,e,n,l,r,i,o){o||(o={}),void 0===o.context&&(o.context=4);var u=c(n,l,o);function s(t){return t.map((function(t){return" "+t}))}u.push({value:"",lines:[]});for(var a=[],h=0,d=0,p=[],m=1,g=1,v=function(t){var e=u[t],r=e.lines||e.value.replace(/\n$/,"").split("\n");if(e.lines=r,e.added||e.removed){var i;if(!h){var c=u[t-1];h=m,d=g,c&&(p=o.context>0?s(c.lines.slice(-o.context)):[],h-=p.length,d-=p.length)}(i=p).push.apply(i,f(r.map((function(t){return(e.added?"+":"-")+t})))),e.added?g+=r.length:m+=r.length}else{if(h)if(r.length<=2*o.context&&t<u.length-2){var v;(v=p).push.apply(v,f(s(r)))}else{var y,x=Math.min(r.length,o.context);(y=p).push.apply(y,f(s(r.slice(0,x))));var b={oldStart:h,oldLines:m-h+x,newStart:d,newLines:g-d+x,lines:p};if(t>=u.length-2&&r.length<=o.context){var w=/\n$/.test(n),_=/\n$/.test(l),M=0==r.length&&p.length>b.oldLines;!w&&M&&n.length>0&&p.splice(b.oldLines,0,"\\ No newline at end of file"),(w||M)&&_||p.push("\\ No newline at end of file")}a.push(b),h=0,d=0,p=[]}m+=r.length,g+=r.length}},y=0;y<u.length;y++)v(y);return{oldFileName:t,newFileName:e,oldHeader:r,newHeader:i,hunks:a}}function S(t,e,n,l,r,i,o){return function(t){var e=[];t.oldFileName==t.newFileName&&e.push("Index: "+t.oldFileName),e.push("==================================================================="),e.push("--- "+t.oldFileName+(void 0===t.oldHeader?"":"\t"+t.oldHeader)),e.push("+++ "+t.newFileName+(void 0===t.newHeader?"":"\t"+t.newHeader));for(var n=0;n<t.hunks.length;n++){var l=t.hunks[n];0===l.oldLines&&(l.oldStart-=1),0===l.newLines&&(l.newStart-=1),e.push("@@ -"+l.oldStart+","+l.oldLines+" +"+l.newStart+","+l.newLines+" @@"),e.push.apply(e,l.lines)}return e.join("\n")+"\n"}(M(t,e,n,l,r,i,o))}function E(t,e){if(e.length>t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function T(t){var e=j(t.lines),n=e.oldLines,l=e.newLines;void 0!==n?t.oldLines=n:delete t.oldLines,void 0!==l?t.newLines=l:delete t.newLines}function A(t,e){if("string"==typeof t){if(/^@@/m.test(t)||/^Index:/m.test(t))return b(t)[0];if(!e)throw new Error("Must provide a base reference or pass in a patch");return M(void 0,void 0,e,t)}return t}function L(t){return t.newFileName&&t.newFileName!==t.oldFileName}function C(t,e,n){return e===n?e:(t.conflict=!0,{mine:e,theirs:n})}function P(t,e){return t.oldStart<e.oldStart&&t.oldStart+t.oldLines<e.oldStart}function R(t,e){return{oldStart:t.oldStart,oldLines:t.oldLines,newStart:t.newStart+e,newLines:t.newLines,lines:t.lines}}function O(t,e,n,l,r){var i={offset:e,lines:n,index:0},o={offset:l,lines:r,index:0};for(N(t,i,o),N(t,o,i);i.index<i.lines.length&&o.index<o.lines.length;){var u=i.lines[i.index],s=o.lines[o.index];if("-"!==u[0]&&"+"!==u[0]||"-"!==s[0]&&"+"!==s[0])if("+"===u[0]&&" "===s[0]){var a;(a=t.lines).push.apply(a,f(F(i)))}else if("+"===s[0]&&" "===u[0]){var c;(c=t.lines).push.apply(c,f(F(o)))}else"-"===u[0]&&" "===s[0]?D(t,i,o):"-"===s[0]&&" "===u[0]?D(t,o,i,!0):u===s?(t.lines.push(u),i.index++,o.index++):k(t,F(i),F(o));else I(t,i,o)}B(t,i),B(t,o),T(t)}function I(t,e,n){var l,r,i=F(e),o=F(n);if(z(i)&&z(o)){var u,s;if(E(i,o)&&H(n,i,i.length-o.length))return void(u=t.lines).push.apply(u,f(i));if(E(o,i)&&H(e,o,o.length-i.length))return void(s=t.lines).push.apply(s,f(o))}else if(r=o,(l=i).length===r.length&&E(l,r)){var a;return void(a=t.lines).push.apply(a,f(i))}k(t,i,o)}function D(t,e,n,l){var r,i=F(e),o=function(t,e){for(var n=[],l=[],r=0,i=!1,o=!1;r<e.length&&t.index<t.lines.length;){var u=t.lines[t.index],s=e[r];if("+"===s[0])break;if(i=i||" "!==u[0],l.push(s),r++,"+"===u[0])for(o=!0;"+"===u[0];)n.push(u),u=t.lines[++t.index];s.substr(1)===u.substr(1)?(n.push(u),t.index++):o=!0}if("+"===(e[r]||"")[0]&&i&&(o=!0),o)return n;for(;r<e.length;)l.push(e[r++]);return{merged:l,changes:n}}(n,i);o.merged?(r=t.lines).push.apply(r,f(o.merged)):k(t,l?o:i,l?i:o)}function k(t,e,n){t.conflict=!0,t.lines.push({conflict:!0,mine:e,theirs:n})}function N(t,e,n){for(;e.offset<n.offset&&e.index<e.lines.length;){var l=e.lines[e.index++];t.lines.push(l),e.offset++}}function B(t,e){for(;e.index<e.lines.length;){var n=e.lines[e.index++];t.lines.push(n)}}function F(t){for(var e=[],n=t.lines[t.index][0];t.index<t.lines.length;){var l=t.lines[t.index];if("-"===n&&"+"===l[0]&&(n="+"),n!==l[0])break;e.push(l),t.index++}return e}function z(t){return t.reduce((function(t,e){return t&&"-"===e[0]}),!0)}function H(t,e,n){for(var l=0;l<n;l++){var r=e[e.length-n+l].substr(1);if(t.lines[t.index+l]!==" "+r)return!1}return t.index+=n,!0}function j(t){var e=0,n=0;return t.forEach((function(t){if("string"!=typeof t){var l=j(t.mine),r=j(t.theirs);void 0!==e&&(l.oldLines===r.oldLines?e+=l.oldLines:e=void 0),void 0!==n&&(l.newLines===r.newLines?n+=l.newLines:n=void 0)}else void 0===n||"+"!==t[0]&&" "!==t[0]||n++,void 0===e||"-"!==t[0]&&" "!==t[0]||e++})),{oldLines:e,newLines:n}}x.tokenize=function(t){return t.slice()},x.join=x.removeEmpty=function(t){return t},t.Diff=e,t.applyPatch=_,t.applyPatches=function(t,e){"string"==typeof t&&(t=b(t));var n=0;!function l(){var r=t[n++];if(!r)return e.complete();e.loadFile(r,(function(t,n){if(t)return e.complete(t);var i=_(n,r,e);e.patched(r,i,(function(t){if(t)return e.complete(t);l()}))}))}()},t.canonicalize=y,t.convertChangesToDMP=function(t){for(var e,n,l=[],r=0;r<t.length;r++)n=(e=t[r]).added?1:e.removed?-1:0,l.push([n,e.value]);return l},t.convertChangesToXML=function(t){for(var e=[],n=0;n<t.length;n++){var l=t[n];l.added?e.push("<ins>"):l.removed&&e.push("<del>"),e.push(l.value.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")),l.added?e.push("</ins>"):l.removed&&e.push("</del>")}return e.join("")},t.createPatch=function(t,e,n,l,r,i){return S(t,t,e,n,l,r,i)},t.createTwoFilesPatch=S,t.diffArrays=function(t,e,n){return x.diff(t,e,n)},t.diffChars=function(t,e,n){return r.diff(t,e,n)},t.diffCss=function(t,e,n){return d.diff(t,e,n)},t.diffJson=function(t,e,n){return v.diff(t,e,n)},t.diffLines=c,t.diffSentences=function(t,e,n){return h.diff(t,e,n)},t.diffTrimmedLines=function(t,e,n){var l=i(n,{ignoreWhitespace:!0});return a.diff(t,e,l)},t.diffWords=function(t,e,n){return n=i(n,{ignoreWhitespace:!0}),s.diff(t,e,n)},t.diffWordsWithSpace=function(t,e,n){return s.diff(t,e,n)},t.merge=function(t,e,n){t=A(t,n),e=A(e,n);var l={};(t.index||e.index)&&(l.index=t.index||e.index),(t.newFileName||e.newFileName)&&(L(t)?L(e)?(l.oldFileName=C(l,t.oldFileName,e.oldFileName),l.newFileName=C(l,t.newFileName,e.newFileName),l.oldHeader=C(l,t.oldHeader,e.oldHeader),l.newHeader=C(l,t.newHeader,e.newHeader)):(l.oldFileName=t.oldFileName,l.newFileName=t.newFileName,l.oldHeader=t.oldHeader,l.newHeader=t.newHeader):(l.oldFileName=e.oldFileName||t.oldFileName,l.newFileName=e.newFileName||t.newFileName,l.oldHeader=e.oldHeader||t.oldHeader,l.newHeader=e.newHeader||t.newHeader)),l.hunks=[];for(var r=0,i=0,o=0,u=0;r<t.hunks.length||i<e.hunks.length;){var s=t.hunks[r]||{oldStart:1/0},a=e.hunks[i]||{oldStart:1/0};if(P(s,a))l.hunks.push(R(s,o)),r++,u+=s.newLines-s.oldLines;else if(P(a,s))l.hunks.push(R(a,u)),i++,o+=a.newLines-a.oldLines;else{var c={oldStart:Math.min(s.oldStart,a.oldStart),oldLines:0,newStart:Math.min(s.newStart+o,a.oldStart+u),newLines:0,lines:[]};O(c,s.oldStart,s.lines,a.oldStart,a.lines),i++,r++,l.hunks.push(c)}}return l},t.parsePatch=b,t.structuredPatch=M,Object.defineProperty(t,"__esModule",{value:!0})},"object"==typeof l&&void 0!==e?i(l):"function"==typeof define&&n.amdO?define(["exports"],i):i((r=r||self).Diff={})},{}],93:[function(t,e,n){e.exports=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)}},{}],94:[function(t,e,n){function l(t){return Array.isArray(t)||"[object Object]"=={}.toString.call(t)}function r(t){return!t||"object"!=typeof t&&"function"!=typeof t}e.exports=function t(){var e=[].slice.call(arguments),n=!1;"boolean"==typeof e[0]&&(n=e.shift());var i=e[0];if(r(i))throw new Error("extendee must be an object");for(var o=e.slice(1),u=o.length,s=0;s<u;s++){var a=o[s];for(var c in a)if(Object.prototype.hasOwnProperty.call(a,c)){var h=a[c];if(n&&l(h)){var d=Array.isArray(h)?[]:{};i[c]=t(!0,Object.prototype.hasOwnProperty.call(i,c)&&!r(i[c])?i[c]:d,h)}else i[c]=h}}return i}},{}],95:[function(t,e,l){var r,i="__lodash_hash_undefined__",o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,u=/^\w*$/,s=/^\./,a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,c=/\\(\\)?/g,h=/^\[object .+?Constructor\]$/,d="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,p="object"==typeof self&&self&&self.Object===Object&&self,f=d||p||Function("return this")(),m=Array.prototype,g=Function.prototype,v=Object.prototype,y=f["__core-js_shared__"],x=(r=/[^.]+$/.exec(y&&y.keys&&y.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"",b=g.toString,w=v.hasOwnProperty,_=v.toString,M=RegExp("^"+b.call(w).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),S=f.Symbol,E=m.splice,T=k(f,"Map"),A=k(Object,"create"),L=S?S.prototype:void 0,C=L?L.toString:void 0;function P(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var l=t[e];this.set(l[0],l[1])}}function R(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var l=t[e];this.set(l[0],l[1])}}function O(t){var e=-1,n=t?t.length:0;for(this.clear();++e<n;){var l=t[e];this.set(l[0],l[1])}}function I(t,e){for(var n,l,r=t.length;r--;)if((n=t[r][0])===(l=e)||n!=n&&l!=l)return r;return-1}function D(t,e){var n,l,r=t.__data__;return("string"==(l=typeof(n=e))||"number"==l||"symbol"==l||"boolean"==l?"__proto__"!==n:null===n)?r["string"==typeof e?"string":"hash"]:r.map}function k(t,e){var n=function(t,e){return null==t?void 0:t[e]}(t,e);return function(t){return!(!H(t)||(e=t,x&&x in e))&&(function(t){var e=H(t)?_.call(t):"";return"[object Function]"==e||"[object GeneratorFunction]"==e}(t)||function(t){var e=!1;if(null!=t&&"function"!=typeof t.toString)try{e=!!(t+"")}catch(t){}return e}(t)?M:h).test(function(t){if(null!=t){try{return b.call(t)}catch(t){}try{return t+""}catch(t){}}return""}(t));var e}(n)?n:void 0}P.prototype.clear=function(){this.__data__=A?A(null):{}},P.prototype.delete=function(t){return this.has(t)&&delete this.__data__[t]},P.prototype.get=function(t){var e=this.__data__;if(A){var n=e[t];return n===i?void 0:n}return w.call(e,t)?e[t]:void 0},P.prototype.has=function(t){var e=this.__data__;return A?void 0!==e[t]:w.call(e,t)},P.prototype.set=function(t,e){return this.__data__[t]=A&&void 0===e?i:e,this},R.prototype.clear=function(){this.__data__=[]},R.prototype.delete=function(t){var e=this.__data__,n=I(e,t);return!(n<0||(n==e.length-1?e.pop():E.call(e,n,1),0))},R.prototype.get=function(t){var e=this.__data__,n=I(e,t);return n<0?void 0:e[n][1]},R.prototype.has=function(t){return I(this.__data__,t)>-1},R.prototype.set=function(t,e){var n=this.__data__,l=I(n,t);return l<0?n.push([t,e]):n[l][1]=e,this},O.prototype.clear=function(){this.__data__={hash:new P,map:new(T||R),string:new P}},O.prototype.delete=function(t){return D(this,t).delete(t)},O.prototype.get=function(t){return D(this,t).get(t)},O.prototype.has=function(t){return D(this,t).has(t)},O.prototype.set=function(t,e){return D(this,t).set(t,e),this};var N=F((function(t){var e;t=null==(e=t)?"":function(t){if("string"==typeof t)return t;if(j(t))return C?C.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}(e);var n=[];return s.test(t)&&n.push(""),t.replace(a,(function(t,e,l,r){n.push(l?r.replace(c,"$1"):e||t)})),n}));function B(t){if("string"==typeof t||j(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function F(t,e){if("function"!=typeof t||e&&"function"!=typeof e)throw new TypeError("Expected a function");var n=function(){var l=arguments,r=e?e.apply(this,l):l[0],i=n.cache;if(i.has(r))return i.get(r);var o=t.apply(this,l);return n.cache=i.set(r,o),o};return n.cache=new(F.Cache||O),n}F.Cache=O;var z=Array.isArray;function H(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}function j(t){return"symbol"==typeof t||function(t){return!!t&&"object"==typeof t}(t)&&"[object Symbol]"==_.call(t)}e.exports=function(t,e,n){var l=null==t?void 0:function(t,e){for(var n,l=0,r=(e=function(t,e){if(z(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!j(t))||u.test(t)||!o.test(t)||null!=e&&t in Object(e)}(e,t)?[e]:z(n=e)?n:N(n)).length;null!=t&&l<r;)t=t[B(e[l++])];return l&&l==r?t:void 0}(t,e);return void 0===l?n:l}},{}],96:[function(t,e,n){var l=setTimeout;e.exports=function(t){return(t=t||{}).hasOwnProperty("logger")||(t.logger=function(){}),t.hasOwnProperty("useImmediateExceptions")||(t.useImmediateExceptions=!0),t.hasOwnProperty("setTimeout")||(t.setTimeout=l),function(e,n){var l=`${e} threw exception: `,r={name:n.name||e,message:n.message||n.toString(),stack:n.stack};function i(){throw r.message=l+r.message,r}t.logger(`${l}[${r.name}] ${r.message}`),r.stack&&t.logger(r.stack),t.useImmediateExceptions?i():t.setTimeout(i,0)}}},{}],97:[function(t,e,n){var l=t("./event");function r(t,e,n){this.initEvent(t,!1,!1,n),this.detail=e.detail||null}r.prototype=new l,r.prototype.constructor=r,e.exports=r},{"./event":99}],98:[function(t,e,n){function l(t){return t!==Object(t)?{capture:Boolean(t),once:!1,passive:!1}:{capture:Boolean(t.capture),once:Boolean(t.once),passive:Boolean(t.passive)}}function r(t,e){return function(n){return n.capture===e&&n.listener===t}}var i={addEventListener:function(t,e,n){var i=l(n);null!=e&&(this.eventListeners=this.eventListeners||{},this.eventListeners[t]=this.eventListeners[t]||[],this.eventListeners[t].some(r(e,i.capture))||this.eventListeners[t].push({listener:e,capture:i.capture,once:i.once}))},removeEventListener:function(t,e,n){if(this.eventListeners&&this.eventListeners[t]){var i,o=l(n);this.eventListeners[t]=this.eventListeners[t].filter((i=r(e,o.capture),function(){return!i.apply(this,arguments)}))}},dispatchEvent:function(t){if(!this.eventListeners||!this.eventListeners[t.type])return Boolean(t.defaultPrevented);var e=this,n=t.type,l=e.eventListeners[n];return e.eventListeners[n]=l.filter((function(t){return!t.once})),l.forEach((function(n){var l=n.listener;"function"==typeof l?l.call(e,t):l.handleEvent(t)})),Boolean(t.defaultPrevented)}};e.exports=i},{}],99:[function(t,e,n){function l(t,e,n,l){this.initEvent(t,e,n,l)}l.prototype={initEvent:function(t,e,n,l){this.type=t,this.bubbles=e,this.cancelable=n,this.target=l,this.currentTarget=l},stopPropagation:function(){},preventDefault:function(){this.defaultPrevented=!0}},e.exports=l},{}],100:[function(t,e,n){e.exports={Event:t("./event"),ProgressEvent:t("./progress-event"),CustomEvent:t("./custom-event"),EventTarget:t("./event-target")}},{"./custom-event":97,"./event":99,"./event-target":98,"./progress-event":101}],101:[function(t,e,n){var l=t("./event");function r(t,e,n){this.initEvent(t,!1,!1,n),this.loaded="number"==typeof e.loaded?e.loaded:null,this.total="number"==typeof e.total?e.total:null,this.lengthComputable=Boolean(e.total)}r.prototype=new l,r.prototype.constructor=r,e.exports=r},{"./event":99}],102:[function(t,e,n){var l=t("@sinonjs/fake-timers"),r=t("./index");function i(){}i.prototype=r;var o=new i;o.addRequest=function(t){if(t.async&&("object"==typeof setTimeout.clock?this.clock=setTimeout.clock:(this.clock=l.install(),this.resetClock=!0),!this.longestTimeout)){var e=this.clock.setTimeout,n=this.clock.setInterval,i=this;this.clock.setTimeout=function(t,n){return i.longestTimeout=Math.max(n,i.longestTimeout||0),e.apply(this,arguments)},this.clock.setInterval=function(t,e){return i.longestTimeout=Math.max(e,i.longestTimeout||0),n.apply(this,arguments)}}return r.addRequest.call(this,t)},o.respond=function(){var t=r.respond.apply(this,arguments);return this.clock&&(this.clock.tick(this.longestTimeout||0),this.longestTimeout=0,this.resetClock&&(this.clock.uninstall(),this.resetClock=!1)),t},o.restore=function(){return this.clock&&this.clock.uninstall(),r.restore.apply(this,arguments)},e.exports=o},{"./index":103,"@sinonjs/fake-timers":59}],103:[function(t,e,n){var l=t("../fake-xhr"),r=[].push,i=t("./log"),o=t("../configure-logger"),u=t("path-to-regexp"),s="undefined"!=typeof ArrayBuffer;function a(t){var e=t;if("[object Array]"!==Object.prototype.toString.call(t)&&(e=[200,{},t]),"string"!=typeof e[2]){if(!s)throw new TypeError("Fake server response body should be a string, but was "+typeof e[2]);if(!(e[2]instanceof ArrayBuffer))throw new TypeError("Fake server response body should be a string or ArrayBuffer, but was "+typeof e[2])}return e}function c(){var t={hostname:"localhost",port:process.env.PORT||80,protocol:"http:"};return t.host=t.hostname+("80"===String(t.port)?"":`:${t.port}`),t}function h(t,e){var n="undefined"==typeof window?c():void 0!==window.location?window.location:void 0!==window.window&&void 0!==window.window.location?window.window.location:c(),l=new RegExp(`^${n.protocol}//${n.host}/`),r=e.url;if(/^https?:\/\//.test(r)&&!l.test(r)||(r=r.replace(l,"/")),function(t,e,n){var l=t.method,r=!l||l.toLowerCase()===e.toLowerCase(),i=t.url,o=!i||i===n||"function"==typeof i.test&&i.test(n)||"function"==typeof i&&!0===i(n);return r&&o}(t,this.getHTTPMethod(e),r)){if("function"==typeof t.response){var i=t.url,o=[e].concat(i&&"function"==typeof i.exec?i.exec(r).slice(1):[]);return t.response.apply(t,o)}return!0}return!1}function d(){var t=++this.requestCount;this.requested=!0,this.requestedOnce=1===t,this.requestedTwice=2===t,this.requestedThrice=3===t,this.firstRequest=this.getRequest(0),this.secondRequest=this.getRequest(1),this.thirdRequest=this.getRequest(2),this.lastRequest=this.getRequest(t-1)}var p={create:function(t){var e=Object.create(this);return e.configure(t),this.xhr=l.useFakeXMLHttpRequest(),e.requests=[],e.requestCount=0,e.queue=[],e.responses=[],this.xhr.onCreate=function(t){t.unsafeHeadersEnabled=function(){return!(!1===e.unsafeHeadersEnabled)},e.addRequest(t)},e},configure:function(t){var e=this,n={autoRespond:!0,autoRespondAfter:!0,respondImmediately:!0,fakeHTTPMethods:!0,logger:!0,unsafeHeadersEnabled:!0};t=t||{},Object.keys(t).forEach((function(l){l in n&&(e[l]=t[l])})),e.logError=o(t)},addRequest:function(t){var e=this;r.call(this.requests,t),d.call(this),t.onSend=function(){e.handleRequest(this),e.respondImmediately?e.respond():e.autoRespond&&!e.responding&&(setTimeout((function(){e.responding=!1,e.respond()}),e.autoRespondAfter||10),e.responding=!0)}},getHTTPMethod:function(t){if(this.fakeHTTPMethods&&/post/i.test(t.method)){var e=(t.requestBody||"").match(/_method=([^\b;]+)/);return e?e[1]:t.method}return t.method},handleRequest:function(t){t.async?r.call(this.queue,t):this.processRequest(t)},logger:function(){},logError:o({}),log:i,respondWith:function(t,e,n){if(1!==arguments.length||"function"==typeof t){if(1===arguments.length&&(n=t,e=t=null),2===arguments.length&&(n=e,e=t,t=null),"string"==typeof e&&""!==e&&/:[0-9]+\//.test(e)){var l=e.match(/^(https?:\/\/.*?):([0-9]+\/.*)$/);e=`${l[1]}\\:${l[2]}`}r.call(this.responses,{method:t,url:"string"==typeof e&&""!==e?u(e):e,response:"function"==typeof n?n:a(n)})}else this.response=a(t)},respond:function(){arguments.length>0&&this.respondWith.apply(this,arguments);var t=this.queue||[],e=t.splice(0,t.length),n=this;e.forEach((function(t){n.processRequest(t)}))},respondAll:function(){var t;if(!this.respondImmediately)for(this.queue=this.requests.slice(0);t=this.queue.shift();)this.processRequest(t)},processRequest:function(t){try{if(t.aborted)return;var e=this.response||[404,{},""];if(this.responses)for(var n=this.responses.length-1;n>=0;n--)if(h.call(this,this.responses[n],t)){e=this.responses[n].response;break}4!==t.readyState&&(this.log(e,t),t.respond(e[0],e[1],e[2]))}catch(t){this.logError("Fake server request processing",t)}},restore:function(){return this.xhr.restore&&this.xhr.restore.apply(this.xhr,arguments)},getRequest:function(t){return this.requests[t]||null},reset:function(){this.resetBehavior(),this.resetHistory()},resetBehavior:function(){this.responses.length=this.queue.length=0},resetHistory:function(){this.requests.length=this.requestCount=0,this.requestedOnce=this.requestedTwice=this.requestedThrice=this.requested=!1,this.firstRequest=this.secondRequest=this.thirdRequest=this.lastRequest=null}};e.exports=p},{"../configure-logger":96,"../fake-xhr":106,"./log":104,"path-to-regexp":108}],104:[function(t,e,n){var l=t("util").inspect;e.exports=function(t,e){var n;n=`Request:\n${l(e)}\n\n`,n+=`Response:\n${l(t)}\n\n`,"function"==typeof this.logger&&this.logger(n)}},{util:91}],105:[function(t,e,n){n.isSupported=function(){try{return Boolean(new Blob)}catch(t){return!1}}()},{}],106:[function(t,e,n){var l="undefined"!=typeof TextEncoder?TextEncoder:t("@sinonjs/text-encoding").TextEncoder,r=t("@sinonjs/commons").global,i=t("../configure-logger"),o=t("../event"),u=t("just-extend"),s="undefined"!=typeof ProgressEvent,a="undefined"!=typeof CustomEvent,c="undefined"!=typeof FormData,h="undefined"!=typeof ArrayBuffer,d=t("./blob").isSupported,p={"Accept-Charset":!0,"Access-Control-Request-Headers":!0,"Access-Control-Request-Method":!0,"Accept-Encoding":!0,Connection:!0,"Content-Length":!0,Cookie:!0,Cookie2:!0,"Content-Transfer-Encoding":!0,Date:!0,DNT:!0,Expect:!0,Host:!0,"Keep-Alive":!0,Origin:!0,Referer:!0,TE:!0,Trailer:!0,"Transfer-Encoding":!0,Upgrade:!0,"User-Agent":!0,Via:!0};function f(){var t=this;["loadstart","progress","abort","error","load","timeout","loadend"].forEach((function(e){t.addEventListener(e,(function(n){var l=t[`on${e}`];l&&"function"==typeof l&&l.call(this,n)}))}))}function m(t,e){return Object.keys(t).filter((function(t){return t.toLowerCase()===e.toLowerCase()}))[0]||null}function g(t){return!/^Set-Cookie2?$/i.test(t)}function v(t,e){return t instanceof ArrayBuffer?t:new l(e||"utf-8").encode(t).buffer}function y(t){return!t||/(text\/xml)|(application\/xml)|(\+xml)/.test(t)}function x(t){""===t.responseType||"text"===t.responseType?t.response=t.responseText="":t.response=t.responseText=null,t.responseXML=null}function b(t){var e=t.navigator&&"ReactNative"===t.navigator.product,n={XMLHttpRequest:t.XMLHttpRequest};function l(t){f.call(this),this.readyState=l.UNSENT,this.requestHeaders={},this.requestBody=null,this.status=0,this.statusText="",this.upload=new f,this.responseType="",this.response="",this.logError=i(t),n.supportsTimeout&&(this.timeout=0),n.supportsCORS&&(this.withCredentials=!1),"function"==typeof l.onCreate&&l.onCreate(this)}function r(t){if(t.readyState!==l.OPENED)throw new Error("INVALID_STATE_ERR");if(t.sendFlag)throw new Error("INVALID_STATE_ERR")}n.GlobalXMLHttpRequest=t.XMLHttpRequest,n.GlobalActiveXObject=t.ActiveXObject,n.supportsActiveX=void 0!==n.GlobalActiveXObject,n.supportsXHR=void 0!==n.GlobalXMLHttpRequest,n.workingXHR=function(t){return void 0!==t.XMLHttpRequest?t.XMLHttpRequest:!(void 0===t.ActiveXObject)&&function(){return new t.ActiveXObject("MSXML2.XMLHTTP.3.0")}}(t),n.supportsTimeout=n.supportsXHR&&"timeout"in new n.GlobalXMLHttpRequest,n.supportsCORS=e||n.supportsXHR&&"withCredentials"in new n.GlobalXMLHttpRequest;var b=function(t,e,n){switch(n.length){case 0:return t[e]();case 1:return t[e](n[0]);case 2:return t[e](n[0],n[1]);case 3:return t[e](n[0],n[1],n[2]);case 4:return t[e](n[0],n[1],n[2],n[3]);case 5:return t[e](n[0],n[1],n[2],n[3],n[4]);default:throw new Error("Unhandled case")}};function w(t){if(t.readyState!==l.OPENED)throw new Error(`INVALID_STATE_ERR - ${t.readyState}`)}function _(t){x(t),t.errorFlag=!0,t.requestHeaders={},t.responseHeaders={},t.readyState!==l.UNSENT&&t.sendFlag&&t.readyState!==l.DONE&&(t.readyStateChange(l.DONE),t.sendFlag=!1)}l.filters=[],l.addFilter=function(t){this.filters.push(t)},l.defake=function(t,e){var r=new n.workingXHR;["open","setRequestHeader","abort","getResponseHeader","getAllResponseHeaders","addEventListener","overrideMimeType","removeEventListener"].forEach((function(e){t[e]=function(){return b(r,e,arguments)}})),t.send=function(){return r.responseType!==t.responseType&&(r.responseType=t.responseType),b(r,"send",arguments)};var i=function(e){e.forEach((function(e){t[e]=r[e]}))},o=function(){t.readyState=r.readyState,r.readyState>=l.HEADERS_RECEIVED&&i(["status","statusText"]),r.readyState>=l.LOADING&&(i(["response"]),""!==r.responseType&&"text"!==r.responseType||i(["responseText"])),r.readyState!==l.DONE||""!==r.responseType&&"document"!==r.responseType||i(["responseXML"])},u=function(){t.onreadystatechange&&t.onreadystatechange.call(t,{target:t,currentTarget:t})};r.addEventListener?(r.addEventListener("readystatechange",o),Object.keys(t.eventListeners).forEach((function(e){t.eventListeners[e].forEach((function(t){r.addEventListener(e,t.listener,{capture:t.capture,once:t.once})}))})),r.addEventListener("readystatechange",u)):r.onreadystatechange=function(){o(),u()},b(r,"open",e)},l.useFilters=!1,l.parseXML=function(t){if(""!==t)try{if("undefined"!=typeof DOMParser){var e,n=new DOMParser,l="";try{var r=n.parseFromString("INVALID","text/xml").getElementsByTagName("parsererror");r.length&&(l=r[0].namespaceURI)}catch(t){}try{e=n.parseFromString(t,"text/xml")}catch(t){return null}return e.getElementsByTagNameNS(l,"parsererror").length?null:e}var i=new window.ActiveXObject("Microsoft.XMLDOM");return i.async="false",i.loadXML(t),0!==i.parseError.errorCode?null:i}catch(t){}return null},l.statusCodes={100:"Continue",101:"Switching Protocols",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",300:"Multiple Choice",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Request Entity Too Large",414:"Request-URI Too Long",415:"Unsupported Media Type",416:"Requested Range Not Satisfiable",417:"Expectation Failed",422:"Unprocessable Entity",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Timeout",505:"HTTP Version Not Supported"},u(l.prototype,o.EventTarget,{async:!0,open:function(t,e,n,r,i){if(this.method=t,this.url=e,this.async="boolean"!=typeof n||n,this.username=r,this.password=i,x(this),this.requestHeaders={},this.sendFlag=!1,!0===l.useFilters){var o=arguments,u=l.filters.some((function(t){return t.apply(this,o)}));if(u)return void l.defake(this,arguments)}this.readyStateChange(l.OPENED)},readyStateChange:function(t){this.readyState=t;var e,n,r=new o.Event("readystatechange",!1,!1,this);if("function"==typeof this.onreadystatechange)try{this.onreadystatechange(r)}catch(t){this.logError("Fake XHR onreadystatechange handler",t)}this.readyState!==l.DONE?this.dispatchEvent(r):(this.timedOut||this.aborted||0===this.status?(n={loaded:0,total:0},e=(this.timedOut?"timeout":this.aborted&&"abort")||"error"):(n={loaded:100,total:100},e="load"),s&&(this.upload.dispatchEvent(new o.ProgressEvent("progress",n,this)),this.upload.dispatchEvent(new o.ProgressEvent(e,n,this)),this.upload.dispatchEvent(new o.ProgressEvent("loadend",n,this))),this.dispatchEvent(new o.ProgressEvent("progress",n,this)),this.dispatchEvent(new o.ProgressEvent(e,n,this)),this.dispatchEvent(r),this.dispatchEvent(new o.ProgressEvent("loadend",n,this)))},setRequestHeader:function(t,e){if("string"!=typeof e)throw new TypeError("By RFC7230, section 3.2.4, header values should be strings. Got "+typeof e);r(this);var n=!0;if("function"==typeof this.unsafeHeadersEnabled&&(n=this.unsafeHeadersEnabled()),n&&(null!==m(p,t)||/^(Sec-|Proxy-)/i.test(t)))throw new Error(`Refused to set unsafe header "${t}"`);e=function(t){return t.replace(/^[\x09\x0A\x0D\x20]+|[\x09\x0A\x0D\x20]+$/g,"")}(e);var l=m(this.requestHeaders,t);l?this.requestHeaders[l]+=`, ${e}`:this.requestHeaders[t]=e},setStatus:function(t){var e="number"==typeof t?t:200;w(this),this.status=e,this.statusText=l.statusCodes[e]},setResponseHeaders:function(t){w(this);var e=this.responseHeaders={};Object.keys(t).forEach((function(n){e[n]=t[n]})),this.async?this.readyStateChange(l.HEADERS_RECEIVED):this.readyState=l.HEADERS_RECEIVED},send:function(t){if(r(this),!/^(head)$/i.test(this.method)){var e=m(this.requestHeaders,"Content-Type");if(this.requestHeaders[e]){var i=this.requestHeaders[e].split(";");this.requestHeaders[e]=`${i[0]};charset=utf-8`}else!c||t instanceof FormData||(this.requestHeaders["Content-Type"]="text/plain;charset=utf-8");this.requestBody=t}if(this.errorFlag=!1,this.sendFlag=this.async,x(this),"function"==typeof this.onSend&&this.onSend(this),n.supportsTimeout&&"object"==typeof setInterval.clock&&"object"==typeof Date.clock)var u=Date.now(),s=this,a=setInterval((function(){s.readyState===l.UNSENT||s.readyState===l.DONE?clearInterval(a):"number"==typeof s.timeout&&s.timeout>0&&Date.now()>=u+s.timeout&&(s.triggerTimeout(),clearInterval(a))}),1);this.dispatchEvent(new o.Event("loadstart",!1,!1,this))},abort:function(){this.aborted=!0,_(this),this.readyState=l.UNSENT},error:function(){x(this),this.errorFlag=!0,this.requestHeaders={},this.responseHeaders={},this.readyStateChange(l.DONE)},triggerTimeout:function(){n.supportsTimeout&&(this.timedOut=!0,_(this))},getResponseHeader:function(t){return this.readyState<l.HEADERS_RECEIVED||/^Set-Cookie2?$/i.test(t)?null:(t=m(this.responseHeaders,t),this.responseHeaders[t]||null)},getAllResponseHeaders:function(){if(this.readyState<l.HEADERS_RECEIVED)return"";var t=this.responseHeaders;return Object.keys(t).filter(g).reduce((function(e,n){return`${e}${n}: ${t[n]}\r\n`}),"")},setResponseBody:function(t){!function(t){if(t.readyState===l.DONE)throw new Error("Request done")}(this),function(t){if(t.async&&t.readyState!==l.HEADERS_RECEIVED)throw new Error("No headers received")}(this),function(t,e){var n=null,l="string"==typeof t;if("arraybuffer"===e?l||t instanceof ArrayBuffer||((n=new Error(`Attempted to respond to fake XMLHttpRequest with ${t}, which is not a string or ArrayBuffer.`)).name="InvalidBodyException"):l||((n=new Error(`Attempted to respond to fake XMLHttpRequest with ${t}, which is not a string.`)).name="InvalidBodyException"),n)throw n}(t,this.responseType);var e=this.overriddenMimeType||this.getResponseHeader("Content-Type"),n=""===this.responseType||"text"===this.responseType;if(x(this),this.async){var r=this.chunkSize||10,i=0;do{this.readyStateChange(l.LOADING),n&&(this.responseText=this.response+=t.substring(i,i+r)),i+=r}while(i<t.length)}this.response=function(t,e,n){if(""===t||"text"===t)return n;if(h&&"arraybuffer"===t)return v(n);if("json"===t)try{return JSON.parse(n)}catch(t){return null}else{if(d&&"blob"===t){var r={};return e&&(r.type=e),new Blob([v(n)],r)}if("document"===t)return y(e)?l.parseXML(n):null}throw new Error(`Invalid responseType ${t}`)}(this.responseType,e,t),n&&(this.responseText=this.response),"document"===this.responseType?this.responseXML=this.response:""===this.responseType&&y(e)&&(this.responseXML=l.parseXML(this.responseText)),this.readyStateChange(l.DONE)},respond:function(t,e,n){this.responseURL=this.url,this.setStatus(t),this.setResponseHeaders(e||{}),this.setResponseBody(n||"")},uploadProgress:function(t){s&&this.upload.dispatchEvent(new o.ProgressEvent("progress",t,this.upload))},downloadProgress:function(t){s&&this.dispatchEvent(new o.ProgressEvent("progress",t,this))},uploadError:function(t){a&&this.upload.dispatchEvent(new o.CustomEvent("error",{detail:t}))},overrideMimeType:function(t){if(this.readyState>=l.LOADING)throw new Error("INVALID_STATE_ERR");this.overriddenMimeType=t}});var M={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4};return u(l,M),u(l.prototype,M),{xhr:n,FakeXMLHttpRequest:l,useFakeXMLHttpRequest:function(){return l.restore=function(e){n.supportsXHR&&(t.XMLHttpRequest=n.GlobalXMLHttpRequest),n.supportsActiveX&&(t.ActiveXObject=n.GlobalActiveXObject),delete l.restore,!0!==e&&delete l.onCreate},n.supportsXHR&&(t.XMLHttpRequest=l),n.supportsActiveX&&(t.ActiveXObject=function(t){return"Microsoft.XMLHTTP"===t||/^Msxml2\.XMLHTTP/i.test(t)?new l:new n.GlobalActiveXObject(t)}),l}}}f.prototype=o.EventTarget,e.exports=u(b(r),{fakeXMLHttpRequestFor:b})},{"../configure-logger":96,"../event":100,"./blob":105,"@sinonjs/commons":47,"@sinonjs/text-encoding":86,"just-extend":94}],107:[function(t,e,n){e.exports={fakeServer:t("./fake-server"),fakeServerWithClock:t("./fake-server/fake-server-with-clock"),fakeXhr:t("./fake-xhr")}},{"./fake-server":103,"./fake-server/fake-server-with-clock":102,"./fake-xhr":106}],108:[function(t,e,n){var l=t("isarray");e.exports=function t(e,n,r){return l(n)||(r=n||r,n=[]),r=r||{},e instanceof RegExp?function(t,e){var n=t.source.match(/\((?!\?)/g);if(n)for(var l=0;l<n.length;l++)e.push({name:l,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(t,e)}(e,n):l(e)?function(e,n,l){for(var r=[],i=0;i<e.length;i++)r.push(t(e[i],n,l).source);return c(new RegExp("(?:"+r.join("|")+")",h(l)),n)}(e,n,r):function(t,e,n){return d(i(t,n),e,n)}(e,n,r)},e.exports.parse=i,e.exports.compile=function(t,e){return u(i(t,e),e)},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=d;var r=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(t,e){for(var n,l=[],i=0,o=0,u="",c=e&&e.delimiter||"/";null!=(n=r.exec(t));){var h=n[0],d=n[1],p=n.index;if(u+=t.slice(o,p),o=p+h.length,d)u+=d[1];else{var f=t[o],m=n[2],g=n[3],v=n[4],y=n[5],x=n[6],b=n[7];u&&(l.push(u),u="");var w=null!=m&&null!=f&&f!==m,_="+"===x||"*"===x,M="?"===x||"*"===x,S=n[2]||c,E=v||y;l.push({name:g||i++,prefix:m||"",delimiter:S,optional:M,repeat:_,partial:w,asterisk:!!b,pattern:E?a(E):b?".*":"[^"+s(S)+"]+?"})}}return o<t.length&&(u+=t.substr(o)),u&&l.push(u),l}function o(t){return encodeURI(t).replace(/[\/?#]/g,(function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()}))}function u(t,e){for(var n=new Array(t.length),r=0;r<t.length;r++)"object"==typeof t[r]&&(n[r]=new RegExp("^(?:"+t[r].pattern+")$",h(e)));return function(e,r){for(var i="",u=e||{},s=(r||{}).pretty?o:encodeURIComponent,a=0;a<t.length;a++){var c=t[a];if("string"!=typeof c){var h,d=u[c.name];if(null==d){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(l(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(h=s(d[p]),!n[a].test(h))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(h)+"`");i+=(0===p?c.prefix:c.delimiter)+h}}else{if(h=c.asterisk?encodeURI(d).replace(/[?#]/g,(function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})):s(d),!n[a].test(h))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+h+'"');i+=c.prefix+h}}else i+=c}return i}}function s(t){return t.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function a(t){return t.replace(/([=!:$\/()])/g,"\\$1")}function c(t,e){return t.keys=e,t}function h(t){return t&&t.sensitive?"":"i"}function d(t,e,n){l(e)||(n=e||n,e=[]);for(var r=(n=n||{}).strict,i=!1!==n.end,o="",u=0;u<t.length;u++){var a=t[u];if("string"==typeof a)o+=s(a);else{var d=s(a.prefix),p="(?:"+a.pattern+")";e.push(a),a.repeat&&(p+="(?:"+d+p+")*"),o+=p=a.optional?a.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var f=s(n.delimiter||"/"),m=o.slice(-f.length)===f;return r||(o=(m?o.slice(0,-f.length):o)+"(?:"+f+"(?=$))?"),o+=i?"$":r&&m?"":"(?="+f+"|$)",c(new RegExp("^"+o,h(n)),e)}},{isarray:93}],109:[function(t,e,n){e.exports={stdout:!1,stderr:!1}},{}],110:[function(t,e,l){var r;r=function(){var t="function"==typeof Promise,e="object"==typeof self?self:n.g,l="undefined"!=typeof Symbol,r="undefined"!=typeof Map,i="undefined"!=typeof Set,o="undefined"!=typeof WeakMap,u="undefined"!=typeof WeakSet,s="undefined"!=typeof DataView,a=l&&void 0!==Symbol.iterator,c=l&&void 0!==Symbol.toStringTag,h=i&&"function"==typeof Set.prototype.entries,d=r&&"function"==typeof Map.prototype.entries,p=h&&Object.getPrototypeOf((new Set).entries()),f=d&&Object.getPrototypeOf((new Map).entries()),m=a&&"function"==typeof Array.prototype[Symbol.iterator],g=m&&Object.getPrototypeOf([][Symbol.iterator]()),v=a&&"function"==typeof String.prototype[Symbol.iterator],y=v&&Object.getPrototypeOf(""[Symbol.iterator]());return function(n){var l=typeof n;if("object"!==l)return l;if(null===n)return"null";if(n===e)return"global";if(Array.isArray(n)&&(!1===c||!(Symbol.toStringTag in n)))return"Array";if("object"==typeof window&&null!==window){if("object"==typeof window.location&&n===window.location)return"Location";if("object"==typeof window.document&&n===window.document)return"Document";if("object"==typeof window.navigator){if("object"==typeof window.navigator.mimeTypes&&n===window.navigator.mimeTypes)return"MimeTypeArray";if("object"==typeof window.navigator.plugins&&n===window.navigator.plugins)return"PluginArray"}if(("function"==typeof window.HTMLElement||"object"==typeof window.HTMLElement)&&n instanceof window.HTMLElement){if("BLOCKQUOTE"===n.tagName)return"HTMLQuoteElement";if("TD"===n.tagName)return"HTMLTableDataCellElement";if("TH"===n.tagName)return"HTMLTableHeaderCellElement"}}var a=c&&n[Symbol.toStringTag];if("string"==typeof a)return a;var h=Object.getPrototypeOf(n);return h===RegExp.prototype?"RegExp":h===Date.prototype?"Date":t&&h===Promise.prototype?"Promise":i&&h===Set.prototype?"Set":r&&h===Map.prototype?"Map":u&&h===WeakSet.prototype?"WeakSet":o&&h===WeakMap.prototype?"WeakMap":s&&h===DataView.prototype?"DataView":r&&h===f?"Map Iterator":i&&h===p?"Set Iterator":m&&h===g?"Array Iterator":v&&h===y?"String Iterator":null===h?"Object":Object.prototype.toString.call(n).slice(8,-1)}},"object"==typeof l&&void 0!==e?e.exports=r():"function"==typeof define&&n.amdO?define(r):this.typeDetect=r()},{}]},{},[1]);var E=S;function T(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,l=new Array(e);n<e;n++)l[n]=t[n];return l}function A(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(var n=0;n<t.length;++n)if(t[n]!==e[n])return!1;return!0}S.leakThreshold,S.assert,S.serverPrototype,S.getFakes,S.getRestorers,S.createStubInstance,S.inject,S.mock,S.reset,S.resetBehavior,S.resetHistory,S.restore,S.restoreContext,S.replace,S.replaceGetter,S.replaceSetter,S.spy,S.stub,S.fake,S.useFakeTimers,S.verify,S.verifyAndRestore,S.useFakeServer,S.useFakeXMLHttpRequest,S.usingPromise,S.createSandbox,S.match,S.restoreObject,S.expectation,S.defaultConfig,S.setFormatter,S.timers,S.xhr,S.FakeXMLHttpRequest,S.fakeServer,S.fakeServerWithClock,S.createFakeServer,S.createFakeServerWithClock,S.addBehavior,S.promise;var L=[function(t,e){var n,l=E.spy(t);try{M(l).to.not.throw(Error,"Syntax Error");var r=l(2.5);M(r).to.equal(!0,"Those are not equal")}catch(t){n=t.message.split(":")[0]}return n},function(t){var e,n=E.spy(t);try{M(n).to.not.throw(Error,"Syntax Error");var l=n();M(l).to.equal(42,"That isn't the correct answer. So sorry for your loss."),M(n.callCount).to.equal(2)}catch(t){e=t.message.split(":")[0]}return e},function(t){var e,n=E.spy(t),l=new x;n=n.bind(l);try{M(n).to.not.throw(Error,"Syntax Error"),M(n()).to.equal(!1,"Entities should be alive if they are at full life"),l.life=0,M(n()).to.equal(!0,"Entities should die when they are at 0 life")}catch(t){e=t.message.split(":")[0]}return e},function(t){var e,n=E.spy(t),l=new x,r=new x,i=new x;window.entities=[l,r,i],window.destroyAll=n;try{n(entities),M(window.entities).to.have.lengthOf(0,"Entities should be cleared from their containing array when they are destroyed. Wouldn't want to hold onto the dead bodies would we?"),M(n.callCount).to.be.above(3,"Recursion please"),M(n.callCount).to.be.below(5,"Recursion please")}catch(t){e=t.message.split(":")[0]}return e},function(t){var e,n=E.spy(t),l=new x;n=n.bind(l);try{M(n).to.not.throw(Error,"Syntax error"),M(A(l.position,[0,0])).to.equal(!0,"Without calling move the entity should not move"),n("down"),M(A(l.position,[1,0])).to.equal(!0,"Moving up should move up"),n("right"),M(A(l.position,[1,1])).to.equal(!0,"Moving left should do accordingly"),n("left"),M(A(l.position,[1,0])).to.equal(!0,"Moving right should do accordingly"),n("up"),M(A(l.position,[0,0])).to.equal(!0,"Moving down should do accordingly")}catch(t){e=t.message.split(":")[0]}return e},function(t,e){var n=new x;t=t.bind(n);var l,r=E.spy(t);window.moveTo=r;try{M(A(n.position,[0,0])).to.equal(!0,"Without calling move the entity should not move"),M(r).to.not.throw(Error,"Something went wrong with your function"),r([7,7]),M(r.callCount).to.be.above(1,"moveTo must be called recursively"),M(A(n.position,[7,7])).to.equal(!0,"Movement did not work as expected"),r([3,3]),M(A(n.position,[3,3])).to.equal(!0,"Movement did not work as expected")}catch(t){l=t.message.split(":")[0]}return l},function(t,e){var n=e.light,l=[0,0];try{return M(A(n.position,l)).to.equal(!0,"Light, you have to start at 0, 0"),t(n),M(A(n.position,[5,5])).to.equal(!0,"Light didn't move the the right place"),void e.moveLight(l)}catch(t){return n.position=[0,0],t.message.split(":")[0]}},function(t,e){var n,l,r=e.light,i=(n=r.position,l=2,function(t){if(Array.isArray(t))return t}(n)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var l,r,i=[],o=!0,u=!1;try{for(n=n.call(t);!(o=(l=n.next()).done)&&(i.push(l.value),!e||i.length!==e);o=!0);}catch(t){u=!0,r=t}finally{try{o||null==n.return||n.return()}finally{if(u)throw r}}return i}}(n,l)||function(t,e){if(t){if("string"==typeof t)return T(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?T(t,e):void 0}}(n,l)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[0],u=i[1];try{if(M(A(r.position,[5,5])).to.equal(!0,"Light, you should start at [5, 5]"),t(e.board.grid,r),e.board.grid[o][u]instanceof w)return;M(A(r.position,[19,19])).to.equal(!0,"Light needs to move to the square at 19, 19")}catch(t){return r.position=[5,5],t.message.split(":")[0]}}],C=[{id:0,text:"Hello Light, welcome home."},{id:1,text:"Since I have you here, The Ministry of Truth has a problem it needs you to solve. Check the panel on the right and answer correctly please."},{id:2,text:"Numbers can be so fickle can't they?"},{id:3,text:"We'll start simple today, finding the meaning of life is a good start."},{id:4,text:"Not too difficult right? Life is so simple, after all."},{id:5,text:"Well then Light, we've had our fun. Time to start setting the stage. As you can see, life doesn't amount to much quite yet. Let's add some more spice, shall we?"},{id:6,text:"Make sure that when an entity's life equals zero, they die. You don't need to handle the destruction yet. Just return a boolean specifying whether it's dead or not."},{id:7,text:"Lovely, now that things can die. It follows that we can also kill them. I've gone through the liberty of creating the functionality, but we need you to execute the application side of things. And make it recursive while you're at it."},{id:8,text:"Ah refreshing, entropy reigns again. \n    NB: That function will come in handy in the future. Pardon my excessive pretentiousness."},{id:9,text:"So now that we've gotten that stuff done with, let's get you your land legs."},{id:10,text:"Ah that's nice. Now you'll be able to move around in the future. Oh and if you can't tell, that's you in the top left."},{id:11,text:"But moving around one step at a time is inconvenient. Make a way to do it better and make it recursive as well. Also, please recursively call moveTo instead of this.moveTo, our tests for this run a bit funky."},{id:12,text:"That will make things much easier in the future. Let's practice moving around the board now. Visit the red block at [5, 5]"},{id:13,text:'Wonderful, this is how you will progress as we go on. The red blocks are "code blocks" that you will be prompted to move towards and solve.'},{id:14,text:"There are walls in the way of your next objective, figure out a way to bypass them... But it's strange, isn't it. These walls look quite alot like you. Figure out a way to move to the square at [19, 19]"},{id:15,text:"Quite impressive. That is all for now Light."},{id:16,text:"Thank you for joining me at this time."}],P=function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.board=e,this.pos=n};function R(t,e){for(var n=0;n<e.length;n++){var l=e[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(t,l.key,l)}}var O=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.size=e,this.grid=[],this.htmlGrid=[],this.generateBoard(),this.generateBoard=this.generateBoard.bind(this)}var e,n;return e=t,(n=[{key:"generateBoard",value:function(){for(var t=document.getElementById("board"),e=0;e<this.size;e++){this.grid.push([]),this.htmlGrid.push([]);for(var n=0;n<this.size;n++){var l=new P(this,[e,n]),r=document.createElement("div");r.classList.add("cube"),this.grid[e].push(l),t.appendChild(r),this.htmlGrid[e].push(r)}}}}])&&R(e.prototype,n),t}(),I=[function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return"function twoPlusTwo(two){\n  return two + two ===".concat(e,";\n}")},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return"function answerToLife(){\n  ".concat(e,"\n}")},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return"class Entity{\n  constructor(life = 100){\n    this.life = life;\n  }\n\n  isDead(){\n    ".concat(e,"\n  }\n}")},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return"class Entity{\n  constructor(life = 100){\n    this.life = life;\n  }\n  isDead(){\n    ...\n  }\n  destroy(){\n    this.life = 0;\n  }\n}\n\nfunction destroyAll(entities){\n  ".concat(e,"\n}")},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return'class Entity {\n    constructor(life = 100, position = [10, 10]){\n      this.life = life;\n      this.position = position;\n      this.DIRECTIONS = { \n        left: [0, -1],\n        right: [0, 1],\n        up: [-1, 0],\n        down: [1, 0]\n      }\n    }\n    isDead(){\n      ...\n    }\n    destroy(){\n      this.life = 0;\n    }\n    move(direction){\n      if(!this.DIRECTIONS[direction]) throw Error("Invalid Direction");\n      let move = this.DIRECTIONS[direction];\n      // Fill in below //\n        '.concat(e,"\n    }\n  }\n  ")},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return"class Entity {\n    constructor(life = 100, position = [10, 10]){\n      this.life = life;\n      this.position = position;\n      this.DIRECTIONS = { \n        left: [0, -1],\n        right: [0, 1],\n        up: [-1, 0],\n        down: [1, 0]\n      }\n    }\n    isDead(){\n      ...\n    }\n    destroy(){\n      this.life = 0;\n    }\n    move(direction){\n      ...\n    }\n    moveTo(position){\n      //Fill in below\n      ".concat(e,"\n    }\n  }")},function(t){return"class Entity{\n    // previously written code\n    moveTo(position){\n      ...\n    }\n  }\n\n  function babysFirstSteps(baby = 'you'){\n\n  }\n  "},function(t){return"class Wall extends Entity{\n    constructor(position){\n      super(0, position)\n    }\n    ...\n  }\n  \n  function pastTheWalls(grid, light){\n\n  }\n  "}];function D(t){return I[t.currentPuzzle](t)}var k=[{id:0,header:'"Freedom is the freedom to say that two plus two make four"',hint:"1984 by George Orwell",answer:" 5"},{id:1,header:"Life, The Universe, and Everything",hint:"The Hitchhiker's Guide to the Galaxy",answer:"return 42"},{id:2,header:"Death",hint:"__ ____ No Life",answer:"return this.life === 0"},{id:3,header:"Enti-cide?",hint:"Make sure to call destroyAll recursively",answer:"if(entities.length > 0){\n        entities.pop().destroy()\n        destroyAll(entities)\n    }"},{id:4,header:"Soles for Souls",hint:"Add the move to the current position of an entity",answer:"this.position[0] += move[0];\n    this.position[1] += move[1];"},{id:5,header:"The Speed of Light",hint:"Quite the long one, make sure to move carefully. Use the difference between the start and end position to move the entity.\n    In case of emergency, hit the Answer button",answer:"if(this.position[0] === position[0] && this.position[1] === position[1]) return;\n\n    let movementVector = [this.position[0] - position[0], this.position[1] - position[1]];\n    if(movementVector[0] !== 0){\n      if(movementVector[0] < 0){\n        this.move('down');\n        movementVector[0]++;\n      } else {\n        this.move('up');\n        movementVector[0]--;\n      }\n    }\n    if(movementVector[1] !== 0){\n      if(movementVector[1] < 0){\n        this.move('right');\n        movementVector[1]++;\n      } else {\n        this.move('left');\n        movementVector[1]--;\n      }\n    }\n    moveTo(position);"},{id:6,header:"Light's First Steps!!!",hint:"Move using the function you wrote",answer:"baby.moveTo([5,5]);"},{id:7,header:"Maria, Rose, and Sheena",hint:"Use the grid to move walls around.",answer:"grid[19][13] = grid[0][0];\n    grid[19][15] = grid[0][0];\n    grid[19][17] = grid[0][0];\n    light.moveTo([19, 12]);\n    light.moveTo([19, 19]);"}];function N(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var l,r,i=[],o=!0,u=!1;try{for(n=n.call(t);!(o=(l=n.next()).done)&&(i.push(l.value),!e||i.length!==e);o=!0);}catch(t){u=!0,r=t}finally{try{o||null==n.return||n.return()}finally{if(u)throw r}}return i}}(t,e)||function(t,e){if(t){if("string"==typeof t)return B(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?B(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function B(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,l=new Array(e);n<e;n++)l[n]=t[n];return l}function F(t,e){for(var n=0;n<e.length;n++){var l=e[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(t,l.key,l)}}var z=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.codeMirror=document.querySelector(".CodeMirror").CodeMirror,this.gameState={textNodes:C,puzzles:k,currentPage:0,currentPuzzle:0},this.light=new x,this.board=void 0,this.gridCopy=[],this.nextPage=this.nextPage.bind(this),this.generatePuzzle=this.generatePuzzle.bind(this),this.submitCode=this.submitCode.bind(this),this.cleanupPuzzle=this.cleanupPuzzle.bind(this),this.setupPuzzle=this.setupPuzzle.bind(this),this.handleArguments=this.handleArguments.bind(this),this.resetCode=this.resetCode.bind(this),this.moveLight=this.moveLight.bind(this),this.generateWalls=this.generateWalls.bind(this),this.copyGrid=this.copyGrid.bind(this),this.showHint=this.showHint.bind(this),this.showAnswer=this.showAnswer.bind(this)}var e,n;return e=t,(n=[{key:"generateText",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.gameState.textNodes[this.gameState.currentPage].text,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:document.getElementById("text-body");0===r&&(document.getElementById("text-sender").innerHTML="???",i.innerHTML="",n||(document.getElementById("next-btn").style.display="inline-block",this.generatePuzzle())),r<l.length&&(i.innerHTML+=l[r++],setTimeout((function(){e.generateText(t,n,l,r)}),t)),r===l.length-1&&setTimeout((function(){}),1e3)}},{key:"generatePuzzle",value:function(){switch(this.gameState.currentPage){case 1:case 3:this.setupPuzzle(),this.codeMirror.doc.setBookmark({line:1,ch:0}),this.codeMirror.doc.setBookmark({line:2,ch:0});break;case 6:this.setupPuzzle(),this.codeMirror.doc.setBookmark({line:6,ch:0}),this.codeMirror.doc.setBookmark({line:7,ch:0});break;case 7:this.setupPuzzle(),this.codeMirror.doc.setBookmark({line:13,ch:0}),this.codeMirror.doc.setBookmark({line:14,ch:0});break;case 9:this.setupPuzzle(),this.codeMirror.doc.setBookmark({line:18,ch:0}),this.codeMirror.doc.setBookmark({line:22,ch:0});break;case 11:this.setupPuzzle(),this.codeMirror.doc.setBookmark({line:21,ch:0}),this.codeMirror.doc.setBookmark({line:23,ch:0});break;case 12:this.setupPuzzle(),this.codeMirror.doc.setBookmark({line:8,ch:0}),this.codeMirror.doc.setBookmark({line:9,ch:0});break;case 14:this.setupPuzzle(),this.generateWalls(),this.board.grid[19][19]=new w,this.codeMirror.doc.setBookmark({line:8,ch:0}),this.codeMirror.doc.setBookmark({line:9,ch:0}),this.board&&(this.gridCopy=this.copyGrid(this.board.grid)),this.board.htmlGrid[19][19].style.backgroundColor="red"}}},{key:"generateWalls",value:function(){for(var t=19;t>=17;t--)this.board.grid[t][17]=new b([t,17]),this.board.htmlGrid[t][17].style.backgroundColor="white",this.board.grid[17][t]=new b([17,t]),this.board.htmlGrid[17][t].style.backgroundColor="white";for(var e=19;e>=15;e--)this.board.grid[e][15]=new b([e,15]),this.board.htmlGrid[e][15].style.backgroundColor="white",this.board.grid[15][e]=new b([15,e]),this.board.htmlGrid[15][e].style.backgroundColor="white";for(var n=19;n>=13;n--)this.board.grid[n][13]=new b([n,13]),this.board.htmlGrid[n][13].style.backgroundColor="white",this.board.grid[13][n]=new b([13,n]),this.board.htmlGrid[13][n].style.backgroundColor="white"}},{key:"copyGrid",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return t.forEach((function(t,n){e.push([]),t.forEach((function(t){t instanceof P?e[n].push(new P(t.position)):t instanceof b?e[n].push(new b(t.position)):t instanceof w&&e[n].push(new w(t.position))}))})),e}},{key:"setupPuzzle",value:function(){var t=this.gameState.puzzles[this.gameState.currentPuzzle];document.getElementById("next-btn").style.display="none",t.template=D(this.gameState),this.board&&(this.gridCopy=this.copyGrid(this.board.grid)),this.codeMirror.setValue(t.template),document.getElementById("function-header").innerHTML=t.header;var e=document.getElementById("reset-code");e.innerHTML="Reset",e.addEventListener("click",this.resetCode),document.getElementById("get-answer").innerHTML="Answer";var n=document.getElementById("submit-code");n.innerHTML="Submit",n.addEventListener("click",this.submitCode)}},{key:"resetCode",value:function(){var t=D(this.gameState);switch(this.board&&(this.board.grid=this.copyGrid(this.gridCopy)),this.codeMirror.setValue(t),this.gameState.currentPage){case 1:case 3:this.codeMirror.doc.setBookmark({line:1,ch:0}),this.codeMirror.doc.setBookmark({line:2,ch:0});break;case 6:this.codeMirror.doc.setBookmark({line:6,ch:0}),this.codeMirror.doc.setBookmark({line:7,ch:0});break;case 7:this.codeMirror.doc.setBookmark({line:13,ch:0}),this.codeMirror.doc.setBookmark({line:14,ch:0});break;case 9:this.codeMirror.doc.setBookmark({line:18,ch:0}),this.codeMirror.doc.setBookmark({line:22,ch:0});break;case 11:this.codeMirror.doc.setBookmark({line:21,ch:0}),this.codeMirror.doc.setBookmark({line:23,ch:0});break;case 12:this.codeMirror.doc.setBookmark({line:8,ch:0}),this.codeMirror.doc.setBookmark({line:9,ch:0});break;case 14:this.codeMirror.doc.setBookmark({line:8,ch:0}),this.codeMirror.doc.setBookmark({line:9,ch:0})}}},{key:"cleanupPuzzle",value:function(){document.getElementById("hint").classList.remove("active"),document.getElementById("text-body").classList.remove("error"),document.getElementById("reset-code").innerHTML="",document.getElementById("submit-code").removeEventListener("click",this.submitCode),document.getElementById("get-answer").innerHTML="",this.gameState.currentPuzzle++,document.getElementById("function-header").innerHTML="",this.codeMirror.setValue(""),document.getElementById("submit-code").innerHTML="",this.nextPage()}},{key:"submitCode",value:function(){var t=this.codeMirror.doc.getAllMarks(),e=this.codeMirror.doc.getRange(t[0].find(),t[1].find()).trim(),n=this.handleArguments(),l=window.currentFunction(e,n),r=L[this.gameState.currentPuzzle](l,this);if(r)document.getElementById("text-body").classList.add("error"),this.generateText(15,!0,r);else{switch(this.gameState.puzzles[this.gameState.currentPuzzle].userSolution=e,this.gameState.currentPuzzle){case 5:this.board=new O(20),document.querySelector("#game > canvas").remove(),document.querySelector("#board").classList.add("active"),this.board.htmlGrid[this.light.position[0]][this.light.position[1]].style.backgroundColor="white",this.board.htmlGrid[5][5].style.backgroundColor="#d32f2f",this.light.board=this.board}this.cleanupPuzzle()}}},{key:"showAnswer",value:function(){var t=document.getElementById("hint");t.classList.add("active"),t.innerHTML=this.gameState.puzzles[this.gameState.currentPuzzle].answer}},{key:"showHint",value:function(){var t=document.getElementById("hint");t.classList.toggle("active"),t.innerHTML=this.gameState.puzzles[this.gameState.currentPuzzle].hint}},{key:"moveLight",value:function(t){var e=N(t,2),n=e[0],l=e[1];this.board.htmlGrid[n][l].style.backgroundColor="inherit";var r=N(this.light.position,2),i=r[0],o=r[1];this.board.htmlGrid[i][o].style.backgroundColor="white",this.board.htmlGrid[i][o].style.borderColor="white"}},{key:"handleArguments",value:function(){switch(this.gameState.currentPuzzle){case 0:return"two";case 4:return"direction";case 5:return"position";case 6:return"baby";case 7:return["grid","light"];default:return}}},{key:"play",value:function(){this.generateText(2,!1),document.getElementById("next-btn").innerHTML="Next",document.getElementById("next-btn").addEventListener("click",this.nextPage),document.getElementById("play").removeEventListener("click",this.play)}},{key:"nextPage",value:function(){if(16===this.gameState.currentPage)return document.querySelector("#board").remove(),document.getElementById("end-message").style.display="block",document.getElementById("next-btn").innerHTML="",document.getElementById("text-sender").innerHTML="",void(document.getElementById("text-body").innerHTML="");this.gameState.currentPage++,this.generateText(2)}}])&&F(e.prototype,n),t}();function H(t,e,n){return(H=j()?Reflect.construct:function(t,e,n){var l=[null];l.push.apply(l,e);var r=new(Function.bind.apply(t,l));return n&&U(r,n.prototype),r}).apply(null,arguments)}function j(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function U(t,e){return(U=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}window.currentFunction=function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),l=1;l<e;l++)n[l-1]=arguments[l];return H(Function,n.concat([t]))},document.addEventListener("DOMContentLoaded",(function(){var e;CodeMirror.fromTextArea(document.getElementById("code-block"),(t(e={lineNumbers:!0,mode:"javascript",styleActiveLine:!0},"lineNumbers",!0),t(e,"matchBrackets",!0),t(e,"lineWrapping",!0),t(e,"tabSize",2),e)).setOption("theme","material-darker"),(new s).setup(),document.getElementById("play").addEventListener("click",(function(){var t=new z;t.play(),window.game=t,document.getElementById("play").style.display="none",document.getElementById("info").addEventListener("click",t.showHint),document.getElementById("get-answer").addEventListener("click",t.showAnswer)}))}))}()}();
//# sourceMappingURL=main.js.map